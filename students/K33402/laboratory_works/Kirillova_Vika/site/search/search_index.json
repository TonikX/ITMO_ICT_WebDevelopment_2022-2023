{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022","text":""},{"location":"#web-","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"#k33402","title":"\u041a\u0438\u0440\u0438\u043b\u043b\u043e\u0432\u0430 \u0412\u0438\u043a\u0442\u043e\u0440\u0438\u044f K33402","text":""},{"location":"lr_1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161","text":""},{"location":"lr_1/#no1_1","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161","text":"<ul> <li><code>server.py</code></li> </ul> <pre><code>import socket\n\nconn = socket.socket()\nconn.bind ((\"127.0.0.1\", 3300))\nconn.listen(1)\n\nclientsocket, address = conn.accept()\ndata = clientsocket.recv(1024)\nprint(data.decode(\"utf-8\"))\n\nclientsocket.send(\"Hello, client\".encode(\"utf-8\"))\n\nclientsocket.close()\n</code></pre> <ul> <li><code>client.py</code></li> </ul> <pre><code>import socket\n\nclient = socket.socket()\nclient.connect ((\"127.0.0.1\", 3300))\n\nclient.send(\"Hello, server\".encode(\"utf-8\"))\n\ndata = client.recv(1024)\nprint(data.decode(\"utf-8\"))\n</code></pre>"},{"location":"lr_1/#no2","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162","text":"<ul> <li><code>server.py</code></li> </ul> <pre><code>import socket\nimport math\nimport pickle\n\nconn = socket.socket()\nconn.bind ((\"127.0.0.1\", 3300))\nconn.listen(1)\n\nwhile True:\n    try: \n        clientsocket, address = conn.accept()\n        datz = clientsocket.recv(1024)\n        numb = pickle.loads(datz)\n        a = int(numb.get('a'))\n        b = int(numb.get('b'))\n        c = int(numb.get('c'))\n        discr = b ** 2 - 4 * a * c\n        if discr &gt; 0: \n            x1 = (- b + math.sqrt(discr)) / (2 * a)\n            x2 = (- b - math.sqrt(discr)) / (2 * a)\n            clientsocket.send(b\"x1 = \" + (str(x1).encode(\"utf-8\")) + b\" x2 = \" + (str(x2).encode(\"utf-8\")))\n        elif discr == 0:\n            x = - b / (2 * a)\n            clientsocket.send(b\"x = \" + (str(x).encode(\"utf-8\")))\n        else:\n            clientsocket.send(\"\u041a\u043e\u0440\u043d\u0435\u0439 \u043d\u0435\u0442\".encode(\"utf-8\"))\n    except KeyboardInterrupt:\n        conn.close()\n        break\n\n conn.close()\n</code></pre> <ul> <li><code>client.py</code></li> </ul> <pre><code>import socket\nimport pickle\n\nclient = socket.socket()\nclient.connect((\"127.0.0.1\", 3300)) \n\nnumb = {\n    \"a\": input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0430: \"),\n    \"b\": input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 b: \"),\n    \"c\": input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 c: \")\n}\nnumb=pickle.dumps(numb)\nclient.send(numb) \n\ndata = client.recv(1024)\nprint(data.decode(\"utf-8\"))\n\nclient.close()\n</code></pre>"},{"location":"lr_1/#no3","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163","text":"<ul> <li><code>server.py</code></li> </ul> <pre><code>import socket\n\nconn = socket.socket()\nconn.bind((\"127.0.0.1\", 3300))\nconn.listen(1)\n\nwhile True:\n    try:\n        clientsocket, address = server.accept()\n        html_page = open('index.html')\n        html_content = html_page.read()\n        html_page.close()\n\n        html_resp = 'HTTP/1.0 200 OK\\n' + html_content \n\n        clientsocket.send(html_resp.encode('utf-8'))\n        clientsocket.close()\n\n    except KeyboardInterrupt: \n        conn.close() \n        break\n</code></pre> <ul> <li><code>client.py</code></li> </ul> <pre><code>from http import client\nimport socket \n\nclient = socket.socket()\nclient.connect((\"127.0.0.1\", 3300))\n\ndata = client.recv(1024)\nprint(data.decode('utf-8'))\n\nclient.close()\n</code></pre> <ul> <li><code>index.html</code></li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Home page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p&gt;\n        \"Hello!\"\n    &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lr_1/#no4","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164","text":"<ul> <li><code>server.py</code></li> </ul> <pre><code>import socket\nimport threading\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nserver.bind(('127.0.0.1', 3300))\nserver.listen(100)\n\nclients = list()\nend = list()\n\ndef accept():\n\n    while True:\n        client, addr = server.accept()\n        clients.append(client)\n        print (f'\u0422\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: {client}')\n\n\ndef recv_data(client):\n    while True:\n        try:\n            indata = client.recv(1024)\n        except Exception as e:\n            clients.remove(client)\n            end.remove(client)\n            break\n        print(indata.decode('utf-8'))\n        for clien in clients:\n            if clien != client:\n                clien.send(indata)\n\n\ndef outdatas():\n    while True:\n        print('')\n        outdata = input('')\n        print()\n        if outdata=='enter':\n            break\n        for client in clients:\n            client.send (f\"\u0421\u0435\u0440\u0432\u0435\u0440: {outdata}\". encode ('utf-8)'))\n\n\ndef indatas():\n    while True:\n            for clien in clients:\n                if clien in end:\n                    continue\n                index = threading.Thread(target = recv_data,args = (clien,))\n                index.start()\n                end.append(clien)\n\n\nt1 = threading.Thread(target = indatas,name = 'input')\nt1.start()\n\nt2 = threading.Thread(target = outdatas, name= 'out')\nt2.start()\n\nt3 = threading.Thread(target = accept(),name = 'accept')\nt3.start()\n\nt2.join()\n\nfor client in clients:\n    client.close()\n</code></pre> <ul> <li><code>client.py</code></li> </ul> <pre><code>import socket\nimport threading\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nwhile True:\n    name = input(\"\u041a\u0430\u043a \u0432\u0430\u0441 \u0437\u043e\u0432\u0443\u0442?\")\n    if 1&lt;len(name)&lt;10:\n        break\n\nclient.connect(('127.0.0.1', 3300))\n\n\ndef outdatas():\n    while True:\n        outdata = input('')\n        if outdata=='enter':\n            break\n        client.send(f'{name}:{outdata}'.encode('utf-8'))\n        print('%s:%s'% (name, outdata))\n\n\ndef indatas():\n    while True:\n        indata = client.recv(1024)\n        print(indata.decode('utf-8'))\n\nt1 = threading.Thread(target=indatas, name='input')\n\nt2 = threading.Thread(target=outdatas, name='out')\n\nt1.start()\nt2.start()\n\nt2.join()\n\nclient.close()\n</code></pre>"},{"location":"lr_1/#no5","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21165","text":"<ul> <li><code>server.py</code></li> </ul> <pre><code>import socket\n\ngrades = {}\n\n\nclass MyHTTPServer:\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n\n    def serve_forever(self):\n        serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n        try:\n            serv_sock.bind((self.host, self.port))\n            serv_sock.listen()\n\n            while True:\n                conn, _ = serv_sock.accept()\n                try:\n                    self.serve_client(conn)\n                except Exception as e:\n                    print('Fail', e)\n        finally:\n            serv_sock.close()\n\n    def serve_client(self, client):\n        try:\n            req = self.parse_request(client)\n            resp = self.handle_request(req)\n            self.send_response(client, resp)\n        except ConnectionResetError:\n            client = None\n\n        if client:\n            client.close()\n\n    def parse_request_line(self, rfile):\n        line = rfile.readline()\n        line = line.decode('utf-8')\n        return line.split()\n\n    def parse_request(self, conn):\n        rfile = conn.makefile('rb')\n        method, target, ver = self.parse_request_line(rfile)\n\n        request = {'data': {}, 'method': method}\n        if '?' in target:\n            request['method'] = 'POST'\n            values = target.split('?')[1].split('&amp;')\n            for value in values:\n                a, b = value.split('=')\n                request['data'][a] = b\n\n        return request\n\n    def handle_request(self, req):\n        if req['method'] == 'POST':\n            return self.handle_post(req)\n        else:\n            return self.handle_get()\n\n    def handle_get(self):\n        content_type = 'text/html; charset=utf-8'\n        body = '&lt;html&gt;&lt;head&gt;&lt;style&gt;body {background-color:pink}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;'\n        body += '&lt;form&gt;\u041f\u0440\u0435\u0434\u043c\u0435\u0442&lt;br&gt;&lt;input name=\"discipline\" /&gt;&lt;br&gt;&lt;br&gt;\u041e\u0446\u0435\u043d\u043a\u0438&lt;br&gt;&lt;input name=\"grade\"/&gt;&lt;br&gt;&lt;br&gt;&lt;input type=\"submit\"&gt;&lt;/form&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430&lt;/th&gt; &lt;th&gt;\u041e\u0446\u0435\u043d\u043a\u0438&lt;/th&gt; &lt;/tr&gt; '\n\n        for subject in grades:\n            body += f'&lt;tr&gt; &lt;th&gt;{subject}&lt;/th&gt; &lt;th&gt; {grades[subject]}&lt;/th&gt; &lt;/tr&gt;'\n        body += '&lt;/body&gt;&lt;/html&gt;'\n        body = body.encode('utf-8')\n        headers = [('Content-Type', content_type),\n                   ('Content-Length', len(body))]\n        return Response(200, 'OK', headers, body)\n\n    def handle_post(self, request):\n        discipline = request['data']['discipline']\n        grade = request['data']['grade']\n\n        if discipline not in grades:\n            grades[discipline] = []\n\n        grades[discipline].append(grade)\n\n        return self.handle_get()\n\n    def send_response(self, conn, resp):\n        rfile = conn.makefile('wb')\n        status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n'\n        rfile.write(status_line.encode('utf-8'))\n\n        if resp.headers:\n            for (key, value) in resp.headers:\n                header_line = f'{key}: {value}\\r\\n'\n                rfile.write(header_line.encode('utf-8'))\n\n        rfile.write(b'\\r\\n')\n\n        if resp.body:\n            rfile.write(resp.body)\n\n        rfile.flush()\n        rfile.close()\n\n\nclass Response:\n    def __init__(self, status, reason, headers=None, body=None):\n        self.status = status\n        self.reason = reason\n        self.headers = headers\n        self.body = body\n\n\nif __name__ == '__main__':\n    serv = MyHTTPServer('127.0.0.1', 1025)\n    serv.serve_forever()\n</code></pre>"},{"location":"lr_2/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django","text":""},{"location":"lr_2/#_1","title":"\u0426\u0435\u043b\u044c","text":"<ul> <li>\u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django.</li> </ul>"},{"location":"lr_2/#_2","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0435 \u041f\u041e","text":"<ul> <li>Python 3.10, Django 3.</li> </ul>"},{"location":"lr_2/#_3","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:","text":""},{"location":"lr_2/#_4","title":"\u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439","text":"<p>\u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. </p>"},{"location":"lr_2/#_5","title":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:","text":"<ul> <li>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. </li> <li>\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f).</li> <li>\u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. </li> <li>\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin.</li> <li>\u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430.</li> </ul>"},{"location":"lr_2/#_6","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438","text":"<ul> <li><code>models.py</code></li> </ul> <pre><code>from django.db import models\nfrom django.contrib.auth.models import User, AbstractUser\nfrom django.dispatch import receiver\n\n\nclass Homework(models.Model):\n    homework_id = models.IntegerField(blank=False, primary_key=True)\n    name = models.CharField(max_length=100, blank=False)\n    subject = models.CharField(max_length=30, blank=False)\n    teacher = models.CharField(max_length=30, blank=False)\n    begin_date = models.DateField(blank=False)\n    deadline = models.DateField(blank=False)\n    task = models.CharField(max_length=1000)\n    penalty = models.CharField(max_length=100)\n    students = models.ManyToManyField('Student', through='Assignment')\n\n    def __str__(self):\n        return self.name\n\n\nclass Assignment(models.Model):\n    assignment_id = models.IntegerField(blank=False, primary_key=True)\n    student = models.ForeignKey('Student', on_delete=models.CASCADE)\n    homework = models.ForeignKey('Homework', on_delete=models.CASCADE)\n    grade = models.CharField(default='-', max_length=5, blank=True)\n    submission = models.CharField(max_length=1000, blank=True)\n\n    def __str__(self):\n        return f'{self.student.first_name} {self.student.last_name}:\\\n        {self.homework.name}\\\n        | {\"graded\" if self.grade != \"-\" else \"submitted\" if len(self.submission) else \"in process\"}'\n\n\nclass Student(AbstractUser):\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n    REQUIRED_FIELDS = ['first_name', 'last_name']\n\n    def __str__(self):\n        return f'{self.first_name} {self.last_name}'\n\n\n@receiver(models.signals.post_save, sender=Homework)\ndef execute_after_save(sender, instance, created, *args, **kwargs):\n    if created:\n        students = Student.objects.exclude(username=\"teacher\").all()\n        for student in students:\n            duplicates = Assignment.objects.filter(student=student, homework=instance).all()\n            if not len(duplicates):\n                assignment = Assignment(student=student, homework=instance)\n                assignment.save()\n\n</code></pre> <ul> <li><code>forms.py</code></li> </ul> <pre><code>from django import forms\nfrom main.models import Assignment\n\n\nclass AssignmentForm(forms.ModelForm):\n    submission = forms.CharField(widget=forms.Textarea)\n\n    class Meta:\n        model = Assignment\n        fields = ['submission']\n\n</code></pre> <ul> <li><code>views.py</code></li> </ul> <pre><code>from django.shortcuts import render, redirect\nfrom django.urls import reverse\nfrom django.db import IntegrityError\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.views.generic import ListView, DetailView\nfrom django.contrib.auth.decorators import login_required\nfrom main.models import Student, Homework, Assignment\nfrom main.forms import AssignmentForm\n\n\ndef register(request):\n    if request.method == \"POST\":\n        username = request.POST[\"username\"]\n        password = request.POST[\"password\"]\n        email = request.POST[\"email\"]\n        first_name = request.POST.get(\"first_name\", 'NaN')\n        last_name = request.POST.get(\"last_name\", 'NaN')\n\n        confirmation = request.POST[\"confirmation\"]\n        if password != confirmation:\n            return render(request, \"register.html\", {\n                \"message\": \"passwords do not match\"\n            })\n\n        try:\n            student = Student.objects.create_user(username, email, password)\n            student.first_name = first_name\n            student.last_name = last_name\n            student.save()\n            homeworks = Homework.objects.all()\n            for homework in homeworks:\n                assignment = Assignment(student=student, homework=homework)\n                assignment.save()\n        except IntegrityError:\n            return render(request, \"register.html\", {\n                \"message\": \"username already taken\"\n            })\n        login(request, student)\n        return redirect(reverse(\"homework_list\"))\n    else:\n        return render(request, \"register.html\")\n\n\ndef log_in(request):\n    if request.method == \"POST\":\n        username = request.POST['username']\n        password = request.POST['password']\n\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect(reverse('homework_list'))\n        else:\n            error_text = 'invalid credentials'\n\n    return render(request, 'login.html', locals())\n\n\n@login_required\ndef log_out(request):\n    logout(request)\n    return redirect(reverse('login'))\n\n\n@login_required\ndef class_grades_list(request):\n    context = {}\n    students = Student.objects.exclude(username=\"teacher\").all()\n    context[\"students\"] = students\n    context[\"homeworks\"] = Homework.objects.all()\n    context[\"grades\"] = {}\n    assignments = Assignment.objects.all()\n    for homework in context[\"homeworks\"]:\n        for assignment in assignments:\n            if assignment.homework == homework and assignment.student.pk != 3:\n                if not assignment.student.pk in context[\"grades\"]:\n                    context[\"grades\"][assignment.student.pk] = []\n                context[\"grades\"][assignment.student.pk].append(\n                    assignment.grade)\n\n    return render(request, 'class_grades.html', context)\n\n\nclass HomeworkList(ListView):\n    model = Homework\n    template_name = 'homework_list.html'\n\n\nclass HomeworkDetail(DetailView):\n    model = Homework\n    template_name = 'homework_detail.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['form'] = AssignmentForm()\n        return context\n\n\n@login_required\ndef hand_in(request, pk):\n    homework = Homework.objects.get(pk=pk)\n    assignment = Assignment.objects.get(student=request.user,\n                                        homework=homework)\n    form = AssignmentForm(request.POST, instance=assignment)\n    if form.is_valid():\n        form.save()\n\n        return redirect(reverse('homework_list'))\n\n</code></pre>"},{"location":"lr_3/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043d\u0430 django rest","text":""},{"location":"lr_3/#_1","title":"\u0426\u0435\u043b\u044c","text":"<ul> <li>\u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 (backend) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST framework.</li> </ul>"},{"location":"lr_3/#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:","text":""},{"location":"lr_3/#_3","title":"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.  \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445.</p> <p>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438,  \u0430\u0432\u0442\u043e\u0440(\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435.</p> <p>\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430,  \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438.</p> <p>\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</p> <p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435.</p> <p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435.  \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438.</p>"},{"location":"lr_3/#_4","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438","text":"<ul> <li><code>models.py</code> - \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445</li> </ul> <pre><code>from django.db import models\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db.models.deletion import CASCADE\n\n\nclass User(AbstractUser):\n    tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True)\n\n    REQUIRED_FIELDS = ['first_name', 'last_name', 'tel']\n\n    def __str__(self):\n        return self.username\n\n\nclass Instance(models.Model):\n    id_instance = models.AutoField(\"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\", primary_key=True)\n    section = models.CharField(max_length=20, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b')\n    code = models.CharField(max_length=20, verbose_name='\u0410\u0440\u0442\u0438\u043a\u0443\u043b')\n    year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f')\n    conditions = (\n        ('\u0445', '\u0445\u043e\u0440\u043e\u0448\u0435\u0435'),\n        ('\u0443', '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435'),\n        ('\u043f', '\u043f\u043b\u043e\u0445\u043e\u0435'),\n    )\n    condition = models.CharField(max_length=1, choices=conditions, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430')\n    book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE)\n\n    def __str__(self):\n        return self.code\n\n\nclass Book(models.Model):\n    id_book = models.AutoField(\"ID_\u043a\u043d\u0438\u0433\u0438\", primary_key=True)\n    name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435')\n    author = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\")\n    publisher = models.CharField(max_length=30, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e')\n\n    def __str__(self):\n        return self.name\n\n\nclass Reader(models.Model):\n    ticket = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430')\n    name = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e\")\n    passport = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430')\n    birth_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f')\n    address = models.CharField(max_length=100, verbose_name='\u0410\u0434\u0440\u0435\u0441')\n    phone_number = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430')\n    educations = (\n        ('\u043d', '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435'),\n        ('\u0441', '\u0441\u0440\u0435\u0434\u043d\u0435\u0435'),\n        ('\u0432', '\u0432\u044b\u0441\u0448\u0435\u0435'),\n    )\n    education = models.CharField(max_length=1, choices=educations, verbose_name='\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435')\n    degree = models.BooleanField(default=False, verbose_name='\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438')\n    registration_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438')\n    instances = models.ManyToManyField('Instance', verbose_name='\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438', through='ReaderBook',\n                                       related_name='reader_book')\n    room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE, null=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass ReaderRoom(models.Model):\n    reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE)\n    room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE)\n    date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430', null=True)\n\n\nclass BookInst(models.Model):\n    inst = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE)\n    book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE)\n\n\nclass ReaderBook(models.Model):\n    reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE)\n    book = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE)\n    date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438', null=True)\n\n\nclass BookRoom(models.Model):\n    book = models.ForeignKey('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE)\n    room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE)\n\n\nclass Room(models.Model):\n    name = models.CharField(max_length=20, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435')\n    capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c')\n    books = models.ManyToManyField('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0438', through='BookRoom', related_name='book_room')\n\n    def __str__(self):\n        return self.name\n</code></pre> <ul> <li><code>views.py</code></li> </ul> <pre><code>from django.db.models.query import QuerySet\nfrom django.shortcuts import render\nfrom django.utils import timezone\nfrom .models import *\nfrom .serializers import *\nfrom datetime import datetime, timedelta\nfrom rest_framework.generics import CreateAPIView, ListAPIView, RetrieveUpdateDestroyAPIView, RetrieveAPIView\nfrom rest_framework import generics\nfrom rest_framework.views import APIView, Response\nfrom datetime import date\n\n\nclass ReaderListAPIView(ListAPIView):\n    serializer_class = ReaderSerializer\n    queryset = Reader.objects.all()\n\n\nclass CreateReader(CreateAPIView):\n    serializer_class = ReaderSerializer\n    queryset = Reader.objects.all()\n\n\nclass BookListAPIView(ListAPIView):\n    serializer_class = BookSerializer\n    queryset = Book.objects.all()\n\n\nclass CreateBook(CreateAPIView):\n    serializer_class = BookSerializer\n    queryset = Book.objects.all()\n\n\nclass InstanceListAPIView(ListAPIView):\n    serializer_class = InstanceSerializer\n    queryset = Instance.objects.all()\n\n\nclass CreateInstance(CreateAPIView):\n    serializer_class = InstanceSerializer\n    queryset = Instance.objects.all()\n\n\nclass OneBook(RetrieveUpdateDestroyAPIView):\n    serializer_class = BookSerializer\n    queryset = Book.objects.all()\n\n\nclass OneInstance(RetrieveUpdateDestroyAPIView):\n    serializer_class = InstanceSerializer\n    queryset = Instance.objects.all()\n\n\nclass OneReader(RetrieveUpdateDestroyAPIView):\n    serializer_class = ReaderSerializer\n    queryset = Instance.objects.all()\n\n\nclass BookReaders(CreateAPIView):\n    serializer_class = ReaderBookSerializer\n    queryset = ReaderBook.objects.all()\n\n\nclass RoomListAPIView(ListAPIView):\n    serializer_class = RoomSerializer\n    queryset = Room.objects.all()\n\n\nclass RoomCreateAPIView(CreateAPIView):\n    serializer_class = RoomSerializer\n    queryset = Room.objects.all()\n\n\nclass OneRoom(RetrieveUpdateDestroyAPIView):\n    serializer_class = RoomSerializer\n    queryset = Room.objects.all()\n\n\nclass RoomBook(CreateAPIView):\n    serializer_class = BookRoomSerializer\n    queryset = BookRoom.objects.all()\n\n\n\nclass RoomReader(CreateAPIView):\n    serializer_class = ReaderRoomSerializer\n    queryset = ReaderRoom.objects.all()\n\n\nclass BookInst(CreateAPIView):\n    serializer_class = BookInstSerializer\n    queryset = BookInst.objects.all()\n\n\nclass ReadersInst(generics.RetrieveAPIView):\n    serializer_class = ReaderInstsSerializer\n    queryset = Reader.objects.all()\n\nclass RecentlyBookDate(ListAPIView):\n    # serializer_class = RecentlyBookDateSerializer\n    # queryset = ReaderBook.objects.all()\n\n\n    def get(self, request):\n        today = date.today()\n        reader = ReaderBook.objects.filter(date__lte=today)\n        content = {\"reader\": reader}\n        return Response(content)\n\n\n</code></pre> <ul> <li><code>serializers.py</code></li> </ul> <pre><code> from django.utils import timezone\nfrom rest_framework import serializers\nfrom .models import *\n\n\nclass ReaderSerializer(serializers.ModelSerializer):\n    books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='books')\n\n    class Meta:\n        model = Reader\n        fields = \"__all__\"\n\n\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = \"__all__\"\n\n\nclass InstanceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Instance\n        fields = \"__all__\"\n\n\nclass ReaderBookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ReaderBook\n        fields = \"__all__\"\n\n\nclass RoomSerializer(serializers.ModelSerializer):\n    books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='name')\n\n    class Meta:\n        model = Room\n        fields = \"__all__\"\n\n\nclass BookRoomSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = BookRoom\n        fields = \"__all__\"\n\n\nclass ReaderRoomSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ReaderRoom\n        fields = \"__all__\"\n\n\nclass BookInstSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = BookInst\n        fields = \"__all__\"\n\n\nclass ReaderInstsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Reader\n        fields = [\"instances\"]\n\n\nclass RecentlyBookDateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ReaderBook\n        fields = [\"reader\"]\n\n</code></pre>"}]}