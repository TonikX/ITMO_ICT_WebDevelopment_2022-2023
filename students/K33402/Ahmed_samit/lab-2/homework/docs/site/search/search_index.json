{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 \u21162 \u041e\u041f\u0418\u0421\u0410\u041d\u0418\u0415 \u0417\u0410\u0414\u0410\u041d\u0418\u042f \u0412\u0410\u0420\u0418\u0410\u041d\u0422 2 \u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439. \u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c model.py from django.db import models from django.contrib.auth.models import User , AbstractUser from django.dispatch import receiver class Homework ( models . Model ): homework_id = models . IntegerField ( blank = False , primary_key = True ) name = models . CharField ( max_length = 100 , blank = False ) task = models . CharField ( max_length = 300 ) subject = models . CharField ( max_length = 30 , blank = False ) begin_date = models . DateField ( blank = False ) deadline = models . DateField ( blank = False ) penalty = models . CharField ( max_length = 100 ) teacher = models . ForeignKey ( 'Teacher' , on_delete = models . CASCADE ) students = models . ManyToManyField ( 'Student' , through = 'Assignment' ) def __str__ ( self ): return self . name class User ( AbstractUser ): is_student = models . BooleanField ( default = False ) is_teacher = models . BooleanField ( default = False ) first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) def __str__ ( self ): return f ' { self . first_name } { self . last_name } ' class Student ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE , primary_key = True ) #REQUIRED_FIELDS = ['self.user.first_name', 'self.user.last_name'] def __str__ ( self ): return f \" { self . user . first_name } { self . user . last_name } \" class Teacher ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE , primary_key = True ) def __str__ ( self ): return f \" { self . user . first_name } { self . user . last_name } \" class Assignment ( models . Model ): assignment_id = models . IntegerField ( blank = False , primary_key = True ) student = models . ForeignKey ( 'Student' , on_delete = models . CASCADE ) homework = models . ForeignKey ( 'Homework' , on_delete = models . CASCADE ) grade = models . CharField ( default = '-' , max_length = 5 , blank = True ) submission = models . CharField ( max_length = 300 , blank = True ) def __str__ ( self ): return f ' { self . student . user . first_name } { self . student . user . last_name } : \\ { self . homework . name } \\ | { \"graded\" if self . grade != \"-\" else \"submitted\" if len ( self . submission ) else \"in process\" } ' @receiver ( models . signals . post_save , sender = Homework ) def execute_after_save ( sender , instance , created , * args , ** kwargs ): if created : students = Student . objects . all () for student in students : duplicates = Assignment . objects . filter ( student = student , homework = instance ) . all () if not len ( duplicates ): assignment = Assignment ( student = student , homework = instance ) assignment . save () # Create your models here. views.py from django.shortcuts import render , redirect from django.urls import reverse from django.db import IntegrityError from django.contrib.auth import authenticate , login , logout from django.views.generic import CreateView , ListView , DetailView from django.contrib.auth.decorators import login_required from django.utils.decorators import method_decorator from homework_app.models import Student , Homework , Assignment , User , Teacher from homework_app.forms import AssignmentForm , StudentSignUpForm , TeacherSignUpForm , HomeworkForm from homework_app.decorators import student_required , teacher_required from django.http import HttpResponseRedirect class StudentSignUpView ( CreateView ): model = User form_class = StudentSignUpForm template_name = 'register.html' def get_context_data ( self , ** kwargs ): kwargs [ 'user_type' ] = 'student' return super () . get_context_data ( ** kwargs ) def form_valid ( self , form ): user = form . save () login ( self . request , user ) return redirect ( 'login' ) class TearchSignUpView ( CreateView ): model = User form_class = TeacherSignUpForm template_name = 'register.html' def get_context_data ( self , ** kwargs ): kwargs [ 'user_type' ] = 'teacher' return super () . get_context_data ( ** kwargs ) def form_valid ( self , form ): user = form . save () login ( self . request , user ) return redirect ( 'login' ) @method_decorator ( teacher_required , name = 'dispatch' ) class HomeworkCreate ( CreateView ): model = Homework form_class : HomeworkForm template_name = 'createhomework.html' fields = \"__all__\" def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ 'form' ] = HomeworkForm () return context def form_valid ( self , form ): form . save () return redirect ( 'homework_list' ) def log_in ( request ): # if request.user.is_authenticated: # return redirect('homework_list') if request . method == \"POST\" : username = request . POST [ 'username' ] password = request . POST [ 'password' ] user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( reverse ( 'homework_list' )) else : error_text = 'invalid credentials' return render ( request , 'login.html' , locals ()) @login_required def log_out ( request ): logout ( request ) return redirect ( reverse ( 'login' )) @login_required @teacher_required def class_grades_list ( request ): context = {} students = Student . objects . all () context [ \"students\" ] = students context [ \"homeworks\" ] = Homework . objects . all () context [ \"grades\" ] = {} assignments = Assignment . objects . all () for homework in context [ \"homeworks\" ]: for assignment in assignments : if assignment . homework == homework and assignment . student . pk != 3 : if not assignment . student . pk in context [ \"grades\" ]: context [ \"grades\" ][ assignment . student . pk ] = [] context [ \"grades\" ][ assignment . student . pk ] . append ( assignment . grade ) return render ( request , 'class_grades.html' , context ) @method_decorator ( login_required , name = 'dispatch' ) class HomeworkList ( ListView ): model = Homework template_name = 'homework_list.html' @method_decorator ( login_required , name = 'dispatch' ) class HomeworkDetail ( DetailView ): model = Homework template_name = 'homework_detail.html' def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ 'form' ] = AssignmentForm () return context @method_decorator ( student_required , name = 'dispatch' ) class AssignmentView ( ListView ): model = Assignment template_name = 'studentgrade.html' def get_queryset ( self ): studentt = Student . objects . get ( user = self . request . user ) return Assignment . objects . filter ( student = studentt ) @login_required def hand_in ( request , pk ): homework = Homework . objects . get ( pk = pk ) studentt = Student . objects . get ( user = request . user ) assignment = Assignment . objects . get ( student = studentt , homework = homework ) form = AssignmentForm ( request . POST , instance = assignment ) if form . is_valid (): form . save () return redirect ( reverse ( 'homework_list' )) formes.py from django import forms from django.contrib.auth.forms import UserCreationForm from django.db import transaction from django.forms.utils import ValidationError from homework_app.models import ( User , Student , Assignment , Teacher , Homework ) class AssignmentForm ( forms . ModelForm ): submission = forms . CharField ( widget = forms . Textarea ) class Meta : model = Assignment fields = [ 'submission' ] class HomeworkForm ( forms . ModelForm ): class Meta : model = Homework fields = [ 'homework_id' , 'name' , 'task' , 'subject' , 'begin_date' , 'deadline' , 'penalty' , 'teacher' , 'students' ] def save ( self ): homework = super () . save ( commit = False ) homework . save () return homework class StudentSignUpForm ( UserCreationForm ): first_name = forms . CharField ( max_length = 30 ) last_name = forms . CharField ( max_length = 30 ) class Meta ( UserCreationForm . Meta ): model = User fields = [ 'username' , 'email' , 'password1' , 'password2' , 'first_name' , 'last_name' ] @transaction . atomic def save ( self ): user = super () . save ( commit = False ) user . is_student = True user . save () student = Student . objects . create ( user = user ) return user class TeacherSignUpForm ( UserCreationForm ): first_name = forms . CharField ( max_length = 30 ) last_name = forms . CharField ( max_length = 30 ) class Meta ( UserCreationForm . Meta ): model = User fields = [ 'username' , 'email' , 'password1' , 'password2' , 'first_name' , 'last_name' ] @transaction . atomic def save ( self ): user = super () . save ( commit = False ) user . is_teacher = True user . save () tearch = Teacher . objects . create ( user = user ) return user urls.py from django.urls import path from homework_app import views urlpatterns = [ path ( 'student/register/' , views . StudentSignUpView . as_view (), name = 'register' ), path ( 'teacher/register/' , views . TearchSignUpView . as_view (), name = 'Tregister' ), path ( 'login/' , views . log_in , name = 'login' ), path ( 'logout/' , views . log_out , name = 'logout' ), path ( 'class_grades/' , views . class_grades_list , name = 'class_grades' ), path ( 'homework/create/' , views . HomeworkCreate . as_view (), name = 'homework_create' ), path ( 'homeworks/' , views . HomeworkList . as_view (), name = 'homework_list' ), path ( 'homework/<int:pk>' , views . HomeworkDetail . as_view (), name = 'homework_detail' ), path ( 'handin/<int:pk>' , views . hand_in , name = 'handin' ), path ( 'mygrade/' , views . AssignmentView . as_view (), name = 'mygrade' ), ] For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"#no2","text":"","title":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 \u21162"},{"location":"#_1","text":"","title":"\u041e\u041f\u0418\u0421\u0410\u041d\u0418\u0415 \u0417\u0410\u0414\u0410\u041d\u0418\u042f"},{"location":"#2","text":"\u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439. \u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430.","title":"\u0412\u0410\u0420\u0418\u0410\u041d\u0422 2"},{"location":"#_2","text":"model.py from django.db import models from django.contrib.auth.models import User , AbstractUser from django.dispatch import receiver class Homework ( models . Model ): homework_id = models . IntegerField ( blank = False , primary_key = True ) name = models . CharField ( max_length = 100 , blank = False ) task = models . CharField ( max_length = 300 ) subject = models . CharField ( max_length = 30 , blank = False ) begin_date = models . DateField ( blank = False ) deadline = models . DateField ( blank = False ) penalty = models . CharField ( max_length = 100 ) teacher = models . ForeignKey ( 'Teacher' , on_delete = models . CASCADE ) students = models . ManyToManyField ( 'Student' , through = 'Assignment' ) def __str__ ( self ): return self . name class User ( AbstractUser ): is_student = models . BooleanField ( default = False ) is_teacher = models . BooleanField ( default = False ) first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) def __str__ ( self ): return f ' { self . first_name } { self . last_name } ' class Student ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE , primary_key = True ) #REQUIRED_FIELDS = ['self.user.first_name', 'self.user.last_name'] def __str__ ( self ): return f \" { self . user . first_name } { self . user . last_name } \" class Teacher ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE , primary_key = True ) def __str__ ( self ): return f \" { self . user . first_name } { self . user . last_name } \" class Assignment ( models . Model ): assignment_id = models . IntegerField ( blank = False , primary_key = True ) student = models . ForeignKey ( 'Student' , on_delete = models . CASCADE ) homework = models . ForeignKey ( 'Homework' , on_delete = models . CASCADE ) grade = models . CharField ( default = '-' , max_length = 5 , blank = True ) submission = models . CharField ( max_length = 300 , blank = True ) def __str__ ( self ): return f ' { self . student . user . first_name } { self . student . user . last_name } : \\ { self . homework . name } \\ | { \"graded\" if self . grade != \"-\" else \"submitted\" if len ( self . submission ) else \"in process\" } ' @receiver ( models . signals . post_save , sender = Homework ) def execute_after_save ( sender , instance , created , * args , ** kwargs ): if created : students = Student . objects . all () for student in students : duplicates = Assignment . objects . filter ( student = student , homework = instance ) . all () if not len ( duplicates ): assignment = Assignment ( student = student , homework = instance ) assignment . save () # Create your models here. views.py from django.shortcuts import render , redirect from django.urls import reverse from django.db import IntegrityError from django.contrib.auth import authenticate , login , logout from django.views.generic import CreateView , ListView , DetailView from django.contrib.auth.decorators import login_required from django.utils.decorators import method_decorator from homework_app.models import Student , Homework , Assignment , User , Teacher from homework_app.forms import AssignmentForm , StudentSignUpForm , TeacherSignUpForm , HomeworkForm from homework_app.decorators import student_required , teacher_required from django.http import HttpResponseRedirect class StudentSignUpView ( CreateView ): model = User form_class = StudentSignUpForm template_name = 'register.html' def get_context_data ( self , ** kwargs ): kwargs [ 'user_type' ] = 'student' return super () . get_context_data ( ** kwargs ) def form_valid ( self , form ): user = form . save () login ( self . request , user ) return redirect ( 'login' ) class TearchSignUpView ( CreateView ): model = User form_class = TeacherSignUpForm template_name = 'register.html' def get_context_data ( self , ** kwargs ): kwargs [ 'user_type' ] = 'teacher' return super () . get_context_data ( ** kwargs ) def form_valid ( self , form ): user = form . save () login ( self . request , user ) return redirect ( 'login' ) @method_decorator ( teacher_required , name = 'dispatch' ) class HomeworkCreate ( CreateView ): model = Homework form_class : HomeworkForm template_name = 'createhomework.html' fields = \"__all__\" def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ 'form' ] = HomeworkForm () return context def form_valid ( self , form ): form . save () return redirect ( 'homework_list' ) def log_in ( request ): # if request.user.is_authenticated: # return redirect('homework_list') if request . method == \"POST\" : username = request . POST [ 'username' ] password = request . POST [ 'password' ] user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( reverse ( 'homework_list' )) else : error_text = 'invalid credentials' return render ( request , 'login.html' , locals ()) @login_required def log_out ( request ): logout ( request ) return redirect ( reverse ( 'login' )) @login_required @teacher_required def class_grades_list ( request ): context = {} students = Student . objects . all () context [ \"students\" ] = students context [ \"homeworks\" ] = Homework . objects . all () context [ \"grades\" ] = {} assignments = Assignment . objects . all () for homework in context [ \"homeworks\" ]: for assignment in assignments : if assignment . homework == homework and assignment . student . pk != 3 : if not assignment . student . pk in context [ \"grades\" ]: context [ \"grades\" ][ assignment . student . pk ] = [] context [ \"grades\" ][ assignment . student . pk ] . append ( assignment . grade ) return render ( request , 'class_grades.html' , context ) @method_decorator ( login_required , name = 'dispatch' ) class HomeworkList ( ListView ): model = Homework template_name = 'homework_list.html' @method_decorator ( login_required , name = 'dispatch' ) class HomeworkDetail ( DetailView ): model = Homework template_name = 'homework_detail.html' def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ 'form' ] = AssignmentForm () return context @method_decorator ( student_required , name = 'dispatch' ) class AssignmentView ( ListView ): model = Assignment template_name = 'studentgrade.html' def get_queryset ( self ): studentt = Student . objects . get ( user = self . request . user ) return Assignment . objects . filter ( student = studentt ) @login_required def hand_in ( request , pk ): homework = Homework . objects . get ( pk = pk ) studentt = Student . objects . get ( user = request . user ) assignment = Assignment . objects . get ( student = studentt , homework = homework ) form = AssignmentForm ( request . POST , instance = assignment ) if form . is_valid (): form . save () return redirect ( reverse ( 'homework_list' )) formes.py from django import forms from django.contrib.auth.forms import UserCreationForm from django.db import transaction from django.forms.utils import ValidationError from homework_app.models import ( User , Student , Assignment , Teacher , Homework ) class AssignmentForm ( forms . ModelForm ): submission = forms . CharField ( widget = forms . Textarea ) class Meta : model = Assignment fields = [ 'submission' ] class HomeworkForm ( forms . ModelForm ): class Meta : model = Homework fields = [ 'homework_id' , 'name' , 'task' , 'subject' , 'begin_date' , 'deadline' , 'penalty' , 'teacher' , 'students' ] def save ( self ): homework = super () . save ( commit = False ) homework . save () return homework class StudentSignUpForm ( UserCreationForm ): first_name = forms . CharField ( max_length = 30 ) last_name = forms . CharField ( max_length = 30 ) class Meta ( UserCreationForm . Meta ): model = User fields = [ 'username' , 'email' , 'password1' , 'password2' , 'first_name' , 'last_name' ] @transaction . atomic def save ( self ): user = super () . save ( commit = False ) user . is_student = True user . save () student = Student . objects . create ( user = user ) return user class TeacherSignUpForm ( UserCreationForm ): first_name = forms . CharField ( max_length = 30 ) last_name = forms . CharField ( max_length = 30 ) class Meta ( UserCreationForm . Meta ): model = User fields = [ 'username' , 'email' , 'password1' , 'password2' , 'first_name' , 'last_name' ] @transaction . atomic def save ( self ): user = super () . save ( commit = False ) user . is_teacher = True user . save () tearch = Teacher . objects . create ( user = user ) return user urls.py from django.urls import path from homework_app import views urlpatterns = [ path ( 'student/register/' , views . StudentSignUpView . as_view (), name = 'register' ), path ( 'teacher/register/' , views . TearchSignUpView . as_view (), name = 'Tregister' ), path ( 'login/' , views . log_in , name = 'login' ), path ( 'logout/' , views . log_out , name = 'logout' ), path ( 'class_grades/' , views . class_grades_list , name = 'class_grades' ), path ( 'homework/create/' , views . HomeworkCreate . as_view (), name = 'homework_create' ), path ( 'homeworks/' , views . HomeworkList . as_view (), name = 'homework_list' ), path ( 'homework/<int:pk>' , views . HomeworkDetail . as_view (), name = 'homework_detail' ), path ( 'handin/<int:pk>' , views . hand_in , name = 'handin' ), path ( 'mygrade/' , views . AssignmentView . as_view (), name = 'mygrade' ), ] For full documentation visit mkdocs.org .","title":"\u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"lr1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 client.py import socket conn = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) conn . connect (( \"127.0.0.1\" , 1010 )) conn . send ( b \"Hello, server! \\n \" ) data = conn . recv ( 16384 ) . decode ( \"utf-8\" ) print ( \"data: \" , data ) conn . close () #server import socket conn = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) conn . bind (( \"127.0.0.1\" , 1010 )) conn . listen ( 10 ) while True : try : clientsocket , address = conn . accept () data = clientsocket . recv ( 16384 ) . decode ( \"utf-8\" ) print ( \"data: \" , data ) clientsocket . send ( b \"Hello, client! \\n \" ) except KeyboardInterrupt : conn . close () break \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 #client import socket conn = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) conn . connect (( \"127.0.0.1\" , 8000 )) data = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 a \u0438 b \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b: \" ) conn . send ( data . encode ( \"utf-8\" )) result = conn . recv ( 16384 ) . decode ( \"utf-8\" ) print ( \"c = \" , result ) conn . close () #server import socket from math import sqrt conn = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) conn . bind (( \"127.0.0.1\" , 8000 )) conn . listen ( 10 ) while True : try : clientsocket , address = conn . accept () data = clientsocket . recv ( 16384 ) . decode ( \"utf-8\" ) a , b = map ( lambda x : int ( x ), data . split ()) print ( \"a = \" , a , \", b = \" , b ) c = sqrt ( a ** 2 + b ** 2 ) c = str ( c ) . encode () clientsocket . send ( c ) except KeyboardInterrupt : conn . close () break \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 # client import socket port = 1025 host = socket . gethostbyname ( \"localhost\" ) mess = \"Hello, server\" message = bytes ( mess , 'utf-8' ) #host=\"127.0.0.1\" sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #_stream for tcp dgram udp sock . connect (( host , port )) sock . send ( message ) data = sock . recv ( 1024 ) print ( data . decode ()) #print (message) sock . close () #server import socket port = 1025 host = socket . gethostbyname ( \"localhost\" ) sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM , 0 ) sock . bind (( host , port )) sock . listen ( 10 ) sock , addr = sock . accept () sock . recv ( 16384 ) response_type = \"HTTP/1.0 200 OK \\n \" headers = \"Content-Type: text/html \\n\\n \" page = open ( 'index.html' , 'r' ) body = page . read () resp = response_type + headers + body sock . send ( resp . encode ( \"utf-8\" )) page . close () sock . close () #index.html < ! DOCTYPE html > < html lang = \"fr\" > < head > < meta charset = \"UTF-8\" > < meta http - equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > < h1 >< span style = \"color:rgb(255, 97, 163)\" >< b > ITMO_ICT_WebDevelopment_2022 - 2023 </ b ></ span ></ h1 > < p ></ p > < ul > < li >< a href = \"#inf\" > Infos </ a ></ li > < li >< a href = \"#Comp\u00e9tences\" > lab </ a ></ li > < li >< a href = \"#rapport\" ></ a ></ li > </ ul > < hr > < h2 >< a name = \"inf\" >< span style = \"color:#7B68EE\" >< b > Django </ b ></ span ></ a ></ h2 > < hr > < p > Salut ! < span style = \"color:#C71585\" > Django </ span > Je suis front - end developer </ p > < p > Je suis front - end developer < br ></ p > < hr > < h2 >< a name = \"Comp\u00e9tences\" >< span style = \"color:#7B68EE\" >< b > Vue . js </ b ></ span ></ a ></ h2 > < p >< hr > Tu peux aussi me connecter si tu as besoin de : < ul type = \"circle\" > < li > Django << span style = \"color:#C71585\" > Django </ span ></ li > < li > Django << span style = \"color:#C71585\" > Django </ span ></ spqn ></ li > < li > Django < < span style = \"color:#C71585\" > Django </ span ></ li > </ ul > < hr > </ p > < h2 >< a name = \"Centre d'inter\u00eats\" >< span style = \"color:#7B68EE\" >< b > Vue . js </ b ></ span ></ a ></ h2 > < hr > < ul type = \"circle\" > < li > python < span style = \"color:#C71585\" > Html </ span ></ li > < li > python < span style = \"color:#C71585\" > Css </ span ></ li > < li > python < span style = \"color:#c71515\" > Css </ span ></ li > </ ul > < hr > \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 #client import socket import threading username = input ( \"your username: \" ) client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( '127.0.0.1' , 5011 )) def receive (): while True : try : message = client . recv ( 4096 ) . decode ( 'utf-8' ) if message == 'NICKNAME' : client . send ( username . encode ( 'utf-8' )) elif username in message : print ( message . replace ( f \" { username } >\" , 'You >' , 1 )) else : print ( message ) except Exception as e : print ( e ) client . close () break def send (): while True : message = input ( '' ) client . send ( f ' { username } > { message } ' . encode ( 'utf-8' )) send_thread = threading . Thread ( target = send ) recv_thread = threading . Thread ( target = receive ) send_thread . start () recv_thread . start () #server import socket import threading server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( '127.0.0.1' , 5011 )) server . listen () clients = [] usernames = [] def broadcast ( message ): for client in clients : client . send ( message ) def handle ( client ): while True : try : message = client . recv ( 4096 ) if \"exit\" in message . decode ( 'utf-8' ): exitclient ( client ) break broadcast ( message ) except Exception as e : exitclient ( client ) break def exitclient ( client ): index = clients . index ( client ) clients . remove ( client ) client . close () username = usernames [ index ] broadcast ( f ' { username } left' . encode ( 'utf-8' )) usernames . remove ( username ) def receive (): while True : try : client , client_address = server . accept () print ( f 'Accepted connection from { client_address } ' ) client . send ( 'NICKNAME' . encode ( 'utf-8' )) username = client . recv ( 4096 ) . decode ( 'utf-8' ) clients . append ( client ) usernames . append ( username ) broadcast ( f ' { username } joined' . encode ( 'utf-8' )) handle_thread = threading . Thread ( target = handle , args = ( client ,)) handle_thread . start () except KeyboardInterrupt : print ( \"Closing server\" ) server . close () break except Exception as e : print ( 'Exception:' , e ) broadcast ( f '' ) receive () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 import socket class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port self . mark = [] def serve_forever ( self ): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( self . host , self . port )) sock . listen ( 8 ) print ( f \" \\n The server is running : http:// { host } : { port } \\n \" ) while True : client_socket , _ = sock . accept () self . serve_client ( client_socket ) def serve_client ( self , client_socket ): data = client_socket . recv ( 4096 ) . decode ( 'utf-8' ) request = self . parse_request ( data ) response = self . handle_request ( request ) if response : client_socket . send ( response . encode ( 'utf-8' )) client_socket . close () def parse_request ( self , data ): data_split = data . split ( ' \\r\\n ' ) print ( f \"data split : { data_split } \" ) headers = data_split [ 0 ] . split () print ( f \"Headers : { headers } \" ) body = data_split [ - 1 ] request = dict () if len ( headers ) == 3 : request . update ( { \"method\" : headers [ 0 ], \"url\" : headers [ 1 ], \"version\" : headers [ 2 ]}) if \"&\" in body : parametre = body . split ( \"&\" ) request . update ({ \"parametrs\" : parametre }) return request else : request . update ({ \"parametrs\" : {}}) return request else : raise Exception ( \"Malformed request line\" ) def handle_request ( self , request ): print ( request ) response = f \" { request [ 'version' ] } 200 OK \\n\\n \" if request [ \"url\" ] == \"/\" : if request [ \"method\" ] == \"POST\" : self . mark . extend ( request [ \"parametrs\" ]) if request [ \"method\" ] == \"GET\" or \"POST\" : with open ( 'index.html' ) as f : response += f . read () return response if request [ \"url\" ] == \"/list\" : response += \"<html><head><title>List grades</title></head><body>\" for s in self . mark : response += f \"<p> { s } </p>\" response += \"</body></html>\" return response if __name__ == \"__main__\" : host = 'localhost' port = 7890 myserver = MyHTTPServer ( host , port ) try : myserver . serve_forever () except KeyboardInterrupt : pass","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr3/","text":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 \u21163 \u041e\u041f\u0418\u0421\u0410\u041d\u0418\u0415 \u0417\u0410\u0414\u0410\u041d\u0418\u042f \u0412\u0410\u0420\u0418\u0410\u041d\u0422 2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c * models.py from django.db import models from django.contrib.auth.models import AbstractUser class Book ( models . Model ): title = models . CharField ( max_length = 800 , verbose_name = '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435' ) authors = models . CharField ( max_length = 5000 , verbose_name = '\u0410\u0432\u0442\u043e\u0440(\u044b)' ) publisher = models . CharField ( max_length = 79 , verbose_name = '\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e' ) publication_year = models . IntegerField ( verbose_name = '\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f' ) genre = models . CharField ( max_length = 100 , verbose_name = '\u0416\u0430\u043d\u0440' ) book_cypher = models . CharField ( max_length = 50 , verbose_name = '\u0428\u0438\u0444\u0440' ) book_hall = models . ManyToManyField ( 'Hall' , 'BokkCopy' , through = 'BookInHall' , verbose_name = '\u0417\u0430\u043b' ) book_reader = models . ManyToManyField ( 'Reader' , through = 'ReaderBook' , verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c' ) def __str__ ( self ): return self . title class Hall ( models . Model ): number = models . IntegerField ( verbose_name = '\u041d\u043e\u043c\u0435\u0440' ) title = models . CharField ( max_length = 500 , verbose_name = '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435' ) capacity = models . IntegerField ( verbose_name = '\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c' ) def __str__ ( self ): return str ( self . number ) + \" - \" + self . title class BookInHall ( models . Model ): book = models . ForeignKey ( 'Book' , on_delete = models . CASCADE , verbose_name = '\u041a\u043d\u0438\u0433\u0430' ) hall = models . ForeignKey ( 'Hall' , on_delete = models . CASCADE , verbose_name = '\u0417\u0430\u043b' ,) count = models . IntegerField ( verbose_name = '\u0427\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432' ) def __str__ ( self ): return str ( self . book ) + \" \u0432 \u0437\u0430\u043b\u0435 \" + str ( self . hall ) + \": \" + str ( self . count ) class Reader ( AbstractUser ): username = models . CharField ( max_length = 30 , unique = True ) password = models . CharField ( max_length = 200 ) REQUIRED_FIELDS = [ 'card_number' , 'first_name' , 'last_name' , 'passport' , 'date_of_birth' , 'address' , 'phone' , 'education' , 'degree' ] card_number = models . IntegerField ( verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0431\u0438\u043b\u0435\u0442' , blank = True , null = True ) first_name = models . CharField ( max_length = 25 , verbose_name = '\u0418\u043c\u044f' , blank = True , null = True ) last_name = models . CharField ( max_length = 30 , verbose_name = '\u0424\u0430\u043c\u0438\u043b\u0438\u044f' , blank = True , null = True ) passport = models . CharField ( max_length = 15 , verbose_name = '\u041f\u0430\u0441\u043f\u043e\u0440\u0442' , blank = True , null = True ) date_of_birth = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f' , blank = True , null = True ) address = models . CharField ( max_length = 300 , verbose_name = '\u0410\u0434\u0440\u0435\u0441' , blank = True , null = True ) phone = models . CharField ( max_length = 11 , verbose_name = '\u0422\u0435\u043b\u0435\u0444\u043e\u043d' , blank = True , null = True ) education_options = ( ( '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435' , '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435' ), ( '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435' , '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435' ), ( '\u0412\u044b\u0441\u0448\u0435\u0435' , '\u0412\u044b\u0441\u0448\u0435\u0435' ), ( '\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u0448\u0435\u0435' , '\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u0448\u0435\u0435' ), ( '\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435' , '\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435' ), ) education = models . CharField ( max_length = 4000 , choices = education_options , default = '-' , verbose_name = '\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435' , blank = True , null = True ) degree = models . BooleanField ( default = False , verbose_name = '\u0423\u0447\u0435\u043d\u0430\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u044c' , blank = True , null = True ) reader_hall = models . ForeignKey ( 'Hall' , on_delete = models . CASCADE , verbose_name = '\u0417\u0430\u043b' , blank = True , null = True ) reader_book = models . ManyToManyField ( 'Book' , through = 'ReaderBook' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' ) ''' def __str__(self): if self.is_superuser: return 'superuser' return self.last_name + ' ' + self.first_name''' class Copy ( models . Model ): id_copy = models . AutoField ( \"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\" , primary_key = True ) section = models . CharField ( max_length = 20 , verbose_name = '\u0420\u0430\u0437\u0434\u0435\u043b' ) code = models . CharField ( max_length = 20 , verbose_name = '\u0410\u0440\u0442\u0438\u043a\u0443\u043b' ) year = models . IntegerField ( verbose_name = '\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f' ) conditions = ( ( '\u0445' , '\u0445\u043e\u0440\u043e\u0448\u0435\u0435' ), ( '\u0443' , '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435' ), ( '\u0441' , '\u0441\u0442\u0430\u0440\u043e\u0435' ), ) condition = models . CharField ( max_length = 1 , choices = conditions , verbose_name = '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430' ) book = models . ForeignKey ( 'Book' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = models . CASCADE ) def __str__ ( self ): return self . code class ReaderBook ( models . Model ): #book = models.ForeignKey('Book', on_delete=models.CASCADE, verbose_name='\u041a\u043d\u0438\u0433\u0430') id_rb = models . IntegerField ( verbose_name = '\u043d\u043e\u043c\u0435\u0440 \u0432\u044b\u0434\u0430\u0447\u0438' , blank = True , null = False , primary_key = True ) id_copy = models . ForeignKey ( \"Copy\" , verbose_name = 'Id_ex' , on_delete = models . CASCADE ) #book = models.ForeignKey('Copy', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=models.CASCADE) book = models . ForeignKey ( 'Book' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = models . CASCADE ) reader = models . ForeignKey ( 'Reader' , on_delete = models . CASCADE , verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c' ) issue_date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438' , blank = True , null = True ) due_date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430' , blank = True , null = True ) serializers.py from rest_framework import serializers from .models import * class CopySerializer ( serializers . ModelSerializer ): class Meta : model = Copy fields = \"__all__\" class BookSerializer ( serializers . ModelSerializer ): class Meta : model = Book fields = \"__all__\" class BookInhallSerializer ( serializers . ModelSerializer ): class Meta : model = BookInHall fields = \"__all__\" class HallSerializer ( serializers . ModelSerializer ): class Meta : model = Hall fields = \"__all__\" class ReaderSerializer ( serializers . ModelSerializer ): class Meta : model = Reader fields = \"__all__\" #exclude=('password', ) def create ( self , validated_data ): user = Reader ( email = validated_data [ 'email' ], username = validated_data [ 'username' ] ) user . set_password ( validated_data [ 'password' ]) user . save () return user class BookRetrieveSerializer ( serializers . ModelSerializer ): book_hall = HallSerializer ( many = True ) book_reader = ReaderSerializer ( many = True ) class Meta : model = Book fields = \"__all__\" class ReaderRetrieveSerializer ( serializers . ModelSerializer ): reader_hall = HallSerializer () reader_book = BookSerializer ( many = True ) class Meta : model = Reader fields = \"__all__\" class ReaderBookSerializer ( serializers . ModelSerializer ): class Meta : model = ReaderBook fields = \"__all__\" '''def create(self, validated_data): user = ReaderBook( email=validated_data['email'], username=validated_data['username'] ) user.set_password(validated_data['password']) user.save() return user''' class ReaderBookRetrieveSerializer ( serializers . ModelSerializer ): reader_hall = HallSerializer () reader_book = BookSerializer ( many = True ) class Meta : model = ReaderBook fields = \"__all__\" views.py from django.db.models import Sum from .serializers import * from rest_framework.generics import * class CopyListAPIView ( ListAPIView ): serializer_class = CopySerializer queryset = Copy . objects . all () class CopyCreateAPIView ( CreateAPIView ): serializer_class = CopySerializer queryset = Copy . objects . all () class CopykRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = CopySerializer queryset = Copy . objects . all () class BookRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () #class CopyRetrieveAPIView(RetrieveAPIView): #serializer_class = CopyRetrieveSerializer #queryset = Copy.objects.all() class BookListAPIView ( ListAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class BookCreateAPIView ( CreateAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class BookRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class BookRetrieveAPIView ( RetrieveAPIView ): serializer_class = BookRetrieveSerializer queryset = Book . objects . all () class ReaderListAPIView ( ListAPIView ): serializer_class = ReaderSerializer queryset = Reader . objects . all () class ReaderCreateAPIView ( CreateAPIView ): serializer_class = ReaderSerializer queryset = Reader . objects . all () class ReaderRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = ReaderSerializer queryset = Reader . objects . all () class ReaderRetrieveAPIView ( RetrieveAPIView ): serializer_class = ReaderRetrieveSerializer queryset = Reader . objects . all () class BookInhallrListAPIView ( ListAPIView ): serializer_class = BookInhallSerializer queryset = BookInHall . objects . all () class BookInhallCreateAPIView ( CreateAPIView ): serializer_class = BookInhallSerializer queryset = BookInHall . objects . all () class BookInhallRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = BookInhallSerializer queryset = BookInHall . objects . all () class HallrListAPIView ( ListAPIView ): serializer_class = HallSerializer queryset = Hall . objects . all () class HallCreateAPIView ( CreateAPIView ): serializer_class = HallSerializer queryset = Hall . objects . all () class HallRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = HallSerializer queryset = Hall . objects . all () class ReaderBookListAPIView ( ListAPIView ): serializer_class = ReaderBookSerializer queryset = ReaderBook . objects . all () class ReaderBookCreateAPIView ( CreateAPIView ): serializer_class = ReaderBookSerializer queryset = ReaderBook . objects . all () class ReaderBookRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = ReaderBookSerializer queryset = ReaderBook . objects . all () class ReaderRetrieveAPIView ( RetrieveAPIView ): serializer_class = ReaderRetrieveSerializer queryset = Reader . objects . all () urls.py urlpatterns = [ path ( 'books/' , BookListAPIView . as_view ()), # list of books path ( 'books/create/' , BookCreateAPIView . as_view ()), # create book path ( 'books/<int:pk>/' , BookRetrieveAPIView . as_view ()), # book info by id path ( 'books/edit/<int:pk>/' , BookRetrieveUpdateDestroyAPIView . as_view ()), path ( 'readers/' , ReaderListAPIView . as_view ()), # list of readers path ( 'readers/create/' , ReaderCreateAPIView . as_view ()), # create reader path ( 'readers/<int:pk>/' , ReaderRetrieveAPIView . as_view ()), # reader info by id path ( 'readers/edit/<int:pk>/' , ReaderRetrieveUpdateDestroyAPIView . as_view ()), path ( 'copies/' , CopyListAPIView . as_view ()), path ( 'copies/create/' , CopyCreateAPIView . as_view ()), path ( 'bookinhall/create/' , BookInhallCreateAPIView . as_view ()), path ( 'readers-book/' , ReaderBookListAPIView . as_view ()), # list of readers-book path ( 'readers-book/create/' , ReaderBookCreateAPIView . as_view ()), # create readerbook path ( 'readers-book/edit/<int:pk>/' , ReaderBookRetrieveUpdateDestroyAPIView . as_view ()), ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lr3/#no3","text":"","title":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 \u21163"},{"location":"lr3/#_1","text":"","title":"\u041e\u041f\u0418\u0421\u0410\u041d\u0418\u0415 \u0417\u0410\u0414\u0410\u041d\u0418\u042f"},{"location":"lr3/#2","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c * models.py from django.db import models from django.contrib.auth.models import AbstractUser class Book ( models . Model ): title = models . CharField ( max_length = 800 , verbose_name = '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435' ) authors = models . CharField ( max_length = 5000 , verbose_name = '\u0410\u0432\u0442\u043e\u0440(\u044b)' ) publisher = models . CharField ( max_length = 79 , verbose_name = '\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e' ) publication_year = models . IntegerField ( verbose_name = '\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f' ) genre = models . CharField ( max_length = 100 , verbose_name = '\u0416\u0430\u043d\u0440' ) book_cypher = models . CharField ( max_length = 50 , verbose_name = '\u0428\u0438\u0444\u0440' ) book_hall = models . ManyToManyField ( 'Hall' , 'BokkCopy' , through = 'BookInHall' , verbose_name = '\u0417\u0430\u043b' ) book_reader = models . ManyToManyField ( 'Reader' , through = 'ReaderBook' , verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c' ) def __str__ ( self ): return self . title class Hall ( models . Model ): number = models . IntegerField ( verbose_name = '\u041d\u043e\u043c\u0435\u0440' ) title = models . CharField ( max_length = 500 , verbose_name = '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435' ) capacity = models . IntegerField ( verbose_name = '\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c' ) def __str__ ( self ): return str ( self . number ) + \" - \" + self . title class BookInHall ( models . Model ): book = models . ForeignKey ( 'Book' , on_delete = models . CASCADE , verbose_name = '\u041a\u043d\u0438\u0433\u0430' ) hall = models . ForeignKey ( 'Hall' , on_delete = models . CASCADE , verbose_name = '\u0417\u0430\u043b' ,) count = models . IntegerField ( verbose_name = '\u0427\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432' ) def __str__ ( self ): return str ( self . book ) + \" \u0432 \u0437\u0430\u043b\u0435 \" + str ( self . hall ) + \": \" + str ( self . count ) class Reader ( AbstractUser ): username = models . CharField ( max_length = 30 , unique = True ) password = models . CharField ( max_length = 200 ) REQUIRED_FIELDS = [ 'card_number' , 'first_name' , 'last_name' , 'passport' , 'date_of_birth' , 'address' , 'phone' , 'education' , 'degree' ] card_number = models . IntegerField ( verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0431\u0438\u043b\u0435\u0442' , blank = True , null = True ) first_name = models . CharField ( max_length = 25 , verbose_name = '\u0418\u043c\u044f' , blank = True , null = True ) last_name = models . CharField ( max_length = 30 , verbose_name = '\u0424\u0430\u043c\u0438\u043b\u0438\u044f' , blank = True , null = True ) passport = models . CharField ( max_length = 15 , verbose_name = '\u041f\u0430\u0441\u043f\u043e\u0440\u0442' , blank = True , null = True ) date_of_birth = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f' , blank = True , null = True ) address = models . CharField ( max_length = 300 , verbose_name = '\u0410\u0434\u0440\u0435\u0441' , blank = True , null = True ) phone = models . CharField ( max_length = 11 , verbose_name = '\u0422\u0435\u043b\u0435\u0444\u043e\u043d' , blank = True , null = True ) education_options = ( ( '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435' , '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435' ), ( '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435' , '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435' ), ( '\u0412\u044b\u0441\u0448\u0435\u0435' , '\u0412\u044b\u0441\u0448\u0435\u0435' ), ( '\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u0448\u0435\u0435' , '\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u0448\u0435\u0435' ), ( '\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435' , '\u041d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435' ), ) education = models . CharField ( max_length = 4000 , choices = education_options , default = '-' , verbose_name = '\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435' , blank = True , null = True ) degree = models . BooleanField ( default = False , verbose_name = '\u0423\u0447\u0435\u043d\u0430\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u044c' , blank = True , null = True ) reader_hall = models . ForeignKey ( 'Hall' , on_delete = models . CASCADE , verbose_name = '\u0417\u0430\u043b' , blank = True , null = True ) reader_book = models . ManyToManyField ( 'Book' , through = 'ReaderBook' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' ) ''' def __str__(self): if self.is_superuser: return 'superuser' return self.last_name + ' ' + self.first_name''' class Copy ( models . Model ): id_copy = models . AutoField ( \"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\" , primary_key = True ) section = models . CharField ( max_length = 20 , verbose_name = '\u0420\u0430\u0437\u0434\u0435\u043b' ) code = models . CharField ( max_length = 20 , verbose_name = '\u0410\u0440\u0442\u0438\u043a\u0443\u043b' ) year = models . IntegerField ( verbose_name = '\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f' ) conditions = ( ( '\u0445' , '\u0445\u043e\u0440\u043e\u0448\u0435\u0435' ), ( '\u0443' , '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435' ), ( '\u0441' , '\u0441\u0442\u0430\u0440\u043e\u0435' ), ) condition = models . CharField ( max_length = 1 , choices = conditions , verbose_name = '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430' ) book = models . ForeignKey ( 'Book' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = models . CASCADE ) def __str__ ( self ): return self . code class ReaderBook ( models . Model ): #book = models.ForeignKey('Book', on_delete=models.CASCADE, verbose_name='\u041a\u043d\u0438\u0433\u0430') id_rb = models . IntegerField ( verbose_name = '\u043d\u043e\u043c\u0435\u0440 \u0432\u044b\u0434\u0430\u0447\u0438' , blank = True , null = False , primary_key = True ) id_copy = models . ForeignKey ( \"Copy\" , verbose_name = 'Id_ex' , on_delete = models . CASCADE ) #book = models.ForeignKey('Copy', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=models.CASCADE) book = models . ForeignKey ( 'Book' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = models . CASCADE ) reader = models . ForeignKey ( 'Reader' , on_delete = models . CASCADE , verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c' ) issue_date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438' , blank = True , null = True ) due_date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430' , blank = True , null = True ) serializers.py from rest_framework import serializers from .models import * class CopySerializer ( serializers . ModelSerializer ): class Meta : model = Copy fields = \"__all__\" class BookSerializer ( serializers . ModelSerializer ): class Meta : model = Book fields = \"__all__\" class BookInhallSerializer ( serializers . ModelSerializer ): class Meta : model = BookInHall fields = \"__all__\" class HallSerializer ( serializers . ModelSerializer ): class Meta : model = Hall fields = \"__all__\" class ReaderSerializer ( serializers . ModelSerializer ): class Meta : model = Reader fields = \"__all__\" #exclude=('password', ) def create ( self , validated_data ): user = Reader ( email = validated_data [ 'email' ], username = validated_data [ 'username' ] ) user . set_password ( validated_data [ 'password' ]) user . save () return user class BookRetrieveSerializer ( serializers . ModelSerializer ): book_hall = HallSerializer ( many = True ) book_reader = ReaderSerializer ( many = True ) class Meta : model = Book fields = \"__all__\" class ReaderRetrieveSerializer ( serializers . ModelSerializer ): reader_hall = HallSerializer () reader_book = BookSerializer ( many = True ) class Meta : model = Reader fields = \"__all__\" class ReaderBookSerializer ( serializers . ModelSerializer ): class Meta : model = ReaderBook fields = \"__all__\" '''def create(self, validated_data): user = ReaderBook( email=validated_data['email'], username=validated_data['username'] ) user.set_password(validated_data['password']) user.save() return user''' class ReaderBookRetrieveSerializer ( serializers . ModelSerializer ): reader_hall = HallSerializer () reader_book = BookSerializer ( many = True ) class Meta : model = ReaderBook fields = \"__all__\" views.py from django.db.models import Sum from .serializers import * from rest_framework.generics import * class CopyListAPIView ( ListAPIView ): serializer_class = CopySerializer queryset = Copy . objects . all () class CopyCreateAPIView ( CreateAPIView ): serializer_class = CopySerializer queryset = Copy . objects . all () class CopykRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = CopySerializer queryset = Copy . objects . all () class BookRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () #class CopyRetrieveAPIView(RetrieveAPIView): #serializer_class = CopyRetrieveSerializer #queryset = Copy.objects.all() class BookListAPIView ( ListAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class BookCreateAPIView ( CreateAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class BookRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class BookRetrieveAPIView ( RetrieveAPIView ): serializer_class = BookRetrieveSerializer queryset = Book . objects . all () class ReaderListAPIView ( ListAPIView ): serializer_class = ReaderSerializer queryset = Reader . objects . all () class ReaderCreateAPIView ( CreateAPIView ): serializer_class = ReaderSerializer queryset = Reader . objects . all () class ReaderRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = ReaderSerializer queryset = Reader . objects . all () class ReaderRetrieveAPIView ( RetrieveAPIView ): serializer_class = ReaderRetrieveSerializer queryset = Reader . objects . all () class BookInhallrListAPIView ( ListAPIView ): serializer_class = BookInhallSerializer queryset = BookInHall . objects . all () class BookInhallCreateAPIView ( CreateAPIView ): serializer_class = BookInhallSerializer queryset = BookInHall . objects . all () class BookInhallRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = BookInhallSerializer queryset = BookInHall . objects . all () class HallrListAPIView ( ListAPIView ): serializer_class = HallSerializer queryset = Hall . objects . all () class HallCreateAPIView ( CreateAPIView ): serializer_class = HallSerializer queryset = Hall . objects . all () class HallRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = HallSerializer queryset = Hall . objects . all () class ReaderBookListAPIView ( ListAPIView ): serializer_class = ReaderBookSerializer queryset = ReaderBook . objects . all () class ReaderBookCreateAPIView ( CreateAPIView ): serializer_class = ReaderBookSerializer queryset = ReaderBook . objects . all () class ReaderBookRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): serializer_class = ReaderBookSerializer queryset = ReaderBook . objects . all () class ReaderRetrieveAPIView ( RetrieveAPIView ): serializer_class = ReaderRetrieveSerializer queryset = Reader . objects . all () urls.py urlpatterns = [ path ( 'books/' , BookListAPIView . as_view ()), # list of books path ( 'books/create/' , BookCreateAPIView . as_view ()), # create book path ( 'books/<int:pk>/' , BookRetrieveAPIView . as_view ()), # book info by id path ( 'books/edit/<int:pk>/' , BookRetrieveUpdateDestroyAPIView . as_view ()), path ( 'readers/' , ReaderListAPIView . as_view ()), # list of readers path ( 'readers/create/' , ReaderCreateAPIView . as_view ()), # create reader path ( 'readers/<int:pk>/' , ReaderRetrieveAPIView . as_view ()), # reader info by id path ( 'readers/edit/<int:pk>/' , ReaderRetrieveUpdateDestroyAPIView . as_view ()), path ( 'copies/' , CopyListAPIView . as_view ()), path ( 'copies/create/' , CopyCreateAPIView . as_view ()), path ( 'bookinhall/create/' , BookInhallCreateAPIView . as_view ()), path ( 'readers-book/' , ReaderBookListAPIView . as_view ()), # list of readers-book path ( 'readers-book/create/' , ReaderBookCreateAPIView . as_view ()), # create readerbook path ( 'readers-book/edit/<int:pk>/' , ReaderBookRetrieveUpdateDestroyAPIView . as_view ()), ]","title":"\u0412\u0410\u0420\u0418\u0410\u041d\u0422 2"},{"location":"lr4/","text":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 \u21164 \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c -books-interface book.vue booklist.vue bookreturne.vue book takeout out.vue -reder -interface rederpofile.vue rederpofileEdite.vue signup.vue signin.vue","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"pc/","text":"For full documentation visit Drive .","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1"}]}