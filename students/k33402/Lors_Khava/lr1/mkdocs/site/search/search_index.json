{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to My Laboratory Work \u00b6 Lors Khava \u00b6 K33402 \u00b6","title":"\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"#welcome-to-my-laboratory-work","text":"","title":"Welcome to My Laboratory Work"},{"location":"#lors-khava","text":"","title":"Lors Khava"},{"location":"#k33402","text":"","title":"K33402"},{"location":"lr1/","text":"Laboratory work 1 \u00b6 server.py - \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c client.py - \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c Task 1 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py import socket server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((\"127.0.0.1\", 8080)) server.listen(1) clientsocket, address = server.accept() data = clientsocket.recv(1024) print(data.decode(\"utf-8\")) clientsocket.send(\"Hello, client!\".encode(\"utf-8\")) clientsocket.close() client.py import socket client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((\"127.0.0.1\", 8080)) client.send(\"Hello, server!\".encode(\"utf-8\")) data = client.recv(1024) print(data.decode(\"utf-8\")) client.close() Task 2 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f server.py import socket server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((\"127.0.0.1\", 8080)) server.listen(10) while True: try: clientsocket, address = server.accept() data = clientsocket.recv(1024).decode(\"utf-8\") a, b, c = float(a), float(b), float(c) d = (b ** 2) - (4 * a * c) if d < 0: msg = \"No solutions\" clientsocket.send(msg.encode(\"utf-8\")) elif d == 0: x = -b / (2*a) clientsocket.send(f\"x = {x}\".encode(\"utf-8\")) else: x1 = (-b-d ** 0.5)/(2*a) x2 = (-b+d ** 0.5)/(2*a) clientsocket.send(f\"x1 = {x1}, x2 = {x2}\".encode(\"utf-8\")) except KeyboardInterrupt: server.close() break client.py import socket client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((\"127.0.0.1\", 8080)) num = input(\"Enter a, b, c: \\n\") client.send(num.encode(\"utf-8\")) data = client.recv(1024).decode(\"utf-8\") print(\"result: \", data) client.close() Task 3 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>My page</title> </head> <body> <p> \"Today is a beautiful day!\" </p> </body> </html> server.py import socket server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((\"127.0.0.1\", 8080)) server.listen(10) while True: try: clientsocket, address = server.accept() html_p = open('index.html') html_content = html_p.read() html_p.close() html_resp = 'HTTP/1.0 200 OK\\n' + html_content clientsocket.sendall(html_resp.encode('utf-8')) clientsocket.close() except KeyboardInterrupt: server.close() break client.py from http import client import socket client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((\"127.0.0.1\", 8080)) data = client.recv(1024) print(data.decode('utf-8')) client.close() Task 4 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. server.py import socket import threading server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((\"127.0.0.1\", 8080)) server.listen(10) clients = [] nicknames = [] def broadcast(message): for client in clients: client.send(message) def handle(client): while True: try: message = client.recv(1024) broadcast(message) except: index = clients.index(client) clients.remove(client) client.close() nickname = nicknames[index] broadcast('{} left!'.format(nickname).encode('ascii')) nicknames.remove(nickname) break def receive(): while True: client, address = server.accept() print(\"Connected with {}\".format(str(address))) client.send('NICK'.encode('ascii')) nickname = client.recv(1024).decode('ascii') nicknames.append(nickname) clients.append(client) print(\"Nickname is {}\".format(nickname)) broadcast(\"{} joined!\".format(nickname).encode('ascii')) client.send('Connected to server!'.encode('ascii')) thread = threading.Thread(target=handle, args=(client,)) thread.start() receive() client.py import socket import threading nickname = input(\"Choose your nickname: \") client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((\"127.0.0.1\", 8080)) def receive(): while True: try: message = client.recv(1024).decode('ascii') if message == 'NICK': client.send(nickname.encode('ascii')) else: print(message) except: print(\"An error occured!\") client.close() break def write(): while True: message = '{}: {}'.format(nickname, input('')) client.send(message.encode('ascii')) receive_thread = threading.Thread(target=receive) receive_thread.start() write_thread = threading.Thread(target=write) write_thread.start() Task 5 \u00b6 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. server.py import socket GRADES = {} class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port def serve_forever(self): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((self.host, self.port)) server.listen(10) while True: cliensocket, address = server.accept() self.serve_client(cliensocket) def serve_client(self, clientsocket): try: req = self.parse_request(clientsocket) resp = self.handle_request(req) self.send_response(clientsocket, resp) except ConnectionResetError: clientsocket = None if clientsocket: clientsocket.close() def parse_request_line(self, rfile): line = rfile.readline(10**4) line = line.decode(\"utf-8\") return line.split() def parse_request(self, clientsocket): rfile = clientsocket.makefile('rb') method, url, ver = self.parse_request_line(rfile) request = {'data': {}, 'method': method} if '?' in url: request['method'] = 'POST' values = url.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_get(self): contenttype = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form><label>Discipline </label><input name=\"discipline\" /><br><label>Mark </label><input name=\"grade\"/><br><input type=\"submit\"></form>' for i in GRADES: body += f'<div><span>{i}: {GRADES[i]}</span></div>' body += '</div></body></html>' body = body.encode('utf-8') headers = [('Content-Type', contenttype), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, request): discipline = request['data']['discipline'] grade = request['data']['grade'] if discipline not in GRADES: GRADES[discipline] = [] GRADES[discipline].append(grade) return self.handle_get() def send_response(self, clientsocket, resp): rfile = clientsocket.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' rfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' rfile.write(header_line.encode('utf-8')) rfile.write(b'\\r\\n') if resp.body: rfile.write(resp.body) rfile.flush() rfile.close() class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body if __name__ == '__main__': serv = MyHTTPServer('127.0.0.1', 8080) serv.serve_forever()","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#laboratory-work-1","text":"server.py - \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c client.py - \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","title":"Laboratory work 1"},{"location":"lr1/#task-1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py import socket server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((\"127.0.0.1\", 8080)) server.listen(1) clientsocket, address = server.accept() data = clientsocket.recv(1024) print(data.decode(\"utf-8\")) clientsocket.send(\"Hello, client!\".encode(\"utf-8\")) clientsocket.close() client.py import socket client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((\"127.0.0.1\", 8080)) client.send(\"Hello, server!\".encode(\"utf-8\")) data = client.recv(1024) print(data.decode(\"utf-8\")) client.close()","title":"Task 1"},{"location":"lr1/#task-2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f server.py import socket server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((\"127.0.0.1\", 8080)) server.listen(10) while True: try: clientsocket, address = server.accept() data = clientsocket.recv(1024).decode(\"utf-8\") a, b, c = float(a), float(b), float(c) d = (b ** 2) - (4 * a * c) if d < 0: msg = \"No solutions\" clientsocket.send(msg.encode(\"utf-8\")) elif d == 0: x = -b / (2*a) clientsocket.send(f\"x = {x}\".encode(\"utf-8\")) else: x1 = (-b-d ** 0.5)/(2*a) x2 = (-b+d ** 0.5)/(2*a) clientsocket.send(f\"x1 = {x1}, x2 = {x2}\".encode(\"utf-8\")) except KeyboardInterrupt: server.close() break client.py import socket client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((\"127.0.0.1\", 8080)) num = input(\"Enter a, b, c: \\n\") client.send(num.encode(\"utf-8\")) data = client.recv(1024).decode(\"utf-8\") print(\"result: \", data) client.close()","title":"Task 2"},{"location":"lr1/#task-3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>My page</title> </head> <body> <p> \"Today is a beautiful day!\" </p> </body> </html> server.py import socket server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((\"127.0.0.1\", 8080)) server.listen(10) while True: try: clientsocket, address = server.accept() html_p = open('index.html') html_content = html_p.read() html_p.close() html_resp = 'HTTP/1.0 200 OK\\n' + html_content clientsocket.sendall(html_resp.encode('utf-8')) clientsocket.close() except KeyboardInterrupt: server.close() break client.py from http import client import socket client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((\"127.0.0.1\", 8080)) data = client.recv(1024) print(data.decode('utf-8')) client.close()","title":"Task 3"},{"location":"lr1/#task-4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. server.py import socket import threading server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((\"127.0.0.1\", 8080)) server.listen(10) clients = [] nicknames = [] def broadcast(message): for client in clients: client.send(message) def handle(client): while True: try: message = client.recv(1024) broadcast(message) except: index = clients.index(client) clients.remove(client) client.close() nickname = nicknames[index] broadcast('{} left!'.format(nickname).encode('ascii')) nicknames.remove(nickname) break def receive(): while True: client, address = server.accept() print(\"Connected with {}\".format(str(address))) client.send('NICK'.encode('ascii')) nickname = client.recv(1024).decode('ascii') nicknames.append(nickname) clients.append(client) print(\"Nickname is {}\".format(nickname)) broadcast(\"{} joined!\".format(nickname).encode('ascii')) client.send('Connected to server!'.encode('ascii')) thread = threading.Thread(target=handle, args=(client,)) thread.start() receive() client.py import socket import threading nickname = input(\"Choose your nickname: \") client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((\"127.0.0.1\", 8080)) def receive(): while True: try: message = client.recv(1024).decode('ascii') if message == 'NICK': client.send(nickname.encode('ascii')) else: print(message) except: print(\"An error occured!\") client.close() break def write(): while True: message = '{}: {}'.format(nickname, input('')) client.send(message.encode('ascii')) receive_thread = threading.Thread(target=receive) receive_thread.start() write_thread = threading.Thread(target=write) write_thread.start()","title":"Task 4"},{"location":"lr1/#task-5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. server.py import socket GRADES = {} class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port def serve_forever(self): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((self.host, self.port)) server.listen(10) while True: cliensocket, address = server.accept() self.serve_client(cliensocket) def serve_client(self, clientsocket): try: req = self.parse_request(clientsocket) resp = self.handle_request(req) self.send_response(clientsocket, resp) except ConnectionResetError: clientsocket = None if clientsocket: clientsocket.close() def parse_request_line(self, rfile): line = rfile.readline(10**4) line = line.decode(\"utf-8\") return line.split() def parse_request(self, clientsocket): rfile = clientsocket.makefile('rb') method, url, ver = self.parse_request_line(rfile) request = {'data': {}, 'method': method} if '?' in url: request['method'] = 'POST' values = url.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_get(self): contenttype = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form><label>Discipline </label><input name=\"discipline\" /><br><label>Mark </label><input name=\"grade\"/><br><input type=\"submit\"></form>' for i in GRADES: body += f'<div><span>{i}: {GRADES[i]}</span></div>' body += '</div></body></html>' body = body.encode('utf-8') headers = [('Content-Type', contenttype), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, request): discipline = request['data']['discipline'] grade = request['data']['grade'] if discipline not in GRADES: GRADES[discipline] = [] GRADES[discipline].append(grade) return self.handle_get() def send_response(self, clientsocket, resp): rfile = clientsocket.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' rfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' rfile.write(header_line.encode('utf-8')) rfile.write(b'\\r\\n') if resp.body: rfile.write(resp.body) rfile.flush() rfile.close() class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body if __name__ == '__main__': serv = MyHTTPServer('127.0.0.1', 8080) serv.serve_forever()","title":"Task 5"},{"location":"lr2/","text":"Laboratory work 2 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django \u00b6 \u0412\u0430\u0440\u0438\u0430\u043d\u04421: \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. models.py from django.db import models class Client(models.Model): first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) birthday = models.DateField(null=True) passport = models.CharField(max_length=30, null=True) def __str__(self): return f'{self.last_name} {self.first_name}' class Hotel(models.Model): clients = models.ManyToManyField(Client, through='Booking', related_name='clients') hotel_name = models.CharField(max_length=30) owner = models.CharField(max_length=30) address = models.CharField(max_length=40, null=True) def __str__(self): return self.hotel_name class Room(models.Model): number = models.CharField(max_length=5) type = models.CharField(max_length=30, null=True) hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, null=True, related_name='hotel_room') price = models.IntegerField(null=True) def __str__(self): return f\"{self.number}\" class Booking(models.Model): client = models.ForeignKey(Client, on_delete=models.CASCADE, related_name='book_client') hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, related_name='book_hotel') room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='book_room') check_in_date = models.DateField() check_out_date = models.DateField() def __str__(self): return f\"{self.client}: {self.check_in_date} - {self.check_out_date}\" class Comment(models.Model): author = models.ForeignKey(Client, on_delete=models.CASCADE, null=True, related_name='author') hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, null=True, related_name='inf_author') rating = models.IntegerField(choices=[(i, i) for i in range(0, 11)]) review_comment = models.CharField(max_length=500) def __str__(self): return f\"{self.author}: {self.rating}\" urls.py from django.urls import path from .views import * urlpatterns = [ path(\"home/\", home), path(\"client_list/\", clients_list), path(\"client_create/\", clients_create), path(\"room_list/\", room_list), path(\"book/\", book), path(\"book_list/\", book_list), path(\"month/\", last_month), path(\"book_update/<int:pk>/\", BookUpdate.as_view()), path(\"book_delete/<int:pk>/\", BookDelete.as_view()), path('hotel_list/', HotelList.as_view()), path('hotel/<str:pk>', hotel_view), path('hotel/review/<str:pk>', comment) ] views.py from django.shortcuts import render, get_object_or_404, redirect from django.http import Http404 from django.views.generic import ListView, UpdateView, DeleteView from .forms import ClientForm, BookingForm, CommentForm from .models import Client, Hotel, Room, Booking, Comment import datetime # \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 def home(request): return render(request, \"home.html\") # \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 def clients_list(request): data = {\"clients\": Client.objects.all()} return render(request, \"clients_list.html\", data) # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 def clients_create(request): data = {} form = ClientForm(request.POST or None) if form.is_valid(): form.save() return redirect('/client_list') data[\"form\"] = form return render(request, \"register.html\", data) # \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043d\u043e\u043c\u0435\u0440\u0430\u0445 def room_list(request): data = {\"rooms\": Room.objects.all()} return render(request, \"room_list.html\", data) # \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 def book(request): data = {} form = BookingForm(request.POST or None) if form.is_valid(): form.save() data[\"form\"] = form return render(request, \"booking.html\", data) # \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 def book_list(request): data = {\"booking\": Booking.objects.all()} return render(request, \"book_list.html\", data) # c\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 def last_month(request): data = {} try: month = datetime.date.today() - datetime.timedelta(days=31) data[\"booking\"] = Booking.objects.all().filter(check_in_date__gte=str(month), check_out_date__lte=str(datetime.date.today())) print(data) except Booking.DoesNotExist: raise Http404(\"No guests this month yet :(\") return render(request, \"book_list.html\", data) # \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 class BookUpdate(UpdateView): model = Booking template_name = \"book_update.html\" fields = [\"check_in_date\", \"check_out_date\", \"client\", \"room\"] success_url = \"/book_list/\" # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 class BookDelete(DeleteView): model = Booking template_name = \"book_delete.html\" success_url = \"/book_list/\" # \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0433\u043e\u0441\u0442\u0435\u0439 \u043e\u0442\u0435\u043b\u044f class HotelList(ListView): model = Hotel template_name = 'hotel.html' all_hotels = Hotel.objects # \u043e\u0431\u0437\u043e\u0440 \u043d\u0430 \u043e\u0442\u0435\u043b\u0438 def hotel_view(request, pk): hotel = Hotel.objects.get(id=pk) comments = Comment.objects.filter(hotel=hotel) return render(request, 'hotel_detail.html', {'hotel': hotel, 'comments': comments}) # \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 def comment(request, pk): obj = get_object_or_404(Hotel, id=pk) author = request.user if request.method == 'POST': form = CommentForm(request.POST) if form['review_comment'].value(): if form['rating'].value(): if form.is_valid(): com = form.save(commit=False) com.client = author com.hotel = obj com.save() else: form = CommentForm() return render(request, 'review.html', {'form': form})","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#laboratory-work-2","text":"","title":"Laboratory work 2"},{"location":"lr2/#django","text":"\u0412\u0430\u0440\u0438\u0430\u043d\u04421: \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. models.py from django.db import models class Client(models.Model): first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) birthday = models.DateField(null=True) passport = models.CharField(max_length=30, null=True) def __str__(self): return f'{self.last_name} {self.first_name}' class Hotel(models.Model): clients = models.ManyToManyField(Client, through='Booking', related_name='clients') hotel_name = models.CharField(max_length=30) owner = models.CharField(max_length=30) address = models.CharField(max_length=40, null=True) def __str__(self): return self.hotel_name class Room(models.Model): number = models.CharField(max_length=5) type = models.CharField(max_length=30, null=True) hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, null=True, related_name='hotel_room') price = models.IntegerField(null=True) def __str__(self): return f\"{self.number}\" class Booking(models.Model): client = models.ForeignKey(Client, on_delete=models.CASCADE, related_name='book_client') hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, related_name='book_hotel') room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='book_room') check_in_date = models.DateField() check_out_date = models.DateField() def __str__(self): return f\"{self.client}: {self.check_in_date} - {self.check_out_date}\" class Comment(models.Model): author = models.ForeignKey(Client, on_delete=models.CASCADE, null=True, related_name='author') hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, null=True, related_name='inf_author') rating = models.IntegerField(choices=[(i, i) for i in range(0, 11)]) review_comment = models.CharField(max_length=500) def __str__(self): return f\"{self.author}: {self.rating}\" urls.py from django.urls import path from .views import * urlpatterns = [ path(\"home/\", home), path(\"client_list/\", clients_list), path(\"client_create/\", clients_create), path(\"room_list/\", room_list), path(\"book/\", book), path(\"book_list/\", book_list), path(\"month/\", last_month), path(\"book_update/<int:pk>/\", BookUpdate.as_view()), path(\"book_delete/<int:pk>/\", BookDelete.as_view()), path('hotel_list/', HotelList.as_view()), path('hotel/<str:pk>', hotel_view), path('hotel/review/<str:pk>', comment) ] views.py from django.shortcuts import render, get_object_or_404, redirect from django.http import Http404 from django.views.generic import ListView, UpdateView, DeleteView from .forms import ClientForm, BookingForm, CommentForm from .models import Client, Hotel, Room, Booking, Comment import datetime # \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 def home(request): return render(request, \"home.html\") # \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 def clients_list(request): data = {\"clients\": Client.objects.all()} return render(request, \"clients_list.html\", data) # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 def clients_create(request): data = {} form = ClientForm(request.POST or None) if form.is_valid(): form.save() return redirect('/client_list') data[\"form\"] = form return render(request, \"register.html\", data) # \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043d\u043e\u043c\u0435\u0440\u0430\u0445 def room_list(request): data = {\"rooms\": Room.objects.all()} return render(request, \"room_list.html\", data) # \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 def book(request): data = {} form = BookingForm(request.POST or None) if form.is_valid(): form.save() data[\"form\"] = form return render(request, \"booking.html\", data) # \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 def book_list(request): data = {\"booking\": Booking.objects.all()} return render(request, \"book_list.html\", data) # c\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 def last_month(request): data = {} try: month = datetime.date.today() - datetime.timedelta(days=31) data[\"booking\"] = Booking.objects.all().filter(check_in_date__gte=str(month), check_out_date__lte=str(datetime.date.today())) print(data) except Booking.DoesNotExist: raise Http404(\"No guests this month yet :(\") return render(request, \"book_list.html\", data) # \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 class BookUpdate(UpdateView): model = Booking template_name = \"book_update.html\" fields = [\"check_in_date\", \"check_out_date\", \"client\", \"room\"] success_url = \"/book_list/\" # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 class BookDelete(DeleteView): model = Booking template_name = \"book_delete.html\" success_url = \"/book_list/\" # \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0433\u043e\u0441\u0442\u0435\u0439 \u043e\u0442\u0435\u043b\u044f class HotelList(ListView): model = Hotel template_name = 'hotel.html' all_hotels = Hotel.objects # \u043e\u0431\u0437\u043e\u0440 \u043d\u0430 \u043e\u0442\u0435\u043b\u0438 def hotel_view(request, pk): hotel = Hotel.objects.get(id=pk) comments = Comment.objects.filter(hotel=hotel) return render(request, 'hotel_detail.html', {'hotel': hotel, 'comments': comments}) # \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 def comment(request, pk): obj = get_object_or_404(Hotel, id=pk) author = request.user if request.method == 'POST': form = CommentForm(request.POST) if form['review_comment'].value(): if form['rating'].value(): if form.is_valid(): com = form.save(commit=False) com.client = author com.hotel = obj com.save() else: form = CommentForm() return render(request, 'review.html', {'form': form})","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django"}]}