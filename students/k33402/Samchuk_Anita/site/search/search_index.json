{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0421\u0430\u043c\u0447\u0443\u043a \u0410\u043d\u0438\u0442\u0430 K33402 GitHub https://github.com/Fokkely/ITMO_ICT_WebDevelopment_2022-2023 \u0417\u0430\u0449\u0438\u0442\u044b \u043b\u0430\u0431 https://drive.google.com/drive/folders/1XxprDuBrFDanAB7HjlrqWb-4Jp8t-b3W LeetCode","title":"About me"},{"location":"#k33402","text":"","title":"\u0421\u0430\u043c\u0447\u0443\u043a \u0410\u043d\u0438\u0442\u0430 K33402"},{"location":"#github","text":"https://github.com/Fokkely/ITMO_ICT_WebDevelopment_2022-2023","title":"GitHub"},{"location":"#_1","text":"https://drive.google.com/drive/folders/1XxprDuBrFDanAB7HjlrqWb-4Jp8t-b3W","title":"\u0417\u0430\u0449\u0438\u0442\u044b \u043b\u0430\u0431"},{"location":"#leetcode","text":"","title":"LeetCode"},{"location":"LR1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server_1.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', 9090)) while True: conn, addr = sock.recvfrom(1024) print('client addr: ', addr) sock.sendto(b'Hello, client', addr) sock.close client_1.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.connect(('', 9090)) sock.send(b'Hello, server') data = sock.recvfrom(1024) sock.close print(data[0].decode('utf-8')) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server_2.py import socket from math import sqrt sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 8080)) sock.listen(1) conn, addr = sock.accept() while True: data = conn.recv(1024) if not data: break udata = data.decode('utf-8').split(',') for i in range(len(udata)): udata[i] = int(udata[i]) if udata[0] == 1: c = sqrt(udata[1]**2 + udata[2]**2) else: c = sqrt(max(udata[1], udata[2])**2 - min(udata[1], udata[2])**2) if c == 0: c = '\u0412\u044b \u0432\u0432\u0435\u043b\u0438 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435' conn.send(str(c).encode('utf-8')) conn.close client_2.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('', 8080)) print('\u0427\u0442\u043e \u0432\u0430\u043c \u043d\u0430\u0434\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c?\\n1)\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430\\n2)\u041a\u0430\u0442\u0435\u0442') answer = input() print('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b') a, b = map(int, input().split()) sock.send(f'{answer},{a},{b}'.encode('utf-8')) data = sock.recv(1024) sock.close \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server_3.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('localhost', 7070)) sock.listen(10) conn, addr = sock.accept() while True: html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\n\\n' + html_content index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>The room</title> </head> <body> <img src=\"https://c.tenor.com/d4NXy1SxPc0AAAAd/i-did-not-hit-her-its-not-true.gif\" alt=\"The room\"> </body> </html> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server_4.py import socket from threading import Thread server_host = \"0.0.0.0\" server_port = 6060 separator_token = \"<SEP>\" client_sockets = set() s = socket.socket() s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind((server_host, server_port)) s.listen(5) print(f\"[*] Listening as {server_host}:{server_port}\") def listen_for_client(cs): while True: try: msg = cs.recv(1024).decode() except Exception as e: print(f\"[!] Error: {e}\") client_sockets.remove(cs) else: msg = msg.replace(separator_token, \": \") for client_socket in client_sockets: if client_socket != cs: client_socket.send(msg.encode()) while True: client_socket, client_address = s.accept() print(f\"[+] {client_address} connected.\") client_sockets.add(client_socket) t = Thread(target=listen_for_client, args=(client_socket,), daemon=True) t.start() for cs in client_sockets: cs.close() s.close() client_4.py import socket from threading import Thread server_host = \"127.0.0.1\" server_port = 6060 separator_token = \"<SEP>\" sock = socket.socket() print(f\"[*] Connecting to {server_host}:{server_port}...\") sock.connect((server_host, server_port)) print(\"[+] Connected.\") name = input(\"Enter your name: \") def listen_for_messages(): while True: message = sock.recv(1024).decode() print(message) t = Thread(target=listen_for_messages) t.daemon = True t.start() while True: to_send = input() if to_send.lower() == 'q': break to_send = f\"{name}{separator_token}{to_send}\" sock.send(to_send.encode()) sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. server_5.py import socket class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.marks = {} def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0) try: serv_sock.bind((self.host, self.port)) serv_sock.listen() while True: client, address = serv_sock.accept() self.serve_client(client) except KeyboardInterrupt: serv_sock.close() def serve_client(self, client): try: data = client.recv(1024).decode('UTF-8') req = self.parse_request(data) res = self.handle_request(req) self.send_response(client, res) except Exception as e: print(e) client.close() def parse_request(self, data): req = data.rstrip('\\r\\n') words = req[:data.index(\"\\n\")].split() if len(words) != 3: raise Exception('Malformed request line') method, target, ver = words if ver != 'HTTP/1.1': raise Exception('Unexpected HTTP version') request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' values = target.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_get(self): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form method=\"GET\"><label>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</label>' \\ '<input name=\"discipline\" />' \\ '<br><label>\u041e\u0446\u0435\u043d\u043a\u0430</label>' \\ '<input name=\"grade\"/>' \\ '<input type=\"submit\"></form>' for subject in self.marks: body += f'<div><span>{subject}: {self.marks[subject]}</span></div>' body += '</div></body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, request): discipline = request['data']['discipline'] grade = request['data']['grade'] if discipline not in self.marks: self.marks[discipline] = [] self.marks[discipline].append(grade) return self.handle_get() def send_response(self, conn, resp): rfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' rfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' rfile.write(header_line.encode('utf-8')) rfile.write(b'\\r\\n') if resp.body: rfile.write(resp.body) rfile.flush() rfile.close() if __name__ == '__main__': host = '127.0.0.1' port = 8000 serv = MyHTTPServer(host, port) try: serv.serve_forever() except KeyboardInterrupt: pass","title":"LR1"},{"location":"LR1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21161"},{"location":"LR1/#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"LR1/#server_1py","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', 9090)) while True: conn, addr = sock.recvfrom(1024) print('client addr: ', addr) sock.sendto(b'Hello, client', addr) sock.close","title":"server_1.py"},{"location":"LR1/#client_1py","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.connect(('', 9090)) sock.send(b'Hello, server') data = sock.recvfrom(1024) sock.close print(data[0].decode('utf-8'))","title":"client_1.py"},{"location":"LR1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"LR1/#server_2py","text":"import socket from math import sqrt sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 8080)) sock.listen(1) conn, addr = sock.accept() while True: data = conn.recv(1024) if not data: break udata = data.decode('utf-8').split(',') for i in range(len(udata)): udata[i] = int(udata[i]) if udata[0] == 1: c = sqrt(udata[1]**2 + udata[2]**2) else: c = sqrt(max(udata[1], udata[2])**2 - min(udata[1], udata[2])**2) if c == 0: c = '\u0412\u044b \u0432\u0432\u0435\u043b\u0438 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435' conn.send(str(c).encode('utf-8')) conn.close","title":"server_2.py"},{"location":"LR1/#client_2py","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('', 8080)) print('\u0427\u0442\u043e \u0432\u0430\u043c \u043d\u0430\u0434\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c?\\n1)\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430\\n2)\u041a\u0430\u0442\u0435\u0442') answer = input() print('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b') a, b = map(int, input().split()) sock.send(f'{answer},{a},{b}'.encode('utf-8')) data = sock.recv(1024) sock.close","title":"client_2.py"},{"location":"LR1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"LR1/#server_3py","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('localhost', 7070)) sock.listen(10) conn, addr = sock.accept() while True: html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\n\\n' + html_content","title":"server_3.py"},{"location":"LR1/#indexhtml","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>The room</title> </head> <body> <img src=\"https://c.tenor.com/d4NXy1SxPc0AAAAd/i-did-not-hit-her-its-not-true.gif\" alt=\"The room\"> </body> </html>","title":"index.html"},{"location":"LR1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"LR1/#server_4py","text":"import socket from threading import Thread server_host = \"0.0.0.0\" server_port = 6060 separator_token = \"<SEP>\" client_sockets = set() s = socket.socket() s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind((server_host, server_port)) s.listen(5) print(f\"[*] Listening as {server_host}:{server_port}\") def listen_for_client(cs): while True: try: msg = cs.recv(1024).decode() except Exception as e: print(f\"[!] Error: {e}\") client_sockets.remove(cs) else: msg = msg.replace(separator_token, \": \") for client_socket in client_sockets: if client_socket != cs: client_socket.send(msg.encode()) while True: client_socket, client_address = s.accept() print(f\"[+] {client_address} connected.\") client_sockets.add(client_socket) t = Thread(target=listen_for_client, args=(client_socket,), daemon=True) t.start() for cs in client_sockets: cs.close() s.close()","title":"server_4.py"},{"location":"LR1/#client_4py","text":"import socket from threading import Thread server_host = \"127.0.0.1\" server_port = 6060 separator_token = \"<SEP>\" sock = socket.socket() print(f\"[*] Connecting to {server_host}:{server_port}...\") sock.connect((server_host, server_port)) print(\"[+] Connected.\") name = input(\"Enter your name: \") def listen_for_messages(): while True: message = sock.recv(1024).decode() print(message) t = Thread(target=listen_for_messages) t.daemon = True t.start() while True: to_send = input() if to_send.lower() == 'q': break to_send = f\"{name}{separator_token}{to_send}\" sock.send(to_send.encode()) sock.close()","title":"client_4.py"},{"location":"LR1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"LR1/#server_5py","text":"import socket class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.marks = {} def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0) try: serv_sock.bind((self.host, self.port)) serv_sock.listen() while True: client, address = serv_sock.accept() self.serve_client(client) except KeyboardInterrupt: serv_sock.close() def serve_client(self, client): try: data = client.recv(1024).decode('UTF-8') req = self.parse_request(data) res = self.handle_request(req) self.send_response(client, res) except Exception as e: print(e) client.close() def parse_request(self, data): req = data.rstrip('\\r\\n') words = req[:data.index(\"\\n\")].split() if len(words) != 3: raise Exception('Malformed request line') method, target, ver = words if ver != 'HTTP/1.1': raise Exception('Unexpected HTTP version') request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' values = target.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_get(self): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form method=\"GET\"><label>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</label>' \\ '<input name=\"discipline\" />' \\ '<br><label>\u041e\u0446\u0435\u043d\u043a\u0430</label>' \\ '<input name=\"grade\"/>' \\ '<input type=\"submit\"></form>' for subject in self.marks: body += f'<div><span>{subject}: {self.marks[subject]}</span></div>' body += '</div></body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, request): discipline = request['data']['discipline'] grade = request['data']['grade'] if discipline not in self.marks: self.marks[discipline] = [] self.marks[discipline].append(grade) return self.handle_get() def send_response(self, conn, resp): rfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' rfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' rfile.write(header_line.encode('utf-8')) rfile.write(b'\\r\\n') if resp.body: rfile.write(resp.body) rfile.flush() rfile.close() if __name__ == '__main__': host = '127.0.0.1' port = 8000 serv = MyHTTPServer(host, port) try: serv.serve_forever() except KeyboardInterrupt: pass","title":"server_5.py"},{"location":"LR2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21162 \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430: \u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u0433\u043e\u0432: \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u043f\u043e \u0442\u0435\u0433\u0443: \u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438: \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435: \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432: \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f: \u041b\u043e\u0433\u0438\u043d: \u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 (\u0441 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438): \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f: \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: \u041c\u043e\u0434\u0435\u043b\u0438 \u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f class Conference(models.Model): name = models.CharField(max_length=300) topics = models.ManyToManyField('Tag', blank=True, related_name='confs') place = models.CharField(max_length=50) date = models.DateTimeField(blank=True) participants = models.ManyToManyField('Participant', through='Performance') conf_description = models.CharField(max_length=1000) place_description = models.CharField(max_length=150) terms_of_participation = models.CharField(max_length=500) def get_absolute_url(self): return reverse('conf_registration_url', kwargs={'name': self.name}) def get_absolute_reg_url(self): return reverse('registration_url', kwargs={'name': self.name}) def __str__(self): return self.name \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c (\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a) class Participant(AbstractUser): username = models.CharField(max_length=30, unique=True) password = models.CharField(max_length=30) first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) is_superuser = models.BooleanField(default=True) def __str__(self): return f\"{self.first_name} {self.last_name}\" \u0412\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 class Performance(models.Model): title = models.CharField(max_length=300) description = models.TextField() is_recommended = models.BooleanField(default=False) author = models.ForeignKey(Participant, on_delete=models.CASCADE) conference = models.ForeignKey(Conference, on_delete=models.CASCADE) def __str__(self) -> str: return f\"{self.title} by {self.author.first_name} {self.author.last_name} at {self.conference.name}\" \u0422\u0435\u043c\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 class Tag(models.Model): title = models.CharField(max_length=50) def get_absolute_url(self): return reverse('tags_detail_url', kwargs={'title': self.title}) def __str__(self): return self.title \u041e\u0442\u0437\u044b\u0432 class Comment(models.Model): post = models.ForeignKey(Conference, on_delete=models.CASCADE, related_name='comments') author = models.ForeignKey(Participant, on_delete=models.CASCADE) rating = models.IntegerField( default=1, validators=[ MaxValueValidator(10), MinValueValidator(1) ] ) body = models.TextField() created_on = models.DateTimeField(auto_now_add=True) def __str__(self): return f\"Comment {self.body} by {self.author.username}\" \u0421\u0441\u044b\u043b\u043a\u0438 urlpatterns = [ path('login', views.LoginView.as_view(), name='login_url'), path('logout', views.LogoutView.as_view(), name='logout_url'), path('registration', user_registration, name='user_registration_url'), path('', conf_list, name='conf_list_url'), path('conf/<str:name>/', conf_registration, name='conf_registration_url'), path('tags/', tags_list, name='tags_list_url'), path('tag/<str:title>', tags_detail, name='tags_detail_url'), path('account', account, name='account_url'), path('conf/<str:name>/registration', registration, name='registration_url'), path('<str:pk>/editing', performance_edit, name='performance_edit_url'), path('<str:pk>/delete', performance_delete, name='performance_delete_url'), ] \u0424\u043e\u0440\u043c\u044b \u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f class RegisterForm(forms.ModelForm): class Meta: model = Participant help_texts = { 'username': None, } fields = [ 'username', 'last_name', 'first_name', 'password', ] labels = { 'username': '\u041b\u043e\u0433\u0438\u043d', 'last_name': '\u0424\u0430\u043c\u0438\u043b\u0438\u044f', 'first_name': '\u0418\u043c\u044f', 'password': '\u041f\u0430\u0440\u043e\u043b\u044c' } \u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044e class ConferenceRegisterForm(forms.ModelForm): class Meta: model = Performance fields = [ 'title', 'description', ] labels = { 'title': '\u0422\u0435\u043c\u0430', 'description': '\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435' } \u0424\u043e\u0440\u043c\u0430 \u043e\u0442\u0437\u044b\u0432\u0430 class CommentForm(forms.ModelForm): class Meta: model = Comment fields = [ 'body', 'rating' ] widgets = { 'body': forms.Textarea(attrs={'rows': 3, 'cols': 40}), } labels = { 'rating': '\u041e\u0446\u0435\u043d\u043a\u0430', 'body': '\u0422\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f' } Views def conf_list(request): confs = Conference.objects.all() return render(request, 'TheConference/index.html', context={'confs': confs}) def conf_registration(request, name): try: conf = get_object_or_404(Conference, name__iexact=name) perfs = Performance.objects.filter(conference=conf) comments = Comment.objects.filter(post=conf) context = { 'conf': conf, 'perfs': perfs, 'comments': comments } form = CommentForm(request.POST or None) context['form'] = form if form.is_valid(): comment = form.save(commit=False) comment.author = Participant.objects.get(pk=request.user.id) comment.post = conf comment.save() except Conference.DoesNotExist: raise Http404(\"Conference does not exist\") return render(request, 'TheConference/registration.html', context) def registration(request, name): conf = get_object_or_404(Conference, name__iexact=name) context = {'conf': conf} if not request.user.is_authenticated: return redirect('/login') form = ConferenceRegisterForm(request.POST or None) if form.is_valid(): performance = form.save(commit=False) performance.author = Participant.objects.get(id=request.user.id) performance.conference = Conference.objects.get(name=name) performance.save() return redirect(f'/conf/{name}') context['form'] = form return render(request, 'TheConference/conf_registration.html', context) def user_registration(request): if request.method == 'POST': form = RegisterForm(request.POST) if form.is_valid(): form.save() username = form.cleaned_data.get('username') raw_password = form.cleaned_data.get('password') user = form.save() # user = authenticate(username=username, password=raw_password) login(request, user, backend='django.contrib.auth.backends.ModelBackend') return redirect('/') else: form = RegisterForm() return render(request, 'TheConference/registration/user_registration.html', {'form': form}) @login_required def profile(request): return render(request, 'TheConference/registration/login.html') def account(request): perfs = Performance.objects.filter(author=request.user) return render(request, 'TheConference/account.html', context={'perfs': perfs}) def performance_edit(request, pk): context = {} instance = get_object_or_404(Performance, id=pk, author=request.user.id) form = ConferenceRegisterForm(request.POST or None, instance=instance) if form.is_valid(): form.save() return redirect('/account') context['form'] = form context['pk'] = pk return render(request, 'TheConference/edit_performance.html', context) def performance_delete(request, pk): if not request.user.is_authenticated: return redirect('/login') instance = get_object_or_404(Performance, id=pk, author=request.user.id) print(instance) instance.delete() return redirect('/account') def tags_list(request): tags = Tag.objects.all() return render(request, 'TheConference/tags_list.html', context={'tags': tags}) def tags_detail(request, title): tag = get_object_or_404(Tag, title__iexact=title) return render(request, 'TheConference/tags_detail.html', context={'tag': tag})","title":"LR2"},{"location":"LR2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21162"},{"location":"LR2/#_1","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439"},{"location":"LR2/#_2","text":"","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430:"},{"location":"LR2/#_3","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u0433\u043e\u0432:"},{"location":"LR2/#_4","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u043f\u043e \u0442\u0435\u0433\u0443:"},{"location":"LR2/#_5","text":"","title":"\u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438:"},{"location":"LR2/#_6","text":"","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432:"},{"location":"LR2/#_7","text":"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435:"},{"location":"LR2/#_8","text":"","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432:"},{"location":"LR2/#_9","text":"","title":"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438:"},{"location":"LR2/#_10","text":"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f:"},{"location":"LR2/#_11","text":"","title":"\u041b\u043e\u0433\u0438\u043d:"},{"location":"LR2/#_12","text":"","title":"\u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 (\u0441 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438):"},{"location":"LR2/#_13","text":"","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f:"},{"location":"LR2/#_14","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"LR2/#_15","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"LR2/#_16","text":"class Conference(models.Model): name = models.CharField(max_length=300) topics = models.ManyToManyField('Tag', blank=True, related_name='confs') place = models.CharField(max_length=50) date = models.DateTimeField(blank=True) participants = models.ManyToManyField('Participant', through='Performance') conf_description = models.CharField(max_length=1000) place_description = models.CharField(max_length=150) terms_of_participation = models.CharField(max_length=500) def get_absolute_url(self): return reverse('conf_registration_url', kwargs={'name': self.name}) def get_absolute_reg_url(self): return reverse('registration_url', kwargs={'name': self.name}) def __str__(self): return self.name","title":"\u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f"},{"location":"LR2/#_17","text":"class Participant(AbstractUser): username = models.CharField(max_length=30, unique=True) password = models.CharField(max_length=30) first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) is_superuser = models.BooleanField(default=True) def __str__(self): return f\"{self.first_name} {self.last_name}\"","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c (\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a)"},{"location":"LR2/#_18","text":"class Performance(models.Model): title = models.CharField(max_length=300) description = models.TextField() is_recommended = models.BooleanField(default=False) author = models.ForeignKey(Participant, on_delete=models.CASCADE) conference = models.ForeignKey(Conference, on_delete=models.CASCADE) def __str__(self) -> str: return f\"{self.title} by {self.author.first_name} {self.author.last_name} at {self.conference.name}\"","title":"\u0412\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438"},{"location":"LR2/#_19","text":"class Tag(models.Model): title = models.CharField(max_length=50) def get_absolute_url(self): return reverse('tags_detail_url', kwargs={'title': self.title}) def __str__(self): return self.title","title":"\u0422\u0435\u043c\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438"},{"location":"LR2/#_20","text":"class Comment(models.Model): post = models.ForeignKey(Conference, on_delete=models.CASCADE, related_name='comments') author = models.ForeignKey(Participant, on_delete=models.CASCADE) rating = models.IntegerField( default=1, validators=[ MaxValueValidator(10), MinValueValidator(1) ] ) body = models.TextField() created_on = models.DateTimeField(auto_now_add=True) def __str__(self): return f\"Comment {self.body} by {self.author.username}\"","title":"\u041e\u0442\u0437\u044b\u0432"},{"location":"LR2/#_21","text":"urlpatterns = [ path('login', views.LoginView.as_view(), name='login_url'), path('logout', views.LogoutView.as_view(), name='logout_url'), path('registration', user_registration, name='user_registration_url'), path('', conf_list, name='conf_list_url'), path('conf/<str:name>/', conf_registration, name='conf_registration_url'), path('tags/', tags_list, name='tags_list_url'), path('tag/<str:title>', tags_detail, name='tags_detail_url'), path('account', account, name='account_url'), path('conf/<str:name>/registration', registration, name='registration_url'), path('<str:pk>/editing', performance_edit, name='performance_edit_url'), path('<str:pk>/delete', performance_delete, name='performance_delete_url'), ]","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"LR2/#_22","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"LR2/#_23","text":"class RegisterForm(forms.ModelForm): class Meta: model = Participant help_texts = { 'username': None, } fields = [ 'username', 'last_name', 'first_name', 'password', ] labels = { 'username': '\u041b\u043e\u0433\u0438\u043d', 'last_name': '\u0424\u0430\u043c\u0438\u043b\u0438\u044f', 'first_name': '\u0418\u043c\u044f', 'password': '\u041f\u0430\u0440\u043e\u043b\u044c' }","title":"\u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"LR2/#_24","text":"class ConferenceRegisterForm(forms.ModelForm): class Meta: model = Performance fields = [ 'title', 'description', ] labels = { 'title': '\u0422\u0435\u043c\u0430', 'description': '\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435' }","title":"\u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044e"},{"location":"LR2/#_25","text":"class CommentForm(forms.ModelForm): class Meta: model = Comment fields = [ 'body', 'rating' ] widgets = { 'body': forms.Textarea(attrs={'rows': 3, 'cols': 40}), } labels = { 'rating': '\u041e\u0446\u0435\u043d\u043a\u0430', 'body': '\u0422\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f' }","title":"\u0424\u043e\u0440\u043c\u0430 \u043e\u0442\u0437\u044b\u0432\u0430"},{"location":"LR2/#views","text":"def conf_list(request): confs = Conference.objects.all() return render(request, 'TheConference/index.html', context={'confs': confs}) def conf_registration(request, name): try: conf = get_object_or_404(Conference, name__iexact=name) perfs = Performance.objects.filter(conference=conf) comments = Comment.objects.filter(post=conf) context = { 'conf': conf, 'perfs': perfs, 'comments': comments } form = CommentForm(request.POST or None) context['form'] = form if form.is_valid(): comment = form.save(commit=False) comment.author = Participant.objects.get(pk=request.user.id) comment.post = conf comment.save() except Conference.DoesNotExist: raise Http404(\"Conference does not exist\") return render(request, 'TheConference/registration.html', context) def registration(request, name): conf = get_object_or_404(Conference, name__iexact=name) context = {'conf': conf} if not request.user.is_authenticated: return redirect('/login') form = ConferenceRegisterForm(request.POST or None) if form.is_valid(): performance = form.save(commit=False) performance.author = Participant.objects.get(id=request.user.id) performance.conference = Conference.objects.get(name=name) performance.save() return redirect(f'/conf/{name}') context['form'] = form return render(request, 'TheConference/conf_registration.html', context) def user_registration(request): if request.method == 'POST': form = RegisterForm(request.POST) if form.is_valid(): form.save() username = form.cleaned_data.get('username') raw_password = form.cleaned_data.get('password') user = form.save() # user = authenticate(username=username, password=raw_password) login(request, user, backend='django.contrib.auth.backends.ModelBackend') return redirect('/') else: form = RegisterForm() return render(request, 'TheConference/registration/user_registration.html', {'form': form}) @login_required def profile(request): return render(request, 'TheConference/registration/login.html') def account(request): perfs = Performance.objects.filter(author=request.user) return render(request, 'TheConference/account.html', context={'perfs': perfs}) def performance_edit(request, pk): context = {} instance = get_object_or_404(Performance, id=pk, author=request.user.id) form = ConferenceRegisterForm(request.POST or None, instance=instance) if form.is_valid(): form.save() return redirect('/account') context['form'] = form context['pk'] = pk return render(request, 'TheConference/edit_performance.html', context) def performance_delete(request, pk): if not request.user.is_authenticated: return redirect('/login') instance = get_object_or_404(Performance, id=pk, author=request.user.id) print(instance) instance.delete() return redirect('/account') def tags_list(request): tags = Tag.objects.all() return render(request, 'TheConference/tags_list.html', context={'tags': tags}) def tags_detail(request, title): tag = get_object_or_404(Tag, title__iexact=title) return render(request, 'TheConference/tags_detail.html', context={'tag': tag})","title":"Views"},{"location":"LR3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21163 \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u041c\u043e\u0434\u0435\u043b\u0438 class User(AbstractUser): tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Instance(models.Model): id_instance = models.AutoField(\"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\", primary_key=True) section = models.CharField(max_length=20, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b') code = models.CharField(max_length=20, verbose_name='\u0410\u0440\u0442\u0438\u043a\u0443\u043b') year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') conditions = ( ('\u0445', '\u0445\u043e\u0440\u043e\u0448\u0435\u0435'), ('\u0443', '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0442\u0430\u0440\u043e\u0435'), ) condition = models.CharField(max_length=1, choices=conditions, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430') book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) def __str__(self): return self.code class Book(models.Model): id_book = models.AutoField(\"ID_\u043a\u043d\u0438\u0433\u0438\", primary_key=True) name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') author = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\") publisher = models.CharField(max_length=30, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e') def __str__(self): return self.name class Reader(models.Model): ticket = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430') name = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e\") passport = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430') birth_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f') address = models.CharField(max_length=100, verbose_name='\u0410\u0434\u0440\u0435\u0441') phone_number = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') educations = ( ('\u043d', '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0440\u0435\u0434\u043d\u0435\u0435'), ('\u0432', '\u0432\u044b\u0441\u0448\u0435\u0435'), ) education = models.CharField(max_length=1, choices=educations, verbose_name='\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435') degree = models.BooleanField(default=False, verbose_name='\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438') registration_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438') instances = models.ManyToManyField('Instance', verbose_name='\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438', through='ReaderBook', related_name='reader_book') room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE, null=True) def __str__(self): return self.name class ReaderRoom(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430', null=True) class BookInst(models.Model): inst = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) class ReaderBook(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) book = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438', null=True) class BookRoom(models.Model): book = models.ForeignKey('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) class Room(models.Model): name = models.CharField(max_length=20, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c') books = models.ManyToManyField('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0438', through='BookRoom', related_name='book_room') def __str__(self): return self.name \u042e\u0440\u043b\u044b urlpatterns = [ path('readers/list/', ReaderListAPIView.as_view()), path('readers/create/', CreateReader.as_view()), path('readers/<int:pk>/', OneReader.as_view()), path('books/list/', BookListAPIView.as_view()), path('books/create/', CreateBook.as_view()), path('books/<int:pk>/', OneBook.as_view()), path('inst/list/', InstanceListAPIView.as_view()), path('inst/create/', CreateInstance.as_view()), path('inst/<int:pk>/', OneInstance.as_view()), path('rooms/list/', RoomListAPIView.as_view()), path('rooms/create/', RoomCreateAPIView.as_view()), path('rooms/<int:pk>/', OneRoom.as_view()), path('book/readers/', BookReaders.as_view()), path('book/room/', RoomBook.as_view()), path('room/readers/', RoomReader.as_view()), path('book/inst/', BookInst.as_view()), path('readers/inst/<int:pk>', ReadersInst.as_view()), ] Views class ReaderListAPIView(ListAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class CreateReader(CreateAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class BookListAPIView(ListAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class CreateBook(CreateAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class InstanceListAPIView(ListAPIView): serializer_class = InstanceSerializer queryset = Instance.objects.all() class CreateInstance(CreateAPIView): serializer_class = InstanceSerializer queryset = Instance.objects.all() class OneBook(RetrieveUpdateDestroyAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class OneInstance(RetrieveUpdateDestroyAPIView): serializer_class = InstanceSerializer queryset = Instance.objects.all() class OneReader(RetrieveUpdateDestroyAPIView): serializer_class = ReaderSerializer queryset = Instance.objects.all() class BookReaders(CreateAPIView): serializer_class = ReaderBookSerializer queryset = ReaderBook.objects.all() class RoomListAPIView(ListAPIView): serializer_class = RoomSerializer queryset = Room.objects.all() class RoomCreateAPIView(CreateAPIView): serializer_class = RoomSerializer queryset = Room.objects.all() class OneRoom(RetrieveUpdateDestroyAPIView): serializer_class = RoomSerializer queryset = Room.objects.all() class RoomBook(CreateAPIView): serializer_class = BookRoomSerializer queryset = BookRoom.objects.all() class RoomReader(CreateAPIView): serializer_class = ReaderRoomSerializer queryset = ReaderRoom.objects.all() class BookInst(CreateAPIView): serializer_class = BookInstSerializer queryset = BookInst.objects.all() class ReadersInst(generics.RetrieveAPIView): serializer_class = ReaderInstsSerializer queryset = Reader.objects.all() Serializers class ReaderSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='books') class Meta: model = Reader fields = \"__all__\" class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = \"__all__\" class InstanceSerializer(serializers.ModelSerializer): class Meta: model = Instance fields = \"__all__\" class ReaderBookSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = \"__all__\" class RoomSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='id_instance') class Meta: model = Room fields = \"__all__\" class BookRoomSerializer(serializers.ModelSerializer): class Meta: model = BookRoom fields = \"__all__\" class ReaderRoomSerializer(serializers.ModelSerializer): class Meta: model = ReaderRoom fields = \"__all__\" class BookInstSerializer(serializers.ModelSerializer): class Meta: model = BookInst fields = \"__all__\" class ReaderInstsSerializer(serializers.ModelSerializer): class Meta: model = Reader fields = [\"instances\"] class RecentlyBookDateSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = [\"reader\"]","title":"LR3"},{"location":"LR3/#no3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21163"},{"location":"LR3/#_1","text":"","title":"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430"},{"location":"LR3/#_2","text":"class User(AbstractUser): tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Instance(models.Model): id_instance = models.AutoField(\"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\", primary_key=True) section = models.CharField(max_length=20, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b') code = models.CharField(max_length=20, verbose_name='\u0410\u0440\u0442\u0438\u043a\u0443\u043b') year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') conditions = ( ('\u0445', '\u0445\u043e\u0440\u043e\u0448\u0435\u0435'), ('\u0443', '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0442\u0430\u0440\u043e\u0435'), ) condition = models.CharField(max_length=1, choices=conditions, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430') book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) def __str__(self): return self.code class Book(models.Model): id_book = models.AutoField(\"ID_\u043a\u043d\u0438\u0433\u0438\", primary_key=True) name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') author = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\") publisher = models.CharField(max_length=30, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e') def __str__(self): return self.name class Reader(models.Model): ticket = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430') name = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e\") passport = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430') birth_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f') address = models.CharField(max_length=100, verbose_name='\u0410\u0434\u0440\u0435\u0441') phone_number = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') educations = ( ('\u043d', '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0440\u0435\u0434\u043d\u0435\u0435'), ('\u0432', '\u0432\u044b\u0441\u0448\u0435\u0435'), ) education = models.CharField(max_length=1, choices=educations, verbose_name='\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435') degree = models.BooleanField(default=False, verbose_name='\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438') registration_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438') instances = models.ManyToManyField('Instance', verbose_name='\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438', through='ReaderBook', related_name='reader_book') room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE, null=True) def __str__(self): return self.name class ReaderRoom(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430', null=True) class BookInst(models.Model): inst = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) class ReaderBook(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) book = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438', null=True) class BookRoom(models.Model): book = models.ForeignKey('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) class Room(models.Model): name = models.CharField(max_length=20, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c') books = models.ManyToManyField('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0438', through='BookRoom', related_name='book_room') def __str__(self): return self.name","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"LR3/#_3","text":"urlpatterns = [ path('readers/list/', ReaderListAPIView.as_view()), path('readers/create/', CreateReader.as_view()), path('readers/<int:pk>/', OneReader.as_view()), path('books/list/', BookListAPIView.as_view()), path('books/create/', CreateBook.as_view()), path('books/<int:pk>/', OneBook.as_view()), path('inst/list/', InstanceListAPIView.as_view()), path('inst/create/', CreateInstance.as_view()), path('inst/<int:pk>/', OneInstance.as_view()), path('rooms/list/', RoomListAPIView.as_view()), path('rooms/create/', RoomCreateAPIView.as_view()), path('rooms/<int:pk>/', OneRoom.as_view()), path('book/readers/', BookReaders.as_view()), path('book/room/', RoomBook.as_view()), path('room/readers/', RoomReader.as_view()), path('book/inst/', BookInst.as_view()), path('readers/inst/<int:pk>', ReadersInst.as_view()), ]","title":"\u042e\u0440\u043b\u044b"},{"location":"LR3/#views","text":"class ReaderListAPIView(ListAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class CreateReader(CreateAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() class BookListAPIView(ListAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class CreateBook(CreateAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class InstanceListAPIView(ListAPIView): serializer_class = InstanceSerializer queryset = Instance.objects.all() class CreateInstance(CreateAPIView): serializer_class = InstanceSerializer queryset = Instance.objects.all() class OneBook(RetrieveUpdateDestroyAPIView): serializer_class = BookSerializer queryset = Book.objects.all() class OneInstance(RetrieveUpdateDestroyAPIView): serializer_class = InstanceSerializer queryset = Instance.objects.all() class OneReader(RetrieveUpdateDestroyAPIView): serializer_class = ReaderSerializer queryset = Instance.objects.all() class BookReaders(CreateAPIView): serializer_class = ReaderBookSerializer queryset = ReaderBook.objects.all() class RoomListAPIView(ListAPIView): serializer_class = RoomSerializer queryset = Room.objects.all() class RoomCreateAPIView(CreateAPIView): serializer_class = RoomSerializer queryset = Room.objects.all() class OneRoom(RetrieveUpdateDestroyAPIView): serializer_class = RoomSerializer queryset = Room.objects.all() class RoomBook(CreateAPIView): serializer_class = BookRoomSerializer queryset = BookRoom.objects.all() class RoomReader(CreateAPIView): serializer_class = ReaderRoomSerializer queryset = ReaderRoom.objects.all() class BookInst(CreateAPIView): serializer_class = BookInstSerializer queryset = BookInst.objects.all() class ReadersInst(generics.RetrieveAPIView): serializer_class = ReaderInstsSerializer queryset = Reader.objects.all()","title":"Views"},{"location":"LR3/#serializers","text":"class ReaderSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='books') class Meta: model = Reader fields = \"__all__\" class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = \"__all__\" class InstanceSerializer(serializers.ModelSerializer): class Meta: model = Instance fields = \"__all__\" class ReaderBookSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = \"__all__\" class RoomSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='id_instance') class Meta: model = Room fields = \"__all__\" class BookRoomSerializer(serializers.ModelSerializer): class Meta: model = BookRoom fields = \"__all__\" class ReaderRoomSerializer(serializers.ModelSerializer): class Meta: model = ReaderRoom fields = \"__all__\" class BookInstSerializer(serializers.ModelSerializer): class Meta: model = BookInst fields = \"__all__\" class ReaderInstsSerializer(serializers.ModelSerializer): class Meta: model = Reader fields = [\"instances\"] class RecentlyBookDateSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = [\"reader\"]","title":"Serializers"},{"location":"LR4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21164 Picterest \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 Pinterest, \u0433\u0434\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 Views DashboardView.vue <template> <div class=\"container-fluid\"> <NavbarWithFilters></NavbarWithFilters> <section class=\"photos mt-4\"> <div class=\"pinterest-grid\"> <router-link v-for=\"photo in photos\" :key=\"photo.id\" :to=\"'/post/' + photo.id\"> <img class=\"main-image\" alt=\"dashboard-photo-1\" :src=\"photo.urls.small\" /> </router-link> </div> </section> </div> </template> <script> import NavbarWithFilters from '@/components/NavbarWithFilters' export default { name: 'DashboardView', components: { NavbarWithFilters }, beforeMount () { this.loadPhotos() }, computed: { photos () { return this.$store.getters.photos } }, methods: { loadPhotos () { this.$store.dispatch('getPhotos') } }, head: { title: 'Picterest- Home' } } </script> PostView.vue <template> <div class=\"container-fluid\"> <NavbarMinimal></NavbarMinimal> <div class=\"container\"> <section class=\"d-flex post-wrap mt-3\"> <img class=\"w-50 post-image\" :src=\"photo ? photo.urls.regular : ''\" /> <div class=\"w-50 p-4 post-wrap\"> <div class=\"d-flex align-items-center justify-content-between\"> <h5 class=\"mb-1\">{{ photo ? photo.user.name : '' }}</h5> <button @click=\"like\" class=\"btn btn-primary btn-sm\">Like</button> </div> <div>{{ date }}</div> <div class=\"mb-3\">{{ photo ? photo.location.name : '' }}</div> <div>{{ photo ? photo.description : '' }}</div> </div> </section> </div> </div> </template> <script> import NavbarMinimal from '@/components/NavbarMinimal' import axios from 'axios' export default { name: 'PostView', components: { NavbarMinimal }, beforeMount () { this.$store.dispatch('loadPhoto', this.$route.params.id) }, computed: { photo () { return this.$store.getters.postPhoto }, date () { const photo = this.photo return new Date(photo.created_at).toDateString() } }, methods: { async like () { try { const userId = JSON.parse(localStorage.getItem('user')).id const response = await axios.post( 'http://localhost:3000/600/likedPhotos', { photo: this.photo.id, url: this.photo.urls.small, userId }, { headers: { Authorization: 'Bearer ' + localStorage.accessToken } } ) if (response.status === 201) { console.log('liked') } } catch (e) { alert(e.response.data) } } } } </script> <style scoped></style> LoginView.view <template> <div class=\"container\"> <div class=\"row justify-content-center mt-5 p-5\"> <div class=\"col-12\"> <div class=\"login-wrap d-flex\"> <div class=\"login-img w-50\" ></div> <div class=\"w-50 p-5\"> <h3 class=\"mb-4\">Sign In</h3> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"name\">Email</label> <input id=\"name\" type=\"text\" class=\"form-control\" placeholder=\"Email\" v-model=\"form.email\" required /> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"password\">Password</label> <input id=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\" v-model=\"form.password\" required /> </div> <div class=\"form-group\"> <button @click=\"login()\" class=\"form-control btn btn-primary submit px-3\" > Sign In </button> </div> <div class=\"form-group d-flex\"> <div class=\"w-50\"> <label class=\"checkbox-wrap checkbox-primary mb-0\">Remember Me <input type=\"checkbox\" checked=\"\" /> <span class=\"checkmark\"></span> </label> </div> <div class=\"w-50 text-right\"> <a href=\"#\">Forgot Password</a> </div> </div> <p class=\"text-center\"> Not a member? <router-link to=\"/signup\">Sign Up</router-link> </p> </div> </div> </div> </div> </div> </template> <script> import axios from 'axios' export default { name: 'LoginView', data () { return { form: { email: null, password: null } } }, beforeMount () { if (localStorage.getItem('accessToken')) { this.$router.push('/') } }, methods: { async login () { try { const response = await axios.post('http://localhost:3000/login', this.form) if (response.status === 200) { localStorage.setItem('accessToken', response.data.accessToken) localStorage.setItem('user', JSON.stringify(response.data.user)) this.$router.push('/') } } catch (e) { alert(e.response.data) } } } } </script> <style scoped> .text-right { text-align: right; } .login-img { background-image: url(\"@/assets/img/logo-photo.jpeg\"); } </style> SignUpView.vue <template> <div class=\"container\"> <div class=\"row justify-content-center mt-5 p-5\"> <div class=\"col-12\"> <div class=\"login-wrap d-flex\"> <div class=\"w-100 p-5\"> <div class=\"d-flex\"> <div class=\"w-100\"> <h3 class=\"mb-4\">Sign Up</h3> </div> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"email\">Email</label> <input id=\"email\" type=\"text\" class=\"form-control\" placeholder=\"Username\" v-model=\"form.email\" required /> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"name\">Username</label> <input id=\"name\" type=\"text\" class=\"form-control\" placeholder=\"Username\" v-model=\"form.username\" required /> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"password\">Password</label> <input id=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\" v-model=\"form.password\" required /> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"password-confirm\"> Confirm Password </label> <input v-model=\"form.password2\" id=\"password-confirm\" type=\"password\" class=\"form-control\" placeholder=\"Password\" required /> </div> <div class=\"form-group\"> <button @click=\"signup()\" class=\"form-control btn btn-primary submit px-3 mt-3\" > Sign Up </button> </div> <p class=\"text-center mt-2\"> Already Singed up? <router-link to=\"/login\" data-toggle=\"tab\"> Sign In </router-link> </p> </div> </div> </div> </div> </div> </template> <script> import axios from 'axios' export default { name: 'SignUpView', data () { return { form: { username: null, password: null, password2: null, email: null } } }, beforeCreate () { if (localStorage.getItem('accessToken')) { this.$router.push('/') } }, methods: { async signup () { if (this.form.password === this.form.password2 && this.form.password !== null) { try { const response = await axios.post( 'http://localhost:3000/signup', { email: this.form.email, password: this.form.password, username: this.form.username }) if (response.status === 201) { this.$router.push('/login') } } catch (e) { alert(e.response.data) } } else { alert('\u041f\u0430\u0440\u043e\u043b\u0438 \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442') } } } } </script> <style scoped></style> ProfileView.vue <template> <div class=\"container-fluid\"> <NavbarMinimal></NavbarMinimal> <div class=\"container\"> <div class=\"row\"> <div class=\"col-6\"> <section class=\"settings mt-4\"> <h4 class=\"mb-4\">Profile</h4> <div class=\"form-group row mb-3\"> <div class=\"col-6\"> <label class=\"label\" for=\"first-name\">First Name</label> <input id=\"first-name\" type=\"text\" class=\"form-control\" placeholder=\"First Name\" required> </div> <div class=\"col-6\"> <label class=\"label\" for=\"last-name\">Last Name</label> <input id=\"last-name\" type=\"text\" class=\"form-control\" placeholder=\"Last Name\" required> </div> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"name\">Username</label> <input id=\"name\" type=\"text\" class=\"form-control\" placeholder=\"Username\" required> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"email\">Email</label> <input id=\"email\" type=\"text\" class=\"form-control\" placeholder=\"Email\" required=\"\"> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"description\">Bio</label> <textarea id=\"description\" type=\"text\" class=\"form-control\" placeholder=\"Enter a Bio\"></textarea> </div> <div class=\"form-group d-flex justify-content-end\"> <button type=\"submit\" class=\"btn btn-secondary px-3 mx-2\">Cancel</button> <button type=\"submit\" class=\"btn btn-primary px-3\">Save</button> </div> </section> </div> <div class=\"col-6\"> <h4 class=\"mt-4\">Liked pictures</h4> <div class=\"pinterest-grid-profile\"> <img v-for=\"photo in likedPhotos\" :key=\"photo.photo\" class=\"main-image\" :src=\"photo.url\"/> </div> </div> </div> </div> </div> </template> <script> import NavbarMinimal from '@/components/NavbarMinimal' export default { name: 'ProfileView', computed: { likedPhotos () { return this.$store.getters.likedPhotos } }, beforeMount () { if (!localStorage.getItem('accessToken')) { this.$router.push('/login') } this.$store.dispatch('getLikedPhotos', { accessToken: localStorage.accessToken, userId: JSON.parse(localStorage.user).id }) }, components: { NavbarMinimal } } </script> <style scoped></style> Components NavbarMinimal.vue <template> <div class=\"container-fluid my-navbar sticky-top\"> <nav class=\"navbar navbar-light\"> <router-link to=\"/\" class=\"navbar-brand\"> <img src=\"@/assets/logo.png\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\" /> Picterest </router-link> <ProfileBlock></ProfileBlock> </nav> </div> </template> <script> import ProfileBlock from '@/components/ProfileBlock' export default { name: 'TheNavbarMinimal', components: { ProfileBlock } } </script> <style scoped></style> NavbarWithFilters.vue <template> <div class=\"container-fluid my-navbar sticky-top\"> <nav class=\"navbar navbar-light\"> <router-link to=\"/\" class=\"navbar-brand\"> <img src=\"@/assets/logo.png\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\" /> Picterest </router-link> <ProfileBlock></ProfileBlock> </nav> </div> </template> <script> import ProfileBlock from '@/components/ProfileBlock' export default { name: 'TheNavbarMinimal', components: { ProfileBlock } } </script> <style scoped></style> ProfileBlock.vue <template> <div class=\"d-flex align-items-center\"> <router-link to=\"/profile\" class=\"mx-2\"> <img src=\"@/assets/img/avatar.png\" alt=\"profile\" width=\"30\" height=\"30\"/> </router-link> <svg v-if=\"isLoggedIn\" @click=\"logout\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"black\" class=\"bi bi-box-arrow-right ml-3\" viewBox=\"0 0 16 16\"> <path fill-rule=\"evenodd\" d=\"M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z\"/> <path fill-rule=\"evenodd\" d=\"M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z\"/> </svg> </div> </template> <script> export default { name: 'ProfileBlock', data () { return { isLoggedIn: false } }, mounted () { if (localStorage.getItem('accessToken')) { this.isLoggedIn = true } }, methods: { logout () { localStorage.removeItem('accessToken') localStorage.removeItem('user') this.$router.push('/login') } } } </script> <style scoped> </style> Store index.js import Vue from 'vue' import Vuex from 'vuex' import axios from 'axios' Vue.use(Vuex) const accessKey = '4WtZzqzkj1jpOdx3igqSGJuGBWg2gheh_QvIARzn40M' export default new Vuex.Store({ state: { photos: null, postPhoto: null, likedPhotos: null }, getters: { photos (state) { return state.photos }, postPhoto (state) { return state.postPhoto }, likedPhotos (state) { return state.likedPhotos } }, mutations: { setPhotos (state, payload) { state.photos = payload }, setPostPhoto (state, payload) { state.postPhoto = payload }, setLikedPhotos (state, payload) { state.likedPhotos = payload } }, actions: { async searchPhotos (context, { query, filters }) { if (query == null) { return } if (filters.color === null) { delete filters.color } try { const response = await axios.get('https://api.unsplash.com/search/photos', { params: { client_id: accessKey, per_page: 20, query, ...filters } }) if (response.status === 200) { context.commit('setPhotos', response.data.results) } } catch (e) { console.log(e) } }, async getPhotos (context) { try { const response = await axios.get('https://api.unsplash.com/photos', { params: { client_id: accessKey, order_by: 'popular', per_page: 20 } }) if (response.status === 200) { context.commit('setPhotos', response.data) } } catch (e) { console.log(e) } }, async loadPhoto (context, id) { try { const response = await axios.get('https://api.unsplash.com/photos/' + id, { params: { client_id: accessKey } }) if (response.status === 200) { context.commit('setPostPhoto', response.data) } } catch (e) { console.log(e) } }, async getLikedPhotos (context, { accessToken, userId }) { try { const response = await axios.get('http://localhost:3000/600/likedPhotos?userId=' + userId, { headers: { Authorization: 'Bearer ' + accessToken } }) if (response.status === 200) { context.commit('setLikedPhotos', response.data) } } catch (e) { console.log(e) } } } }) Router index.js Vue.use(VueRouter) const routes = [ { path: '/', name: 'Dashboard', component: DashboardView }, { path: '/login', name: 'Login', component: LoginView }, { path: '/post/:id', name: 'Post', component: PostView }, { path: '/profile', name: 'Profile', component: ProfileView }, { path: '/signup', name: 'SignUpView', component: SignUpView } ] const router = new VueRouter({ mode: 'history', base: process.env.BASE_URL, routes }) export default router","title":"LR4"},{"location":"LR4/#no4","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21164"},{"location":"LR4/#picterest","text":"\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 Pinterest, \u0433\u0434\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445","title":"Picterest"},{"location":"LR4/#views","text":"","title":"Views"},{"location":"LR4/#dashboardviewvue","text":"<template> <div class=\"container-fluid\"> <NavbarWithFilters></NavbarWithFilters> <section class=\"photos mt-4\"> <div class=\"pinterest-grid\"> <router-link v-for=\"photo in photos\" :key=\"photo.id\" :to=\"'/post/' + photo.id\"> <img class=\"main-image\" alt=\"dashboard-photo-1\" :src=\"photo.urls.small\" /> </router-link> </div> </section> </div> </template> <script> import NavbarWithFilters from '@/components/NavbarWithFilters' export default { name: 'DashboardView', components: { NavbarWithFilters }, beforeMount () { this.loadPhotos() }, computed: { photos () { return this.$store.getters.photos } }, methods: { loadPhotos () { this.$store.dispatch('getPhotos') } }, head: { title: 'Picterest- Home' } } </script>","title":"DashboardView.vue"},{"location":"LR4/#postviewvue","text":"<template> <div class=\"container-fluid\"> <NavbarMinimal></NavbarMinimal> <div class=\"container\"> <section class=\"d-flex post-wrap mt-3\"> <img class=\"w-50 post-image\" :src=\"photo ? photo.urls.regular : ''\" /> <div class=\"w-50 p-4 post-wrap\"> <div class=\"d-flex align-items-center justify-content-between\"> <h5 class=\"mb-1\">{{ photo ? photo.user.name : '' }}</h5> <button @click=\"like\" class=\"btn btn-primary btn-sm\">Like</button> </div> <div>{{ date }}</div> <div class=\"mb-3\">{{ photo ? photo.location.name : '' }}</div> <div>{{ photo ? photo.description : '' }}</div> </div> </section> </div> </div> </template> <script> import NavbarMinimal from '@/components/NavbarMinimal' import axios from 'axios' export default { name: 'PostView', components: { NavbarMinimal }, beforeMount () { this.$store.dispatch('loadPhoto', this.$route.params.id) }, computed: { photo () { return this.$store.getters.postPhoto }, date () { const photo = this.photo return new Date(photo.created_at).toDateString() } }, methods: { async like () { try { const userId = JSON.parse(localStorage.getItem('user')).id const response = await axios.post( 'http://localhost:3000/600/likedPhotos', { photo: this.photo.id, url: this.photo.urls.small, userId }, { headers: { Authorization: 'Bearer ' + localStorage.accessToken } } ) if (response.status === 201) { console.log('liked') } } catch (e) { alert(e.response.data) } } } } </script> <style scoped></style>","title":"PostView.vue"},{"location":"LR4/#loginviewview","text":"<template> <div class=\"container\"> <div class=\"row justify-content-center mt-5 p-5\"> <div class=\"col-12\"> <div class=\"login-wrap d-flex\"> <div class=\"login-img w-50\" ></div> <div class=\"w-50 p-5\"> <h3 class=\"mb-4\">Sign In</h3> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"name\">Email</label> <input id=\"name\" type=\"text\" class=\"form-control\" placeholder=\"Email\" v-model=\"form.email\" required /> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"password\">Password</label> <input id=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\" v-model=\"form.password\" required /> </div> <div class=\"form-group\"> <button @click=\"login()\" class=\"form-control btn btn-primary submit px-3\" > Sign In </button> </div> <div class=\"form-group d-flex\"> <div class=\"w-50\"> <label class=\"checkbox-wrap checkbox-primary mb-0\">Remember Me <input type=\"checkbox\" checked=\"\" /> <span class=\"checkmark\"></span> </label> </div> <div class=\"w-50 text-right\"> <a href=\"#\">Forgot Password</a> </div> </div> <p class=\"text-center\"> Not a member? <router-link to=\"/signup\">Sign Up</router-link> </p> </div> </div> </div> </div> </div> </template> <script> import axios from 'axios' export default { name: 'LoginView', data () { return { form: { email: null, password: null } } }, beforeMount () { if (localStorage.getItem('accessToken')) { this.$router.push('/') } }, methods: { async login () { try { const response = await axios.post('http://localhost:3000/login', this.form) if (response.status === 200) { localStorage.setItem('accessToken', response.data.accessToken) localStorage.setItem('user', JSON.stringify(response.data.user)) this.$router.push('/') } } catch (e) { alert(e.response.data) } } } } </script> <style scoped> .text-right { text-align: right; } .login-img { background-image: url(\"@/assets/img/logo-photo.jpeg\"); } </style>","title":"LoginView.view"},{"location":"LR4/#signupviewvue","text":"<template> <div class=\"container\"> <div class=\"row justify-content-center mt-5 p-5\"> <div class=\"col-12\"> <div class=\"login-wrap d-flex\"> <div class=\"w-100 p-5\"> <div class=\"d-flex\"> <div class=\"w-100\"> <h3 class=\"mb-4\">Sign Up</h3> </div> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"email\">Email</label> <input id=\"email\" type=\"text\" class=\"form-control\" placeholder=\"Username\" v-model=\"form.email\" required /> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"name\">Username</label> <input id=\"name\" type=\"text\" class=\"form-control\" placeholder=\"Username\" v-model=\"form.username\" required /> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"password\">Password</label> <input id=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\" v-model=\"form.password\" required /> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"password-confirm\"> Confirm Password </label> <input v-model=\"form.password2\" id=\"password-confirm\" type=\"password\" class=\"form-control\" placeholder=\"Password\" required /> </div> <div class=\"form-group\"> <button @click=\"signup()\" class=\"form-control btn btn-primary submit px-3 mt-3\" > Sign Up </button> </div> <p class=\"text-center mt-2\"> Already Singed up? <router-link to=\"/login\" data-toggle=\"tab\"> Sign In </router-link> </p> </div> </div> </div> </div> </div> </template> <script> import axios from 'axios' export default { name: 'SignUpView', data () { return { form: { username: null, password: null, password2: null, email: null } } }, beforeCreate () { if (localStorage.getItem('accessToken')) { this.$router.push('/') } }, methods: { async signup () { if (this.form.password === this.form.password2 && this.form.password !== null) { try { const response = await axios.post( 'http://localhost:3000/signup', { email: this.form.email, password: this.form.password, username: this.form.username }) if (response.status === 201) { this.$router.push('/login') } } catch (e) { alert(e.response.data) } } else { alert('\u041f\u0430\u0440\u043e\u043b\u0438 \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442') } } } } </script> <style scoped></style>","title":"SignUpView.vue"},{"location":"LR4/#profileviewvue","text":"<template> <div class=\"container-fluid\"> <NavbarMinimal></NavbarMinimal> <div class=\"container\"> <div class=\"row\"> <div class=\"col-6\"> <section class=\"settings mt-4\"> <h4 class=\"mb-4\">Profile</h4> <div class=\"form-group row mb-3\"> <div class=\"col-6\"> <label class=\"label\" for=\"first-name\">First Name</label> <input id=\"first-name\" type=\"text\" class=\"form-control\" placeholder=\"First Name\" required> </div> <div class=\"col-6\"> <label class=\"label\" for=\"last-name\">Last Name</label> <input id=\"last-name\" type=\"text\" class=\"form-control\" placeholder=\"Last Name\" required> </div> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"name\">Username</label> <input id=\"name\" type=\"text\" class=\"form-control\" placeholder=\"Username\" required> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"email\">Email</label> <input id=\"email\" type=\"text\" class=\"form-control\" placeholder=\"Email\" required=\"\"> </div> <div class=\"form-group mb-3\"> <label class=\"label\" for=\"description\">Bio</label> <textarea id=\"description\" type=\"text\" class=\"form-control\" placeholder=\"Enter a Bio\"></textarea> </div> <div class=\"form-group d-flex justify-content-end\"> <button type=\"submit\" class=\"btn btn-secondary px-3 mx-2\">Cancel</button> <button type=\"submit\" class=\"btn btn-primary px-3\">Save</button> </div> </section> </div> <div class=\"col-6\"> <h4 class=\"mt-4\">Liked pictures</h4> <div class=\"pinterest-grid-profile\"> <img v-for=\"photo in likedPhotos\" :key=\"photo.photo\" class=\"main-image\" :src=\"photo.url\"/> </div> </div> </div> </div> </div> </template> <script> import NavbarMinimal from '@/components/NavbarMinimal' export default { name: 'ProfileView', computed: { likedPhotos () { return this.$store.getters.likedPhotos } }, beforeMount () { if (!localStorage.getItem('accessToken')) { this.$router.push('/login') } this.$store.dispatch('getLikedPhotos', { accessToken: localStorage.accessToken, userId: JSON.parse(localStorage.user).id }) }, components: { NavbarMinimal } } </script> <style scoped></style>","title":"ProfileView.vue"},{"location":"LR4/#components","text":"","title":"Components"},{"location":"LR4/#navbarminimalvue","text":"<template> <div class=\"container-fluid my-navbar sticky-top\"> <nav class=\"navbar navbar-light\"> <router-link to=\"/\" class=\"navbar-brand\"> <img src=\"@/assets/logo.png\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\" /> Picterest </router-link> <ProfileBlock></ProfileBlock> </nav> </div> </template> <script> import ProfileBlock from '@/components/ProfileBlock' export default { name: 'TheNavbarMinimal', components: { ProfileBlock } } </script> <style scoped></style>","title":"NavbarMinimal.vue"},{"location":"LR4/#navbarwithfiltersvue","text":"<template> <div class=\"container-fluid my-navbar sticky-top\"> <nav class=\"navbar navbar-light\"> <router-link to=\"/\" class=\"navbar-brand\"> <img src=\"@/assets/logo.png\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\" /> Picterest </router-link> <ProfileBlock></ProfileBlock> </nav> </div> </template> <script> import ProfileBlock from '@/components/ProfileBlock' export default { name: 'TheNavbarMinimal', components: { ProfileBlock } } </script> <style scoped></style>","title":"NavbarWithFilters.vue"},{"location":"LR4/#profileblockvue","text":"<template> <div class=\"d-flex align-items-center\"> <router-link to=\"/profile\" class=\"mx-2\"> <img src=\"@/assets/img/avatar.png\" alt=\"profile\" width=\"30\" height=\"30\"/> </router-link> <svg v-if=\"isLoggedIn\" @click=\"logout\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"black\" class=\"bi bi-box-arrow-right ml-3\" viewBox=\"0 0 16 16\"> <path fill-rule=\"evenodd\" d=\"M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z\"/> <path fill-rule=\"evenodd\" d=\"M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z\"/> </svg> </div> </template> <script> export default { name: 'ProfileBlock', data () { return { isLoggedIn: false } }, mounted () { if (localStorage.getItem('accessToken')) { this.isLoggedIn = true } }, methods: { logout () { localStorage.removeItem('accessToken') localStorage.removeItem('user') this.$router.push('/login') } } } </script> <style scoped> </style>","title":"ProfileBlock.vue"},{"location":"LR4/#store","text":"","title":"Store"},{"location":"LR4/#indexjs","text":"import Vue from 'vue' import Vuex from 'vuex' import axios from 'axios' Vue.use(Vuex) const accessKey = '4WtZzqzkj1jpOdx3igqSGJuGBWg2gheh_QvIARzn40M' export default new Vuex.Store({ state: { photos: null, postPhoto: null, likedPhotos: null }, getters: { photos (state) { return state.photos }, postPhoto (state) { return state.postPhoto }, likedPhotos (state) { return state.likedPhotos } }, mutations: { setPhotos (state, payload) { state.photos = payload }, setPostPhoto (state, payload) { state.postPhoto = payload }, setLikedPhotos (state, payload) { state.likedPhotos = payload } }, actions: { async searchPhotos (context, { query, filters }) { if (query == null) { return } if (filters.color === null) { delete filters.color } try { const response = await axios.get('https://api.unsplash.com/search/photos', { params: { client_id: accessKey, per_page: 20, query, ...filters } }) if (response.status === 200) { context.commit('setPhotos', response.data.results) } } catch (e) { console.log(e) } }, async getPhotos (context) { try { const response = await axios.get('https://api.unsplash.com/photos', { params: { client_id: accessKey, order_by: 'popular', per_page: 20 } }) if (response.status === 200) { context.commit('setPhotos', response.data) } } catch (e) { console.log(e) } }, async loadPhoto (context, id) { try { const response = await axios.get('https://api.unsplash.com/photos/' + id, { params: { client_id: accessKey } }) if (response.status === 200) { context.commit('setPostPhoto', response.data) } } catch (e) { console.log(e) } }, async getLikedPhotos (context, { accessToken, userId }) { try { const response = await axios.get('http://localhost:3000/600/likedPhotos?userId=' + userId, { headers: { Authorization: 'Bearer ' + accessToken } }) if (response.status === 200) { context.commit('setLikedPhotos', response.data) } } catch (e) { console.log(e) } } } })","title":"index.js"},{"location":"LR4/#router","text":"","title":"Router"},{"location":"LR4/#indexjs_1","text":"Vue.use(VueRouter) const routes = [ { path: '/', name: 'Dashboard', component: DashboardView }, { path: '/login', name: 'Login', component: LoginView }, { path: '/post/:id', name: 'Post', component: PostView }, { path: '/profile', name: 'Profile', component: ProfileView }, { path: '/signup', name: 'SignUpView', component: SignUpView } ] const router = new VueRouter({ mode: 'history', base: process.env.BASE_URL, routes }) export default router","title":"index.js"}]}