{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u21161 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0417\u0430\u0439\u0446\u0435\u0432\u0430 \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f K33402","title":"\u0417\u0430\u0433\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#no1-web-","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u21161 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"#k33402","text":"","title":"\u0417\u0430\u0439\u0446\u0435\u0432\u0430 \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f K33402"},{"location":"lab2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0412\u0438\u0434\u0435\u043e\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 (\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b) \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 (\u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434) \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.conf import settings from django.core.validators import MaxValueValidator , MinValueValidator class Passenger ( AbstractUser ): last_name = models . CharField ( max_length = 30 ) first_name = models . CharField ( max_length = 30 ) middle_name = models . CharField ( max_length = 30 , null = True , blank = True ) date_of_birth = models . DateTimeField ( null = True , blank = True ) passport_number = models . CharField ( max_length = 15 , unique = True ) class Country ( models . Model ): name = models . CharField ( max_length = 30 ) def __str__ ( self ): return self . name class Airline ( models . Model ): country = models . ForeignKey ( Country , on_delete = models . PROTECT ) name = models . CharField ( max_length = 30 ) def __str__ ( self ): return self . name class Flight ( models . Model ): TYPE_CHOICES = [ ( 'IN' , 'Arrival' ), ( 'OUT' , 'Departure' ), ] passengers = models . ManyToManyField ( Passenger , through = 'Ticket' , related_name = 'passenger' ) reviewers = models . ManyToManyField ( Passenger , through = 'Review' , related_name = 'reviewer' ) airline = models . ForeignKey ( Airline , on_delete = models . PROTECT ) flight_number = models . CharField ( max_length = 6 , unique = True ) hotel = models . CharField ( max_length = 30 , null = True , blank = True ) departure_time = models . DateTimeField () arrival_time = models . DateTimeField () type = models . CharField ( max_length = 30 , choices = TYPE_CHOICES ) gate_number = models . CharField ( max_length = 3 ) def __str__ ( self ): return self . flight_number class Ticket ( models . Model ): passenger = models . ForeignKey ( Passenger , on_delete = models . PROTECT ) flight = models . ForeignKey ( Flight , on_delete = models . PROTECT ) ticket_number = models . CharField ( max_length = 10 , unique = True ) seat = models . CharField ( max_length = 6 , null = True , blank = True ) def __str__ ( self ): return self . ticket_number class Review ( models . Model ): passenger = models . ForeignKey ( Passenger , on_delete = models . CASCADE ) flight = models . ForeignKey ( Flight , on_delete = models . CASCADE ) text = models . CharField ( max_length = 280 ) rating = models . PositiveSmallIntegerField ( validators = [ MaxValueValidator ( limit_value = 10 ), MinValueValidator ( limit_value = 1 ) ] ) forms.py from django import forms from django.contrib.auth.forms import UserCreationForm from .models import Passenger class NewUserForm ( UserCreationForm ): class Meta : model = Passenger fields = ( 'username' , 'last_name' , 'first_name' , 'middle_name' , 'date_of_birth' , 'passport_number' ) def save ( self , commit = True ): user = super ( NewUserForm , self ) . save ( commit = False ) if commit : user . save () return user urls.py from django.urls import path from . import views urlpatterns = [ path ( '' , views . index ), path ( 'auth' , views . auth ), path ( 'logout' , views . logout_view ), path ( 'signup' , views . register_request ), path ( 'table' , views . FlightList . as_view ()), path ( 'flight/<int:flight_id>/order' , views . order ), path ( 'flight/<str:flight_number>/review/create' , views . review ), path ( 'flight/<str:flight_number>/review' , views . reviews ), path ( 'flight/<str:flight_number>/passenger' , views . passengers ), path ( 'ticket' , views . tickets ), path ( 'ticket/<int:pk>/delete' , views . TicketDelete . as_view ()), path ( 'ticket/<int:pk>/update' , views . TicketUpdate . as_view ()), ] views.py from table.models import Passenger , Flight , Ticket , Review from django.shortcuts import render , redirect from django.contrib.auth import authenticate , login , logout from django.views.generic.edit import UpdateView , CreateView , DeleteView from django.views.generic.list import ListView from .forms import NewUserForm import random import string def index ( request ): if request . user . is_authenticated : return render ( request , 'index.html' ) else : return render ( request , 'auth.html' ) def auth ( request ): username = request . POST [ 'username' ] password = request . POST [ 'password' ] user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( '/' ) else : return render ( request , 'auth.html' , { 'error' : '\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043b\u043e\u0433\u0438\u043d \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c' }) def logout_view ( request ): logout ( request ) return redirect ( '/' ) def register_request ( request ): if request . method == \"POST\" : form = NewUserForm ( request . POST ) if form . is_valid (): user = form . save () login ( request , user ) return redirect ( '/' ) form = NewUserForm () return render ( request = request , template_name = \"signup.html\" , context = { \"register_form\" : form }) def tickets ( request ): tickets = Ticket . objects . filter ( passenger = request . user . id ) return render ( request , 'tickets.html' , { 'tickets' : tickets }) def order ( request , flight_id ): if request . method == \"POST\" : fl = Flight . objects . get ( flight_number = request . POST [ 'flight' ]) try : tick = Ticket . objects . get ( flight = fl . id , seat = request . POST [ 'seat' ]) except Ticket . DoesNotExist : ticket = Ticket ( passenger = Passenger . objects . get ( username = request . user . username ), flight = fl , seat = request . POST [ 'seat' ], ticket_number = '' . join ( random . choice ( string . ascii_uppercase + string . digits ) for _ in range ( 6 )), ) ticket . save () return redirect ( '/ticket' ) return render ( request , 'order.html' , { 'error' : '\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0437\u0430\u043d\u044f\u0442\u043e' , 'flight' : fl }) try : flight = Flight . objects . get ( pk = flight_id ) except Flight . DoesNotExist : raise Http404 ( \"Flight does not exist\" ) return render ( request , 'order.html' , { 'flight' : flight }) def review ( request , flight_number ): if request . method == \"POST\" : fl = Flight . objects . get ( flight_number = request . POST [ 'flight' ]) try : rev = Review . objects . get ( flight = fl . id , passenger = request . user . id ) except Review . DoesNotExist : revNew = Review ( passenger = Passenger . objects . get ( username = request . user . username ), flight = fl , text = request . POST [ 'text' ], rating = request . POST [ 'rating' ], ) revNew . save () return redirect ( '/ticket' ) return render ( request , 'review.html' , { 'error' : '\u0412\u044b \u0443\u0436\u0435 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u043b\u0438 \u043e\u0442\u0437\u044b\u0432 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0439\u0441.' , 'flight' : fl }) try : flight = Flight . objects . get ( flight_number = flight_number ) except Flight . DoesNotExist : raise Http404 ( \"Flight does not exist\" ) try : rev = Review . objects . get ( flight = flight . id , passenger = request . user . id ) except Review . DoesNotExist : return render ( request , 'review.html' , { 'flight' : flight }) return render ( request , 'review.html' , { 'error' : '\u0412\u044b \u0443\u0436\u0435 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u043b\u0438 \u043e\u0442\u0437\u044b\u0432 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0439\u0441.' , 'flight' : flight }) def reviews ( request , flight_number ): flight = Flight . objects . get ( flight_number = flight_number ) reviews = Review . objects . filter ( flight = flight . id ) return render ( request , 'reviews.html' , { 'reviews' : reviews , 'flight' : flight }) def passengers ( request , flight_number ): if request . user . username != 'admin' : raise Http403 ( \"\u041e\u0448\u0438\u0431\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\" ) flight = Flight . objects . get ( flight_number = flight_number ) tickets = Ticket . objects . filter ( flight = flight . id ) passengers = Passenger . objects . filter ( id__in = [ t . passenger . id for t in tickets ]) return render ( request , 'passengers.html' , { 'passengers' : passengers , 'flight' : flight }) class FlightList ( ListView ): model = Flight template_name = 'table.html' class TicketDelete ( DeleteView ): model = Ticket template_name = 'ticket_delete.html' success_url = '/ticket' class TicketUpdate ( UpdateView ): model = Ticket fields = [ 'seat' ] success_url = '/ticket' template_name = 'ticket_update.html'","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab2/#_1","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 (\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b) \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 (\u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434)","title":"\u0412\u0438\u0434\u0435\u043e\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b"},{"location":"lab2/#_2","text":"models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.conf import settings from django.core.validators import MaxValueValidator , MinValueValidator class Passenger ( AbstractUser ): last_name = models . CharField ( max_length = 30 ) first_name = models . CharField ( max_length = 30 ) middle_name = models . CharField ( max_length = 30 , null = True , blank = True ) date_of_birth = models . DateTimeField ( null = True , blank = True ) passport_number = models . CharField ( max_length = 15 , unique = True ) class Country ( models . Model ): name = models . CharField ( max_length = 30 ) def __str__ ( self ): return self . name class Airline ( models . Model ): country = models . ForeignKey ( Country , on_delete = models . PROTECT ) name = models . CharField ( max_length = 30 ) def __str__ ( self ): return self . name class Flight ( models . Model ): TYPE_CHOICES = [ ( 'IN' , 'Arrival' ), ( 'OUT' , 'Departure' ), ] passengers = models . ManyToManyField ( Passenger , through = 'Ticket' , related_name = 'passenger' ) reviewers = models . ManyToManyField ( Passenger , through = 'Review' , related_name = 'reviewer' ) airline = models . ForeignKey ( Airline , on_delete = models . PROTECT ) flight_number = models . CharField ( max_length = 6 , unique = True ) hotel = models . CharField ( max_length = 30 , null = True , blank = True ) departure_time = models . DateTimeField () arrival_time = models . DateTimeField () type = models . CharField ( max_length = 30 , choices = TYPE_CHOICES ) gate_number = models . CharField ( max_length = 3 ) def __str__ ( self ): return self . flight_number class Ticket ( models . Model ): passenger = models . ForeignKey ( Passenger , on_delete = models . PROTECT ) flight = models . ForeignKey ( Flight , on_delete = models . PROTECT ) ticket_number = models . CharField ( max_length = 10 , unique = True ) seat = models . CharField ( max_length = 6 , null = True , blank = True ) def __str__ ( self ): return self . ticket_number class Review ( models . Model ): passenger = models . ForeignKey ( Passenger , on_delete = models . CASCADE ) flight = models . ForeignKey ( Flight , on_delete = models . CASCADE ) text = models . CharField ( max_length = 280 ) rating = models . PositiveSmallIntegerField ( validators = [ MaxValueValidator ( limit_value = 10 ), MinValueValidator ( limit_value = 1 ) ] ) forms.py from django import forms from django.contrib.auth.forms import UserCreationForm from .models import Passenger class NewUserForm ( UserCreationForm ): class Meta : model = Passenger fields = ( 'username' , 'last_name' , 'first_name' , 'middle_name' , 'date_of_birth' , 'passport_number' ) def save ( self , commit = True ): user = super ( NewUserForm , self ) . save ( commit = False ) if commit : user . save () return user urls.py from django.urls import path from . import views urlpatterns = [ path ( '' , views . index ), path ( 'auth' , views . auth ), path ( 'logout' , views . logout_view ), path ( 'signup' , views . register_request ), path ( 'table' , views . FlightList . as_view ()), path ( 'flight/<int:flight_id>/order' , views . order ), path ( 'flight/<str:flight_number>/review/create' , views . review ), path ( 'flight/<str:flight_number>/review' , views . reviews ), path ( 'flight/<str:flight_number>/passenger' , views . passengers ), path ( 'ticket' , views . tickets ), path ( 'ticket/<int:pk>/delete' , views . TicketDelete . as_view ()), path ( 'ticket/<int:pk>/update' , views . TicketUpdate . as_view ()), ] views.py from table.models import Passenger , Flight , Ticket , Review from django.shortcuts import render , redirect from django.contrib.auth import authenticate , login , logout from django.views.generic.edit import UpdateView , CreateView , DeleteView from django.views.generic.list import ListView from .forms import NewUserForm import random import string def index ( request ): if request . user . is_authenticated : return render ( request , 'index.html' ) else : return render ( request , 'auth.html' ) def auth ( request ): username = request . POST [ 'username' ] password = request . POST [ 'password' ] user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( '/' ) else : return render ( request , 'auth.html' , { 'error' : '\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043b\u043e\u0433\u0438\u043d \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c' }) def logout_view ( request ): logout ( request ) return redirect ( '/' ) def register_request ( request ): if request . method == \"POST\" : form = NewUserForm ( request . POST ) if form . is_valid (): user = form . save () login ( request , user ) return redirect ( '/' ) form = NewUserForm () return render ( request = request , template_name = \"signup.html\" , context = { \"register_form\" : form }) def tickets ( request ): tickets = Ticket . objects . filter ( passenger = request . user . id ) return render ( request , 'tickets.html' , { 'tickets' : tickets }) def order ( request , flight_id ): if request . method == \"POST\" : fl = Flight . objects . get ( flight_number = request . POST [ 'flight' ]) try : tick = Ticket . objects . get ( flight = fl . id , seat = request . POST [ 'seat' ]) except Ticket . DoesNotExist : ticket = Ticket ( passenger = Passenger . objects . get ( username = request . user . username ), flight = fl , seat = request . POST [ 'seat' ], ticket_number = '' . join ( random . choice ( string . ascii_uppercase + string . digits ) for _ in range ( 6 )), ) ticket . save () return redirect ( '/ticket' ) return render ( request , 'order.html' , { 'error' : '\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0437\u0430\u043d\u044f\u0442\u043e' , 'flight' : fl }) try : flight = Flight . objects . get ( pk = flight_id ) except Flight . DoesNotExist : raise Http404 ( \"Flight does not exist\" ) return render ( request , 'order.html' , { 'flight' : flight }) def review ( request , flight_number ): if request . method == \"POST\" : fl = Flight . objects . get ( flight_number = request . POST [ 'flight' ]) try : rev = Review . objects . get ( flight = fl . id , passenger = request . user . id ) except Review . DoesNotExist : revNew = Review ( passenger = Passenger . objects . get ( username = request . user . username ), flight = fl , text = request . POST [ 'text' ], rating = request . POST [ 'rating' ], ) revNew . save () return redirect ( '/ticket' ) return render ( request , 'review.html' , { 'error' : '\u0412\u044b \u0443\u0436\u0435 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u043b\u0438 \u043e\u0442\u0437\u044b\u0432 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0439\u0441.' , 'flight' : fl }) try : flight = Flight . objects . get ( flight_number = flight_number ) except Flight . DoesNotExist : raise Http404 ( \"Flight does not exist\" ) try : rev = Review . objects . get ( flight = flight . id , passenger = request . user . id ) except Review . DoesNotExist : return render ( request , 'review.html' , { 'flight' : flight }) return render ( request , 'review.html' , { 'error' : '\u0412\u044b \u0443\u0436\u0435 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u043b\u0438 \u043e\u0442\u0437\u044b\u0432 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0439\u0441.' , 'flight' : flight }) def reviews ( request , flight_number ): flight = Flight . objects . get ( flight_number = flight_number ) reviews = Review . objects . filter ( flight = flight . id ) return render ( request , 'reviews.html' , { 'reviews' : reviews , 'flight' : flight }) def passengers ( request , flight_number ): if request . user . username != 'admin' : raise Http403 ( \"\u041e\u0448\u0438\u0431\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\" ) flight = Flight . objects . get ( flight_number = flight_number ) tickets = Ticket . objects . filter ( flight = flight . id ) passengers = Passenger . objects . filter ( id__in = [ t . passenger . id for t in tickets ]) return render ( request , 'passengers.html' , { 'passengers' : passengers , 'flight' : flight }) class FlightList ( ListView ): model = Flight template_name = 'table.html' class TicketDelete ( DeleteView ): model = Ticket template_name = 'ticket_delete.html' success_url = '/ticket' class TicketUpdate ( UpdateView ): model = Ticket fields = [ 'seat' ] success_url = '/ticket' template_name = 'ticket_update.html'","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430"},{"location":"lab3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u21163 \u0412\u044b\u0431\u043e\u0440 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0430 \u0432\u044b\u0431\u0440\u0430\u043b\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\". \u0421\u0445\u0435\u043c\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 Erwin Data Model: \u0421\u0445\u0435\u043c\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 pgAdmin: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django ORM: models.py from django.db import models from django.contrib.auth.models import AbstractUser class BookCategory ( models . Model ): name = models . CharField ( max_length = 100 ) def __str__ ( self ): return self . name class Book ( models . Model ): book_category = models . ForeignKey ( BookCategory , on_delete = models . PROTECT ) title = models . CharField ( max_length = 100 ) isbn = models . BigIntegerField () page_count = models . IntegerField () price = models . IntegerField () has_illustrations = models . BooleanField ( null = True , blank = True ) def __str__ ( self ): return self . title class Author ( models . Model ): books = models . ManyToManyField ( Book , through = 'Authorship' , related_name = 'author' ) last_name = models . CharField ( max_length = 100 ) first_name = models . CharField ( max_length = 100 ) patronymic = models . CharField ( max_length = 100 , null = True , blank = True ) email = models . CharField ( max_length = 100 , null = True , blank = True ) def __str__ ( self ): return self . last_name + ' ' + self . first_name class Authorship ( models . Model ): author = models . ForeignKey ( Author , on_delete = models . PROTECT ) book = models . ForeignKey ( Book , on_delete = models . PROTECT ) order_number = models . IntegerField ( null = True , blank = True ) def __str__ ( self ): return str ( self . author ) + ' ' + str ( self . book ) + ' ' + str ( self . order_number ) class Edition ( models . Model ): book = models . ForeignKey ( Book , on_delete = models . PROTECT ) date_created = models . DateTimeField () volume = models . IntegerField () def __str__ ( self ): return str ( self . book ) + ' ' + str ( self . id ) class OrderManager ( AbstractUser ): last_name = models . CharField ( max_length = 100 ) first_name = models . CharField ( max_length = 100 ) phone = models . BigIntegerField () position = models . CharField ( max_length = 30 ) email = models . CharField ( max_length = 100 ) patronymic = models . CharField ( max_length = 100 , null = True , blank = True ) REQUIRED_FIELDS = [ 'last_name' , 'first_name' , 'phone' , 'position' , 'patronymic' , 'email' ] class Customer ( models . Model ): orders = models . ManyToManyField ( OrderManager , through = 'BooksOrder' , related_name = 'customer' ) last_name = models . CharField ( max_length = 100 ) first_name = models . CharField ( max_length = 100 ) phone = models . BigIntegerField () address = models . CharField ( max_length = 300 ) patronymic = models . CharField ( max_length = 100 , null = True , blank = True ) def __str__ ( self ): return str ( self . last_name ) + ' ' + str ( self . first_name ) class BooksOrder ( models . Model ): books = models . ManyToManyField ( Book , through = 'OrderBook' , related_name = 'books_order' ) customer = models . ForeignKey ( Customer , on_delete = models . PROTECT ) order_manager = models . ForeignKey ( OrderManager , on_delete = models . PROTECT ) date_created = models . DateTimeField () date_until = models . DateTimeField () status = models . CharField ( max_length = 20 ) class OrderBook ( models . Model ): books_order = models . ForeignKey ( BooksOrder , on_delete = models . PROTECT ) book = models . ForeignKey ( Book , on_delete = models . PROTECT ) volume = models . IntegerField () \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework serializers.py from rest_framework import serializers from .models import * class BookCategorySerializer ( serializers . ModelSerializer ): class Meta : model = BookCategory fields = \"__all__\" class AuthorListSerializer ( serializers . ModelSerializer ): class Meta : model = Author fields = ( \"id\" , \"first_name\" , \"last_name\" , \"patronymic\" , \"email\" ) class BookListSerializer ( serializers . ModelSerializer ): class Meta : model = Book fields = \"__all__\" class BookSerializer ( serializers . ModelSerializer ): book_category = BookCategorySerializer () class Meta : model = Book fields = \"__all__\" class AuthorSerializer ( serializers . ModelSerializer ): books = BookSerializer ( many = True ) class Meta : model = Author fields = \"__all__\" class AuthorshipListSerializer ( serializers . ModelSerializer ): class Meta : model = Authorship fields = \"__all__\" class AuthorshipSerializer ( serializers . ModelSerializer ): author = AuthorListSerializer () book = BookSerializer () class Meta : model = Authorship fields = \"__all__\" class EditionListSerializer ( serializers . ModelSerializer ): class Meta : model = Edition fields = \"__all__\" class EditionSerializer ( serializers . ModelSerializer ): book = BookSerializer () class Meta : model = Edition fields = \"__all__\" depth = 1 class OrderManagerListSerializer ( serializers . ModelSerializer ): class Meta : model = OrderManager fields = \"__all__\" class OrderManagerSerializer ( serializers . ModelSerializer ): class Meta : model = OrderManager fields = \"__all__\" class CustomerListSerializer ( serializers . ModelSerializer ): class Meta : model = Customer fields = \"__all__\" class BooksOrderListSerializer ( serializers . ModelSerializer ): class Meta : model = BooksOrder fields = \"__all__\" class BooksOrderSerializer ( serializers . ModelSerializer ): class Meta : model = BooksOrder fields = \"__all__\" class CustomerSerializer ( serializers . ModelSerializer ): class Meta : model = Customer fields = \"__all__\" class OrderBookListSerializer ( serializers . ModelSerializer ): class Meta : model = OrderBook fields = \"__all__\" class OrderBookSerializer ( serializers . ModelSerializer ): class Meta : model = OrderBook fields = \"__all__\" views.py from django.shortcuts import render from rest_framework import generics , permissions from .serializers import * from .models import * from drf_yasg.views import get_schema_view from drf_yasg import openapi class BookCategoryListAPIView ( generics . ListAPIView ): serializer_class = BookCategorySerializer queryset = BookCategory . objects . all () class BookCategoryRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = BookCategorySerializer queryset = BookCategory . objects . all () class BookCategoryUpdateAPIView ( generics . UpdateAPIView ): serializer_class = BookCategorySerializer queryset = BookCategory . objects . all () class BookCategoryDestroyAPIView ( generics . DestroyAPIView ): serializer_class = BookCategorySerializer queryset = BookCategory . objects . all () class AuthorListAPIView ( generics . ListAPIView ): serializer_class = AuthorListSerializer queryset = Author . objects . all () class AuthorRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = AuthorSerializer queryset = Author . objects . all () class AuthorUpdateAPIView ( generics . UpdateAPIView ): serializer_class = AuthorListSerializer queryset = Author . objects . all () class AuthorDestroyAPIView ( generics . DestroyAPIView ): serializer_class = AuthorListSerializer queryset = Author . objects . all () class BookListAPIView ( generics . ListAPIView ): serializer_class = BookListSerializer queryset = Book . objects . all () class BookRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class BookUpdateAPIView ( generics . UpdateAPIView ): serializer_class = BookListSerializer queryset = Book . objects . all () class BookDestroyAPIView ( generics . DestroyAPIView ): serializer_class = BookListSerializer queryset = Book . objects . all () class AuthorshipListAPIView ( generics . ListAPIView ): serializer_class = AuthorshipListSerializer queryset = Authorship . objects . all () class AuthorshipRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = AuthorshipSerializer queryset = Authorship . objects . all () class AuthorshipUpdateAPIView ( generics . UpdateAPIView ): serializer_class = AuthorshipListSerializer queryset = Authorship . objects . all () class AuthorshipDestroyAPIView ( generics . DestroyAPIView ): serializer_class = AuthorshipListSerializer queryset = Authorship . objects . all () class EditionListAPIView ( generics . ListAPIView ): serializer_class = EditionListSerializer queryset = Edition . objects . all () class EditionRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = EditionSerializer queryset = Edition . objects . all () class EditionUpdateAPIView ( generics . UpdateAPIView ): serializer_class = EditionListSerializer queryset = Edition . objects . all () class EditionDestroyAPIView ( generics . DestroyAPIView ): serializer_class = EditionListSerializer queryset = Edition . objects . all () class OrderManagerListAPIView ( generics . ListAPIView ): serializer_class = OrderManagerListSerializer queryset = OrderManager . objects . all () class OrderManagerRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = OrderManagerSerializer queryset = OrderManager . objects . all () class OrderManagerUpdateAPIView ( generics . UpdateAPIView ): serializer_class = OrderManagerListSerializer queryset = OrderManager . objects . all () class OrderManagerDestroyAPIView ( generics . DestroyAPIView ): serializer_class = OrderManagerListSerializer queryset = OrderManager . objects . all () class CustomerListAPIView ( generics . ListAPIView ): serializer_class = CustomerListSerializer queryset = Customer . objects . all () class CustomerRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = CustomerSerializer queryset = Customer . objects . all () class CustomerUpdateAPIView ( generics . UpdateAPIView ): serializer_class = CustomerListSerializer queryset = Customer . objects . all () class CustomerDestroyAPIView ( generics . DestroyAPIView ): serializer_class = CustomerListSerializer queryset = Customer . objects . all () class BooksOrderListAPIView ( generics . ListAPIView ): serializer_class = BooksOrderListSerializer queryset = BooksOrder . objects . all () class BooksOrderRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = BooksOrderSerializer queryset = BooksOrder . objects . all () class BooksOrderUpdateAPIView ( generics . UpdateAPIView ): serializer_class = BooksOrderListSerializer queryset = BooksOrder . objects . all () class BooksOrderDestroyAPIView ( generics . DestroyAPIView ): serializer_class = BooksOrderListSerializer queryset = BooksOrder . objects . all () class OrderBookListAPIView ( generics . ListAPIView ): serializer_class = OrderBookListSerializer queryset = OrderBook . objects . all () class OrderBookRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = OrderBookSerializer queryset = OrderBook . objects . all () class OrderBookUpdateAPIView ( generics . UpdateAPIView ): serializer_class = OrderBookListSerializer queryset = OrderBook . objects . all () class OrderBookDestroyAPIView ( generics . DestroyAPIView ): serializer_class = OrderBookListSerializer queryset = OrderBook . objects . all () rest/urls.py from django.urls import path from .views import * urlpatterns = [ path ( 'book-category' , BookCategoryListAPIView . as_view ()), path ( 'book-category/<int:pk>' , BookCategoryRetrieveAPIView . as_view ()), path ( 'book-category/<int:pk>/remove' , BookCategoryDestroyAPIView . as_view ()), path ( 'book-category/<int:pk>/edit' , BookCategoryUpdateAPIView . as_view ()), path ( 'author' , AuthorListAPIView . as_view ()), path ( 'author/<int:pk>' , AuthorRetrieveAPIView . as_view ()), path ( 'author/<int:pk>/remove' , AuthorDestroyAPIView . as_view ()), path ( 'author/<int:pk>/edit' , AuthorUpdateAPIView . as_view ()), path ( 'book' , BookListAPIView . as_view ()), path ( 'book/<int:pk>' , BookRetrieveAPIView . as_view ()), path ( 'book/<int:pk>/remove' , BookDestroyAPIView . as_view ()), path ( 'book/<int:pk>/edit' , BookUpdateAPIView . as_view ()), path ( 'authorship' , AuthorshipListAPIView . as_view ()), path ( 'authorship/<int:pk>' , AuthorshipRetrieveAPIView . as_view ()), path ( 'authorship/<int:pk>/remove' , AuthorshipDestroyAPIView . as_view ()), path ( 'authorship/<int:pk>/edit' , AuthorshipUpdateAPIView . as_view ()), path ( 'edition' , EditionListAPIView . as_view ()), path ( 'edition/<int:pk>' , EditionRetrieveAPIView . as_view ()), path ( 'edition/<int:pk>/remove' , EditionDestroyAPIView . as_view ()), path ( 'edition/<int:pk>/edit' , EditionUpdateAPIView . as_view ()), path ( 'order-manager' , OrderManagerListAPIView . as_view ()), path ( 'order-manager/<int:pk>' , OrderManagerRetrieveAPIView . as_view ()), path ( 'order-manager/<int:pk>/remove' , OrderManagerDestroyAPIView . as_view ()), path ( 'order-manager/<int:pk>/edit' , OrderManagerUpdateAPIView . as_view ()), path ( 'customer' , CustomerListAPIView . as_view ()), path ( 'customer/<int:pk>' , CustomerRetrieveAPIView . as_view ()), path ( 'customer/<int:pk>/remove' , CustomerDestroyAPIView . as_view ()), path ( 'customer/<int:pk>/edit' , CustomerUpdateAPIView . as_view ()), path ( 'books-order' , BooksOrderListAPIView . as_view ()), path ( 'books-order/<int:pk>' , BooksOrderRetrieveAPIView . as_view ()), path ( 'books-order/<int:pk>/remove' , BooksOrderDestroyAPIView . as_view ()), path ( 'books-order/<int:pk>/edit' , BooksOrderUpdateAPIView . as_view ()), path ( 'order-book' , OrderBookListAPIView . as_view ()), path ( 'order-book/<int:pk>' , OrderBookRetrieveAPIView . as_view ()), path ( 'order-book/<int:pk>/remove' , OrderBookDestroyAPIView . as_view ()), path ( 'order-book/<int:pk>/edit' , OrderBookUpdateAPIView . as_view ()), path ( 'doc/swagger/' , schema_view . with_ui ( 'swagger' , cache_timeout = 0 ), name = 'schema-swagger-ui' ), path ( 'doc/redoc' , schema_view . with_ui ( 'redoc' , cache_timeout = 0 ), name = 'schema-redoc' ) ] \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 / \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c / \u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Djoser settings.py ... INSTALLED_APPS = [ \"django.contrib.admin\" , \"django.contrib.auth\" , \"django.contrib.contenttypes\" , \"django.contrib.sessions\" , \"django.contrib.messages\" , \"django.contrib.staticfiles\" , \"rest_framework\" , \"rest_framework.authtoken\" , \"rest\" , \"drf_yasg\" , \"djoser\" ] ... publisher/urls.py ... urlpatterns = [ path ( \"admin/\" , admin . site . urls ), path ( \"api/v1/\" , include ( 'rest.urls' )), path ( \"auth/\" , include ( 'djoser.urls' )), re_path ( r '^auth/' , include ( 'djoser.urls.authtoken' )), ]","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab3/#no3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u21163"},{"location":"lab3/#_1","text":"\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0430 \u0432\u044b\u0431\u0440\u0430\u043b\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u043e\u0433\u043e \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"\u0411\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\". \u0421\u0445\u0435\u043c\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 Erwin Data Model: \u0421\u0445\u0435\u043c\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 pgAdmin:","title":"\u0412\u044b\u0431\u043e\u0440 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab3/#_2","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django ORM: models.py from django.db import models from django.contrib.auth.models import AbstractUser class BookCategory ( models . Model ): name = models . CharField ( max_length = 100 ) def __str__ ( self ): return self . name class Book ( models . Model ): book_category = models . ForeignKey ( BookCategory , on_delete = models . PROTECT ) title = models . CharField ( max_length = 100 ) isbn = models . BigIntegerField () page_count = models . IntegerField () price = models . IntegerField () has_illustrations = models . BooleanField ( null = True , blank = True ) def __str__ ( self ): return self . title class Author ( models . Model ): books = models . ManyToManyField ( Book , through = 'Authorship' , related_name = 'author' ) last_name = models . CharField ( max_length = 100 ) first_name = models . CharField ( max_length = 100 ) patronymic = models . CharField ( max_length = 100 , null = True , blank = True ) email = models . CharField ( max_length = 100 , null = True , blank = True ) def __str__ ( self ): return self . last_name + ' ' + self . first_name class Authorship ( models . Model ): author = models . ForeignKey ( Author , on_delete = models . PROTECT ) book = models . ForeignKey ( Book , on_delete = models . PROTECT ) order_number = models . IntegerField ( null = True , blank = True ) def __str__ ( self ): return str ( self . author ) + ' ' + str ( self . book ) + ' ' + str ( self . order_number ) class Edition ( models . Model ): book = models . ForeignKey ( Book , on_delete = models . PROTECT ) date_created = models . DateTimeField () volume = models . IntegerField () def __str__ ( self ): return str ( self . book ) + ' ' + str ( self . id ) class OrderManager ( AbstractUser ): last_name = models . CharField ( max_length = 100 ) first_name = models . CharField ( max_length = 100 ) phone = models . BigIntegerField () position = models . CharField ( max_length = 30 ) email = models . CharField ( max_length = 100 ) patronymic = models . CharField ( max_length = 100 , null = True , blank = True ) REQUIRED_FIELDS = [ 'last_name' , 'first_name' , 'phone' , 'position' , 'patronymic' , 'email' ] class Customer ( models . Model ): orders = models . ManyToManyField ( OrderManager , through = 'BooksOrder' , related_name = 'customer' ) last_name = models . CharField ( max_length = 100 ) first_name = models . CharField ( max_length = 100 ) phone = models . BigIntegerField () address = models . CharField ( max_length = 300 ) patronymic = models . CharField ( max_length = 100 , null = True , blank = True ) def __str__ ( self ): return str ( self . last_name ) + ' ' + str ( self . first_name ) class BooksOrder ( models . Model ): books = models . ManyToManyField ( Book , through = 'OrderBook' , related_name = 'books_order' ) customer = models . ForeignKey ( Customer , on_delete = models . PROTECT ) order_manager = models . ForeignKey ( OrderManager , on_delete = models . PROTECT ) date_created = models . DateTimeField () date_until = models . DateTimeField () status = models . CharField ( max_length = 20 ) class OrderBook ( models . Model ): books_order = models . ForeignKey ( BooksOrder , on_delete = models . PROTECT ) book = models . ForeignKey ( Book , on_delete = models . PROTECT ) volume = models . IntegerField ()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab3/#api-django-rest-framework","text":"serializers.py from rest_framework import serializers from .models import * class BookCategorySerializer ( serializers . ModelSerializer ): class Meta : model = BookCategory fields = \"__all__\" class AuthorListSerializer ( serializers . ModelSerializer ): class Meta : model = Author fields = ( \"id\" , \"first_name\" , \"last_name\" , \"patronymic\" , \"email\" ) class BookListSerializer ( serializers . ModelSerializer ): class Meta : model = Book fields = \"__all__\" class BookSerializer ( serializers . ModelSerializer ): book_category = BookCategorySerializer () class Meta : model = Book fields = \"__all__\" class AuthorSerializer ( serializers . ModelSerializer ): books = BookSerializer ( many = True ) class Meta : model = Author fields = \"__all__\" class AuthorshipListSerializer ( serializers . ModelSerializer ): class Meta : model = Authorship fields = \"__all__\" class AuthorshipSerializer ( serializers . ModelSerializer ): author = AuthorListSerializer () book = BookSerializer () class Meta : model = Authorship fields = \"__all__\" class EditionListSerializer ( serializers . ModelSerializer ): class Meta : model = Edition fields = \"__all__\" class EditionSerializer ( serializers . ModelSerializer ): book = BookSerializer () class Meta : model = Edition fields = \"__all__\" depth = 1 class OrderManagerListSerializer ( serializers . ModelSerializer ): class Meta : model = OrderManager fields = \"__all__\" class OrderManagerSerializer ( serializers . ModelSerializer ): class Meta : model = OrderManager fields = \"__all__\" class CustomerListSerializer ( serializers . ModelSerializer ): class Meta : model = Customer fields = \"__all__\" class BooksOrderListSerializer ( serializers . ModelSerializer ): class Meta : model = BooksOrder fields = \"__all__\" class BooksOrderSerializer ( serializers . ModelSerializer ): class Meta : model = BooksOrder fields = \"__all__\" class CustomerSerializer ( serializers . ModelSerializer ): class Meta : model = Customer fields = \"__all__\" class OrderBookListSerializer ( serializers . ModelSerializer ): class Meta : model = OrderBook fields = \"__all__\" class OrderBookSerializer ( serializers . ModelSerializer ): class Meta : model = OrderBook fields = \"__all__\" views.py from django.shortcuts import render from rest_framework import generics , permissions from .serializers import * from .models import * from drf_yasg.views import get_schema_view from drf_yasg import openapi class BookCategoryListAPIView ( generics . ListAPIView ): serializer_class = BookCategorySerializer queryset = BookCategory . objects . all () class BookCategoryRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = BookCategorySerializer queryset = BookCategory . objects . all () class BookCategoryUpdateAPIView ( generics . UpdateAPIView ): serializer_class = BookCategorySerializer queryset = BookCategory . objects . all () class BookCategoryDestroyAPIView ( generics . DestroyAPIView ): serializer_class = BookCategorySerializer queryset = BookCategory . objects . all () class AuthorListAPIView ( generics . ListAPIView ): serializer_class = AuthorListSerializer queryset = Author . objects . all () class AuthorRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = AuthorSerializer queryset = Author . objects . all () class AuthorUpdateAPIView ( generics . UpdateAPIView ): serializer_class = AuthorListSerializer queryset = Author . objects . all () class AuthorDestroyAPIView ( generics . DestroyAPIView ): serializer_class = AuthorListSerializer queryset = Author . objects . all () class BookListAPIView ( generics . ListAPIView ): serializer_class = BookListSerializer queryset = Book . objects . all () class BookRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class BookUpdateAPIView ( generics . UpdateAPIView ): serializer_class = BookListSerializer queryset = Book . objects . all () class BookDestroyAPIView ( generics . DestroyAPIView ): serializer_class = BookListSerializer queryset = Book . objects . all () class AuthorshipListAPIView ( generics . ListAPIView ): serializer_class = AuthorshipListSerializer queryset = Authorship . objects . all () class AuthorshipRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = AuthorshipSerializer queryset = Authorship . objects . all () class AuthorshipUpdateAPIView ( generics . UpdateAPIView ): serializer_class = AuthorshipListSerializer queryset = Authorship . objects . all () class AuthorshipDestroyAPIView ( generics . DestroyAPIView ): serializer_class = AuthorshipListSerializer queryset = Authorship . objects . all () class EditionListAPIView ( generics . ListAPIView ): serializer_class = EditionListSerializer queryset = Edition . objects . all () class EditionRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = EditionSerializer queryset = Edition . objects . all () class EditionUpdateAPIView ( generics . UpdateAPIView ): serializer_class = EditionListSerializer queryset = Edition . objects . all () class EditionDestroyAPIView ( generics . DestroyAPIView ): serializer_class = EditionListSerializer queryset = Edition . objects . all () class OrderManagerListAPIView ( generics . ListAPIView ): serializer_class = OrderManagerListSerializer queryset = OrderManager . objects . all () class OrderManagerRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = OrderManagerSerializer queryset = OrderManager . objects . all () class OrderManagerUpdateAPIView ( generics . UpdateAPIView ): serializer_class = OrderManagerListSerializer queryset = OrderManager . objects . all () class OrderManagerDestroyAPIView ( generics . DestroyAPIView ): serializer_class = OrderManagerListSerializer queryset = OrderManager . objects . all () class CustomerListAPIView ( generics . ListAPIView ): serializer_class = CustomerListSerializer queryset = Customer . objects . all () class CustomerRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = CustomerSerializer queryset = Customer . objects . all () class CustomerUpdateAPIView ( generics . UpdateAPIView ): serializer_class = CustomerListSerializer queryset = Customer . objects . all () class CustomerDestroyAPIView ( generics . DestroyAPIView ): serializer_class = CustomerListSerializer queryset = Customer . objects . all () class BooksOrderListAPIView ( generics . ListAPIView ): serializer_class = BooksOrderListSerializer queryset = BooksOrder . objects . all () class BooksOrderRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = BooksOrderSerializer queryset = BooksOrder . objects . all () class BooksOrderUpdateAPIView ( generics . UpdateAPIView ): serializer_class = BooksOrderListSerializer queryset = BooksOrder . objects . all () class BooksOrderDestroyAPIView ( generics . DestroyAPIView ): serializer_class = BooksOrderListSerializer queryset = BooksOrder . objects . all () class OrderBookListAPIView ( generics . ListAPIView ): serializer_class = OrderBookListSerializer queryset = OrderBook . objects . all () class OrderBookRetrieveAPIView ( generics . RetrieveAPIView ): serializer_class = OrderBookSerializer queryset = OrderBook . objects . all () class OrderBookUpdateAPIView ( generics . UpdateAPIView ): serializer_class = OrderBookListSerializer queryset = OrderBook . objects . all () class OrderBookDestroyAPIView ( generics . DestroyAPIView ): serializer_class = OrderBookListSerializer queryset = OrderBook . objects . all () rest/urls.py from django.urls import path from .views import * urlpatterns = [ path ( 'book-category' , BookCategoryListAPIView . as_view ()), path ( 'book-category/<int:pk>' , BookCategoryRetrieveAPIView . as_view ()), path ( 'book-category/<int:pk>/remove' , BookCategoryDestroyAPIView . as_view ()), path ( 'book-category/<int:pk>/edit' , BookCategoryUpdateAPIView . as_view ()), path ( 'author' , AuthorListAPIView . as_view ()), path ( 'author/<int:pk>' , AuthorRetrieveAPIView . as_view ()), path ( 'author/<int:pk>/remove' , AuthorDestroyAPIView . as_view ()), path ( 'author/<int:pk>/edit' , AuthorUpdateAPIView . as_view ()), path ( 'book' , BookListAPIView . as_view ()), path ( 'book/<int:pk>' , BookRetrieveAPIView . as_view ()), path ( 'book/<int:pk>/remove' , BookDestroyAPIView . as_view ()), path ( 'book/<int:pk>/edit' , BookUpdateAPIView . as_view ()), path ( 'authorship' , AuthorshipListAPIView . as_view ()), path ( 'authorship/<int:pk>' , AuthorshipRetrieveAPIView . as_view ()), path ( 'authorship/<int:pk>/remove' , AuthorshipDestroyAPIView . as_view ()), path ( 'authorship/<int:pk>/edit' , AuthorshipUpdateAPIView . as_view ()), path ( 'edition' , EditionListAPIView . as_view ()), path ( 'edition/<int:pk>' , EditionRetrieveAPIView . as_view ()), path ( 'edition/<int:pk>/remove' , EditionDestroyAPIView . as_view ()), path ( 'edition/<int:pk>/edit' , EditionUpdateAPIView . as_view ()), path ( 'order-manager' , OrderManagerListAPIView . as_view ()), path ( 'order-manager/<int:pk>' , OrderManagerRetrieveAPIView . as_view ()), path ( 'order-manager/<int:pk>/remove' , OrderManagerDestroyAPIView . as_view ()), path ( 'order-manager/<int:pk>/edit' , OrderManagerUpdateAPIView . as_view ()), path ( 'customer' , CustomerListAPIView . as_view ()), path ( 'customer/<int:pk>' , CustomerRetrieveAPIView . as_view ()), path ( 'customer/<int:pk>/remove' , CustomerDestroyAPIView . as_view ()), path ( 'customer/<int:pk>/edit' , CustomerUpdateAPIView . as_view ()), path ( 'books-order' , BooksOrderListAPIView . as_view ()), path ( 'books-order/<int:pk>' , BooksOrderRetrieveAPIView . as_view ()), path ( 'books-order/<int:pk>/remove' , BooksOrderDestroyAPIView . as_view ()), path ( 'books-order/<int:pk>/edit' , BooksOrderUpdateAPIView . as_view ()), path ( 'order-book' , OrderBookListAPIView . as_view ()), path ( 'order-book/<int:pk>' , OrderBookRetrieveAPIView . as_view ()), path ( 'order-book/<int:pk>/remove' , OrderBookDestroyAPIView . as_view ()), path ( 'order-book/<int:pk>/edit' , OrderBookUpdateAPIView . as_view ()), path ( 'doc/swagger/' , schema_view . with_ui ( 'swagger' , cache_timeout = 0 ), name = 'schema-swagger-ui' ), path ( 'doc/redoc' , schema_view . with_ui ( 'redoc' , cache_timeout = 0 ), name = 'schema-redoc' ) ]","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework"},{"location":"lab3/#djoser","text":"settings.py ... INSTALLED_APPS = [ \"django.contrib.admin\" , \"django.contrib.auth\" , \"django.contrib.contenttypes\" , \"django.contrib.sessions\" , \"django.contrib.messages\" , \"django.contrib.staticfiles\" , \"rest_framework\" , \"rest_framework.authtoken\" , \"rest\" , \"drf_yasg\" , \"djoser\" ] ... publisher/urls.py ... urlpatterns = [ path ( \"admin/\" , admin . site . urls ), path ( \"api/v1/\" , include ( 'rest.urls' )), path ( \"auth/\" , include ( 'djoser.urls' )), re_path ( r '^auth/' , include ( 'djoser.urls.authtoken' )), ]","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 / \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c / \u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Djoser"},{"location":"lab3/api/","text":"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u043a\u043d\u0438\u0433\u0438 \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043a\u043d\u0438\u0433\u0430\u0445 URL : /api/v1/book Method : GET Auth required : YES Permissions required : NO Data constraints : {} Success Responses Code : 200 OK Content : {[]} [ { \"id\" : 1 , \"title\" : \"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\" , \"isbn\" : 9785941577705 , \"page_count\" : 464 , \"price\" : 777 , \"has_illustrations\" : true , \"book_category\" : 1 }, { \"id\" : 2 , \"title\" : \"\u041a\u043e\u0434. \u0422\u0430\u0439\u043d\u044b\u0439 \u044f\u0437\u044b\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0438\" , \"isbn\" : 9780735605053 , \"page_count\" : 393 , \"price\" : 1299 , \"has_illustrations\" : false , \"book_category\" : 5 }, { \"id\" : 3 , \"title\" : \"\u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u043f\u043e C++, 4-\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u0435\" , \"isbn\" : 9785845904898 , \"page_count\" : 800 , \"price\" : 999 , \"has_illustrations\" : false , \"book_category\" : 2 } ]","title":"api/v1/book[GET]"},{"location":"lab3/api/#_1","text":"\u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043a\u043d\u0438\u0433\u0430\u0445 URL : /api/v1/book Method : GET Auth required : YES Permissions required : NO Data constraints : {}","title":"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u043a\u043d\u0438\u0433\u0438"},{"location":"lab3/api/#success-responses","text":"Code : 200 OK Content : {[]} [ { \"id\" : 1 , \"title\" : \"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\" , \"isbn\" : 9785941577705 , \"page_count\" : 464 , \"price\" : 777 , \"has_illustrations\" : true , \"book_category\" : 1 }, { \"id\" : 2 , \"title\" : \"\u041a\u043e\u0434. \u0422\u0430\u0439\u043d\u044b\u0439 \u044f\u0437\u044b\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0438\" , \"isbn\" : 9780735605053 , \"page_count\" : 393 , \"price\" : 1299 , \"has_illustrations\" : false , \"book_category\" : 5 }, { \"id\" : 3 , \"title\" : \"\u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u043f\u043e C++, 4-\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u0435\" , \"isbn\" : 9785845904898 , \"page_count\" : 800 , \"price\" : 999 , \"has_illustrations\" : false , \"book_category\" : 2 } ]","title":"Success Responses"}]}