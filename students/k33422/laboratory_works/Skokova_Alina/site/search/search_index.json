{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0421\u043a\u043e\u043a\u043e\u0432\u0430 \u0410\u043b\u0438\u043d\u0430, \u041a33422.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0421\u043a\u043e\u043a\u043e\u0432\u0430 \u0410\u043b\u0438\u043d\u0430, \u041a33422."},{"location":"#web-33422","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0421\u043a\u043e\u043a\u043e\u0432\u0430 \u0410\u043b\u0438\u043d\u0430, \u041a33422."},{"location":"report_lab1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb.\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c client.py : import socket client = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) client . sendto ( \"Hello, server\" . encode ( 'utf-8' ), ( \"127.0.0.1\" , 9999 )) print ( client . recvfrom ( 1024 )[ 0 ] . decode ( 'utf-8' )) \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py : import socket server = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) server . bind (( \"127.0.0.1\" , 9999 )) message , address = server . recvfrom ( 1024 ) print ( message . decode ( 'utf-8' )) server . sendto ( \"Hello, client\" . encode ( 'utf-8' ), address ) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 ( \u043f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 ), \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c client.py : import socket client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 9998 )) print ( client . recv ( 1024 ) . decode ( 'utf-8' )) client . send ( input ( \"Enter 3 values with a space separator (base1 base2 height): \" ) . encode ( 'utf-8' )) print ( client . recv ( 1024 ) . decode ( 'utf-8' )) client . close () \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py : import socket server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 9998 )) server . listen ( 1 ) client , address = server . accept () print ( f \"Connected to { address } \" ) client . send ( \"Let's find the area of your trapezoid!\" . encode ( 'utf-8' )) data = client . recv ( 1024 ) . decode ( 'utf-8' ) values = data . split () area = ( float ( values [ 0 ]) + float ( values [ 1 ])) * float ( values [ 2 ]) * 0.5 if area > 0 : client . send ( f \"The area of your trapezoid = { area } \" . encode ( 'utf-8' )) else : client . send ( \"Error! Check your values\" . encode ( 'utf-8' )) client . close () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py : import socket server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 9090 )) server . listen ( 1 ) client , address = server . accept () print ( f \"Connected to { address } \" ) with open ( 'index.html' , 'r' ) as f : page = f . read () client . send ( f \"HTTP/1.0 200 OK \\n Content-Type: text/html \\n\\n { page } \" . encode ( 'utf-8' )) client . close () \u0424\u0430\u0439\u043b index.html : <!DOCTYPE html> <html> <head> <title>Hello, World!</title> </head> <body> <p>Hello, World!</p> </body> </html> \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c client.py : import socket client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 9090 )) print ( client . recv ( 1024 ) . decode ( 'utf-8' )) client . close () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 threading. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py : import socket import threading def client_thread ( client ): while True : msg = client . recv ( 1024 ) . decode ( 'utf-8' ) broadcasting ( msg , client ) def broadcasting ( msg , client ): for c in clients : if c != client : c . send ( f \" { clients [ client ] } : { msg } \" . encode ( 'utf-8' )) clients = {} server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 9095 )) server . listen ( 5 ) while True : client , address = server . accept () print ( f \" { address } joins chat\" ) clients [ client ] = address threading . Thread ( target = client_thread , args = ( client ,)) . start () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c client.py : import socket import threading def send_msg (): while True : msg = input () client . send ( msg . encode ( 'utf-8' )) def get_msg (): while True : msg = client . recv ( 1024 ) print ( msg . decode ( 'utf-8' )) client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 9095 )) thread_sending = threading . Thread ( target = send_msg ) thread_sending . start () thread_getting = threading . Thread ( target = get_msg ) thread_getting . start () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py : import socket from email.parser import Parser from functools import lru_cache from urllib.parse import parse_qs , urlparse class Request : def __init__ ( self , method , target , version , headers , rfile ): self . method = method self . target = target self . version = version self . headers = headers self . rfile = rfile @property def path ( self ): return self . url . path @property @lru_cache ( maxsize = None ) def query ( self ): size = int ( self . headers . get ( 'Content-Length' )) body = self . rfile . readline ( size ) args = str ( body , 'iso-8859-1' ) return parse_qs ( args ) @property @lru_cache ( maxsize = None ) def url ( self ): return urlparse ( self . target ) class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body MAX_LINE = 64 * 1024 class MyHTTPServer : def __init__ ( self , host , port , server_name ): self . _host = host self . _port = port self . _server_name = server_name self . _grades = {} def serve_forever ( self ): server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( self . _host , self . _port )) server . listen () while True : client , _ = server . accept () self . serve_client ( client ) def serve_client ( self , client ): req = self . parse_request ( client ) resp = self . handle_request ( req ) self . send_response ( client , resp ) def parse_request ( self , client ): rfile = client . makefile ( 'rb' ) raw = rfile . readline ( MAX_LINE + 1 ) req_line = str ( raw , 'iso-8859-1' ) req_line = req_line . rstrip ( ' \\r\\n ' ) words = req_line . split () method , target , ver = words headers = self . parse_headers ( rfile ) return Request ( method , target , ver , headers , rfile ) def parse_headers ( self , rfile ): headers = [] while True : line = rfile . readline ( MAX_LINE + 1 ) if line in ( b ' \\r\\n ' , b ' \\n ' , b '' ): break headers . append ( line ) sheaders = b '' . join ( headers ) . decode ( 'iso-8859-1' ) return Parser () . parsestr ( sheaders ) def handle_request ( self , req ): if req . path == '/' and req . method == 'POST' : grade_id = len ( self . _grades ) + 1 self . _grades [ grade_id ] = { 'id' : grade_id , 'course' : req . query [ 'course' ][ 0 ], 'grade' : req . query [ 'grade' ][ 0 ]} return self . update_register () if req . path . startswith ( '/' ) and req . method == 'GET' : return self . update_register () def update_register ( self ): courses = [] for n in range ( 1 , len ( self . _grades ) + 1 ): if self . _grades [ n ][ 'course' ] not in courses : courses . append ( self . _grades [ n ][ 'course' ]) course_grades = {} for c in courses : course_grades [ c ] = [] for n in range ( 1 , len ( self . _grades ) + 1 ): if self . _grades [ n ][ 'course' ] == c : course_grades [ c ] . append ( self . _grades [ n ][ 'grade' ]) contentType = 'text/html; charset=utf-8' body = '<!DOCTYPE html><head></head><body>' for c in courses : body += f \" { c } : { ', ' . join ( map ( str , course_grades [ c ])) } <br>\" body += '<br><br>' body += '<form method=\"post\">' body += '\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: <br><input type=\"text\" id=\"course\" name=\"course\"><br>' body += '\u041e\u0446\u0435\u043d\u043a\u0430: <br><input type=\"text\" id=\"grade\" name=\"grade\"> <br><br>' body += '<input type=\"submit\" value=\"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c\">' body += '</form></body></html>' body += '</body></html>' body = body . encode ( 'utf-8' ) headers = [( 'Content-Type' , contentType ), ( 'Content-Length' , len ( body ))] return Response ( 200 , 'OK' , headers , body ) def send_response ( self , client , resp ): wfile = client . makefile ( 'wb' ) status_line = f 'HTTP/1.1 { resp . status } { resp . reason } \\r\\n ' wfile . write ( status_line . encode ( 'iso-8859-1' )) if resp . headers : for ( key , value ) in resp . headers : header_line = f ' { key } : { value } \\r\\n ' wfile . write ( header_line . encode ( 'iso-8859-1' )) wfile . write ( b ' \\r\\n ' ) if resp . body : wfile . write ( resp . body ) wfile . flush () wfile . close () if __name__ == '__main__' : MyHTTPServer ( \"127.0.0.1\" , 9101 , 'myserver.com' ) . serve_forever ()","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438"},{"location":"report_lab1/#no-1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438"},{"location":"report_lab1/#1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb.\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c client.py : import socket client = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) client . sendto ( \"Hello, server\" . encode ( 'utf-8' ), ( \"127.0.0.1\" , 9999 )) print ( client . recvfrom ( 1024 )[ 0 ] . decode ( 'utf-8' )) \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py : import socket server = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) server . bind (( \"127.0.0.1\" , 9999 )) message , address = server . recvfrom ( 1024 ) print ( message . decode ( 'utf-8' )) server . sendto ( \"Hello, client\" . encode ( 'utf-8' ), address )","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"report_lab1/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 ( \u043f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438 ), \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c client.py : import socket client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 9998 )) print ( client . recv ( 1024 ) . decode ( 'utf-8' )) client . send ( input ( \"Enter 3 values with a space separator (base1 base2 height): \" ) . encode ( 'utf-8' )) print ( client . recv ( 1024 ) . decode ( 'utf-8' )) client . close () \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py : import socket server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 9998 )) server . listen ( 1 ) client , address = server . accept () print ( f \"Connected to { address } \" ) client . send ( \"Let's find the area of your trapezoid!\" . encode ( 'utf-8' )) data = client . recv ( 1024 ) . decode ( 'utf-8' ) values = data . split () area = ( float ( values [ 0 ]) + float ( values [ 1 ])) * float ( values [ 2 ]) * 0.5 if area > 0 : client . send ( f \"The area of your trapezoid = { area } \" . encode ( 'utf-8' )) else : client . send ( \"Error! Check your values\" . encode ( 'utf-8' )) client . close ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"report_lab1/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py : import socket server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 9090 )) server . listen ( 1 ) client , address = server . accept () print ( f \"Connected to { address } \" ) with open ( 'index.html' , 'r' ) as f : page = f . read () client . send ( f \"HTTP/1.0 200 OK \\n Content-Type: text/html \\n\\n { page } \" . encode ( 'utf-8' )) client . close () \u0424\u0430\u0439\u043b index.html : <!DOCTYPE html> <html> <head> <title>Hello, World!</title> </head> <body> <p>Hello, World!</p> </body> </html> \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c client.py : import socket client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 9090 )) print ( client . recv ( 1024 ) . decode ( 'utf-8' )) client . close ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"report_lab1/#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 threading. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py : import socket import threading def client_thread ( client ): while True : msg = client . recv ( 1024 ) . decode ( 'utf-8' ) broadcasting ( msg , client ) def broadcasting ( msg , client ): for c in clients : if c != client : c . send ( f \" { clients [ client ] } : { msg } \" . encode ( 'utf-8' )) clients = {} server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( \"127.0.0.1\" , 9095 )) server . listen ( 5 ) while True : client , address = server . accept () print ( f \" { address } joins chat\" ) clients [ client ] = address threading . Thread ( target = client_thread , args = ( client ,)) . start () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c client.py : import socket import threading def send_msg (): while True : msg = input () client . send ( msg . encode ( 'utf-8' )) def get_msg (): while True : msg = client . recv ( 1024 ) print ( msg . decode ( 'utf-8' )) client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( \"127.0.0.1\" , 9095 )) thread_sending = threading . Thread ( target = send_msg ) thread_sending . start () thread_getting = threading . Thread ( target = get_msg ) thread_getting . start ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"report_lab1/#5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py : import socket from email.parser import Parser from functools import lru_cache from urllib.parse import parse_qs , urlparse class Request : def __init__ ( self , method , target , version , headers , rfile ): self . method = method self . target = target self . version = version self . headers = headers self . rfile = rfile @property def path ( self ): return self . url . path @property @lru_cache ( maxsize = None ) def query ( self ): size = int ( self . headers . get ( 'Content-Length' )) body = self . rfile . readline ( size ) args = str ( body , 'iso-8859-1' ) return parse_qs ( args ) @property @lru_cache ( maxsize = None ) def url ( self ): return urlparse ( self . target ) class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body MAX_LINE = 64 * 1024 class MyHTTPServer : def __init__ ( self , host , port , server_name ): self . _host = host self . _port = port self . _server_name = server_name self . _grades = {} def serve_forever ( self ): server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( self . _host , self . _port )) server . listen () while True : client , _ = server . accept () self . serve_client ( client ) def serve_client ( self , client ): req = self . parse_request ( client ) resp = self . handle_request ( req ) self . send_response ( client , resp ) def parse_request ( self , client ): rfile = client . makefile ( 'rb' ) raw = rfile . readline ( MAX_LINE + 1 ) req_line = str ( raw , 'iso-8859-1' ) req_line = req_line . rstrip ( ' \\r\\n ' ) words = req_line . split () method , target , ver = words headers = self . parse_headers ( rfile ) return Request ( method , target , ver , headers , rfile ) def parse_headers ( self , rfile ): headers = [] while True : line = rfile . readline ( MAX_LINE + 1 ) if line in ( b ' \\r\\n ' , b ' \\n ' , b '' ): break headers . append ( line ) sheaders = b '' . join ( headers ) . decode ( 'iso-8859-1' ) return Parser () . parsestr ( sheaders ) def handle_request ( self , req ): if req . path == '/' and req . method == 'POST' : grade_id = len ( self . _grades ) + 1 self . _grades [ grade_id ] = { 'id' : grade_id , 'course' : req . query [ 'course' ][ 0 ], 'grade' : req . query [ 'grade' ][ 0 ]} return self . update_register () if req . path . startswith ( '/' ) and req . method == 'GET' : return self . update_register () def update_register ( self ): courses = [] for n in range ( 1 , len ( self . _grades ) + 1 ): if self . _grades [ n ][ 'course' ] not in courses : courses . append ( self . _grades [ n ][ 'course' ]) course_grades = {} for c in courses : course_grades [ c ] = [] for n in range ( 1 , len ( self . _grades ) + 1 ): if self . _grades [ n ][ 'course' ] == c : course_grades [ c ] . append ( self . _grades [ n ][ 'grade' ]) contentType = 'text/html; charset=utf-8' body = '<!DOCTYPE html><head></head><body>' for c in courses : body += f \" { c } : { ', ' . join ( map ( str , course_grades [ c ])) } <br>\" body += '<br><br>' body += '<form method=\"post\">' body += '\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: <br><input type=\"text\" id=\"course\" name=\"course\"><br>' body += '\u041e\u0446\u0435\u043d\u043a\u0430: <br><input type=\"text\" id=\"grade\" name=\"grade\"> <br><br>' body += '<input type=\"submit\" value=\"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c\">' body += '</form></body></html>' body += '</body></html>' body = body . encode ( 'utf-8' ) headers = [( 'Content-Type' , contentType ), ( 'Content-Length' , len ( body ))] return Response ( 200 , 'OK' , headers , body ) def send_response ( self , client , resp ): wfile = client . makefile ( 'wb' ) status_line = f 'HTTP/1.1 { resp . status } { resp . reason } \\r\\n ' wfile . write ( status_line . encode ( 'iso-8859-1' )) if resp . headers : for ( key , value ) in resp . headers : header_line = f ' { key } : { value } \\r\\n ' wfile . write ( header_line . encode ( 'iso-8859-1' )) wfile . write ( b ' \\r\\n ' ) if resp . body : wfile . write ( resp . body ) wfile . flush () wfile . close () if __name__ == '__main__' : MyHTTPServer ( \"127.0.0.1\" , 9101 , 'myserver.com' ) . serve_forever ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"report_lab2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 2. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django \u0412\u0430\u0440\u0438\u0430\u043d\u0442 3. \u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0424\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u041c\u043e\u0434\u0435\u043b\u0438 models.py : from django.db import models from django.utils import timezone from django.contrib.auth.models import User class Flight ( models . Model ): id_flight = models . CharField ( primary_key = True , max_length = 30 ) source = models . CharField ( max_length = 50 ) destination = models . CharField ( max_length = 50 ) date = models . DateField ( blank = False ) airline = models . CharField ( max_length = 50 ) COMFORT_CHOICES = [ ( \"E\" , \"Economy\" ), ( \"B\" , \"Business\" ), ( \"F\" , \"First\" ), ] comfort = models . CharField ( max_length = 2 , choices = COMFORT_CHOICES ) seat_number = models . IntegerField ( blank = False ) def __str__ ( self ): return self . id_flight class Booking ( models . Model ): id_booking = models . AutoField ( primary_key = True ) passport = models . ForeignKey ( User , on_delete = models . CASCADE ) id_flight = models . ForeignKey ( Flight , on_delete = models . CASCADE ) LUGGAGE_CHOICES = [ ( \"Y\" , \"YES\" ), ( \"N\" , \"NO\" ), ] luggage = models . CharField ( max_length = 2 , choices = LUGGAGE_CHOICES ) APPROVED_CHOICES = [ ( \"Y\" , \"YES\" ), ( \"N\" , \"NO\" ), ] approved = models . CharField ( max_length = 2 , choices = APPROVED_CHOICES , default = \"N\" ) ticket_number = models . CharField ( max_length = 30 , blank = True ) class Review ( models . Model ): id_review = models . AutoField ( primary_key = True ) author = models . ForeignKey ( User , on_delete = models . CASCADE ) id_flight = models . ForeignKey ( Flight , on_delete = models . CASCADE ) text = models . TextField ( blank = False ) date_reviewed = models . DateTimeField ( default = timezone . now ) RATING_CHOICES = [ ( \"1\" , \"1\" ), ( \"2\" , \"2\" ), ( \"3\" , \"3\" ), ( \"4\" , \"4\" ), ( \"5\" , \"5\" ), ( \"6\" , \"6\" ), ( \"7\" , \"7\" ), ( \"8\" , \"8\" ), ( \"9\" , \"9\" ), ( \"10\" , \"10\" ), ] rating = models . CharField ( max_length = 2 , choices = RATING_CHOICES ) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f views.py : from django.shortcuts import render , redirect from django.contrib.auth.decorators import login_required from .models import * from .forms import * from django.contrib.auth.views import LoginView from django.contrib.auth import logout , login from django.views.generic import CreateView from django.views.generic.edit import UpdateView , DeleteView , CreateView from django.views.generic.list import ListView from django.contrib import messages class UserRegister ( CreateView ): form_class = UserRegisterForm success_url = \"/login\" template_name = 'flights/register.html' def form_valid ( self , form ): user = form . save () login ( self . request , user ) return redirect ( '/' ) class LoginUser ( LoginView ): form_class = LoginUserForm template_name = 'flights/login.html' def get_success_url ( self ): return \"/\" def logout_user ( request ): logout ( request ) return redirect ( '/login' ) class FlightsList ( ListView ): template_name = 'flights/list_flights.html' queryset = Flight . objects . all () paginate_by = 10 @login_required def book_flight ( request , id_flight ): c = Flight . objects . get ( pk = id_flight ) context = {} form = BookingForm ( request . POST or None ) if form . is_valid (): response = form . save ( commit = False ) response . passport = request . user response . id_flight = c form . save () messages . success ( request , f '\u041c\u0435\u0441\u0442\u043e \u0437\u0430\u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u043e!' ) context [ 'form' ] = form context [ 'flight' ] = c return render ( request , \"flights/book_flight.html\" , context ) class BookingsList ( ListView ): model = Booking template_name = 'flights/my_bookings.html' paginate_by = 10 def get_queryset ( self ): queryset = super ( BookingsList , self ) . get_queryset () queryset = queryset . filter ( passport = self . request . user ) return queryset class BookingUpdate ( UpdateView ): model = Booking fields = [ 'luggage' ] success_url = '/my_bookings/' class BookingDelete ( DeleteView ): model = Booking success_url = '/my_bookings/' class PassengersList ( ListView ): model = Booking template_name = 'flights/all_passengers.html' paginate_by = 10 def get_queryset ( self ): return Booking . objects . filter ( id_flight = self . kwargs [ 'id_flight' ], approved = \"Y\" ) class ReviewsList ( ListView ): template_name = 'flights/list_reviews.html' queryset = Review . objects . all () paginate_by = 10 @login_required def review_create ( request ): context = {} form = ReviewForm ( request . POST or None ) if form . is_valid (): response = form . save ( commit = False ) response . author = request . user form . save () messages . success ( request , f '\u041e\u0442\u0437\u044b\u0432 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d!' ) context [ 'form' ] = form return render ( request , \"flights/review_create.html\" , context ) \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 urls.py : from django.urls import path from .views import * urlpatterns = [ path ( '' , FlightsList . as_view ()), path ( 'register/' , UserRegister . as_view ()), path ( 'login/' , LoginUser . as_view ()), path ( 'logout/' , logout_user ), path ( 'book/<id_flight>' , book_flight ), path ( 'my_bookings/' , BookingsList . as_view ()), path ( 'my_bookings/<int:pk>/update/' , BookingUpdate . as_view ()), path ( 'my_bookings/<int:pk>/delete/' , BookingDelete . as_view ()), path ( 'passengers/<id_flight>' , PassengersList . as_view ()), path ( 'reviews' , ReviewsList . as_view ()), path ( 'reviews/create/' , review_create ), ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 2. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django"},{"location":"report_lab2/#no-2-django","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 2. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django"},{"location":"report_lab2/#3","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435.","title":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 3. \u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445"},{"location":"report_lab2/#_1","text":"\u041c\u043e\u0434\u0435\u043b\u0438 models.py : from django.db import models from django.utils import timezone from django.contrib.auth.models import User class Flight ( models . Model ): id_flight = models . CharField ( primary_key = True , max_length = 30 ) source = models . CharField ( max_length = 50 ) destination = models . CharField ( max_length = 50 ) date = models . DateField ( blank = False ) airline = models . CharField ( max_length = 50 ) COMFORT_CHOICES = [ ( \"E\" , \"Economy\" ), ( \"B\" , \"Business\" ), ( \"F\" , \"First\" ), ] comfort = models . CharField ( max_length = 2 , choices = COMFORT_CHOICES ) seat_number = models . IntegerField ( blank = False ) def __str__ ( self ): return self . id_flight class Booking ( models . Model ): id_booking = models . AutoField ( primary_key = True ) passport = models . ForeignKey ( User , on_delete = models . CASCADE ) id_flight = models . ForeignKey ( Flight , on_delete = models . CASCADE ) LUGGAGE_CHOICES = [ ( \"Y\" , \"YES\" ), ( \"N\" , \"NO\" ), ] luggage = models . CharField ( max_length = 2 , choices = LUGGAGE_CHOICES ) APPROVED_CHOICES = [ ( \"Y\" , \"YES\" ), ( \"N\" , \"NO\" ), ] approved = models . CharField ( max_length = 2 , choices = APPROVED_CHOICES , default = \"N\" ) ticket_number = models . CharField ( max_length = 30 , blank = True ) class Review ( models . Model ): id_review = models . AutoField ( primary_key = True ) author = models . ForeignKey ( User , on_delete = models . CASCADE ) id_flight = models . ForeignKey ( Flight , on_delete = models . CASCADE ) text = models . TextField ( blank = False ) date_reviewed = models . DateTimeField ( default = timezone . now ) RATING_CHOICES = [ ( \"1\" , \"1\" ), ( \"2\" , \"2\" ), ( \"3\" , \"3\" ), ( \"4\" , \"4\" ), ( \"5\" , \"5\" ), ( \"6\" , \"6\" ), ( \"7\" , \"7\" ), ( \"8\" , \"8\" ), ( \"9\" , \"9\" ), ( \"10\" , \"10\" ), ] rating = models . CharField ( max_length = 2 , choices = RATING_CHOICES ) \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f views.py : from django.shortcuts import render , redirect from django.contrib.auth.decorators import login_required from .models import * from .forms import * from django.contrib.auth.views import LoginView from django.contrib.auth import logout , login from django.views.generic import CreateView from django.views.generic.edit import UpdateView , DeleteView , CreateView from django.views.generic.list import ListView from django.contrib import messages class UserRegister ( CreateView ): form_class = UserRegisterForm success_url = \"/login\" template_name = 'flights/register.html' def form_valid ( self , form ): user = form . save () login ( self . request , user ) return redirect ( '/' ) class LoginUser ( LoginView ): form_class = LoginUserForm template_name = 'flights/login.html' def get_success_url ( self ): return \"/\" def logout_user ( request ): logout ( request ) return redirect ( '/login' ) class FlightsList ( ListView ): template_name = 'flights/list_flights.html' queryset = Flight . objects . all () paginate_by = 10 @login_required def book_flight ( request , id_flight ): c = Flight . objects . get ( pk = id_flight ) context = {} form = BookingForm ( request . POST or None ) if form . is_valid (): response = form . save ( commit = False ) response . passport = request . user response . id_flight = c form . save () messages . success ( request , f '\u041c\u0435\u0441\u0442\u043e \u0437\u0430\u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u043e!' ) context [ 'form' ] = form context [ 'flight' ] = c return render ( request , \"flights/book_flight.html\" , context ) class BookingsList ( ListView ): model = Booking template_name = 'flights/my_bookings.html' paginate_by = 10 def get_queryset ( self ): queryset = super ( BookingsList , self ) . get_queryset () queryset = queryset . filter ( passport = self . request . user ) return queryset class BookingUpdate ( UpdateView ): model = Booking fields = [ 'luggage' ] success_url = '/my_bookings/' class BookingDelete ( DeleteView ): model = Booking success_url = '/my_bookings/' class PassengersList ( ListView ): model = Booking template_name = 'flights/all_passengers.html' paginate_by = 10 def get_queryset ( self ): return Booking . objects . filter ( id_flight = self . kwargs [ 'id_flight' ], approved = \"Y\" ) class ReviewsList ( ListView ): template_name = 'flights/list_reviews.html' queryset = Review . objects . all () paginate_by = 10 @login_required def review_create ( request ): context = {} form = ReviewForm ( request . POST or None ) if form . is_valid (): response = form . save ( commit = False ) response . author = request . user form . save () messages . success ( request , f '\u041e\u0442\u0437\u044b\u0432 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d!' ) context [ 'form' ] = form return render ( request , \"flights/review_create.html\" , context ) \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 urls.py : from django.urls import path from .views import * urlpatterns = [ path ( '' , FlightsList . as_view ()), path ( 'register/' , UserRegister . as_view ()), path ( 'login/' , LoginUser . as_view ()), path ( 'logout/' , logout_user ), path ( 'book/<id_flight>' , book_flight ), path ( 'my_bookings/' , BookingsList . as_view ()), path ( 'my_bookings/<int:pk>/update/' , BookingUpdate . as_view ()), path ( 'my_bookings/<int:pk>/delete/' , BookingDelete . as_view ()), path ( 'passengers/<id_flight>' , PassengersList . as_view ()), path ( 'reviews' , ReviewsList . as_view ()), path ( 'reviews/create/' , review_create ), ]","title":"\u0424\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"report_lab3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 3. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django \u0438 DjangoRestFramework \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1. \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b C\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u043d\u043e\u043c\u0435\u0440\u0430\u0445, \u043e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0438 \u043e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445, \u0443\u0431\u0438\u0440\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u043d\u043e\u043c\u0435\u0440\u0430\u0445. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0440\u0435\u0445 \u0442\u0438\u043f\u043e\u0432: \u043e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u0434\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439 \u0438 \u0442\u0440\u0435\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0432 \u0441\u0443\u0442\u043a\u0438. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435 \u0435\u0441\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d. \u041e \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u043e\u0440\u043e\u0434, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043d \u043f\u0440\u0438\u0431\u044b\u043b, \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435, \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440. \u041e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u0434\u0435 (\u044d\u0442\u0430\u0436) \u0438 \u043a\u043e\u0433\u0434\u0430 (\u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438) \u043e\u043d \u0443\u0431\u0438\u0440\u0430\u0435\u0442. \u0421\u043b\u0443\u0436\u0430\u0449\u0438\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0443\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u043d\u0438 \u043d\u0435\u0434\u0435\u043b\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u043d\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0443\u0431\u0438\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u044d\u0442\u0430\u0436\u0438. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438: \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435, \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438; \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0431\u044b\u0432\u0448\u0438\u0445 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430, \u043e \u0442\u043e\u043c, \u043a\u0442\u043e \u0438\u0437 \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0443\u0431\u0438\u0440\u0430\u043b \u043d\u043e\u043c\u0435\u0440 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432; \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0441\u0442\u0430 \u0436\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043b\u0438 \u0432 \u0442\u0435 \u0436\u0435 \u0434\u043d\u0438, \u0447\u0442\u043e \u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0438\u043b\u0438 \u0443\u0432\u043e\u043b\u0438\u0442\u044c \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b; \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e; \u043f\u043e\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u043b\u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043a\u0432\u0430\u0440\u0442\u0430\u043b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0433\u043e\u0434\u0430. \u0422\u0430\u043a\u043e\u0439 \u043e\u0442\u0447\u0435\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u0447\u0438\u0441\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435; \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043d\u0435 \u043a\u0430\u0436\u0434\u043e\u043c \u044d\u0442\u0430\u0436\u0435; \u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0434\u043e\u0445\u043e\u0434\u0430 \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043d\u043e\u043c\u0435\u0440; \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u0441\u0435\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435. \u0424\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 models.py : from django.db import models class Room ( models . Model ): id_room = models . AutoField ( primary_key = True ) room_type = models . ForeignKey ( 'Price' , on_delete = models . CASCADE , verbose_name = '\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430' ) phone = models . CharField ( max_length = 7 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430' ) id_floor = models . ForeignKey ( 'Floor' , on_delete = models . CASCADE , verbose_name = '\u042d\u0442\u0430\u0436' ) clients = models . ManyToManyField ( 'Client' , verbose_name = '\u041a\u043b\u0438\u0435\u043d\u0442\u044b' , through = 'Booking' , related_name = 'client_room' ) class Price ( models . Model ): id_price = models . AutoField ( primary_key = True ) room_types = ( ( 's' , 'single' ), ( 'd' , 'double' ), ( 't' , 'triple' ), ) room_type = models . CharField ( max_length = 1 , choices = room_types , verbose_name = '\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430' ) price_daily = models . FloatField ( verbose_name = '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0437\u0430 \u0441\u0443\u0442\u043a\u0438' ) class Client ( models . Model ): passport = models . CharField ( primary_key = True , max_length = 10 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430' ) last_name_client = models . CharField ( max_length = 120 , verbose_name = '\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e' ) first_name_client = models . CharField ( max_length = 120 , verbose_name = '\u0418\u043c\u044f \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e' ) patronymic_client = models . CharField ( max_length = 120 , verbose_name = '\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e' ) city = models . CharField ( max_length = 120 , verbose_name = '\u0420\u043e\u0434\u043d\u043e\u0439 \u0433\u043e\u0440\u043e\u0434' ) def __str__ ( self ): return self . passport class Booking ( models . Model ): id_booking = models . AutoField ( primary_key = True ) id_client = models . ForeignKey ( 'Client' , on_delete = models . CASCADE , verbose_name = '\u041f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0439' ) id_room = models . ForeignKey ( 'Room' , on_delete = models . CASCADE , verbose_name = '\u0412\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440' ) date_start = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u043f\u043e\u0441\u0435\u043b\u0435\u043d\u0438\u044f' ) date_end = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f' , blank = True , null = True ) class Cleaner ( models . Model ): id_cleaner = models . AutoField ( primary_key = True ) last_name_cleaner = models . CharField ( max_length = 120 , verbose_name = '\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e' ) first_name_cleaner = models . CharField ( max_length = 120 , verbose_name = '\u0418\u043c\u044f \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e' ) patronymic_cleaner = models . CharField ( max_length = 120 , verbose_name = '\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e' ) floors = models . ManyToManyField ( 'Floor' , verbose_name = '\u041e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u044d\u0442\u0430\u0436\u0438' , through = 'Schedule' , related_name = 'floor_cleaner' ) class Floor ( models . Model ): id_floor = models . AutoField ( primary_key = True ) floor_num = models . IntegerField ( verbose_name = '\u042d\u0442\u0430\u0436' ) class Schedule ( models . Model ): id_schedule = models . AutoField ( primary_key = True ) id_cleaner = models . ForeignKey ( 'Cleaner' , on_delete = models . CASCADE , verbose_name = '\u0421\u043b\u0443\u0436\u0430\u0449\u0438\u0439' ) id_floor = models . ForeignKey ( 'Floor' , on_delete = models . CASCADE , verbose_name = '\u042d\u0442\u0430\u0436 \u0434\u043b\u044f \u0443\u0431\u043e\u0440\u043a\u0438' ) day_choices = ( ( 'mon' , 'monday' ), ( 'tue' , 'tuesday' ), ( 'wed' , 'wednesday' ), ( 'thu' , 'thursday' ), ( 'fri' , 'friday' ), ( 'sat' , 'saturday' ), ( 'sun' , 'sunday' ), ) day = models . CharField ( max_length = 3 , choices = day_choices , verbose_name = '\u0414\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438' ) views.py : from django.shortcuts import render from rest_framework.response import Response from rest_framework.views import APIView from rest_framework import generics from .models import * from .serializers import * class BookingRoomDatesListAPIView ( generics . ListAPIView ): serializer_class = BookingAndClientSerializer def get_queryset ( self ): id_room = self . kwargs [ 'id_room' ] room_chosen = Room . objects . get ( id_room = id_room ) date_start = self . kwargs [ 'date_start' ] date_end = self . kwargs [ 'date_end' ] queryset = Booking . objects . filter ( id_room = room_chosen , date_start__range = [ date_start , date_end ]) | Booking . objects . filter ( id_room = room_chosen , date_end__range = [ date_start , date_end ]) | Booking . objects . filter ( id_room = room_chosen , date_start__lte = date_start , date_end__gte = date_end ) | Booking . objects . filter ( id_room = room_chosen , date_start__lte = date_start , date_end__isnull = True ) return queryset class ClientListAPIView ( generics . ListAPIView ): serializer_class = ClientSerializer def get_queryset ( self ): city = self . kwargs [ 'city' ] queryset = Client . objects . filter ( city = city ) return queryset class CleanerGetAPIView ( generics . ListAPIView ): serializer_class = ScheduleAndCleanerSerializer def get_queryset ( self ): day = self . kwargs [ 'day' ] id_room = self . kwargs [ 'id_room' ] room_chosen = Room . objects . get ( id_room = id_room ) queryset = Schedule . objects . filter ( day = day , id_floor = room_chosen . id_floor ) return queryset class RoomVacantListAPIView ( generics . ListAPIView ): serializer_class = RoomSerializer def get_queryset ( self ): booked_ids = [] for i in Booking . objects . filter ( date_end__isnull = True ): booked_ids . append ( i . id_room . id_room ) return Room . objects . exclude ( id_room__in = booked_ids ) class BookingAndClientListAPIView ( generics . ListAPIView ): serializer_class = BookingAndClientSerializer def get_queryset ( self ): passport = self . kwargs [ 'passport' ] client_chosen = Client . objects . get ( passport = passport ) return Booking . objects . filter ( id_client = client_chosen ) class BookingDatesListAPIView ( generics . ListAPIView ): serializer_class = BookingAndClientSerializer def get_queryset ( self ): date_start = self . kwargs [ 'date_start' ] date_end = self . kwargs [ 'date_end' ] queryset = Booking . objects . filter ( date_start__range = [ date_start , date_end ]) | Booking . objects . filter ( date_end__range = [ date_start , date_end ]) | Booking . objects . filter ( date_start__lte = date_start , date_end__gte = date_end ) | Booking . objects . filter ( date_start__lte = date_start , date_end__isnull = True ) return queryset class CleanerCreateView ( generics . CreateAPIView ): serializer_class = CleanerCreateSerializer queryset = Cleaner . objects . all () class CleanerDeleteView ( generics . RetrieveDestroyAPIView ): serializer_class = CleanerSerializer queryset = Cleaner . objects . all () class BookingCreateView ( generics . CreateAPIView ): serializer_class = BookingCreateSerializer queryset = Booking . objects . all () class BookingUpdateView ( generics . RetrieveUpdateAPIView ): serializer_class = BookingSerializer queryset = Booking . objects . all () class ScheduleCreateView ( generics . CreateAPIView ): serializer_class = ScheduleCreateSerializer queryset = Schedule . objects . all () class ScheduleGetView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = ScheduleAndCleanerSerializer queryset = Schedule . objects . all () class CleanerAndScheduleListAPIView ( generics . ListAPIView ): serializer_class = ScheduleSerializer def get_queryset ( self ): id_cleaner = self . kwargs [ 'id_cleaner' ] cleaner_chosen = Cleaner . objects . get ( id_cleaner = id_cleaner ) return Schedule . objects . filter ( id_cleaner = cleaner_chosen ) class RoomsPerFloor ( generics . ListAPIView ): serializer_class = RoomSerializer def get_queryset ( self ): id_floor = self . kwargs [ 'id_floor' ] floor_chosen = Floor . objects . get ( id_floor = id_floor ) return Room . objects . filter ( id_floor = floor_chosen ) serializers.py : from rest_framework import serializers from .models import * class PriceSerializer ( serializers . ModelSerializer ): class Meta : model = Price fields = \"__all__\" class RoomSerializer ( serializers . ModelSerializer ): room_type = PriceSerializer () class Meta : model = Room fields = \"__all__\" class ClientSerializer ( serializers . ModelSerializer ): class Meta : model = Client fields = \"__all__\" class BookingAndClientSerializer ( serializers . ModelSerializer ): id_client = ClientSerializer () id_room = RoomSerializer () class Meta : model = Booking fields = \"__all__\" class CleanerSerializer ( serializers . ModelSerializer ): class Meta : model = Cleaner fields = \"__all__\" class ScheduleAndCleanerSerializer ( serializers . ModelSerializer ): id_cleaner = CleanerSerializer () day = serializers . CharField ( source = \"get_day_display\" , read_only = True ) class Meta : model = Schedule fields = \"__all__\" class CleanerCreateSerializer ( serializers . Serializer ): last_name_cleaner = serializers . CharField ( max_length = 120 ) first_name_cleaner = serializers . CharField ( max_length = 120 ) patronymic_cleaner = serializers . CharField ( max_length = 120 ) def create ( self , validated_data ): cleaner = Cleaner ( ** validated_data ) cleaner . save () return Cleaner ( ** validated_data ) class BookingCreateSerializer ( serializers . Serializer ): id_client = serializers . SlugRelatedField ( queryset = Client . objects . all (), slug_field = 'passport' ) id_room = serializers . SlugRelatedField ( queryset = Room . objects . all (), slug_field = 'id_room' ) date_start = serializers . DateField () date_end = serializers . DateField () def create ( self , validated_data ): booking = Booking ( ** validated_data ) booking . save () return Booking ( ** validated_data ) class BookingSerializer ( serializers . ModelSerializer ): class Meta : model = Booking fields = \"__all__\" class ScheduleCreateSerializer ( serializers . Serializer ): id_cleaner = serializers . SlugRelatedField ( queryset = Cleaner . objects . all (), slug_field = 'id_cleaner' ) id_floor = serializers . SlugRelatedField ( queryset = Floor . objects . all (), slug_field = 'id_floor' ) day = serializers . CharField ( max_length = 3 ) def create ( self , validated_data ): schedule = Schedule ( ** validated_data ) schedule . save () return Schedule ( ** validated_data ) class ScheduleSerializer ( serializers . ModelSerializer ): day = serializers . CharField ( source = \"get_day_display\" , read_only = True ) class Meta : model = Schedule fields = \"__all__\" urls.py : from django.urls import path from .views import * app_name = \"hotel_app\" urlpatterns = [ path ( 'clients/<id_room>/<date_start>/<date_end>' , BookingRoomDatesListAPIView . as_view ()), path ( 'clients/<city>' , ClientListAPIView . as_view ()), path ( 'client/<passport>' , BookingAndClientListAPIView . as_view ()), path ( 'cleaner/<id_room>/<day>' , CleanerGetAPIView . as_view ()), path ( 'vacant/' , RoomVacantListAPIView . as_view ()), path ( 'clients/<date_start>/<date_end>' , BookingDatesListAPIView . as_view ()), path ( 'cleaner-create/' , CleanerCreateView . as_view ()), path ( 'cleaner-delete/<pk>' , CleanerDeleteView . as_view ()), path ( 'booking-update/<pk>' , BookingUpdateView . as_view ()), path ( 'booking-create/' , BookingCreateView . as_view ()), path ( 'schedule-create/' , ScheduleCreateView . as_view ()), path ( 'schedule-update/<pk>' , ScheduleGetView . as_view ()), path ( 'schedule/<id_cleaner>' , CleanerAndScheduleListAPIView . as_view ()), path ( 'floor/<id_floor>' , RoomsPerFloor . as_view ()), ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 3. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django \u0438 DjangoRestFramework"},{"location":"report_lab3/#no-3-django-djangorestframework","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 3. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django \u0438 DjangoRestFramework"},{"location":"report_lab3/#1","text":"C\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u043d\u043e\u043c\u0435\u0440\u0430\u0445, \u043e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0438 \u043e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445, \u0443\u0431\u0438\u0440\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u043d\u043e\u043c\u0435\u0440\u0430\u0445. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0440\u0435\u0445 \u0442\u0438\u043f\u043e\u0432: \u043e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u0434\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439 \u0438 \u0442\u0440\u0435\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0432 \u0441\u0443\u0442\u043a\u0438. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435 \u0435\u0441\u0442\u044c \u0442\u0435\u043b\u0435\u0444\u043e\u043d. \u041e \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u043c \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u043e\u0440\u043e\u0434, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043d \u043f\u0440\u0438\u0431\u044b\u043b, \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435, \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440. \u041e \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0433\u0434\u0435 (\u044d\u0442\u0430\u0436) \u0438 \u043a\u043e\u0433\u0434\u0430 (\u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438) \u043e\u043d \u0443\u0431\u0438\u0440\u0430\u0435\u0442. \u0421\u043b\u0443\u0436\u0430\u0449\u0438\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0443\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u043d\u0438 \u043d\u0435\u0434\u0435\u043b\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u043d\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0443\u0431\u0438\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u044d\u0442\u0430\u0436\u0438. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438: \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0432\u0448\u0438\u0445 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435, \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438; \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0431\u044b\u0432\u0448\u0438\u0445 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430, \u043e \u0442\u043e\u043c, \u043a\u0442\u043e \u0438\u0437 \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u0445 \u0443\u0431\u0438\u0440\u0430\u043b \u043d\u043e\u043c\u0435\u0440 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432; \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0441\u0442\u0430 \u0436\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043b\u0438 \u0432 \u0442\u0435 \u0436\u0435 \u0434\u043d\u0438, \u0447\u0442\u043e \u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442, \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0438\u043b\u0438 \u0443\u0432\u043e\u043b\u0438\u0442\u044c \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b; \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e; \u043f\u043e\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u043b\u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043a\u0432\u0430\u0440\u0442\u0430\u043b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0433\u043e\u0434\u0430. \u0422\u0430\u043a\u043e\u0439 \u043e\u0442\u0447\u0435\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u0447\u0438\u0441\u043b\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0435; \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043d\u0435 \u043a\u0430\u0436\u0434\u043e\u043c \u044d\u0442\u0430\u0436\u0435; \u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0434\u043e\u0445\u043e\u0434\u0430 \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043d\u043e\u043c\u0435\u0440; \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u0441\u0435\u0439 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0435.","title":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 1. \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b"},{"location":"report_lab3/#_1","text":"models.py : from django.db import models class Room ( models . Model ): id_room = models . AutoField ( primary_key = True ) room_type = models . ForeignKey ( 'Price' , on_delete = models . CASCADE , verbose_name = '\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430' ) phone = models . CharField ( max_length = 7 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430' ) id_floor = models . ForeignKey ( 'Floor' , on_delete = models . CASCADE , verbose_name = '\u042d\u0442\u0430\u0436' ) clients = models . ManyToManyField ( 'Client' , verbose_name = '\u041a\u043b\u0438\u0435\u043d\u0442\u044b' , through = 'Booking' , related_name = 'client_room' ) class Price ( models . Model ): id_price = models . AutoField ( primary_key = True ) room_types = ( ( 's' , 'single' ), ( 'd' , 'double' ), ( 't' , 'triple' ), ) room_type = models . CharField ( max_length = 1 , choices = room_types , verbose_name = '\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430' ) price_daily = models . FloatField ( verbose_name = '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0437\u0430 \u0441\u0443\u0442\u043a\u0438' ) class Client ( models . Model ): passport = models . CharField ( primary_key = True , max_length = 10 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430' ) last_name_client = models . CharField ( max_length = 120 , verbose_name = '\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e' ) first_name_client = models . CharField ( max_length = 120 , verbose_name = '\u0418\u043c\u044f \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e' ) patronymic_client = models . CharField ( max_length = 120 , verbose_name = '\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e' ) city = models . CharField ( max_length = 120 , verbose_name = '\u0420\u043e\u0434\u043d\u043e\u0439 \u0433\u043e\u0440\u043e\u0434' ) def __str__ ( self ): return self . passport class Booking ( models . Model ): id_booking = models . AutoField ( primary_key = True ) id_client = models . ForeignKey ( 'Client' , on_delete = models . CASCADE , verbose_name = '\u041f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0439' ) id_room = models . ForeignKey ( 'Room' , on_delete = models . CASCADE , verbose_name = '\u0412\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440' ) date_start = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u043f\u043e\u0441\u0435\u043b\u0435\u043d\u0438\u044f' ) date_end = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f' , blank = True , null = True ) class Cleaner ( models . Model ): id_cleaner = models . AutoField ( primary_key = True ) last_name_cleaner = models . CharField ( max_length = 120 , verbose_name = '\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e' ) first_name_cleaner = models . CharField ( max_length = 120 , verbose_name = '\u0418\u043c\u044f \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e' ) patronymic_cleaner = models . CharField ( max_length = 120 , verbose_name = '\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u0443\u0436\u0430\u0449\u0435\u0433\u043e' ) floors = models . ManyToManyField ( 'Floor' , verbose_name = '\u041e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u044d\u0442\u0430\u0436\u0438' , through = 'Schedule' , related_name = 'floor_cleaner' ) class Floor ( models . Model ): id_floor = models . AutoField ( primary_key = True ) floor_num = models . IntegerField ( verbose_name = '\u042d\u0442\u0430\u0436' ) class Schedule ( models . Model ): id_schedule = models . AutoField ( primary_key = True ) id_cleaner = models . ForeignKey ( 'Cleaner' , on_delete = models . CASCADE , verbose_name = '\u0421\u043b\u0443\u0436\u0430\u0449\u0438\u0439' ) id_floor = models . ForeignKey ( 'Floor' , on_delete = models . CASCADE , verbose_name = '\u042d\u0442\u0430\u0436 \u0434\u043b\u044f \u0443\u0431\u043e\u0440\u043a\u0438' ) day_choices = ( ( 'mon' , 'monday' ), ( 'tue' , 'tuesday' ), ( 'wed' , 'wednesday' ), ( 'thu' , 'thursday' ), ( 'fri' , 'friday' ), ( 'sat' , 'saturday' ), ( 'sun' , 'sunday' ), ) day = models . CharField ( max_length = 3 , choices = day_choices , verbose_name = '\u0414\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438' ) views.py : from django.shortcuts import render from rest_framework.response import Response from rest_framework.views import APIView from rest_framework import generics from .models import * from .serializers import * class BookingRoomDatesListAPIView ( generics . ListAPIView ): serializer_class = BookingAndClientSerializer def get_queryset ( self ): id_room = self . kwargs [ 'id_room' ] room_chosen = Room . objects . get ( id_room = id_room ) date_start = self . kwargs [ 'date_start' ] date_end = self . kwargs [ 'date_end' ] queryset = Booking . objects . filter ( id_room = room_chosen , date_start__range = [ date_start , date_end ]) | Booking . objects . filter ( id_room = room_chosen , date_end__range = [ date_start , date_end ]) | Booking . objects . filter ( id_room = room_chosen , date_start__lte = date_start , date_end__gte = date_end ) | Booking . objects . filter ( id_room = room_chosen , date_start__lte = date_start , date_end__isnull = True ) return queryset class ClientListAPIView ( generics . ListAPIView ): serializer_class = ClientSerializer def get_queryset ( self ): city = self . kwargs [ 'city' ] queryset = Client . objects . filter ( city = city ) return queryset class CleanerGetAPIView ( generics . ListAPIView ): serializer_class = ScheduleAndCleanerSerializer def get_queryset ( self ): day = self . kwargs [ 'day' ] id_room = self . kwargs [ 'id_room' ] room_chosen = Room . objects . get ( id_room = id_room ) queryset = Schedule . objects . filter ( day = day , id_floor = room_chosen . id_floor ) return queryset class RoomVacantListAPIView ( generics . ListAPIView ): serializer_class = RoomSerializer def get_queryset ( self ): booked_ids = [] for i in Booking . objects . filter ( date_end__isnull = True ): booked_ids . append ( i . id_room . id_room ) return Room . objects . exclude ( id_room__in = booked_ids ) class BookingAndClientListAPIView ( generics . ListAPIView ): serializer_class = BookingAndClientSerializer def get_queryset ( self ): passport = self . kwargs [ 'passport' ] client_chosen = Client . objects . get ( passport = passport ) return Booking . objects . filter ( id_client = client_chosen ) class BookingDatesListAPIView ( generics . ListAPIView ): serializer_class = BookingAndClientSerializer def get_queryset ( self ): date_start = self . kwargs [ 'date_start' ] date_end = self . kwargs [ 'date_end' ] queryset = Booking . objects . filter ( date_start__range = [ date_start , date_end ]) | Booking . objects . filter ( date_end__range = [ date_start , date_end ]) | Booking . objects . filter ( date_start__lte = date_start , date_end__gte = date_end ) | Booking . objects . filter ( date_start__lte = date_start , date_end__isnull = True ) return queryset class CleanerCreateView ( generics . CreateAPIView ): serializer_class = CleanerCreateSerializer queryset = Cleaner . objects . all () class CleanerDeleteView ( generics . RetrieveDestroyAPIView ): serializer_class = CleanerSerializer queryset = Cleaner . objects . all () class BookingCreateView ( generics . CreateAPIView ): serializer_class = BookingCreateSerializer queryset = Booking . objects . all () class BookingUpdateView ( generics . RetrieveUpdateAPIView ): serializer_class = BookingSerializer queryset = Booking . objects . all () class ScheduleCreateView ( generics . CreateAPIView ): serializer_class = ScheduleCreateSerializer queryset = Schedule . objects . all () class ScheduleGetView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = ScheduleAndCleanerSerializer queryset = Schedule . objects . all () class CleanerAndScheduleListAPIView ( generics . ListAPIView ): serializer_class = ScheduleSerializer def get_queryset ( self ): id_cleaner = self . kwargs [ 'id_cleaner' ] cleaner_chosen = Cleaner . objects . get ( id_cleaner = id_cleaner ) return Schedule . objects . filter ( id_cleaner = cleaner_chosen ) class RoomsPerFloor ( generics . ListAPIView ): serializer_class = RoomSerializer def get_queryset ( self ): id_floor = self . kwargs [ 'id_floor' ] floor_chosen = Floor . objects . get ( id_floor = id_floor ) return Room . objects . filter ( id_floor = floor_chosen ) serializers.py : from rest_framework import serializers from .models import * class PriceSerializer ( serializers . ModelSerializer ): class Meta : model = Price fields = \"__all__\" class RoomSerializer ( serializers . ModelSerializer ): room_type = PriceSerializer () class Meta : model = Room fields = \"__all__\" class ClientSerializer ( serializers . ModelSerializer ): class Meta : model = Client fields = \"__all__\" class BookingAndClientSerializer ( serializers . ModelSerializer ): id_client = ClientSerializer () id_room = RoomSerializer () class Meta : model = Booking fields = \"__all__\" class CleanerSerializer ( serializers . ModelSerializer ): class Meta : model = Cleaner fields = \"__all__\" class ScheduleAndCleanerSerializer ( serializers . ModelSerializer ): id_cleaner = CleanerSerializer () day = serializers . CharField ( source = \"get_day_display\" , read_only = True ) class Meta : model = Schedule fields = \"__all__\" class CleanerCreateSerializer ( serializers . Serializer ): last_name_cleaner = serializers . CharField ( max_length = 120 ) first_name_cleaner = serializers . CharField ( max_length = 120 ) patronymic_cleaner = serializers . CharField ( max_length = 120 ) def create ( self , validated_data ): cleaner = Cleaner ( ** validated_data ) cleaner . save () return Cleaner ( ** validated_data ) class BookingCreateSerializer ( serializers . Serializer ): id_client = serializers . SlugRelatedField ( queryset = Client . objects . all (), slug_field = 'passport' ) id_room = serializers . SlugRelatedField ( queryset = Room . objects . all (), slug_field = 'id_room' ) date_start = serializers . DateField () date_end = serializers . DateField () def create ( self , validated_data ): booking = Booking ( ** validated_data ) booking . save () return Booking ( ** validated_data ) class BookingSerializer ( serializers . ModelSerializer ): class Meta : model = Booking fields = \"__all__\" class ScheduleCreateSerializer ( serializers . Serializer ): id_cleaner = serializers . SlugRelatedField ( queryset = Cleaner . objects . all (), slug_field = 'id_cleaner' ) id_floor = serializers . SlugRelatedField ( queryset = Floor . objects . all (), slug_field = 'id_floor' ) day = serializers . CharField ( max_length = 3 ) def create ( self , validated_data ): schedule = Schedule ( ** validated_data ) schedule . save () return Schedule ( ** validated_data ) class ScheduleSerializer ( serializers . ModelSerializer ): day = serializers . CharField ( source = \"get_day_display\" , read_only = True ) class Meta : model = Schedule fields = \"__all__\" urls.py : from django.urls import path from .views import * app_name = \"hotel_app\" urlpatterns = [ path ( 'clients/<id_room>/<date_start>/<date_end>' , BookingRoomDatesListAPIView . as_view ()), path ( 'clients/<city>' , ClientListAPIView . as_view ()), path ( 'client/<passport>' , BookingAndClientListAPIView . as_view ()), path ( 'cleaner/<id_room>/<day>' , CleanerGetAPIView . as_view ()), path ( 'vacant/' , RoomVacantListAPIView . as_view ()), path ( 'clients/<date_start>/<date_end>' , BookingDatesListAPIView . as_view ()), path ( 'cleaner-create/' , CleanerCreateView . as_view ()), path ( 'cleaner-delete/<pk>' , CleanerDeleteView . as_view ()), path ( 'booking-update/<pk>' , BookingUpdateView . as_view ()), path ( 'booking-create/' , BookingCreateView . as_view ()), path ( 'schedule-create/' , ScheduleCreateView . as_view ()), path ( 'schedule-update/<pk>' , ScheduleGetView . as_view ()), path ( 'schedule/<id_cleaner>' , CleanerAndScheduleListAPIView . as_view ()), path ( 'floor/<id_floor>' , RoomsPerFloor . as_view ()), ]","title":"\u0424\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"report_lab4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 4. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 4.1 \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u044f\u0437\u044b\u043a\u0430 JavaScript. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 4.2. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 Vue.JS. \u0423\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0441 \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0448\u0435\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u044c\u044e. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0443\u0447\u0451\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c vuetify \u0438\u043b\u0438 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 MkDocs. \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441\u0430\u0439\u0442\u0430 \u0411\u044b\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b: \u0411\u0435\u0437 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 (\u0443\u0441\u043f\u0435\u0448\u043d\u0430\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u043f\u043b\u044b\u0432\u0430\u044e\u0449\u0435\u043c \u043e\u043a\u043d\u0435) \u041c\u043e\u0436\u043d\u043e \u0432\u043e\u0439\u0442\u0438 \u043f\u043e \u0441\u0432\u043e\u0435\u043c\u0443 \u043b\u043e\u0433\u0438\u043d\u0443 \u0438 \u043f\u0430\u0440\u043e\u043b\u044e (\u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u043f\u043b\u044b\u0432\u0430\u044e\u0449\u0435\u043c \u043e\u043a\u043d\u0435) \u041f\u043e\u0441\u043b\u0435 \u0432\u0445\u043e\u0434\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446 \u0441\u043e \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u043c\u0438, \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438, \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438, \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u043c\u0438 \u0438 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0443\u0431\u043e\u0440\u043a\u0438 \u044d\u0442\u0430\u0436\u0435\u0439. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0441\u0432\u043e\u0435\u0439 \u0443\u0447\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u0412 \u043b\u0438\u0447\u043d\u043e\u043c \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0435 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u041c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u041c\u043e\u0436\u043d\u043e \"\u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u043a\u043e\u043c\u043d\u0430\u0442\u0443\" - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u041c\u043e\u0436\u043d\u043e \"\u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0437 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\" - \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0435 \u0441 \u0434\u0430\u0442\u043e\u0439 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u041c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0443\u0431\u043e\u0440\u043a\u0438 \u044d\u0442\u0430\u0436\u0435\u0439 \u041c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0435\u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0443\u0431\u043e\u0440\u043a\u0438 \u044d\u0442\u0430\u0436\u0435\u0439","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 4. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js"},{"location":"report_lab4/#no-4-vuejs","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 4. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js"},{"location":"report_lab4/#_1","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 4.1 \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u044f\u0437\u044b\u043a\u0430 JavaScript. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 4.2. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 Vue.JS. \u0423\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0441 \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0448\u0435\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u044c\u044e. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0443\u0447\u0451\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c vuetify \u0438\u043b\u0438 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 MkDocs.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"report_lab4/#_2","text":"\u0411\u044b\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b: \u0411\u0435\u0437 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 (\u0443\u0441\u043f\u0435\u0448\u043d\u0430\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u043f\u043b\u044b\u0432\u0430\u044e\u0449\u0435\u043c \u043e\u043a\u043d\u0435) \u041c\u043e\u0436\u043d\u043e \u0432\u043e\u0439\u0442\u0438 \u043f\u043e \u0441\u0432\u043e\u0435\u043c\u0443 \u043b\u043e\u0433\u0438\u043d\u0443 \u0438 \u043f\u0430\u0440\u043e\u043b\u044e (\u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u043f\u043b\u044b\u0432\u0430\u044e\u0449\u0435\u043c \u043e\u043a\u043d\u0435) \u041f\u043e\u0441\u043b\u0435 \u0432\u0445\u043e\u0434\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446 \u0441\u043e \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u043c\u0438, \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438, \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438, \u0441\u043b\u0443\u0436\u0430\u0449\u0438\u043c\u0438 \u0438 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0443\u0431\u043e\u0440\u043a\u0438 \u044d\u0442\u0430\u0436\u0435\u0439. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0441\u0432\u043e\u0435\u0439 \u0443\u0447\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u0412 \u043b\u0438\u0447\u043d\u043e\u043c \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0435 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u041c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u041c\u043e\u0436\u043d\u043e \"\u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u043a\u043e\u043c\u043d\u0430\u0442\u0443\" - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u041c\u043e\u0436\u043d\u043e \"\u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0437 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\" - \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0435 \u0441 \u0434\u0430\u0442\u043e\u0439 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u041c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0443\u0431\u043e\u0440\u043a\u0438 \u044d\u0442\u0430\u0436\u0435\u0439 \u041c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0435\u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0443\u0431\u043e\u0440\u043a\u0438 \u044d\u0442\u0430\u0436\u0435\u0439","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441\u0430\u0439\u0442\u0430"},{"location":"report_pr3/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 3.1. Django Web framework. \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0413\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 related_name \u043a \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438 from django.db import models class CarOwner ( models . Model ): id_owner = models . AutoField ( primary_key = True ) last_name = models . CharField ( max_length = 30 ) first_name = models . CharField ( max_length = 30 ) birth_date = models . DateField ( blank = True , null = True ) def __str__ ( self ): return \" {} {} \" . format ( self . first_name , self . last_name ) class DriverLicense ( models . Model ): id_license = models . AutoField ( primary_key = True ) id_owner = models . ForeignKey ( CarOwner , related_name = \"owner_license\" , on_delete = models . CASCADE ) license_num = models . CharField ( max_length = 10 ) type = models . CharField ( max_length = 10 ) issue_date = models . DateField ( blank = False ) class Car ( models . Model ): id_car = models . AutoField ( primary_key = True ) state_num = models . CharField ( max_length = 15 ) brand = models . CharField ( max_length = 20 ) model = models . CharField ( max_length = 20 ) color = models . CharField ( blank = True , max_length = 30 ) owners = models . ManyToManyField ( CarOwner , through = 'Ownership' , through_fields = ( 'id_car' , 'id_owner' ), ) def __str__ ( self ): return \" {} {} {} \" . format ( self . brand , self . model , self . state_num ) class Ownership ( models . Model ): id_owner_car = models . AutoField ( primary_key = True ) id_owner = models . ForeignKey ( CarOwner , related_name = \"owner_ownership\" , on_delete = models . CASCADE ) id_car = models . ForeignKey ( Car , related_name = \"car_ownership\" , on_delete = models . CASCADE ) date_start = models . DateField ( blank = False ) date_end = models . DateField ( blank = True , null = True ) \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 3.1. Django Web framework. \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435."},{"location":"report_pr3/#no-31-django-web-framework","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 3.1. Django Web framework. \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435."},{"location":"report_pr3/#1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"report_pr3/#2","text":"\u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0413\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 related_name \u043a \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438 from django.db import models class CarOwner ( models . Model ): id_owner = models . AutoField ( primary_key = True ) last_name = models . CharField ( max_length = 30 ) first_name = models . CharField ( max_length = 30 ) birth_date = models . DateField ( blank = True , null = True ) def __str__ ( self ): return \" {} {} \" . format ( self . first_name , self . last_name ) class DriverLicense ( models . Model ): id_license = models . AutoField ( primary_key = True ) id_owner = models . ForeignKey ( CarOwner , related_name = \"owner_license\" , on_delete = models . CASCADE ) license_num = models . CharField ( max_length = 10 ) type = models . CharField ( max_length = 10 ) issue_date = models . DateField ( blank = False ) class Car ( models . Model ): id_car = models . AutoField ( primary_key = True ) state_num = models . CharField ( max_length = 15 ) brand = models . CharField ( max_length = 20 ) model = models . CharField ( max_length = 20 ) color = models . CharField ( blank = True , max_length = 30 ) owners = models . ManyToManyField ( CarOwner , through = 'Ownership' , through_fields = ( 'id_car' , 'id_owner' ), ) def __str__ ( self ): return \" {} {} {} \" . format ( self . brand , self . model , self . state_num ) class Ownership ( models . Model ): id_owner_car = models . AutoField ( primary_key = True ) id_owner = models . ForeignKey ( CarOwner , related_name = \"owner_ownership\" , on_delete = models . CASCADE ) id_car = models . ForeignKey ( Car , related_name = \"car_ownership\" , on_delete = models . CASCADE ) date_start = models . DateField ( blank = False ) date_end = models . DateField ( blank = True , null = True ) \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"report_pr3/#3","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"}]}