{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023 \u0426\u0430\u0440\u044c\u043a\u043e\u0432 \u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439, \u0433\u0440\u0443\u043f\u043f\u0430 K33422","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023"},{"location":"#web-2022-2023","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023"},{"location":"#k33422","text":"","title":"\u0426\u0430\u0440\u044c\u043a\u043e\u0432 \u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439, \u0433\u0440\u0443\u043f\u043f\u0430 K33422"},{"location":"lab_work1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('127.0.0.1', 9090)) data = sock.recvfrom(1024) print(data[0].decode(\"utf-8\")) sock.sendto(b\"hello, client! \\n\", data[1]) sock.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket addressPort = ('127.0.0.1', 9090) sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.connect(addressPort) sock.sendto(b\"hello, world! \\n\", addressPort) data = sock.recvfrom(1024) sock.close() print(data[0].decode(\"utf-8\")) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412 \u043c\u043e\u0451\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0447\u0451\u0442 \u0434\u043b\u0438\u043d\u044b \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket import math sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('127.0.0.1', 9090)) sock.listen(5) while True: try: conn, addr = sock.accept() a, b = [int(i) for i in conn.recv(1024).decode('utf-8').split('\\n')] c = math.sqrt(a*a+b*b) conn.send(str.encode(str(c))) finally: sock.close() break \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket addressPort = ('127.0.0.1', 9090) sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(addressPort) a = int(input(\"Enter value a: \")) b = int(input(\"Enter value b: \")) sock.send(str.encode(\"\\n\".join([str(a), str(b)]))) data = sock.recv(1024) print(\"Value c is: \" + data.decode(\"utf-8\")) sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0424\u0430\u0439\u043b index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>My html page</title> </head> <body> <p> Hello world or something.. </p> </body> </html> \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('127.0.0.1', 9090)) sock.listen(10) while True: conn, addr = sock.accept() with open(\"index.html\", \"r\") as f: index = f.read() response_type = 'HTTP/1.0 200 OK\\n' headers = 'Content-Type: text/html\\n\\n' response = response_type + headers + index conn.send(response.encode(\"utf-8\")) sock.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket addressPort = ('127.0.0.1', 9090) sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(addressPort) data = sock.recv(1024) print(data.decode(\"utf-8\")) sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading . \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041c\u043d\u043e\u044e \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d TCP \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import threading import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('127.0.0.1', 7070)) sock.listen(10) clients = [] users = [] def broadcast(message, client): for i in clients: if i != client: i.send(message) def handle(client): while True: message = client.recv(8192) if message.decode(\"utf-8\") == \"quit\": i = clients.index(client) clients.remove(client) client.close() user = users[i] users.remove(user) message = \"{} left the chat.\".format(user).encode(\"utf-8\") broadcast(message, client) break broadcast(message, client) def receive(): while True: connection, address = sock.accept() message = \"What's your username?\" connection.sendto(message.encode(\"utf-8\"), address) user = connection.recv(8192) user = user.decode(\"utf-8\") users.append(user) clients.append(connection) message = \"You have entered the chat! Welcome!\" connection.sendto(message.encode(\"utf-8\"), address) message = \"Type word 'quit' to leave this chat\" connection.sendto(message.encode(\"utf-8\"), address) message = user + \" has entered this chat.\" broadcast(message.encode(\"utf-8\"), connection) thread = threading.Thread(target=handle, args=(connection, )) thread.start() receive() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b\u044b client1.py, client2.py, client3.py import socket import threading addressPort = ('127.0.0.1', 7070) sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(addressPort) user = input(\"Enter username: \") def receiving_message(): while True: try: message = sock.recv(1024) message = message.decode(\"utf-8\") if message == \"What's your username?\": sock.sendto(user.encode(\"utf-8\"), addressPort) else: print(message) finally: sock.close() def sending_message(): while True: text = input(\"\") if text == \"quit\": sock.sendto(text.encode(\"utf-8\"), addressPort) print(\"You left this chat!\") sock.close() break else: message = user + ': ' + text sock.sendto(message.encode(\"utf-8\"), addressPort) receive_thread = threading.Thread(target=receiving_message) sending_thread = threading.Thread(target=sending_message) receive_thread.start() sending_thread.start() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket . \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043c\u0435\u0442\u044c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.points = {\"Web-programming\": [\"99\", \"100\", \"98\"], \"Storytelling\": [\"60\", \"62\", \"74\"]} def serve_forever(self): server = socket.socket(socket.AF_INET,socket.SOCK_STREAM) address = (self.host, self.port) try: server.bind(address) server.listen() while True: connection, address = server.accept() self.serve_client(connection) except KeyboardInterrupt: server.close() def serve_client(self, connection): try: data = connection.recv(4096) data = data.decode(\"utf-8\") request = self.parse_request(data) result = self.handle_request(request) self.send_response(connection, result) except Exception as exception_text: print(\"Client connection failed: \", exception_text) connection.close() def parse_request(self, data): request = data.rstrip('\\r\\n') text = request[:data.index(\"\\n\")].split() if len(text) != 3: raise Exception('Malformed request line') method, target, version = text if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' data = target.split('?')[1].split('&') for value in data: index, info = value.split('=') request['data'][index] = info return request def handle_request(self, request): if request['method'] == 'POST': return self.handle_post(request) else: return self.handle_get() def handle_get(self): type = \"text/html; charset=utf-8\" first_settings = \"<html><head><style></style></head><body>\" course = \"<form><label>Name of discipline: </label><input name='course' /><br><br>\" points = \"<label>Number of points: </label><input name='points' /><br><br>\" button = \"<input type='submit'></form>\" body = first_settings + course + points + button for course_name in self.points: body += f\"<div><span>{course_name}: {self.points[course_name]}</span></div>\" second_settings = \"</body></html>\" body += second_settings body = body.encode(\"utf-8\") headers = [(\"Content-Type\", type), (\"Content-Length\", len(body))] return Response(200, \"OK\", headers, body) def handle_post(self, request): course = request[\"data\"][\"course\"] points = request[\"data\"][\"points\"] if course not in self.points: self.points[course] = [] if int(points) < 0 or int(points) > 103: raise Exception(\"Wrong number of points! Please enter a number between 0 and 103.\") self.points[course].append(points) return self.handle_get() def send_response(self, connection, response): file = connection.makefile('wb') status_line = f\"HTTP/1.1 {response.status} {response.reason}\\r\\n\" status_line = status_line.encode(\"utf-8\") file.write(status_line) if response.headers: for (index, info) in response.headers: header_line = f\"{index}: {info}\\r\\n\" file.write(header_line.encode(\"utf-8\")) file.write(b\"\\r\\n\") if response.body: file.write(response.body) file.flush() file.close() def get_error(self, code, text): return Response(code, \"OK\", \"Content-Type: text/html; charset=utf-8\", text) if __name__ == '__main__': host = 'localhost' port = 9095 server = MyHTTPServer(host, port) try: server.serve_forever() except KeyboardInterrupt: pass","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab_work1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab_work1/#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('127.0.0.1', 9090)) data = sock.recvfrom(1024) print(data[0].decode(\"utf-8\")) sock.sendto(b\"hello, client! \\n\", data[1]) sock.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket addressPort = ('127.0.0.1', 9090) sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.connect(addressPort) sock.sendto(b\"hello, world! \\n\", addressPort) data = sock.recvfrom(1024) sock.close() print(data[0].decode(\"utf-8\"))","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"lab_work1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412 \u043c\u043e\u0451\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0447\u0451\u0442 \u0434\u043b\u0438\u043d\u044b \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket import math sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('127.0.0.1', 9090)) sock.listen(5) while True: try: conn, addr = sock.accept() a, b = [int(i) for i in conn.recv(1024).decode('utf-8').split('\\n')] c = math.sqrt(a*a+b*b) conn.send(str.encode(str(c))) finally: sock.close() break \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket addressPort = ('127.0.0.1', 9090) sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(addressPort) a = int(input(\"Enter value a: \")) b = int(input(\"Enter value b: \")) sock.send(str.encode(\"\\n\".join([str(a), str(b)]))) data = sock.recv(1024) print(\"Value c is: \" + data.decode(\"utf-8\")) sock.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"lab_work1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0424\u0430\u0439\u043b index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>My html page</title> </head> <body> <p> Hello world or something.. </p> </body> </html> \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('127.0.0.1', 9090)) sock.listen(10) while True: conn, addr = sock.accept() with open(\"index.html\", \"r\") as f: index = f.read() response_type = 'HTTP/1.0 200 OK\\n' headers = 'Content-Type: text/html\\n\\n' response = response_type + headers + index conn.send(response.encode(\"utf-8\")) sock.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket addressPort = ('127.0.0.1', 9090) sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(addressPort) data = sock.recv(1024) print(data.decode(\"utf-8\")) sock.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"lab_work1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading . \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041c\u043d\u043e\u044e \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d TCP \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import threading import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('127.0.0.1', 7070)) sock.listen(10) clients = [] users = [] def broadcast(message, client): for i in clients: if i != client: i.send(message) def handle(client): while True: message = client.recv(8192) if message.decode(\"utf-8\") == \"quit\": i = clients.index(client) clients.remove(client) client.close() user = users[i] users.remove(user) message = \"{} left the chat.\".format(user).encode(\"utf-8\") broadcast(message, client) break broadcast(message, client) def receive(): while True: connection, address = sock.accept() message = \"What's your username?\" connection.sendto(message.encode(\"utf-8\"), address) user = connection.recv(8192) user = user.decode(\"utf-8\") users.append(user) clients.append(connection) message = \"You have entered the chat! Welcome!\" connection.sendto(message.encode(\"utf-8\"), address) message = \"Type word 'quit' to leave this chat\" connection.sendto(message.encode(\"utf-8\"), address) message = user + \" has entered this chat.\" broadcast(message.encode(\"utf-8\"), connection) thread = threading.Thread(target=handle, args=(connection, )) thread.start() receive() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b\u044b client1.py, client2.py, client3.py import socket import threading addressPort = ('127.0.0.1', 7070) sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(addressPort) user = input(\"Enter username: \") def receiving_message(): while True: try: message = sock.recv(1024) message = message.decode(\"utf-8\") if message == \"What's your username?\": sock.sendto(user.encode(\"utf-8\"), addressPort) else: print(message) finally: sock.close() def sending_message(): while True: text = input(\"\") if text == \"quit\": sock.sendto(text.encode(\"utf-8\"), addressPort) print(\"You left this chat!\") sock.close() break else: message = user + ': ' + text sock.sendto(message.encode(\"utf-8\"), addressPort) receive_thread = threading.Thread(target=receiving_message) sending_thread = threading.Thread(target=sending_message) receive_thread.start() sending_thread.start()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"lab_work1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket . \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043c\u0435\u0442\u044c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.points = {\"Web-programming\": [\"99\", \"100\", \"98\"], \"Storytelling\": [\"60\", \"62\", \"74\"]} def serve_forever(self): server = socket.socket(socket.AF_INET,socket.SOCK_STREAM) address = (self.host, self.port) try: server.bind(address) server.listen() while True: connection, address = server.accept() self.serve_client(connection) except KeyboardInterrupt: server.close() def serve_client(self, connection): try: data = connection.recv(4096) data = data.decode(\"utf-8\") request = self.parse_request(data) result = self.handle_request(request) self.send_response(connection, result) except Exception as exception_text: print(\"Client connection failed: \", exception_text) connection.close() def parse_request(self, data): request = data.rstrip('\\r\\n') text = request[:data.index(\"\\n\")].split() if len(text) != 3: raise Exception('Malformed request line') method, target, version = text if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' data = target.split('?')[1].split('&') for value in data: index, info = value.split('=') request['data'][index] = info return request def handle_request(self, request): if request['method'] == 'POST': return self.handle_post(request) else: return self.handle_get() def handle_get(self): type = \"text/html; charset=utf-8\" first_settings = \"<html><head><style></style></head><body>\" course = \"<form><label>Name of discipline: </label><input name='course' /><br><br>\" points = \"<label>Number of points: </label><input name='points' /><br><br>\" button = \"<input type='submit'></form>\" body = first_settings + course + points + button for course_name in self.points: body += f\"<div><span>{course_name}: {self.points[course_name]}</span></div>\" second_settings = \"</body></html>\" body += second_settings body = body.encode(\"utf-8\") headers = [(\"Content-Type\", type), (\"Content-Length\", len(body))] return Response(200, \"OK\", headers, body) def handle_post(self, request): course = request[\"data\"][\"course\"] points = request[\"data\"][\"points\"] if course not in self.points: self.points[course] = [] if int(points) < 0 or int(points) > 103: raise Exception(\"Wrong number of points! Please enter a number between 0 and 103.\") self.points[course].append(points) return self.handle_get() def send_response(self, connection, response): file = connection.makefile('wb') status_line = f\"HTTP/1.1 {response.status} {response.reason}\\r\\n\" status_line = status_line.encode(\"utf-8\") file.write(status_line) if response.headers: for (index, info) in response.headers: header_line = f\"{index}: {info}\\r\\n\" file.write(header_line.encode(\"utf-8\")) file.write(b\"\\r\\n\") if response.body: file.write(response.body) file.flush() file.close() def get_error(self, code, text): return Response(code, \"OK\", \"Content-Type: text/html; charset=utf-8\", text) if __name__ == '__main__': host = 'localhost' port = 9095 server = MyHTTPServer(host, port) try: server.serve_forever() except KeyboardInterrupt: pass","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"lab_work2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL *, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c\u0430\u0442\u0438\u043a, \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b: models.py from django.contrib.auth.models import AbstractUser, User from django.db import models from django.conf import settings class Conference(models.Model): name = models.CharField(\"conference\", max_length=50) topic = models.CharField(\"topic\", blank=True, choices=[ (\"business\", \"business\"), (\"design\", \"design\"), (\"physics\", \"physics\"), ], max_length=10) location = models.CharField(\"location\", max_length=100) start_date = models.DateField(\"start date\") end_date = models.DateField(\"end date\") description = models.CharField(\"conference description\", max_length=200) location_description = models.CharField(\"location description\", max_length=200) terms = models.CharField(\"participation terms\", max_length=1000) speaker = models.ManyToManyField(User, related_name=\"speaker\") recommend = models.CharField(\"recommend\", choices=[ (\"yes\", \"yes\"), (\"no\", \"no\"), ], max_length=3) class Meta: verbose_name = \"conference\" verbose_name_plural = \"conferences\" def __str__(self): return f\"{self.topic}: {self.name}\" def written_by(self): return \", \".join([str(p) for p in self.speaker.all()]) class Comment(models.Model): name = models.ForeignKey(Conference, on_delete=models.CASCADE, verbose_name=\"conference\") author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=\"comment author\") text = models.CharField(\"comment\", max_length=100) rating = models.CharField(\"rating\", choices =[ (\"1\",\"1\"), (\"2\",\"2\"), (\"3\",\"3\"), (\"4\",\"4\"), (\"5\",\"5\"), (\"6\",\"6\"), (\"7\",\"7\"), (\"8\",\"8\"), (\"9\",\"9\"), (\"10\",\"10\"), ], max_length=2) class Meta: verbose_name = \"comment\" verbose_name_plural = \"comments\" def __str__(self): return f\"{self.author}: {self.text}\" views.py from django.shortcuts import render, redirect from django.views import generic from django.views.generic.edit import FormMixin from django.http import HttpResponseRedirect from django.urls import reverse from .forms import PostComment from .models import Conference, Comment from django.contrib.auth.mixins import LoginRequiredMixin def index(request): return render(request, \"index.html\") class ConferenceView(generic.ListView): model = Conference context_object_name = \"conferences\" queryset = Conference.objects.all() template_name = \"conferences.html\" class ConferenceDetailView(FormMixin, generic.DetailView): model = Conference template_name = \"conference-detail.html\" form_class = PostComment def get_context_data(self, **kwargs): context = super(ConferenceDetailView, self).get_context_data(**kwargs) context[\"form\"] = PostComment( initial={\"name\": self.object, \"author\": self.request.user} ) context[\"comments\"] = Comment.objects.filter(name=self.get_object()).all() return context def post(self, request, *args, **kwargs): self.object = self.get_object() form = self.get_form() if form.is_valid(): form.save() return HttpResponseRedirect( reverse(\"conference-detail\", args=(self.object.pk,)) ) forms.py from django.forms import ModelForm, Textarea, HiddenInput from .models import Comment class PostComment(ModelForm): class Meta: model = Comment fields = [\"name\", \"text\", \"author\", \"rating\"] labels = { \"text\": \"Write your comment here\", } widgets = { \"conference\": HiddenInput(), \"text\": Textarea(attrs={\"cols\": 70, \"rows\": 10}), \"author\": HiddenInput(), } urls.py from django.urls import path from .views import index, ConferenceView, ConferenceDetailView urlpatterns = [ path(\"\", index, name=\"index\"), path(\"conferences/\", ConferenceView.as_view(), name=\"conferences\"), path( \"conferences/<slug:pk>/\", ConferenceDetailView.as_view(), name=\"conference-detail\", ), ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_work2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_work2/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL *, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c\u0430\u0442\u0438\u043a, \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab_work2/#_2","text":"models.py from django.contrib.auth.models import AbstractUser, User from django.db import models from django.conf import settings class Conference(models.Model): name = models.CharField(\"conference\", max_length=50) topic = models.CharField(\"topic\", blank=True, choices=[ (\"business\", \"business\"), (\"design\", \"design\"), (\"physics\", \"physics\"), ], max_length=10) location = models.CharField(\"location\", max_length=100) start_date = models.DateField(\"start date\") end_date = models.DateField(\"end date\") description = models.CharField(\"conference description\", max_length=200) location_description = models.CharField(\"location description\", max_length=200) terms = models.CharField(\"participation terms\", max_length=1000) speaker = models.ManyToManyField(User, related_name=\"speaker\") recommend = models.CharField(\"recommend\", choices=[ (\"yes\", \"yes\"), (\"no\", \"no\"), ], max_length=3) class Meta: verbose_name = \"conference\" verbose_name_plural = \"conferences\" def __str__(self): return f\"{self.topic}: {self.name}\" def written_by(self): return \", \".join([str(p) for p in self.speaker.all()]) class Comment(models.Model): name = models.ForeignKey(Conference, on_delete=models.CASCADE, verbose_name=\"conference\") author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=\"comment author\") text = models.CharField(\"comment\", max_length=100) rating = models.CharField(\"rating\", choices =[ (\"1\",\"1\"), (\"2\",\"2\"), (\"3\",\"3\"), (\"4\",\"4\"), (\"5\",\"5\"), (\"6\",\"6\"), (\"7\",\"7\"), (\"8\",\"8\"), (\"9\",\"9\"), (\"10\",\"10\"), ], max_length=2) class Meta: verbose_name = \"comment\" verbose_name_plural = \"comments\" def __str__(self): return f\"{self.author}: {self.text}\" views.py from django.shortcuts import render, redirect from django.views import generic from django.views.generic.edit import FormMixin from django.http import HttpResponseRedirect from django.urls import reverse from .forms import PostComment from .models import Conference, Comment from django.contrib.auth.mixins import LoginRequiredMixin def index(request): return render(request, \"index.html\") class ConferenceView(generic.ListView): model = Conference context_object_name = \"conferences\" queryset = Conference.objects.all() template_name = \"conferences.html\" class ConferenceDetailView(FormMixin, generic.DetailView): model = Conference template_name = \"conference-detail.html\" form_class = PostComment def get_context_data(self, **kwargs): context = super(ConferenceDetailView, self).get_context_data(**kwargs) context[\"form\"] = PostComment( initial={\"name\": self.object, \"author\": self.request.user} ) context[\"comments\"] = Comment.objects.filter(name=self.get_object()).all() return context def post(self, request, *args, **kwargs): self.object = self.get_object() form = self.get_form() if form.is_valid(): form.save() return HttpResponseRedirect( reverse(\"conference-detail\", args=(self.object.pk,)) ) forms.py from django.forms import ModelForm, Textarea, HiddenInput from .models import Comment class PostComment(ModelForm): class Meta: model = Comment fields = [\"name\", \"text\", \"author\", \"rating\"] labels = { \"text\": \"Write your comment here\", } widgets = { \"conference\": HiddenInput(), \"text\": Textarea(attrs={\"cols\": 70, \"rows\": 10}), \"author\": HiddenInput(), } urls.py from django.urls import path from .views import index, ConferenceView, ConferenceDetailView urlpatterns = [ path(\"\", index, name=\"index\"), path(\"conferences/\", ConferenceView.as_view(), name=\"conferences\"), path( \"conferences/<slug:pk>/\", ConferenceDetailView.as_view(), name=\"conference-detail\", ), ]","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b:"},{"location":"lab_work3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL *, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b: models.py from django.db import models from django.contrib.auth.models import AbstractUser class Organizer(AbstractUser): tel = models.CharField(verbose_name='phone number', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Participant(models.Model): name = models.CharField(max_length=100) fandom_types = ( ('n', 'naruto'), ('h', 'harry potter'), ('s', 'supernatural'), ('d', 'doctor who') ) fandom = models.CharField(max_length=1, choices=fandom_types) age = models.IntegerField() character = models.CharField(max_length=1000) club = models.ForeignKey('Club', on_delete=models.CASCADE, null=True, blank=True ) def __str__(self): return self.name class Show(models.Model): year = models.IntegerField(primary_key=True) show_types = ( ('mono', 'mono-fandom'), ('poly', 'poly-fandom') ) type = models.CharField(max_length=4, choices=show_types) participants = models.ManyToManyField('Participant', # through='Participation', related_name='show_participants' ) def __str__(self): return str(self.year) class Participation(models.Model): participant = models.ForeignKey('Participant', on_delete=models.CASCADE) medal_types = ( ('g', 'gold'), ('s', 'silver'), ('b', 'bronze'), ) medal = models.CharField(max_length=1, choices=medal_types, null=True) stage = models.ManyToManyField('Stage', null=True, blank=True) dismissed = models.BooleanField() final_grade = models.IntegerField(blank=True, null=True) def __str__(self): return f'{self.participant}' class Expert(models.Model): name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) club = models.CharField(max_length=100) def __str__(self): return f'{self.name} {self.last_name}' class Club(models.Model): name = models.CharField(max_length=100) members = models.ManyToManyField('Participant', related_name='club_members' ) def __str__(self): return self.name class Stage(models.Model): show = models.ForeignKey('Show', on_delete=models.CASCADE) experts = models.ManyToManyField('Expert', # through='Grade' related_name='stage_experts', null=True, blank=True ) fandom_types = ( ('n', 'naruto'), ('h', 'harry potter'), ('s', 'supernatural'), ('d', 'doctor who') ) fandom = models.CharField(max_length=1, choices=fandom_types) def __str__(self): return f'{self.show} {self.fandom}' views.py from rest_framework import generics from rest_framework.views import APIView, Response from .serializers import * from .models import * from django.db.models.aggregates import Count, Sum class ExpertAPIView(generics.RetrieveUpdateDestroyAPIView): serializer_class = ExpertSerializer queryset = Expert.objects.all() class ParticipationAPIList(generics.ListCreateAPIView): serializer_class = ParticipationSerializer queryset = Participation.objects.all() class ParticipantAPIList(generics.ListCreateAPIView): serializer_class = ParticipantSerializer queryset = Participant.objects.all() class StageParticipationAPIView(generics.RetrieveAPIView): serializer_class = StageParticipationSerializer queryset = Participation.objects.all() class ClubFandomsRetrieveAPIView(generics.RetrieveAPIView): serializer_class = ClubFandomsSerializer queryset = Club.objects.all() class DismissedCountAPIView(generics.RetrieveAPIView): serializer_class = DismissedCountSerializer queryset = Participation.objects.all() class FandomExpertsAPIView(generics.ListAPIView): serializer_class = FandomExpertsSerializer queryset = Stage.objects.all() class FandomCountAPIView(APIView): def get(self, request): fandom_count = Participant.objects \\ .values('fandom').annotate(count=Count('fandom')) content = {'fandom_count': fandom_count} return Response(content) class FandomCountAPIView(APIView): def get(self, request): fandom_count = Stage.objects \\ .values('fandom').annotate(count=Count('fandom')) content = {'fandom_count': fandom_count} return Response(content) class ReportAPIView(APIView): def get(self, request, year): participants = Show.objects.get(year=year).participants participant_count = participants.count() fandom_count = participants.values('fandom').annotate(count=Count('fandom')) best_grades = Participation.objects.filter(stage__show__year=year)\\ .values('participant')\\ .annotate(ex_sum=Sum('final_grade'))\\ .order_by() medals = Participation.objects.values('stage__fandom')\\ .annotate(medals_count=Count('medal')) content = {'participant_count': participant_count, 'fandoms': fandom_count, 'best_grades': best_grades, 'medals': medals} return Response(content) serializers.py from rest_framework import serializers from .models import * class ExpertSerializer(serializers.ModelSerializer): class Meta: model = Expert fields = \"__all__\" class ParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = \"__all__\" class ParticipantSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = \"__all__\" class StageParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = [\"stage\"] class ParticipantFandomsSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = [\"fandom\"] class ClubFandomsSerializer(serializers.ModelSerializer): members = ParticipantFandomsSerializer(many=True) class Meta: model = Club fields = [\"name\", \"members\"] class StageSerializer(serializers.ModelSerializer): class Meta: model = Stage fields = \"__all__\" class DismissedCountSerializer(serializers.ModelSerializer): dismissed_count = serializers.SerializerMethodField() class Meta: model = Participation fields = ['dismissed_count'] def get_dismissed_count(self, obj): return Participation.objects.filter(dismissed=True).count() class FandomExpertsSerializer(serializers.ModelSerializer): experts = ExpertSerializer(many=True) class Meta: model = Stage fields = [\"fandom\", \"experts\"] urls.py from django.urls import path from .views import * app_name = \"lab3_app\" urlpatterns = [ path('experts/<int:pk>', ExpertAPIView.as_view()), path('participation/', ParticipationAPIList.as_view()), path('participants/', ParticipantAPIList.as_view()), path('participant_stage/<int:pk>', StageParticipationAPIView.as_view()), path('club_fandoms/<int:pk>', ClubFandomsRetrieveAPIView.as_view()), path('dismissed_count/<int:pk>', DismissedCountAPIView.as_view()), path('fandom_experts/', FandomExpertsAPIView.as_view()), path('fandoms_count/', FandomCountAPIView.as_view()), path('report/<int:year>', ReportAPIView.as_view()), ] \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u0438\u0438 URL : /participation/ Method : GET Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} { \"Warriors\": [ { \"id\": 1, \"medal\": \"g\", \"dismissed\": false, \"final_grade\": 100, \"participant\": 1, \"stage\": [ 1 ] }, { \"id\": 2, \"medal\": \"b\", \"dismissed\": false, \"final_grade\": 61, \"participant\": 2, \"stage\": [ 2 ] }, { \"id\": 3, \"medal\": \"g\", \"dismissed\": false, \"final_grade\": 23, \"participant\": 1, \"stage\": [ 1 ] } ] }","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lab_work3/#no3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lab_work3/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL *, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab_work3/#_2","text":"models.py from django.db import models from django.contrib.auth.models import AbstractUser class Organizer(AbstractUser): tel = models.CharField(verbose_name='phone number', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Participant(models.Model): name = models.CharField(max_length=100) fandom_types = ( ('n', 'naruto'), ('h', 'harry potter'), ('s', 'supernatural'), ('d', 'doctor who') ) fandom = models.CharField(max_length=1, choices=fandom_types) age = models.IntegerField() character = models.CharField(max_length=1000) club = models.ForeignKey('Club', on_delete=models.CASCADE, null=True, blank=True ) def __str__(self): return self.name class Show(models.Model): year = models.IntegerField(primary_key=True) show_types = ( ('mono', 'mono-fandom'), ('poly', 'poly-fandom') ) type = models.CharField(max_length=4, choices=show_types) participants = models.ManyToManyField('Participant', # through='Participation', related_name='show_participants' ) def __str__(self): return str(self.year) class Participation(models.Model): participant = models.ForeignKey('Participant', on_delete=models.CASCADE) medal_types = ( ('g', 'gold'), ('s', 'silver'), ('b', 'bronze'), ) medal = models.CharField(max_length=1, choices=medal_types, null=True) stage = models.ManyToManyField('Stage', null=True, blank=True) dismissed = models.BooleanField() final_grade = models.IntegerField(blank=True, null=True) def __str__(self): return f'{self.participant}' class Expert(models.Model): name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) club = models.CharField(max_length=100) def __str__(self): return f'{self.name} {self.last_name}' class Club(models.Model): name = models.CharField(max_length=100) members = models.ManyToManyField('Participant', related_name='club_members' ) def __str__(self): return self.name class Stage(models.Model): show = models.ForeignKey('Show', on_delete=models.CASCADE) experts = models.ManyToManyField('Expert', # through='Grade' related_name='stage_experts', null=True, blank=True ) fandom_types = ( ('n', 'naruto'), ('h', 'harry potter'), ('s', 'supernatural'), ('d', 'doctor who') ) fandom = models.CharField(max_length=1, choices=fandom_types) def __str__(self): return f'{self.show} {self.fandom}' views.py from rest_framework import generics from rest_framework.views import APIView, Response from .serializers import * from .models import * from django.db.models.aggregates import Count, Sum class ExpertAPIView(generics.RetrieveUpdateDestroyAPIView): serializer_class = ExpertSerializer queryset = Expert.objects.all() class ParticipationAPIList(generics.ListCreateAPIView): serializer_class = ParticipationSerializer queryset = Participation.objects.all() class ParticipantAPIList(generics.ListCreateAPIView): serializer_class = ParticipantSerializer queryset = Participant.objects.all() class StageParticipationAPIView(generics.RetrieveAPIView): serializer_class = StageParticipationSerializer queryset = Participation.objects.all() class ClubFandomsRetrieveAPIView(generics.RetrieveAPIView): serializer_class = ClubFandomsSerializer queryset = Club.objects.all() class DismissedCountAPIView(generics.RetrieveAPIView): serializer_class = DismissedCountSerializer queryset = Participation.objects.all() class FandomExpertsAPIView(generics.ListAPIView): serializer_class = FandomExpertsSerializer queryset = Stage.objects.all() class FandomCountAPIView(APIView): def get(self, request): fandom_count = Participant.objects \\ .values('fandom').annotate(count=Count('fandom')) content = {'fandom_count': fandom_count} return Response(content) class FandomCountAPIView(APIView): def get(self, request): fandom_count = Stage.objects \\ .values('fandom').annotate(count=Count('fandom')) content = {'fandom_count': fandom_count} return Response(content) class ReportAPIView(APIView): def get(self, request, year): participants = Show.objects.get(year=year).participants participant_count = participants.count() fandom_count = participants.values('fandom').annotate(count=Count('fandom')) best_grades = Participation.objects.filter(stage__show__year=year)\\ .values('participant')\\ .annotate(ex_sum=Sum('final_grade'))\\ .order_by() medals = Participation.objects.values('stage__fandom')\\ .annotate(medals_count=Count('medal')) content = {'participant_count': participant_count, 'fandoms': fandom_count, 'best_grades': best_grades, 'medals': medals} return Response(content) serializers.py from rest_framework import serializers from .models import * class ExpertSerializer(serializers.ModelSerializer): class Meta: model = Expert fields = \"__all__\" class ParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = \"__all__\" class ParticipantSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = \"__all__\" class StageParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = [\"stage\"] class ParticipantFandomsSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = [\"fandom\"] class ClubFandomsSerializer(serializers.ModelSerializer): members = ParticipantFandomsSerializer(many=True) class Meta: model = Club fields = [\"name\", \"members\"] class StageSerializer(serializers.ModelSerializer): class Meta: model = Stage fields = \"__all__\" class DismissedCountSerializer(serializers.ModelSerializer): dismissed_count = serializers.SerializerMethodField() class Meta: model = Participation fields = ['dismissed_count'] def get_dismissed_count(self, obj): return Participation.objects.filter(dismissed=True).count() class FandomExpertsSerializer(serializers.ModelSerializer): experts = ExpertSerializer(many=True) class Meta: model = Stage fields = [\"fandom\", \"experts\"] urls.py from django.urls import path from .views import * app_name = \"lab3_app\" urlpatterns = [ path('experts/<int:pk>', ExpertAPIView.as_view()), path('participation/', ParticipationAPIList.as_view()), path('participants/', ParticipantAPIList.as_view()), path('participant_stage/<int:pk>', StageParticipationAPIView.as_view()), path('club_fandoms/<int:pk>', ClubFandomsRetrieveAPIView.as_view()), path('dismissed_count/<int:pk>', DismissedCountAPIView.as_view()), path('fandom_experts/', FandomExpertsAPIView.as_view()), path('fandoms_count/', FandomCountAPIView.as_view()), path('report/<int:year>', ReportAPIView.as_view()), ]","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b:"},{"location":"lab_work3/#_3","text":"\u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u0438\u0438 URL : /participation/ Method : GET Auth required : YES Permissions required : None Data constraints : {}","title":"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u0443\u0447\u0430\u0441\u0442\u0438\u044f"},{"location":"lab_work3/#success-responses","text":"Code : 200 OK Content : {[]} { \"Warriors\": [ { \"id\": 1, \"medal\": \"g\", \"dismissed\": false, \"final_grade\": 100, \"participant\": 1, \"stage\": [ 1 ] }, { \"id\": 2, \"medal\": \"b\", \"dismissed\": false, \"final_grade\": 61, \"participant\": 2, \"stage\": [ 2 ] }, { \"id\": 3, \"medal\": \"g\", \"dismissed\": false, \"final_grade\": 23, \"participant\": 1, \"stage\": [ 1 ] } ] }","title":"Success Responses"}]}