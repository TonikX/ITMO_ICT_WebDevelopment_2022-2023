# Generated by Django 4.1.5 on 2023-01-27 15:57

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Airplane',
            fields=[
                ('plane_number', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('TRANSPORT', 't'), ('PASSENGER', 'p')], max_length=10)),
                ('brand', models.CharField(choices=[('AIRBUS', 'Airbus S.A.S.'), ('BOEING', 'Boeing'), ('SUPERJET', 'Superjet')], max_length=20)),
                ('speed', models.IntegerField(blank=True)),
                ('status', models.CharField(choices=[('OPERATIONAL', 'operational'), ('REPAIR', 'repair'), ('RETIRED', 'retired')], max_length=11)),
                ('seats', models.IntegerField()),
                ('company', models.CharField(choices=[('S7', 'S7'), ('POBEDA', 'Победа'), ('AEROFLOT', 'Аэрофлот'), ('NORDSTAR', 'Nordstar')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Airport',
            fields=[
                ('airport_name', models.CharField(max_length=3, primary_key=True, serialize=False)),
                ('country', models.CharField(max_length=50)),
                ('city', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('worker_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('age', models.IntegerField()),
                ('education', models.CharField(max_length=100)),
                ('work_exp', models.IntegerField()),
                ('passport', models.IntegerField()),
                ('occupation', models.CharField(choices=[('COMMANDER', 'commander'), ('RELIEF PILOT', 'Relief pilot'), ('NAVIGATOR', 'navigator'), ('ATTENDANT', 'attendant')], max_length=15)),
                ('access', models.BooleanField()),
                ('employer', models.CharField(choices=[('S7', 'S7'), ('POBEDA', 'Победа'), ('AEROFLOT', 'Аэрофлот'), ('NORDSTAR', 'Nordstar')], max_length=10)),
                ('status', models.CharField(choices=[('WORKING', 'working'), ('RETIRED', 'retired'), ('FIRED', 'fired')], max_length=7)),
            ],
        ),
        migrations.CreateModel(
            name='Transit',
            fields=[
                ('transit_code', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('datetime_start_tr', models.DateTimeField()),
                ('datetime_fin_tr', models.DateTimeField()),
                ('change_airport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='led_app.airport')),
            ],
        ),
        migrations.CreateModel(
            name='Flight',
            fields=[
                ('flight_number', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('datetime_start', models.DateTimeField()),
                ('datetime_fin', models.DateTimeField()),
                ('distance', models.IntegerField()),
                ('sold_tickets', models.IntegerField()),
                ('airport_fin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='airp2', to='led_app.airport')),
                ('airport_start', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='airp1', to='led_app.airport')),
                ('plane_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='led_app.airplane')),
                ('transit_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='led_app.transit')),
            ],
        ),
        migrations.CreateModel(
            name='Crew',
            fields=[
                ('crew_number', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('flight_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='led_app.flight')),
                ('worker_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='led_app.worker')),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
