{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023 \u041a\u043e\u0440\u043e\u0431\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0412\u0430\u0434\u0438\u043c, \u0433\u0440\u0443\u043f\u043f\u0430 K33422","title":"\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e"},{"location":"#web-2022-2023","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023"},{"location":"#k33422","text":"","title":"\u041a\u043e\u0440\u043e\u0431\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0412\u0430\u0434\u0438\u043c, \u0433\u0440\u0443\u043f\u043f\u0430 K33422"},{"location":"breed_experts/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043e\u0432 \u0438 \u043f\u043e\u0440\u043e\u0434\u044b \u0441\u043e\u0431\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d\u0438 \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u0441\u0443\u0434\u0438\u043b\u0438. URL : /breed_experts/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0435\u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430: { \"breeds\" : [ { \"dog_grade__participant_dog__breed\" : \"\u0411\u0438\u0433\u043b\u044c/Beagle\" , \"expert_grade__participant_exp__expert_surname\" : \"Pushistiy\" , \"expert_grade__participant_exp__expert_name\" : \"Vadim\" , \"expert_grade__participant_exp__expert_patronymic\" : \"Aleksandrovich\" }, { \"dog_grade__participant_dog__breed\" : \"\u0411\u0438\u0433\u043b\u044c/Beagle\" , \"expert_grade__participant_exp__expert_surname\" : \"Govorova\" , \"expert_grade__participant_exp__expert_name\" : \"Marina\" , \"expert_grade__participant_exp__expert_patronymic\" : \"Mikhailovna\" } ] }","title":"/breed_experts/ [GET]"},{"location":"breeds_count/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0440\u043e\u0434 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0431\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0451 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442. URL : /breeds_count/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0432\u044b\u0432\u043e\u0434: { \"breed_counter\" : [ { \"breed\" : \"\u0411\u0438\u0433\u043b\u044c/Beagle\" , \"count\" : 1 }, { \"breed\" : \"\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman\" , \"count\" : 1 }, { \"breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"count\" : 3 }, { \"breed\" : \"\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd\" , \"count\" : 3 }, { \"breed\" : \"\u041f\u0443\u0434\u0435\u043b\u044c/Poodle\" , \"count\" : 1 }, { \"breed\" : \"\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever\" , \"count\" : 3 }, { \"breed\" : \"\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed\" , \"count\" : 3 } ] }","title":"/breeds_count/ [GET]"},{"location":"club/","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043b\u0443\u0431\u0430\u0445. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: : \u041f\u043e\u043b\u0435 \"name\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430 \u041f\u043e\u043b\u0435 \"club_phone_number\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u043a\u043b\u0443\u0431\u0430 \u041f\u043e\u043b\u0435 \"club_email\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u043a\u043b\u0443\u0431\u0430","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \"Club\""},{"location":"club_breeds/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435 \u043f\u043e\u0440\u043e\u0434\u044b \u0441\u043e\u0431\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043a\u043b\u0443\u0431. URL : /club_breeds/{id} Method : GET Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043b\u0443\u0431\u0430 Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: { \"breeds\" : [ { \"breed\" : \"\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman\" , \"count\" : 1 }, { \"breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"count\" : 1 }, { \"breed\" : \"\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed\" , \"count\" : 1 } ] }","title":"/club_breeds/{id}/ [GET]"},{"location":"club_change/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043a\u043b\u0443\u0431\u0435, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0451 (\u043e\u0434\u043d\u043e \u043f\u043e\u043b\u0435 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. URL : /club/{id}/ Methods : GET, PUT, PATCH, DELETE Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043b\u0443\u0431\u0430 Code GET : 200 OK Code PUT : 200 OK Code PATCH : 200 OK Code DELETE : 204 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f GET: { \"id\" : 1 , \"name\" : \"For dog bones!\" , \"club_phone_number\" : \"89211008888\" , \"club_email\" : \"fordogbones@gmail.com\" } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PUT (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"name\" : \"<string>\" , \"club_phone_number\" : \"<string>\" , \"club_email\" : \"<string>\" , } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PATCH (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"name\" : \"<string>\" , \"club_phone_number\" : \"<string>\" , \"club_email\" : \"<string>\" , }","title":"/club/{id}/ [GET, PUT, PATCH, DELETE]"},{"location":"club_create/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u044b\u0439 \u043a\u043b\u0443\u0431 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0435\u043c. URL : /club/create Method : POST Auth required : No Permissions required : No Data constraints : {} Code : 201 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"name\" : \"<string>\" , \"club_phone_number\" : \"<string>\" , \"club_email\" : \"<string>\" , }","title":"/club/create/ [POST]"},{"location":"club_list/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u043b\u0443\u0431\u043e\u0432 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445. URL : /club/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: [ { \"id\" : 1 , \"name\" : \"For dog bones!\" , \"club_phone_number\" : \"89211008888\" , \"club_email\" : \"fordogbones@gmail.com\" }, { \"id\" : 2 , \"name\" : \"Fuzzy tail\" , \"club_phone_number\" : \"89118604204\" , \"club_email\" : \"fuzzytail@yandex.ru\" } ]","title":"/club/ [GET]"},{"location":"dog/","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u043e\u0431\u0430\u043a\u0430\u0445. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: : \u041f\u043e\u043b\u0435 \"dog_name\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043a\u043b\u0438\u0447\u043a\u0443 \u0441\u043e\u0431\u0430\u043a\u0438 \u041f\u043e\u043b\u0435 \"breed\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043f\u043e\u0440\u043e\u0434\u0443 \u0441\u043e\u0431\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0430\u0434\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u041f\u043e\u043b\u0435 \"full_age\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u043e\u0431\u0430\u043a\u0438 \u0432 \u0433\u043e\u0434\u0430\u0445 \u041f\u043e\u043b\u0435 \"month_age\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u043e\u0431\u0430\u043a\u0438 \u0432 \u043c\u0435\u0441\u044f\u0446\u0430\u0445 \u041f\u043e\u043b\u0435 \"dog_class\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043a\u043b\u0430\u0441\u0441\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0431\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0430\u0434\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u041f\u043e\u043b\u0435 \"document\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e \u043f\u043e\u0440\u043e\u0434\u0438\u0441\u0442\u043e\u0441\u0442\u0438 \u0441\u043e\u0431\u0430\u043a\u0438 \u041f\u043e\u043b\u0435 \"dad_name\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043a\u043b\u0438\u0447\u043a\u0443 \u0441\u043e\u0431\u0430\u043a\u0438-\u043e\u0442\u0446\u0430 \u041f\u043e\u043b\u0435 \"mom_name\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043a\u043b\u0438\u0447\u043a\u0443 \u0441\u043e\u0431\u0430\u043a\u0438-\u043c\u0430\u043c\u044b \u041f\u043e\u043b\u0435 \"last_vaccination\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u0442\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0432\u0430\u043a\u0446\u0438\u043d\u0430\u0446\u0438\u0438 \u0441\u043e\u0431\u0430\u043a\u0438 \u041f\u043e\u043b\u0435 \"dog_info\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043e\u0431\u0430\u043a\u0435 \u041f\u043e\u043b\u0435 \"dog_owner\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Owner \u041f\u043e\u043b\u0435 \"dog_club\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Club \u0421\u043f\u0438\u0441\u043a\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430: C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"breed\" breeds = ( ( '\u041a\u043e\u0440\u0433\u0438/Corgi' , '\u041a\u043e\u0440\u0433\u0438/Corgi' ), ( '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' , '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' ), ( '\u0411\u0438\u0433\u043b\u044c/Beagle' , '\u0411\u0438\u0433\u043b\u044c/Beagle' ), ( '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' , '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' ), ( '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' , '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' ), ( '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' , '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' ), ( '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' , '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' ) ) \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"dog_class\" class_types = ( ( \"Show\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 show/Dogs of show class\" ), ( \"Breed\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 breed/Dogs of breed class\" ), ( \"Pet\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 pet/Dogs of pet class\" ) )","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \"Dog\""},{"location":"dog/#_1","text":"","title":"\u0421\u043f\u0438\u0441\u043a\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430:"},{"location":"dog/#c-breed","text":"breeds = ( ( '\u041a\u043e\u0440\u0433\u0438/Corgi' , '\u041a\u043e\u0440\u0433\u0438/Corgi' ), ( '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' , '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' ), ( '\u0411\u0438\u0433\u043b\u044c/Beagle' , '\u0411\u0438\u0433\u043b\u044c/Beagle' ), ( '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' , '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' ), ( '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' , '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' ), ( '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' , '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' ), ( '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' , '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' ) )","title":"C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"breed\""},{"location":"dog/#dog_class","text":"class_types = ( ( \"Show\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 show/Dogs of show class\" ), ( \"Breed\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 breed/Dogs of breed class\" ), ( \"Pet\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 pet/Dogs of pet class\" ) )","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"dog_class\""},{"location":"dog_change/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0435, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0451 (\u043e\u0434\u043d\u043e \u043f\u043e\u043b\u0435 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. URL : /club/{id}/ Methods : GET, PUT, PATCH, DELETE Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438 Code GET : 200 OK Code PUT : 200 OK Code PATCH : 200 OK Code DELETE : 204 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f GET: { \"id\" : 1 , \"dog_name\" : \"Fluffy\" , \"breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"full_age\" : 2 , \"month_age\" : 24 , \"dog_class\" : \"Show\" , \"document\" : \"1\" , \"dad_name\" : \"Waddles\" , \"mom_name\" : \"Queeny\" , \"last_vaccination\" : \"2022-10-25\" , \"dog_info\" : \"\" , \"dog_owner\" : 1 , \"dog_club\" : 1 } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PUT (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <integer> \u2014 \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <date> \u2014 \u0434\u0430\u0442\u0443, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"dog_name\" : \"<string>\" , \"breed\" : \"<choice>\" , \"full_age\" : <i nte ger> , \"month_age\" : <i nte ger> , \"dog_class\" : \"<choice>\" , \"document\" : \"<string>\" , \"dad_name\" : \"<string>\" , \"mom_name\" : \"<string>\" , \"last_vaccination\" : \"<date>\" , \"dog_info\" : \"<string>\" , \"dog_owner\" : <i nte ger> , \"dog_club\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"dog_owner\" \u0438 \"dog_club\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"Owner\" \u0438 \"Club\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PATCH (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <integer> \u2014 \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <date> \u2014 \u0434\u0430\u0442\u0443, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"dog_name\" : \"<string>\" , \"breed\" : \"<choice>\" , \"full_age\" : <i nte ger> , \"month_age\" : <i nte ger> , \"dog_class\" : \"<choice>\" , \"document\" : \"<string>\" , \"dad_name\" : \"<string>\" , \"mom_name\" : \"<string>\" , \"last_vaccination\" : \"<date>\" , \"dog_info\" : \"<string>\" , \"dog_owner\" : <i nte ger> , \"dog_club\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"dog_owner\" \u0438 \"dog_club\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"Owner\" \u0438 \"Club\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","title":"/dog/{id}/ [GET, PUT, PATCH, DELETE]"},{"location":"dog_create/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u044b\u044e \u0441\u043e\u0431\u0430\u043a\u0443 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0435\u0439. URL : /dog/create Method : POST Auth required : No Permissions required : No Data constraints : {} Code : 201 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <integer> \u2014 \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <date> \u2014 \u0434\u0430\u0442\u0443, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"dog_name\" : \"<string>\" , \"breed\" : \"<choice>\" , \"full_age\" : <i nte ger> , \"month_age\" : <i nte ger> , \"dog_class\" : \"<choice>\" , \"document\" : \"<string>\" , \"dad_name\" : \"<string>\" , \"mom_name\" : \"<string>\" , \"last_vaccination\" : \"<date>\" , \"dog_info\" : \"<string>\" , \"dog_owner\" : <i nte ger> , \"dog_club\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"dog_owner\" \u0438 \"dog_club\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"Owner\" \u0438 \"Club\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","title":"/dog/create/ [POST]"},{"location":"dog_list/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u0430\u043a \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445. URL : /dog/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: [ { \"id\" : 1 , \"dog_name\" : \"Fluffy\" , \"breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"full_age\" : 2 , \"month_age\" : 24 , \"dog_class\" : \"Show\" , \"document\" : \"1\" , \"dad_name\" : \"Waddles\" , \"mom_name\" : \"Queeny\" , \"last_vaccination\" : \"2022-10-25\" , \"dog_info\" : \"\" , \"dog_owner\" : 1 , \"dog_club\" : 1 }, { \"id\" : 2 , \"dog_name\" : \"Cloudy\" , \"breed\" : \"\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed\" , \"full_age\" : 1 , \"month_age\" : 16 , \"dog_class\" : \"Show\" , \"document\" : \"2\" , \"dad_name\" : \"King\" , \"mom_name\" : \"Ameliya\" , \"last_vaccination\" : \"2022-10-25\" , \"dog_info\" : \"\" , \"dog_owner\" : 1 , \"dog_club\" : 1 } ]","title":"/dog/ [GET]"},{"location":"dog_reg/","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0431\u0430\u043a\u0430\u0445. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: : \u041f\u043e\u043b\u0435 \"show_dog_number\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0441\u043e\u0431\u0430\u043a\u0438 \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435 \u041f\u043e\u043b\u0435 \"dog_status\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u043e\u0431\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u041f\u043e\u043b\u0435 \"reg_dog_date\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u0442\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043e\u0431\u0430\u043a\u0438 \u041f\u043e\u043b\u0435 \"bill\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0447\u0451\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u041f\u043e\u043b\u0435 \"checkup\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u041f\u043e\u043b\u0435 \"checkup_date\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u0442\u0443 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u041f\u043e\u043b\u0435 \"participant_dog\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Dog \u041f\u043e\u043b\u0435 \"show_dog\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Show \u041f\u043e\u043b\u0435 \"show_medal\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435 (\u0438\u043b\u0438 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e) \u043c\u0435\u0434\u0430\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0430\u0434\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0421\u043f\u0438\u0441\u043a\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430: C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"dog_status\" status_choices = ( ( \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" ), ( \"\u0421\u043d\u044f\u0442/Suspended\" , \"\u0421\u043d\u044f\u0442/Suspended\" ), ( \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" , \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" ), ( \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" , \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" ) ) C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"bill\" bill_choices = ( ( \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d/Paid\" , \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d/Paid\" ), ( \"\u041d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d/Not paid\" , \"\u041d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d/Not paid\" ) ) C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"checkup\" checkup_choices = ( ( \"\u041f\u0440\u043e\u0439\u0434\u0435\u043d/Passed\" , \"\u041c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0439\u0434\u0435\u043d/Medical examination was successfully passed\" ), ( \"\u041d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d/Not passed\" , \"\u041c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440 \u043d\u0435 \u0431\u044b\u043b \u043f\u0440\u043e\u0439\u0434\u0435\u043d/Medical examination was not passed\" ) ) C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"show_medal\" medals = ( ( \"\u0417\u043e\u043b\u043e\u0442\u043e/Gold\" , \"\u0417\u043e\u043b\u043e\u0442\u043e \u0437\u0430 \u043f\u0435\u0440\u0432\u043e\u0435 \u043c\u0435\u0441\u0442\u043e/Gold for first place\" ), ( \"\u0421\u0435\u0440\u0435\u0431\u0440\u043e/Silver\" , \"\u0421\u0435\u0440\u0435\u0431\u0440\u043e \u0437\u0430 \u0432\u0442\u043e\u0440\u043e\u0435 \u043c\u0435\u0441\u0442\u043e/Silver for second place\" ), ( \"\u0411\u0440\u043e\u043d\u0437\u0430/Bronze\" , \"\u0411\u0440\u043e\u043d\u0437\u0430 \u0437\u0430 \u0442\u0440\u0435\u0442\u044c\u0435 \u043c\u0435\u0441\u0442\u043e/Bronze for third place\" ), ( \"\u041c\u0435\u0434\u0430\u043b\u044c \u043e\u0442 \u0437\u0440\u0438\u0442\u0435\u043b\u0435\u0439/Audience award\" , \"\u041c\u0435\u0434\u0430\u043b\u044c \u043a\u0430\u043a \u043f\u0440\u0438\u0437 \u0437\u0440\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0441\u0438\u043c\u043f\u0430\u0442\u0438\u0439/Medal as audience sympathy prize\" ) )","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \"DogParticipation\""},{"location":"dog_reg/#_1","text":"","title":"\u0421\u043f\u0438\u0441\u043a\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430:"},{"location":"dog_reg/#c-dog_status","text":"status_choices = ( ( \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" ), ( \"\u0421\u043d\u044f\u0442/Suspended\" , \"\u0421\u043d\u044f\u0442/Suspended\" ), ( \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" , \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" ), ( \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" , \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" ) )","title":"C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"dog_status\""},{"location":"dog_reg/#c-bill","text":"bill_choices = ( ( \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d/Paid\" , \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d/Paid\" ), ( \"\u041d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d/Not paid\" , \"\u041d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d/Not paid\" ) )","title":"C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"bill\""},{"location":"dog_reg/#c-checkup","text":"checkup_choices = ( ( \"\u041f\u0440\u043e\u0439\u0434\u0435\u043d/Passed\" , \"\u041c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0439\u0434\u0435\u043d/Medical examination was successfully passed\" ), ( \"\u041d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d/Not passed\" , \"\u041c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440 \u043d\u0435 \u0431\u044b\u043b \u043f\u0440\u043e\u0439\u0434\u0435\u043d/Medical examination was not passed\" ) )","title":"C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"checkup\""},{"location":"dog_reg/#c-show_medal","text":"medals = ( ( \"\u0417\u043e\u043b\u043e\u0442\u043e/Gold\" , \"\u0417\u043e\u043b\u043e\u0442\u043e \u0437\u0430 \u043f\u0435\u0440\u0432\u043e\u0435 \u043c\u0435\u0441\u0442\u043e/Gold for first place\" ), ( \"\u0421\u0435\u0440\u0435\u0431\u0440\u043e/Silver\" , \"\u0421\u0435\u0440\u0435\u0431\u0440\u043e \u0437\u0430 \u0432\u0442\u043e\u0440\u043e\u0435 \u043c\u0435\u0441\u0442\u043e/Silver for second place\" ), ( \"\u0411\u0440\u043e\u043d\u0437\u0430/Bronze\" , \"\u0411\u0440\u043e\u043d\u0437\u0430 \u0437\u0430 \u0442\u0440\u0435\u0442\u044c\u0435 \u043c\u0435\u0441\u0442\u043e/Bronze for third place\" ), ( \"\u041c\u0435\u0434\u0430\u043b\u044c \u043e\u0442 \u0437\u0440\u0438\u0442\u0435\u043b\u0435\u0439/Audience award\" , \"\u041c\u0435\u0434\u0430\u043b\u044c \u043a\u0430\u043a \u043f\u0440\u0438\u0437 \u0437\u0440\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0441\u0438\u043c\u043f\u0430\u0442\u0438\u0439/Medal as audience sympathy prize\" ) )","title":"C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"show_medal\""},{"location":"dog_reg_change/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0435, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0451 (\u043e\u0434\u043d\u043e \u043f\u043e\u043b\u0435 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. URL : /club/{id}/ Methods : GET, PUT, PATCH, DELETE Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0439 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438 Code GET : 200 OK Code PUT : 200 OK Code PATCH : 200 OK Code DELETE : 204 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f GET: { \"id\" : 1 , \"show_dog_number\" : 1 , \"dog_status\" : \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"reg_dog_date\" : \"2020-07-15\" , \"bill\" : \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d/Paid\" , \"checkup\" : \"\u041f\u0440\u043e\u0439\u0434\u0435\u043d/Passed\" , \"checkup_date\" : \"2020-07-18\" , \"show_medal\" : null , \"participant_dog\" : 1 , \"show_dog\" : 1 } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PUT (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <integer> \u2014 \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <date> \u2014 \u0434\u0430\u0442\u0443, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"show_dog_number\" : <i nte ger> , \"dog_status\" : \"<choice>\" , \"reg_dog_date\" : \"<date>\" , \"bill\" : \"<choice>\" , \"checkup\" : \"<choice>\" , \"checkup_date\" : \"<date>\" , \"show_medal\" : \"<choice>\" , \"participant_dog\" : <i nte ger> , \"show_dog\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"participant_dog\" \u0438 \"show_dog\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"Dog\" \u0438 \"Show\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PATCH (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <integer> \u2014 \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <date> \u2014 \u0434\u0430\u0442\u0443, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"show_dog_number\" : <i nte ger> , \"dog_status\" : \"<choice>\" , \"reg_dog_date\" : \"<date>\" , \"bill\" : \"<choice>\" , \"checkup\" : \"<choice>\" , \"checkup_date\" : \"<date>\" , \"show_medal\" : \"<choice>\" , \"participant_dog\" : <i nte ger> , \"show_dog\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"participant_dog\" \u0438 \"show_dog\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"Dog\" \u0438 \"Show\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","title":"/dog_reg/{id}/ [GET, PUT, PATCH, DELETE]"},{"location":"dog_reg_create/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u043e\u0431\u0430\u043a\u0443 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. URL : /dog_reg/create Method : POST Auth required : No Permissions required : No Data constraints : {} Code : 201 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <integer> \u2014 \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <date> \u2014 \u0434\u0430\u0442\u0443, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"show_dog_number\" : <i nte ger> , \"dog_status\" : \"<choice>\" , \"reg_dog_date\" : \"<date>\" , \"bill\" : \"<choice>\" , \"checkup\" : \"<choice>\" , \"checkup_date\" : \"<date>\" , \"show_medal\" : \"<choice>\" , \"participant_dog\" : <i nte ger> , \"show_dog\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"participant_dog\" \u0438 \"show_dog\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"Dog\" \u0438 \"Show\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","title":"/dog_reg/create/ [POST]"},{"location":"dog_reg_list/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043a\u0430\u043a\u0443\u044e-\u043b\u0438\u0431\u043e \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0443 \u0441\u043e\u0431\u0430\u043a \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445. URL : /dog_reg/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: [ { \"id\" : 1 , \"show_dog_number\" : 1 , \"dog_status\" : \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"reg_dog_date\" : \"2020-07-15\" , \"bill\" : \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d/Paid\" , \"checkup\" : \"\u041f\u0440\u043e\u0439\u0434\u0435\u043d/Passed\" , \"checkup_date\" : \"2020-07-18\" , \"show_medal\" : null , \"participant_dog\" : 1 , \"show_dog\" : 1 }, { \"id\" : 2 , \"show_dog_number\" : 2 , \"dog_status\" : \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"reg_dog_date\" : \"2020-07-13\" , \"bill\" : \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d/Paid\" , \"checkup\" : \"\u041f\u0440\u043e\u0439\u0434\u0435\u043d/Passed\" , \"checkup_date\" : \"2020-07-15\" , \"show_medal\" : null , \"participant_dog\" : 7 , \"show_dog\" : 1 } ]","title":"/dog_reg/ [GET]"},{"location":"dog_ring/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0438 \u0440\u0438\u043d\u0433\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u043b\u0438 \u0432\u0441\u0435 \u0441\u043e\u0431\u0430\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0445\u043e\u0437\u044f\u0438\u043d\u0430. URL : /dog_ring/{id} Method : GET Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0445\u043e\u0437\u044f\u0438\u043d\u0430 Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: { \"rings\" : [ { \"schedule_grade__show_schedule__name\" : \"Doggy Show\" , \"schedule_grade__show_schedule__begin_date\" : \"2020-07-20T12:00:00Z\" , \"dog_grade__participant_dog__dog_name\" : \"Fluffy\" , \"dog_grade__participant_dog__breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"schedule_grade__ring_number\" : 1 }, { \"schedule_grade__show_schedule__name\" : \"Big Corgy\" , \"schedule_grade__show_schedule__begin_date\" : \"2020-09-12T13:00:00Z\" , \"dog_grade__participant_dog__dog_name\" : \"Fluffy\" , \"dog_grade__participant_dog__breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"schedule_grade__ring_number\" : 1 } ] }","title":"/dog_ring/{id} [GET]"},{"location":"exp_reg/","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u0445. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: : \u041f\u043e\u043b\u0435 \"show_exp_number\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435 \u041f\u043e\u043b\u0435 \"exp_status\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u041f\u043e\u043b\u0435 \"reg_exp_date\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u0442\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \"participant_exp\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Expert \u041f\u043e\u043b\u0435 \"show_exp\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Show \u0421\u043f\u0438\u0441\u043a\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430: C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"exp_status\" status_choices = ( ( \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" ), ( \"\u0421\u043d\u044f\u0442/Suspended\" , \"\u0421\u043d\u044f\u0442/Suspended\" ), ( \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" , \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" ), ( \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" , \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" ) )","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \"ExpertParticipation\""},{"location":"exp_reg/#_1","text":"","title":"\u0421\u043f\u0438\u0441\u043a\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430:"},{"location":"exp_reg/#c-exp_status","text":"status_choices = ( ( \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" ), ( \"\u0421\u043d\u044f\u0442/Suspended\" , \"\u0421\u043d\u044f\u0442/Suspended\" ), ( \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" , \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" ), ( \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" , \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" ) )","title":"C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"exp_status\""},{"location":"exp_reg_change/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0435, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0451 (\u043e\u0434\u043d\u043e \u043f\u043e\u043b\u0435 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. URL : /expert_reg/{id}/ Methods : GET, PUT, PATCH, DELETE Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 Code GET : 200 OK Code PUT : 200 OK Code PATCH : 200 OK Code DELETE : 204 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f GET: { \"id\" : 68 , \"show_exp_number\" : 2 , \"exp_status\" : \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"reg_exp_date\" : \"2020-07-13\" , \"participant_exp\" : 5 , \"show_exp\" : 1 } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PUT (\u0432\u043c\u0435\u0441\u0442\u043e <integer> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <date> \u2014 \u0434\u0430\u0442\u0443, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"show_exp_number\" : <i nte ger> , \"exp_status\" : \"<choice>\" , \"reg_exp_date\" : \"<date>\" , \"participant_exp\" : <i nte ger> , \"show_exp\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"participant_exp\" \u0438 \"show_exp\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"Expert\" \u0438 \"Show\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PATCH (\u0432\u043c\u0435\u0441\u0442\u043e <integer> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <date> \u2014 \u0434\u0430\u0442\u0443, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"show_exp_number\" : <i nte ger> , \"exp_status\" : \"<choice>\" , \"reg_exp_date\" : \"<date>\" , \"participant_exp\" : <i nte ger> , \"show_exp\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"participant_exp\" \u0438 \"show_exp\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"Expert\" \u0438 \"Show\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","title":"/expert/{id}/ [GET, PUT, PATCH, DELETE]"},{"location":"exp_reg_create/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u043e\u0433\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. URL : /expert_reg/create Method : POST Auth required : No Permissions required : No Data constraints : {} Code : 201 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 (\u0432\u043c\u0435\u0441\u0442\u043e <integer> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <date> \u2014 \u0434\u0430\u0442\u0443, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"show_exp_number\" : <i nte ger> , \"exp_status\" : \"<choice>\" , \"reg_exp_date\" : \"<date>\" , \"participant_exp\" : <i nte ger> , \"show_exp\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"participant_exp\" \u0438 \"show_exp\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"Expert\" \u0438 \"Show\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","title":"/expert_reg/create/ [POST]"},{"location":"exp_reg_list/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043a\u0430\u043a\u0443\u044e-\u043b\u0438\u0431\u043e \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0443 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043e\u0432 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445. URL : /expert_reg/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: [ { \"id\" : 67 , \"show_exp_number\" : 1 , \"exp_status\" : \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"reg_exp_date\" : \"2020-07-13\" , \"participant_exp\" : 10 , \"show_exp\" : 1 }, { \"id\" : 68 , \"show_exp_number\" : 2 , \"exp_status\" : \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"reg_exp_date\" : \"2020-07-13\" , \"participant_exp\" : 5 , \"show_exp\" : 1 } ]","title":"/expert_reg/ [GET]"},{"location":"expert/","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u0445. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: : \u041f\u043e\u043b\u0435 \"expert_surname\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \"expert_name\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043c\u044f \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \"expert_patronymic\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \"expert_phone_number\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \"expert_passport\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0441\u0435\u0440\u0438\u044e \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \"expert_email\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u041f\u043e\u043b\u0435 \"club\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Club","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \"Expert\""},{"location":"expert_change/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0435, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0451 (\u043e\u0434\u043d\u043e \u043f\u043e\u043b\u0435 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. URL : /expert/{id}/ Methods : GET, PUT, PATCH, DELETE Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 Code GET : 200 OK Code PUT : 200 OK Code PATCH : 200 OK Code DELETE : 204 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f GET: { \"id\" : 1 , \"expert_surname\" : \"Samoedkin\" , \"expert_name\" : \"Andrey\" , \"expert_patronymic\" : \"Pavlovich\" , \"expert_passport\" : \"4018280459\" , \"expert_phone_number\" : \"89214098477\" , \"expert_email\" : \"apsamoedkin@gmail.com\" , \"club\" : 1 } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PUT (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <integer> \u2014 \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"expert_surname\" : \"<string>\" , \"expert_name\" : \"<string>\" , \"expert_patronymic\" : \"<string>\" , \"expert_passport\" : \"<string>\" , \"expert_phone_number\" : \"<string>\" , \"expert_email\" : \"<string>\" , \"club\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u0435 \"club\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \"Club\". \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PATCH (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <integer> \u2014 \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"expert_surname\" : \"<string>\" , \"expert_name\" : \"<string>\" , \"expert_patronymic\" : \"<string>\" , \"expert_passport\" : \"<string>\" , \"expert_phone_number\" : \"<string>\" , \"expert_email\" : \"<string>\" , \"club\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u0435 \"club\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \"Club\".","title":"/expert/{id}/ [GET, PUT, PATCH, DELETE]"},{"location":"expert_create/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0435\u043c. URL : /expert/create Method : POST Auth required : No Permissions required : No Data constraints : {} Code : 201 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <integer> \u2014 \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"expert_surname\" : \"<string>\" , \"expert_name\" : \"<string>\" , \"expert_patronymic\" : \"<string>\" , \"expert_passport\" : \"<string>\" , \"expert_phone_number\" : \"<string>\" , \"expert_email\" : \"<string>\" , \"club\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u0435 \"club\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \"Club\".","title":"/expert/create/ [POST]"},{"location":"expert_list/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043e\u0432 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445. URL : /expert/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: [ { \"id\" : 1 , \"expert_surname\" : \"Samoedkin\" , \"expert_name\" : \"Andrey\" , \"expert_patronymic\" : \"Pavlovich\" , \"expert_passport\" : \"4018280459\" , \"expert_phone_number\" : \"89214098477\" , \"expert_email\" : \"apsamoedkin@gmail.com\" , \"club\" : 1 }, { \"id\" : 2 , \"expert_surname\" : \"Dogov\" , \"expert_name\" : \"Sergey\" , \"expert_patronymic\" : \"Viktorovich\" , \"expert_passport\" : \"4016850120\" , \"expert_phone_number\" : \"89119246508\" , \"expert_email\" : \"dogov@mail.ru\" , \"club\" : 1 } ]","title":"/expert/ [GET]"},{"location":"grading/","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u0441\u043e\u0431\u0430\u043a \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: : \u041f\u043e\u043b\u0435 \"schedule_grade\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 ShowSchedule \u041f\u043e\u043b\u0435 \"dog_grade\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 DogParticipation \u041f\u043e\u043b\u0435 \"expert_grade\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 ExpertParticipation \u041f\u043e\u043b\u0435 \"grade1\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 \u21161 \u041f\u043e\u043b\u0435 \"grade2\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 \u21162 \u041f\u043e\u043b\u0435 \"grade3\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 \u21163 \u041f\u043e\u043b\u0435 \"sum\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0443\u043c\u043c\u0435 \u043e\u0446\u0435\u043d\u043e\u043a \u0437\u0430 \u0442\u0440\u0438 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f, \u043f\u0440\u0438\u0447\u0435\u043c \u0441\u0443\u043c\u043c\u0430 \u0440\u0430\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043b\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0435 \u043d\u0430\u0434\u043e","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \"Grading\""},{"location":"grading_change/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0446\u0435\u043d\u043a\u0430\u0445, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0451 (\u043e\u0434\u043d\u043e \u043f\u043e\u043b\u0435 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. URL : /grading/{id}/ Methods : GET, PUT, PATCH, DELETE Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u043d\u0438\u044f Code GET : 200 OK Code PUT : 200 OK Code PATCH : 200 OK Code DELETE : 204 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f GET: { \"id\" : 1 , \"grade1\" : 6 , \"grade2\" : 7 , \"grade3\" : 6 , \"sum\" : 19 , \"schedule_grade\" : 1 , \"dog_grade\" : 1 , \"expert_grade\" : 67 } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PUT (\u0432\u043c\u0435\u0441\u0442\u043e <integer> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"grade1\" : <i nte ger> , \"grade2\" : <i nte ger> , \"grade3\" : <i nte ger> , \"sum\" : <i nte ger> , \"schedule_grade\" : <i nte ger> , \"dog_grade\" : <i nte ger> , \"expert_grade\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"schedule_grade\", \"dog_grade\" \u0438 \"expert_grade\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"ShowSchedule\", \"DogParticipation\" \u0438 \"ExpertParticipation\". \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PATCH (\u0432\u043c\u0435\u0441\u0442\u043e <integer> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"grade1\" : <i nte ger> , \"grade2\" : <i nte ger> , \"grade3\" : <i nte ger> , \"sum\" : <i nte ger> , \"schedule_grade\" : <i nte ger> , \"dog_grade\" : <i nte ger> , \"expert_grade\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"schedule_grade\", \"dog_grade\" \u0438 \"expert_grade\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"ShowSchedule\", \"DogParticipation\" \u0438 \"ExpertParticipation\".","title":"/grading/{id}/ [GET, PUT, PATCH, DELETE]"},{"location":"grading_create/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438. URL : /grading/create Method : POST Auth required : No Permissions required : No Data constraints : {} Code : 201 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 (\u0432\u043c\u0435\u0441\u0442\u043e <integer> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"grade1\" : <i nte ger> , \"grade2\" : <i nte ger> , \"grade3\" : <i nte ger> , \"sum\" : <i nte ger> , \"schedule_grade\" : <i nte ger> , \"dog_grade\" : <i nte ger> , \"expert_grade\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"schedule_grade\", \"dog_grade\" \u0438 \"expert_grade\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"ShowSchedule\", \"DogParticipation\" \u0438 \"ExpertParticipation\". \u041f\u043e\u043b\u0435 sum \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0435 \u043d\u0430\u0434\u043e, \u043e\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u044b\u0445 \u0432 \u043f\u043e\u043b\u044f \"grade1\", \"grade2\" \u0438 \"grade3\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.","title":"/grading/create/ [POST]"},{"location":"grading_list/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043e\u043a \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445. URL : /grading/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: [ { \"id\" : 1 , \"grade1\" : 6 , \"grade2\" : 7 , \"grade3\" : 6 , \"sum\" : 19 , \"schedule_grade\" : 1 , \"dog_grade\" : 1 , \"expert_grade\" : 67 }, { \"id\" : 2 , \"grade1\" : 8 , \"grade2\" : 8 , \"grade3\" : 6 , \"sum\" : 22 , \"schedule_grade\" : 1 , \"dog_grade\" : 3 , \"expert_grade\" : 67 } ]","title":"/grading/ [GET]"},{"location":"lab_work1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket host = \"localhost\" port = 2468 message = \"Hello, client! I'm happy to meet you too!\" server = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) server . bind (( host , port )) while True : received_message , address = server . recvfrom ( 4096 ) print ( \"Client said: \" , received_message . decode ( \"utf-8\" )) server . sendto ( message . encode ( \"utf-8\" ), address ) server . close () break \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket host = \"localhost\" port = 2468 message = \"Hello, server! Nice to meet you!\" client = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM , 0 ) client . sendto ( message . encode ( \"utf-8\" ), ( host , port )) received_message , address = client . recvfrom ( 4096 ) print ( \"Server said: \" , received_message . decode ( \"utf-8\" )) client . close () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412 \u043c\u043e\u0451\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0447\u0451\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket host = \"localhost\" port = 2468 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () connection , address = server . accept () a = str () b = str () h = str () area = str () while not area : while not a : connection . sendto ( \"Upper base of the trapezoid\" . encode ( \"utf-8\" ), address ) data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) a = float ( data ) while not b : connection . sendto ( \"Lower base of the trapezoid\" . encode ( \"utf-8\" ), address ) data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) b = float ( data ) while not h : connection . sendto ( \"The height of the trapezoid\" . encode ( \"utf-8\" ), address ) data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) h = float ( data ) area = 0.5 * ( a + b ) * h connection . sendto ( str . encode ( f \"The area of this trapezoid is { area } \" , encoding = \"utf-8\" ), address ) connection . close () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket host = \"localhost\" port = 2468 client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( host , port )) a = input ( \"Enter the length of the upper base of the trapezoid: \" ) print () b = input ( \"Enter the length of the lower base of the trapezoid: \" ) print () h = input ( \"Enter the length of the height of the trapezoid: \" ) print () a = a . encode ( \"utf-8\" ) b = b . encode ( \"utf-8\" ) h = h . encode ( \"utf-8\" ) while not a . isdigit (): print ( \"The length of the upper base of the trapezoid must be a number! Try again, please!\" ) print () a = input ( \"Enter the length of the upper base of the trapezoid: \" ) print () a = a . encode ( \"utf-8\" ) while not b . isdigit (): print ( \"The length of the lower base of the trapezoid must be a number! Try again, please!\" ) print () b = input ( \"Enter the length of the lower base of the trapezoid: \" ) print () b = b . encode ( \"utf-8\" ) while not h . isdigit (): print ( \"The length of the height of the trapezoid must be a number! Try again, please!\" ) print () h = input ( \"Enter the length of the height of the trapezoid: \" ) print () h = h . encode ( \"utf-8\" ) while True : data = client . recv ( 4096 ) data = data . decode ( \"utf-8\" ) if data == \"Upper base of the trapezoid\" : client . sendto ( a , ( host , port )) if data == \"Lower base of the trapezoid\" : client . sendto ( b , ( host , port )) if data == \"The height of the trapezoid\" : client . sendto ( h , ( host , port )) if data . startswith ( \"The area\" ): print ( f \"Server calculated the area of the trapezoid with next parameters: \\n \" f \" 1) Length of the upper base of the trapezoid: { float ( a ) } \\n \" f \" 2) Length of the lower base of the trapezoid: { float ( b ) } \\n \" f \" 3) Length of the height of the trapezoid: { float ( h ) } \\n \" ) print ( data ) break client . close () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0424\u0430\u0439\u043b index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Results of the second round of the group stage of the Champions League season 2022/2023 </ title > </ head > < body > < h1 > Group A </ h1 > < article > Liverpool 2:1 Ajax < br /> Rangers 0:3 Napoli </ article > < h1 > Group B </ h1 > < article > Bayer 2:0 Atletico < br /> Portu 0:4 Brugge </ article > < h1 > Group C </ h1 > < article > Victoria Plzen 0:2 Inter < br /> Bayern Munich 2:0 Barcelona </ article > < h1 > Group D </ h1 > < article > Sporting 2:0 Tottenham < br /> Marseille 0:1 Eintracht </ article > < h1 > Group E </ h1 > < article > Milan 3:1 Dinamo Zagreb < br /> Chelsea 1:1 Red Bull Salzburg </ article > < h1 > Group F </ h1 > < article > Shakhtar Donetzk 1:1 Celtic < br /> Real Madrid 2:0 Red Bull Leipzig </ article > < h1 > Group G </ h1 > < article > Manchester City 2:1 Borussia Dortmund < br /> Copenhagen 0:0 Sevilla </ article > < h1 > Group H </ h1 > < article > Maccabi Haifa 1:3 PSG < br /> Juventus 1:2 Benfica </ article > </ body > </ html > \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket host = \"localhost\" port = 2468 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () while True : connection , address = server . accept () page = open ( \"index.html\" ) info = page . read () page . close () data = \"HTTP/1.1 200 OK \\r\\n Content-Type: text/html; charset=utf-8 \\r\\n\\r\\n \" + info connection . sendto ( data . encode ( \"utf-8\" ), address ) print ( \"Client receive the information\" ) break connection . close () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket host = \"localhost\" port = 2468 client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( host , port )) data = client . recv ( 20480 ) print ( data . decode ( \"utf-8\" )) client . close () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading . \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u042f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u043b \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 TCP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket import threading host = \"localhost\" port = 2468 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () print ( \"The chat has been started!\" ) clients = [] users = [] def broadcast ( message , client ): for i in clients : if i != client : i . send ( message ) def handle ( client ): while True : message = client . recv ( 8192 ) if message . decode ( \"utf-8\" ) == \"leave\" : i = clients . index ( client ) clients . remove ( client ) client . close () user = users [ i ] users . remove ( user ) message = \" {} left the chat.\" . format ( user ) . encode ( \"utf-8\" ) broadcast ( message , client ) break broadcast ( message , client ) def receive (): while True : connection , address = server . accept () message = \"What's your username?\" connection . sendto ( message . encode ( \"utf-8\" ), address ) user = connection . recv ( 8192 ) user = user . decode ( \"utf-8\" ) users . append ( user ) clients . append ( connection ) message = \"You have entered the chat! Welcome!\" connection . sendto ( message . encode ( \"utf-8\" ), address ) message = \"Type word 'leave' to leave this chat\" connection . sendto ( message . encode ( \"utf-8\" ), address ) message = \" {} has entered this chat.\" . format ( user ) broadcast ( message . encode ( \"utf-8\" ), connection ) thread = threading . Thread ( target = handle , args = ( connection , )) thread . start () receive () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b\u044b client1.py, client2.py, client3.py (\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b, \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430) import socket import threading host = \"localhost\" port = 2468 client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( host , port )) user = input ( \"What's your username? Enter it here, please: \" ) def receiving_message (): while True : message = client . recv ( 8192 ) message = message . decode ( \"utf-8\" ) if message == \"What's your username?\" : client . sendto ( user . encode ( \"utf-8\" ), ( host , port )) else : print ( message ) def sending_message (): while True : text = input ( \"\" ) if text == \"leave\" : client . sendto ( text . encode ( \"utf-8\" ), ( host , port )) print ( \"You left this chat!\" ) client . close () break else : message = \" {} : {} \" . format ( user , text ) client . sendto ( message . encode ( \"utf-8\" ), ( host , port )) receive_thread = threading . Thread ( target = receiving_message ) sending_thread = threading . Thread ( target = sending_message ) receive_thread . start () sending_thread . start () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket . \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043c\u0435\u0442\u044c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0424\u0430\u0439\u043b response.py \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c Response class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket from response import Response class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port self . points = { \"Data science\" : [ \"100\" , \"95\" , \"76\" ], \"Theory of chances\" : [ \"100\" , \"84\" ], \"Philosophy\" : [ \"92\" , \"84\" , \"73\" , \"61\" , \"100\" ]} def serve_forever ( self ): server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) address = ( self . host , self . port ) try : server . bind ( address ) server . listen () while True : connection , address = server . accept () self . serve_client ( connection ) except KeyboardInterrupt : server . close () def serve_client ( self , connection ): try : data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) request = self . parse_request ( data ) result = self . handle_request ( request ) self . send_response ( connection , result ) except Exception as exception_text : print ( \"Client connection failed: \" , exception_text ) connection . close () def parse_request ( self , data ): request = data . rstrip ( ' \\r\\n ' ) text = request [: data . index ( \" \\n \" )] . split () if len ( text ) != 3 : raise Exception ( 'Malformed request line' ) method , target , version = text if version != 'HTTP/1.1' : raise Exception ( 'Unexpected HTTP version' ) request = { 'data' : {}, 'method' : method } if '?' in target : request [ 'method' ] = 'POST' data = target . split ( '?' )[ 1 ] . split ( '&' ) for value in data : index , info = value . split ( '=' ) request [ 'data' ][ index ] = info return request def handle_request ( self , request ): if request [ 'method' ] == 'POST' : return self . handle_post ( request ) else : return self . handle_get () def handle_get ( self ): type = \"text/html; charset=utf-8\" first_settings = \"<html><head><style></style></head><body>\" course = \"<form><label>Name of discipline: </label><input name='course' /><br><br>\" points = \"<label>Number of points: </label><input name='points' /><br><br>\" button = \"<input type='submit'></form>\" body = first_settings + course + points + button for course_name in self . points : body += f \"<div><span> { course_name } : { self . points [ course_name ] } </span></div>\" second_settings = \"</body></html>\" body += second_settings body = body . encode ( \"utf-8\" ) headers = [( \"Content-Type\" , type ), ( \"Content-Length\" , len ( body ))] return Response ( 200 , \"OK\" , headers , body ) def handle_post ( self , request ): course = request [ \"data\" ][ \"course\" ] points = request [ \"data\" ][ \"points\" ] if course not in self . points : self . points [ course ] = [] if int ( points ) < 0 or int ( points ) > 103 : raise Exception ( \"Wrong number of points! Please, enter a number between 0 and 103.\" ) self . points [ course ] . append ( points ) return self . handle_get () def send_response ( self , connection , response ): file = connection . makefile ( 'wb' ) status_line = f \"HTTP/1.1 { response . status } { response . reason } \\r\\n \" status_line = status_line . encode ( \"utf-8\" ) file . write ( status_line ) if response . headers : for ( index , info ) in response . headers : header_line = f \" { index } : { info } \\r\\n \" file . write ( header_line . encode ( \"utf-8\" )) file . write ( b \" \\r\\n \" ) if response . body : file . write ( response . body ) file . flush () file . close () def get_error ( self , code , text ): return Response ( code , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , text ) if __name__ == '__main__' : host = 'localhost' port = 2468 server = MyHTTPServer ( host , port ) try : server . serve_forever () except KeyboardInterrupt : pass","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab_work1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab_work1/#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket host = \"localhost\" port = 2468 message = \"Hello, client! I'm happy to meet you too!\" server = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) server . bind (( host , port )) while True : received_message , address = server . recvfrom ( 4096 ) print ( \"Client said: \" , received_message . decode ( \"utf-8\" )) server . sendto ( message . encode ( \"utf-8\" ), address ) server . close () break \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket host = \"localhost\" port = 2468 message = \"Hello, server! Nice to meet you!\" client = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM , 0 ) client . sendto ( message . encode ( \"utf-8\" ), ( host , port )) received_message , address = client . recvfrom ( 4096 ) print ( \"Server said: \" , received_message . decode ( \"utf-8\" )) client . close ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"lab_work1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412 \u043c\u043e\u0451\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0447\u0451\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket host = \"localhost\" port = 2468 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () connection , address = server . accept () a = str () b = str () h = str () area = str () while not area : while not a : connection . sendto ( \"Upper base of the trapezoid\" . encode ( \"utf-8\" ), address ) data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) a = float ( data ) while not b : connection . sendto ( \"Lower base of the trapezoid\" . encode ( \"utf-8\" ), address ) data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) b = float ( data ) while not h : connection . sendto ( \"The height of the trapezoid\" . encode ( \"utf-8\" ), address ) data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) h = float ( data ) area = 0.5 * ( a + b ) * h connection . sendto ( str . encode ( f \"The area of this trapezoid is { area } \" , encoding = \"utf-8\" ), address ) connection . close () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket host = \"localhost\" port = 2468 client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( host , port )) a = input ( \"Enter the length of the upper base of the trapezoid: \" ) print () b = input ( \"Enter the length of the lower base of the trapezoid: \" ) print () h = input ( \"Enter the length of the height of the trapezoid: \" ) print () a = a . encode ( \"utf-8\" ) b = b . encode ( \"utf-8\" ) h = h . encode ( \"utf-8\" ) while not a . isdigit (): print ( \"The length of the upper base of the trapezoid must be a number! Try again, please!\" ) print () a = input ( \"Enter the length of the upper base of the trapezoid: \" ) print () a = a . encode ( \"utf-8\" ) while not b . isdigit (): print ( \"The length of the lower base of the trapezoid must be a number! Try again, please!\" ) print () b = input ( \"Enter the length of the lower base of the trapezoid: \" ) print () b = b . encode ( \"utf-8\" ) while not h . isdigit (): print ( \"The length of the height of the trapezoid must be a number! Try again, please!\" ) print () h = input ( \"Enter the length of the height of the trapezoid: \" ) print () h = h . encode ( \"utf-8\" ) while True : data = client . recv ( 4096 ) data = data . decode ( \"utf-8\" ) if data == \"Upper base of the trapezoid\" : client . sendto ( a , ( host , port )) if data == \"Lower base of the trapezoid\" : client . sendto ( b , ( host , port )) if data == \"The height of the trapezoid\" : client . sendto ( h , ( host , port )) if data . startswith ( \"The area\" ): print ( f \"Server calculated the area of the trapezoid with next parameters: \\n \" f \" 1) Length of the upper base of the trapezoid: { float ( a ) } \\n \" f \" 2) Length of the lower base of the trapezoid: { float ( b ) } \\n \" f \" 3) Length of the height of the trapezoid: { float ( h ) } \\n \" ) print ( data ) break client . close ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"lab_work1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0424\u0430\u0439\u043b index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Results of the second round of the group stage of the Champions League season 2022/2023 </ title > </ head > < body > < h1 > Group A </ h1 > < article > Liverpool 2:1 Ajax < br /> Rangers 0:3 Napoli </ article > < h1 > Group B </ h1 > < article > Bayer 2:0 Atletico < br /> Portu 0:4 Brugge </ article > < h1 > Group C </ h1 > < article > Victoria Plzen 0:2 Inter < br /> Bayern Munich 2:0 Barcelona </ article > < h1 > Group D </ h1 > < article > Sporting 2:0 Tottenham < br /> Marseille 0:1 Eintracht </ article > < h1 > Group E </ h1 > < article > Milan 3:1 Dinamo Zagreb < br /> Chelsea 1:1 Red Bull Salzburg </ article > < h1 > Group F </ h1 > < article > Shakhtar Donetzk 1:1 Celtic < br /> Real Madrid 2:0 Red Bull Leipzig </ article > < h1 > Group G </ h1 > < article > Manchester City 2:1 Borussia Dortmund < br /> Copenhagen 0:0 Sevilla </ article > < h1 > Group H </ h1 > < article > Maccabi Haifa 1:3 PSG < br /> Juventus 1:2 Benfica </ article > </ body > </ html > \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket host = \"localhost\" port = 2468 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () while True : connection , address = server . accept () page = open ( \"index.html\" ) info = page . read () page . close () data = \"HTTP/1.1 200 OK \\r\\n Content-Type: text/html; charset=utf-8 \\r\\n\\r\\n \" + info connection . sendto ( data . encode ( \"utf-8\" ), address ) print ( \"Client receive the information\" ) break connection . close () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket host = \"localhost\" port = 2468 client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( host , port )) data = client . recv ( 20480 ) print ( data . decode ( \"utf-8\" )) client . close ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"lab_work1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading . \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u042f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u043b \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 TCP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket import threading host = \"localhost\" port = 2468 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () print ( \"The chat has been started!\" ) clients = [] users = [] def broadcast ( message , client ): for i in clients : if i != client : i . send ( message ) def handle ( client ): while True : message = client . recv ( 8192 ) if message . decode ( \"utf-8\" ) == \"leave\" : i = clients . index ( client ) clients . remove ( client ) client . close () user = users [ i ] users . remove ( user ) message = \" {} left the chat.\" . format ( user ) . encode ( \"utf-8\" ) broadcast ( message , client ) break broadcast ( message , client ) def receive (): while True : connection , address = server . accept () message = \"What's your username?\" connection . sendto ( message . encode ( \"utf-8\" ), address ) user = connection . recv ( 8192 ) user = user . decode ( \"utf-8\" ) users . append ( user ) clients . append ( connection ) message = \"You have entered the chat! Welcome!\" connection . sendto ( message . encode ( \"utf-8\" ), address ) message = \"Type word 'leave' to leave this chat\" connection . sendto ( message . encode ( \"utf-8\" ), address ) message = \" {} has entered this chat.\" . format ( user ) broadcast ( message . encode ( \"utf-8\" ), connection ) thread = threading . Thread ( target = handle , args = ( connection , )) thread . start () receive () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b\u044b client1.py, client2.py, client3.py (\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b, \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430) import socket import threading host = \"localhost\" port = 2468 client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( host , port )) user = input ( \"What's your username? Enter it here, please: \" ) def receiving_message (): while True : message = client . recv ( 8192 ) message = message . decode ( \"utf-8\" ) if message == \"What's your username?\" : client . sendto ( user . encode ( \"utf-8\" ), ( host , port )) else : print ( message ) def sending_message (): while True : text = input ( \"\" ) if text == \"leave\" : client . sendto ( text . encode ( \"utf-8\" ), ( host , port )) print ( \"You left this chat!\" ) client . close () break else : message = \" {} : {} \" . format ( user , text ) client . sendto ( message . encode ( \"utf-8\" ), ( host , port )) receive_thread = threading . Thread ( target = receiving_message ) sending_thread = threading . Thread ( target = sending_message ) receive_thread . start () sending_thread . start ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"lab_work1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket . \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043c\u0435\u0442\u044c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0424\u0430\u0439\u043b response.py \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c Response class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket from response import Response class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port self . points = { \"Data science\" : [ \"100\" , \"95\" , \"76\" ], \"Theory of chances\" : [ \"100\" , \"84\" ], \"Philosophy\" : [ \"92\" , \"84\" , \"73\" , \"61\" , \"100\" ]} def serve_forever ( self ): server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) address = ( self . host , self . port ) try : server . bind ( address ) server . listen () while True : connection , address = server . accept () self . serve_client ( connection ) except KeyboardInterrupt : server . close () def serve_client ( self , connection ): try : data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) request = self . parse_request ( data ) result = self . handle_request ( request ) self . send_response ( connection , result ) except Exception as exception_text : print ( \"Client connection failed: \" , exception_text ) connection . close () def parse_request ( self , data ): request = data . rstrip ( ' \\r\\n ' ) text = request [: data . index ( \" \\n \" )] . split () if len ( text ) != 3 : raise Exception ( 'Malformed request line' ) method , target , version = text if version != 'HTTP/1.1' : raise Exception ( 'Unexpected HTTP version' ) request = { 'data' : {}, 'method' : method } if '?' in target : request [ 'method' ] = 'POST' data = target . split ( '?' )[ 1 ] . split ( '&' ) for value in data : index , info = value . split ( '=' ) request [ 'data' ][ index ] = info return request def handle_request ( self , request ): if request [ 'method' ] == 'POST' : return self . handle_post ( request ) else : return self . handle_get () def handle_get ( self ): type = \"text/html; charset=utf-8\" first_settings = \"<html><head><style></style></head><body>\" course = \"<form><label>Name of discipline: </label><input name='course' /><br><br>\" points = \"<label>Number of points: </label><input name='points' /><br><br>\" button = \"<input type='submit'></form>\" body = first_settings + course + points + button for course_name in self . points : body += f \"<div><span> { course_name } : { self . points [ course_name ] } </span></div>\" second_settings = \"</body></html>\" body += second_settings body = body . encode ( \"utf-8\" ) headers = [( \"Content-Type\" , type ), ( \"Content-Length\" , len ( body ))] return Response ( 200 , \"OK\" , headers , body ) def handle_post ( self , request ): course = request [ \"data\" ][ \"course\" ] points = request [ \"data\" ][ \"points\" ] if course not in self . points : self . points [ course ] = [] if int ( points ) < 0 or int ( points ) > 103 : raise Exception ( \"Wrong number of points! Please, enter a number between 0 and 103.\" ) self . points [ course ] . append ( points ) return self . handle_get () def send_response ( self , connection , response ): file = connection . makefile ( 'wb' ) status_line = f \"HTTP/1.1 { response . status } { response . reason } \\r\\n \" status_line = status_line . encode ( \"utf-8\" ) file . write ( status_line ) if response . headers : for ( index , info ) in response . headers : header_line = f \" { index } : { info } \\r\\n \" file . write ( header_line . encode ( \"utf-8\" )) file . write ( b \" \\r\\n \" ) if response . body : file . write ( response . body ) file . flush () file . close () def get_error ( self , code , text ): return Response ( code , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , text ) if __name__ == '__main__' : host = 'localhost' port = 2468 server = MyHTTPServer ( host , port ) try : server . serve_forever () except KeyboardInterrupt : pass","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"lab_work2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0424\u0430\u0439\u043b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 (\u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445) models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.core.validators import MinValueValidator , MaxValueValidator , MinLengthValidator , MaxLengthValidator from django.core.exceptions import ValidationError from django.dispatch import receiver from django.db.models.signals import * from .models import * from django.conf import settings from django.contrib.auth import get_user_model from django.db.models.deletion import CASCADE from datetime import datetime class User ( AbstractUser ): username = models . CharField ( \"\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f/Username\" , max_length = 30 , unique = True ) password = models . CharField ( \"\u041f\u0430\u0440\u043e\u043b\u044c/Password\" , max_length = 30 ) surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f/Surname\" , max_length = 30 , null = False , blank = True ) name = models . CharField ( \"\u0418\u043c\u044f/Name\" , max_length = 30 , null = False , blank = False ) phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , max_length = 15 , null = True , blank = True ) passport = models . CharField ( \"\u0421\u0435\u0440\u0438\u044f \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430/Passport number\" , max_length = 20 , null = False , blank = False ) email = models . EmailField ( \"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430/Email address\" , unique = True ) birthday_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f/Birthday date\" , null = True , blank = True ) def __str__ ( self ): if self . is_superuser : return f ' { self . username } (superuser)' return f \" { self . surname } { self . name } \" class Hotel ( models . Model ): hotel_name = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f/Hotel name\" , max_length = 100 ) address = models . CharField ( \"\u0410\u0434\u0440\u0435\u0441\u0441/Address\" , max_length = 255 ) rating = models . IntegerField ( \"\u0420\u0435\u0439\u0442\u0438\u043d\u0433/Rating\" , validators = [ MinValueValidator ( 1 ), MaxValueValidator ( 5 )]) owner_surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430/Owner's surname\" , max_length = 30 , null = False , blank = True ) owner_name = models . CharField ( \"\u0418\u043c\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430/Owner's name\" , max_length = 30 , null = False , blank = False ) description = models . TextField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435/Description\" , max_length = 1000 , blank = True ) def __str__ ( self ): return f \" { self . hotel_name } , { self . rating } star hotel\" class Room ( models . Model ): TYPES = [ ( \"S\" , \"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Standard\" ), ( \"S+\" , \"\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Superior\" ), ( \"Su\" , \"\u041d\u043e\u043c\u0435\u0440 \u0441 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u043e\u0439 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u043a\u043e\u0439/Suite\" ), ( \"F\" , \"\u0421\u0435\u043c\u0435\u0439\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Family room\" ), ( \"St\" , \"\u0421\u0442\u0443\u0434\u0438\u044f/Studio\" ), ( \"D\" , \"\u0414\u0435\u043b\u044e\u043a\u0441/Deluxe\" ), ( \"HR\" , \"\u041d\u043e\u043c\u0435\u0440 \u0434\u043b\u044f \u043c\u043e\u043b\u043e\u0434\u043e\u0436\u0451\u043d\u043e\u0432/Honeymoon room\" ), ( \"HS\" , '\u041d\u043e\u043c\u0435\u0440 \u043b\u044e\u043a\u0441 \u0434\u043b\u044f \u043c\u043e\u043b\u043e\u0434\u043e\u0436\u0451\u043d\u043e\u0432/Honeymoon suite' ), ( \"Dpl\" , \"\u0414\u0432\u0443\u0445\u044d\u0442\u0430\u0436\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Duplex\" ), ( \"BR\" , \"\u041d\u043e\u043c\u0435\u0440 \u0441 \u0431\u0430\u043b\u043a\u043e\u043d\u043e\u043c/Balcony room\" ), ( \"PA\" , \"\u041d\u043e\u043c\u0435\u0440 \u0441 \u0432\u044b\u0445\u043e\u0434\u043e\u043c \u043a \u0431\u0430\u0441\u0441\u0435\u0439\u043d\u0443/Pool access room\" ), ( \"B+\" , \"\u041d\u043e\u043c\u0435\u0440 \u0431\u0438\u0437\u043d\u0435\u0441-\u043a\u043b\u0430\u0441\u0441\u0430/Business room\" ), ( \"P\" , \"\u041f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043d\u043e\u043c\u0435\u0440/President\" ), ( \"CR\" , \"\u0423\u0433\u043b\u043e\u0432\u043e\u0439 \u043d\u043e\u043c\u0435\u0440/Corner room\" ), ( \"A\" , \"\u0410\u043f\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b/Apartments\" ) ] hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , verbose_name = \"\u041e\u0442\u0435\u043b\u044c/Hotel\" ) number = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b/Room number\" , null = False , blank = False ) floor = models . IntegerField ( \"\u042d\u0442\u0430\u0436/Floor\" , validators = [ MinValueValidator ( 1 )]) type = models . CharField ( max_length = 5 , choices = TYPES , null = False , blank = False ) persons = models . IntegerField ( \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0440\u043e\u0432\u0430\u0442\u0435\u0439/Number of beds\" , validators = [ MinValueValidator ( 1 )]) price = models . PositiveIntegerField ( \"\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0437\u0430 \u043e\u0434\u043d\u0443 \u043d\u043e\u0447\u044c/Price for one night\" , null = False , blank = False ) description = models . TextField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430/Room description\" , max_length = 1000 , null = False , blank = True ) class Meta : unique_together = ( \"hotel\" , \"number\" ) def __str__ ( self ): return f \"Hotel { self . hotel . hotel_name } , room \u2116 { self . number } ( { self . floor } floor)\" class Reservation ( models . Model ): room = models . ForeignKey ( Room , on_delete = models . CASCADE , verbose_name = \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b/Room number\" ) guest = models . ForeignKey ( User , on_delete = models . CASCADE , verbose_name = \"\u0413\u043e\u0441\u0442\u044c/Guest\" ) check_in = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-in date\" , null = False , blank = False ) check_out = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-out date\" , null = False , blank = False ) price = models . PositiveIntegerField ( \"\u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f/Full accommodation cost\" , null = False , blank = False ) checked_in = models . BooleanField ( default = False ) @property def accommodation_duration ( self ): difference = ( self . check_out - self . check_in ) return difference . days def date_check ( self ): if self . check_out < self . check_in : raise ValidationError ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u0442\u044b \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-out date must be greater than\" \"check-in date\" ) def save ( self , * args , ** kwargs ): self . price = self . room . price * self . accommodation_duration super ( Reservation , self ) . save ( * args , ** kwargs ) def __str__ ( self ): return f \" { self . room . hotel . hotel_name } , room \u2116 { self . room . number } | { self . check_in } \u2014 { self . check_out } \" class Review ( models . Model ): RATINGS = [ ( \"1\" , \"\u0423\u0436\u0430\u0441\u043d\u043e/Awful\" ), ( \"2\" , \"\u041f\u043b\u043e\u0445\u043e/Bad\" ), ( \"3\" , \"\u0423\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e/Okay\" ), ( \"4\" , \"\u0425\u043e\u0440\u043e\u0448\u043e/Good\" ), ( \"5\" , \"\u041e\u0442\u043b\u0438\u0447\u043d\u043e/Great\" ) ] reservation = models . ForeignKey ( Reservation , on_delete = models . CASCADE ) check_in_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-in date\" ) check_out_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-out date\" ) review = models . TextField ( \"\u041e\u0442\u0437\u044b\u0432/Review\" , max_length = 5000 , null = False , blank = False ) rating = models . CharField ( \"\u041e\u0446\u0435\u043d\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432 \u043e\u0442\u0435\u043b\u0435/Rate your stay at the hotel\" , choices = RATINGS , max_length = 1 ) def save ( self , * args , ** kwargs ): self . check_in_date = self . reservation . check_in self . check_out_date = self . reservation . check_out super ( Review , self ) . save ( * args , ** kwargs ) \u0424\u0430\u0439\u043b \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 views.py from django.core.paginator import Paginator from django.views.generic.base import TemplateView from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import CreateView , DeleteView , UpdateView from django.contrib import messages from django.shortcuts import render , redirect , get_object_or_404 from django.contrib.auth import authenticate , login , logout from .models import * from .forms import * class Homepage ( TemplateView ): template_name = 'index.html' def register ( request ): if request . user . is_authenticated : return redirect ( '/main_page/' ) else : form = UserForm () if request . method == 'POST' : form = UserForm ( request . POST ) if form . is_valid (): form . save () return redirect ( 'login' ) data = { 'form' : form } return render ( request , 'register.html' , data ) def login_ ( request ): if request . user . is_authenticated : return redirect ( '/main_page/' ) else : if request . method == 'POST' : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( '/main_page/' ) data = {} return render ( request , 'login.html' , data ) def logout_ ( request ): logout ( request ) return redirect ( 'login' ) class IndexView ( TemplateView ): template_name = \"index1.html\" class HotelRetrieveView ( DetailView ): model = Hotel template_name = 'hotel_detail.html' class ListReservation ( ListView ): model = Reservation template_name = 'reservation.html' all_reservations = Reservation . objects paginate_by = 10 class ReservationCreateView ( CreateView ): model = Reservation form_class = ReservationForm template_name = 'reservation_create.html' def create_reservation ( request ): data = {} form = ReservationForm ( request . POST or None ) if form . is_valid (): form . save () data [ 'form' ] = form return render ( request , \"reservation_create.html\" , data ) class ReservationRetrieveView ( DetailView ): model = Reservation template_name = 'reservation_detail.html' class ReservationUpdateView ( UpdateView ): model = Reservation form_class = ReservationForm template_name = 'reservation_update.html' class ReservationDeleteView ( DeleteView ): model = Reservation template_name = 'reservation_delete.html' class HotelList ( ListView ): model = Hotel template_name = 'hotel.html' all_hotels = Hotel . objects paginate_by = 10 class GuestsList ( ListView ): model = Reservation template_name = 'guests.html' all_guests = Reservation . objects paginate_by = 10 class ListRoom ( ListView ): model = Room template_name = \"room_list.html\" all_rooms = Room . objects paginate_by = 10 class RoomRetrieveView ( DetailView ): model = Room template_name = \"room_detail.html\" class ReviewCreateView ( CreateView ): model = Review form_class = ReviewForm template_name = \"review_create.html\" class ReviewList ( ListView ): model = Review template_name = \"review.html\" all_review = Review . objects paginate_by = 10 class ReviewRetrieveView ( DetailView ): model = Review template_name = \"review_detail.html\" \u0424\u0430\u0439\u043b \u0441 \u0444\u043e\u0440\u043c\u0430\u043c\u0438 forms.py from .models import * from django import forms from django.contrib.auth.forms import UserCreationForm class ReservationForm ( forms . ModelForm ): class Meta : model = Reservation fields = [ 'guest' , 'room' , 'check_in' , 'check_out' ] class UserForm ( UserCreationForm ): class Meta : model = User fields = [ 'username' , 'surname' , 'name' , 'phone_number' , 'passport' , 'email' , 'birthday_date' ] class ReviewForm ( forms . ModelForm ): class Meta : model = Review fields = [ 'reservation' , 'review' , 'rating' ] \u0424\u0430\u0439\u043b \u0441\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 urls.py from django.urls import path from .views import * urlpatterns = [ path ( '' , Homepage . as_view ()), path ( 'register/' , register , name = 'register' ), path ( 'login/' , login_ , name = 'login' ), path ( 'logout/' , logout_ , name = 'logout' ), path ( 'main_page/' , IndexView . as_view (), name = 'main_page' ), path ( 'hotels/' , HotelList . as_view (), name = 'hotel_list' ), path ( 'hotels/<str:pk>' , HotelRetrieveView . as_view ()), path ( 'reservations/' , ListReservation . as_view (), name = 'my_reservation' ), path ( 'reservations/create/' , ReservationCreateView . as_view ( success_url = '/reservations/' ), name = 'reservation' ), #path('reservations/create/', create_reservation, name='reservation'), path ( 'reservations/<str:pk>' , ReservationRetrieveView . as_view ()), path ( 'reservations/<str:pk>/update/' , ReservationUpdateView . as_view ( success_url = '/reservations/' )), path ( 'reservations/<int:pk>/delete/' , ReservationDeleteView . as_view ( success_url = '/reservations/' )), path ( 'rooms/' , ListRoom . as_view (), name = 'room_list' ), path ( 'rooms/<str:pk>' , RoomRetrieveView . as_view ()), path ( 'reviews/' , ReviewList . as_view (), name = 'review' ), path ( 'reviews/create/' , ReviewCreateView . as_view ( success_url = '/reviews/' ), name = 'review_create' ), path ( 'reviews/<str:pk>' , ReviewRetrieveView . as_view ()), path ( 'guests/' , GuestsList . as_view (), name = 'guests' ), ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_work2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_work2/#_1","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab_work2/#_2","text":"\u0424\u0430\u0439\u043b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 (\u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445) models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.core.validators import MinValueValidator , MaxValueValidator , MinLengthValidator , MaxLengthValidator from django.core.exceptions import ValidationError from django.dispatch import receiver from django.db.models.signals import * from .models import * from django.conf import settings from django.contrib.auth import get_user_model from django.db.models.deletion import CASCADE from datetime import datetime class User ( AbstractUser ): username = models . CharField ( \"\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f/Username\" , max_length = 30 , unique = True ) password = models . CharField ( \"\u041f\u0430\u0440\u043e\u043b\u044c/Password\" , max_length = 30 ) surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f/Surname\" , max_length = 30 , null = False , blank = True ) name = models . CharField ( \"\u0418\u043c\u044f/Name\" , max_length = 30 , null = False , blank = False ) phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , max_length = 15 , null = True , blank = True ) passport = models . CharField ( \"\u0421\u0435\u0440\u0438\u044f \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430/Passport number\" , max_length = 20 , null = False , blank = False ) email = models . EmailField ( \"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430/Email address\" , unique = True ) birthday_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f/Birthday date\" , null = True , blank = True ) def __str__ ( self ): if self . is_superuser : return f ' { self . username } (superuser)' return f \" { self . surname } { self . name } \" class Hotel ( models . Model ): hotel_name = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f/Hotel name\" , max_length = 100 ) address = models . CharField ( \"\u0410\u0434\u0440\u0435\u0441\u0441/Address\" , max_length = 255 ) rating = models . IntegerField ( \"\u0420\u0435\u0439\u0442\u0438\u043d\u0433/Rating\" , validators = [ MinValueValidator ( 1 ), MaxValueValidator ( 5 )]) owner_surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430/Owner's surname\" , max_length = 30 , null = False , blank = True ) owner_name = models . CharField ( \"\u0418\u043c\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430/Owner's name\" , max_length = 30 , null = False , blank = False ) description = models . TextField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435/Description\" , max_length = 1000 , blank = True ) def __str__ ( self ): return f \" { self . hotel_name } , { self . rating } star hotel\" class Room ( models . Model ): TYPES = [ ( \"S\" , \"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Standard\" ), ( \"S+\" , \"\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Superior\" ), ( \"Su\" , \"\u041d\u043e\u043c\u0435\u0440 \u0441 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u043e\u0439 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u043a\u043e\u0439/Suite\" ), ( \"F\" , \"\u0421\u0435\u043c\u0435\u0439\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Family room\" ), ( \"St\" , \"\u0421\u0442\u0443\u0434\u0438\u044f/Studio\" ), ( \"D\" , \"\u0414\u0435\u043b\u044e\u043a\u0441/Deluxe\" ), ( \"HR\" , \"\u041d\u043e\u043c\u0435\u0440 \u0434\u043b\u044f \u043c\u043e\u043b\u043e\u0434\u043e\u0436\u0451\u043d\u043e\u0432/Honeymoon room\" ), ( \"HS\" , '\u041d\u043e\u043c\u0435\u0440 \u043b\u044e\u043a\u0441 \u0434\u043b\u044f \u043c\u043e\u043b\u043e\u0434\u043e\u0436\u0451\u043d\u043e\u0432/Honeymoon suite' ), ( \"Dpl\" , \"\u0414\u0432\u0443\u0445\u044d\u0442\u0430\u0436\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Duplex\" ), ( \"BR\" , \"\u041d\u043e\u043c\u0435\u0440 \u0441 \u0431\u0430\u043b\u043a\u043e\u043d\u043e\u043c/Balcony room\" ), ( \"PA\" , \"\u041d\u043e\u043c\u0435\u0440 \u0441 \u0432\u044b\u0445\u043e\u0434\u043e\u043c \u043a \u0431\u0430\u0441\u0441\u0435\u0439\u043d\u0443/Pool access room\" ), ( \"B+\" , \"\u041d\u043e\u043c\u0435\u0440 \u0431\u0438\u0437\u043d\u0435\u0441-\u043a\u043b\u0430\u0441\u0441\u0430/Business room\" ), ( \"P\" , \"\u041f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043d\u043e\u043c\u0435\u0440/President\" ), ( \"CR\" , \"\u0423\u0433\u043b\u043e\u0432\u043e\u0439 \u043d\u043e\u043c\u0435\u0440/Corner room\" ), ( \"A\" , \"\u0410\u043f\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b/Apartments\" ) ] hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , verbose_name = \"\u041e\u0442\u0435\u043b\u044c/Hotel\" ) number = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b/Room number\" , null = False , blank = False ) floor = models . IntegerField ( \"\u042d\u0442\u0430\u0436/Floor\" , validators = [ MinValueValidator ( 1 )]) type = models . CharField ( max_length = 5 , choices = TYPES , null = False , blank = False ) persons = models . IntegerField ( \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0440\u043e\u0432\u0430\u0442\u0435\u0439/Number of beds\" , validators = [ MinValueValidator ( 1 )]) price = models . PositiveIntegerField ( \"\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0437\u0430 \u043e\u0434\u043d\u0443 \u043d\u043e\u0447\u044c/Price for one night\" , null = False , blank = False ) description = models . TextField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430/Room description\" , max_length = 1000 , null = False , blank = True ) class Meta : unique_together = ( \"hotel\" , \"number\" ) def __str__ ( self ): return f \"Hotel { self . hotel . hotel_name } , room \u2116 { self . number } ( { self . floor } floor)\" class Reservation ( models . Model ): room = models . ForeignKey ( Room , on_delete = models . CASCADE , verbose_name = \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b/Room number\" ) guest = models . ForeignKey ( User , on_delete = models . CASCADE , verbose_name = \"\u0413\u043e\u0441\u0442\u044c/Guest\" ) check_in = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-in date\" , null = False , blank = False ) check_out = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-out date\" , null = False , blank = False ) price = models . PositiveIntegerField ( \"\u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f/Full accommodation cost\" , null = False , blank = False ) checked_in = models . BooleanField ( default = False ) @property def accommodation_duration ( self ): difference = ( self . check_out - self . check_in ) return difference . days def date_check ( self ): if self . check_out < self . check_in : raise ValidationError ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u0442\u044b \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-out date must be greater than\" \"check-in date\" ) def save ( self , * args , ** kwargs ): self . price = self . room . price * self . accommodation_duration super ( Reservation , self ) . save ( * args , ** kwargs ) def __str__ ( self ): return f \" { self . room . hotel . hotel_name } , room \u2116 { self . room . number } | { self . check_in } \u2014 { self . check_out } \" class Review ( models . Model ): RATINGS = [ ( \"1\" , \"\u0423\u0436\u0430\u0441\u043d\u043e/Awful\" ), ( \"2\" , \"\u041f\u043b\u043e\u0445\u043e/Bad\" ), ( \"3\" , \"\u0423\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e/Okay\" ), ( \"4\" , \"\u0425\u043e\u0440\u043e\u0448\u043e/Good\" ), ( \"5\" , \"\u041e\u0442\u043b\u0438\u0447\u043d\u043e/Great\" ) ] reservation = models . ForeignKey ( Reservation , on_delete = models . CASCADE ) check_in_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-in date\" ) check_out_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-out date\" ) review = models . TextField ( \"\u041e\u0442\u0437\u044b\u0432/Review\" , max_length = 5000 , null = False , blank = False ) rating = models . CharField ( \"\u041e\u0446\u0435\u043d\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432 \u043e\u0442\u0435\u043b\u0435/Rate your stay at the hotel\" , choices = RATINGS , max_length = 1 ) def save ( self , * args , ** kwargs ): self . check_in_date = self . reservation . check_in self . check_out_date = self . reservation . check_out super ( Review , self ) . save ( * args , ** kwargs ) \u0424\u0430\u0439\u043b \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 views.py from django.core.paginator import Paginator from django.views.generic.base import TemplateView from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import CreateView , DeleteView , UpdateView from django.contrib import messages from django.shortcuts import render , redirect , get_object_or_404 from django.contrib.auth import authenticate , login , logout from .models import * from .forms import * class Homepage ( TemplateView ): template_name = 'index.html' def register ( request ): if request . user . is_authenticated : return redirect ( '/main_page/' ) else : form = UserForm () if request . method == 'POST' : form = UserForm ( request . POST ) if form . is_valid (): form . save () return redirect ( 'login' ) data = { 'form' : form } return render ( request , 'register.html' , data ) def login_ ( request ): if request . user . is_authenticated : return redirect ( '/main_page/' ) else : if request . method == 'POST' : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( '/main_page/' ) data = {} return render ( request , 'login.html' , data ) def logout_ ( request ): logout ( request ) return redirect ( 'login' ) class IndexView ( TemplateView ): template_name = \"index1.html\" class HotelRetrieveView ( DetailView ): model = Hotel template_name = 'hotel_detail.html' class ListReservation ( ListView ): model = Reservation template_name = 'reservation.html' all_reservations = Reservation . objects paginate_by = 10 class ReservationCreateView ( CreateView ): model = Reservation form_class = ReservationForm template_name = 'reservation_create.html' def create_reservation ( request ): data = {} form = ReservationForm ( request . POST or None ) if form . is_valid (): form . save () data [ 'form' ] = form return render ( request , \"reservation_create.html\" , data ) class ReservationRetrieveView ( DetailView ): model = Reservation template_name = 'reservation_detail.html' class ReservationUpdateView ( UpdateView ): model = Reservation form_class = ReservationForm template_name = 'reservation_update.html' class ReservationDeleteView ( DeleteView ): model = Reservation template_name = 'reservation_delete.html' class HotelList ( ListView ): model = Hotel template_name = 'hotel.html' all_hotels = Hotel . objects paginate_by = 10 class GuestsList ( ListView ): model = Reservation template_name = 'guests.html' all_guests = Reservation . objects paginate_by = 10 class ListRoom ( ListView ): model = Room template_name = \"room_list.html\" all_rooms = Room . objects paginate_by = 10 class RoomRetrieveView ( DetailView ): model = Room template_name = \"room_detail.html\" class ReviewCreateView ( CreateView ): model = Review form_class = ReviewForm template_name = \"review_create.html\" class ReviewList ( ListView ): model = Review template_name = \"review.html\" all_review = Review . objects paginate_by = 10 class ReviewRetrieveView ( DetailView ): model = Review template_name = \"review_detail.html\" \u0424\u0430\u0439\u043b \u0441 \u0444\u043e\u0440\u043c\u0430\u043c\u0438 forms.py from .models import * from django import forms from django.contrib.auth.forms import UserCreationForm class ReservationForm ( forms . ModelForm ): class Meta : model = Reservation fields = [ 'guest' , 'room' , 'check_in' , 'check_out' ] class UserForm ( UserCreationForm ): class Meta : model = User fields = [ 'username' , 'surname' , 'name' , 'phone_number' , 'passport' , 'email' , 'birthday_date' ] class ReviewForm ( forms . ModelForm ): class Meta : model = Review fields = [ 'reservation' , 'review' , 'rating' ] \u0424\u0430\u0439\u043b \u0441\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 urls.py from django.urls import path from .views import * urlpatterns = [ path ( '' , Homepage . as_view ()), path ( 'register/' , register , name = 'register' ), path ( 'login/' , login_ , name = 'login' ), path ( 'logout/' , logout_ , name = 'logout' ), path ( 'main_page/' , IndexView . as_view (), name = 'main_page' ), path ( 'hotels/' , HotelList . as_view (), name = 'hotel_list' ), path ( 'hotels/<str:pk>' , HotelRetrieveView . as_view ()), path ( 'reservations/' , ListReservation . as_view (), name = 'my_reservation' ), path ( 'reservations/create/' , ReservationCreateView . as_view ( success_url = '/reservations/' ), name = 'reservation' ), #path('reservations/create/', create_reservation, name='reservation'), path ( 'reservations/<str:pk>' , ReservationRetrieveView . as_view ()), path ( 'reservations/<str:pk>/update/' , ReservationUpdateView . as_view ( success_url = '/reservations/' )), path ( 'reservations/<int:pk>/delete/' , ReservationDeleteView . as_view ( success_url = '/reservations/' )), path ( 'rooms/' , ListRoom . as_view (), name = 'room_list' ), path ( 'rooms/<str:pk>' , RoomRetrieveView . as_view ()), path ( 'reviews/' , ReviewList . as_view (), name = 'review' ), path ( 'reviews/create/' , ReviewCreateView . as_view ( success_url = '/reviews/' ), name = 'review_create' ), path ( 'reviews/<str:pk>' , ReviewRetrieveView . as_view ()), path ( 'guests/' , GuestsList . as_view (), name = 'guests' ), ]","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"lab_work3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 DjangoORM \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u043c\u0443 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u044b API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Djoser \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u21163.1 \u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0435\u0436\u0435\u0433\u043e\u0434\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0441\u043e\u0431\u0430\u043a. \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043c\u043e\u043d\u043e- \u0438 \u043f\u043e\u043b\u0438\u043f\u043e\u0440\u043e\u0434\u043d\u044b\u0435. \u041e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043e\u0431\u0430\u043a\u0430\u0445 - \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u0445. \u0423\u0447\u0430\u0441\u0442\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u043c \u0438\u043b\u0438 \u043e\u0442 \u043a\u043b\u0443\u0431\u0430. \u0423 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0441\u043f\u043e\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e \u0442\u043e\u043c, \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u043a\u043b\u0443\u0431\u0443 \u043e\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f, \u043a\u043b\u0438\u0447\u043a\u0430, \u043f\u043e\u0440\u043e\u0434\u0430 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u043a\u043b\u0430\u0441\u0441\u043d\u043e\u0441\u0442\u044c, \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0440\u043e\u0434\u043e\u0441\u043b\u043e\u0432\u043d\u043e\u0439 (\u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043a\u043b\u0438\u0447\u043a\u0438 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439), \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u0438\u0432\u0438\u0432\u043a\u0438, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u043e\u0437\u044f\u0438\u043d\u0430. \u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0441\u043e\u0431\u0430\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0439\u0442\u0438 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0422.\u043a. \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043b\u0430\u0442\u043d\u044b\u043c, \u0442\u043e \u0445\u043e\u0437\u044f\u0438\u043d \u043e\u0431\u044f\u0437\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0441\u0447\u0435\u0442 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c. \u0421\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0434\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0439, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0448\u043b\u0430 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0431 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0438 \u0438\u043c\u044f, \u043d\u043e\u043c\u0435\u0440 \u0440\u0438\u043d\u0433\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442, \u043a\u043b\u0443\u0431, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0441\u043e\u0441\u0442\u043e\u0438\u0442. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0438\u043d\u0433 \u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043e\u0432. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0440\u043e\u0434\u0430 \u0441\u043e\u0431\u0430\u043a \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u043d\u0430 \u0441\u0432\u043e\u0435\u043c \u0440\u0438\u043d\u0433\u0435, \u043d\u043e \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u0440\u0438\u043d\u0433\u0435 \u0432 \u0440\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0440\u043e\u0434\u044b. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c 3 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f, \u0437\u0430 \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u0430\u043b\u043b\u044b \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430. \u0418\u0442\u043e\u0433\u043e\u043c \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435 \u043f\u043e \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0431\u0430\u0437\u0443 \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0438\u043b\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430, \u0441\u043d\u044f\u0442\u044c \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u0441 \u0441\u0443\u0434\u0435\u0439\u0441\u0442\u0432\u0430, \u0437\u0430\u043c\u0435\u043d\u0438\u0432 \u0435\u0433\u043e \u0434\u0440\u0443\u0433\u0438\u043c, \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043e\u0431\u0430\u043a\u0443 \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: : \u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0445\u043e\u0437\u044f\u0438\u043d \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u043e\u0431\u0430\u043a\u043e\u0439? \u041a\u0430\u043a\u0438\u043c\u0438 \u043f\u043e\u0440\u043e\u0434\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0443\u0431? \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u0431\u044b\u043b\u0438 \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435? \u041a\u0430\u043a\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0440\u043e\u0434\u0443? \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435? \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 (\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u0440\u043e\u0434\u044b, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0434\u0430\u043b\u0435\u0439 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435). \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0424\u0430\u0439\u043b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 (\u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445) models.py from django.core.validators import MinValueValidator , MaxValueValidator from django.db import models from django.contrib.auth.models import AbstractUser class Organizer ( AbstractUser ): org_surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f/Surname\" , max_length = 30 , null = False , blank = False ) org_name = models . CharField ( \"\u0418\u043c\u044f/Name\" , max_length = 30 , null = False , blank = False ) org_patronymic = models . CharField ( \"\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e/Patronymic\" , max_length = 30 , null = True , blank = True ) org_phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , max_length = 20 , null = True , blank = True ) org_passport = models . CharField ( \"\u0421\u0435\u0440\u0438\u044f \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430/Passport number\" , max_length = 20 , null = False , blank = False ) org_email = models . EmailField ( \"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430/Email address\" , unique = True ) REQUIRED_FIELDS = [ \"org_surname\" , \"org_name\" , \"org_patronymic\" , \"org_phone_number\" , \"org_passport\" , \"org_email\" ] def __str__ ( self ): return f \" { self . org_surname } { self . org_name } { self . org_patronymic } \" class Owner ( models . Model ): owner_surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0445\u043e\u0437\u044f\u0438\u043d\u0430/Owner's surname\" , max_length = 30 , null = False , blank = False ) owner_name = models . CharField ( \"\u0418\u043c\u044f \u0445\u043e\u0437\u044f\u0438\u043d\u0430/Owner's name\" , max_length = 30 , null = False , blank = False ) owner_patronymic = models . CharField ( \"\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0445\u043e\u0437\u044f\u0438\u043d\u0430/Owner's patronymic\" , max_length = 30 , null = True , blank = True ) owner_passport = models . CharField ( \"\u0421\u0435\u0440\u0438\u044f \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430 \u0445\u043e\u0437\u044f\u0438\u043d\u0430/Owner's passport number\" , unique = True , max_length = 30 , null = False , blank = False ) owner_phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , max_length = 20 , unique = True , null = False , blank = False ) owner_email = models . CharField ( \"\u041f\u043e\u0447\u0442\u0430/E-mail\" , max_length = 50 , unique = True , null = True , blank = True ) def __str__ ( self ): return f \"\u0425\u043e\u0437\u044f\u0438\u043d/Owner { self . owner_surname } { self . owner_name } (ID { self . id } )\" class Club ( models . Model ): name = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430/Club name\" , max_length = 100 , null = False , blank = False ) club_phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , unique = True , max_length = 20 , null = False , blank = False ) club_email = models . CharField ( \"\u041f\u043e\u0447\u0442\u0430/E-mail\" , max_length = 50 , unique = True , null = True , blank = True ) def __str__ ( self ): return f \"\u041a\u043b\u0443\u0431/Club { self . name } \" class Dog ( models . Model ): breeds = ( ( '\u041a\u043e\u0440\u0433\u0438/Corgi' , '\u041a\u043e\u0440\u0433\u0438/Corgi' ), ( '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' , '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' ), ( '\u0411\u0438\u0433\u043b\u044c/Beagle' , '\u0411\u0438\u0433\u043b\u044c/Beagle' ), ( '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' , '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' ), ( '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' , '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' ), ( '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' , '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' ), ( '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' , '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' ) ) class_types = ( ( \"Show\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 show/Dogs of show class\" ), ( \"Breed\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 breed/Dogs of breed class\" ), ( \"Pet\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 pet/Dogs of pet class\" ) ) dog_name = models . CharField ( \"\u041a\u043b\u0438\u0447\u043a\u0430/Name\" , max_length = 100 , null = False , blank = True ) breed = models . CharField ( \"\u041f\u043e\u0440\u043e\u0434\u0430/Breed\" , max_length = 100 , choices = breeds ) full_age = models . IntegerField ( \"\u041f\u043e\u043b\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432 \u0433\u043e\u0434\u0430\u0445/Full age in years\" , null = False , blank = False , validators = [ MinValueValidator ( 0 )]) month_age = models . IntegerField ( \"\u041f\u043e\u043b\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432 \u043c\u0435\u0441\u044f\u0446\u0430\u0445/Full age in months\" , null = False , blank = False , validators = [ MinValueValidator ( 0 )]) dog_class = models . CharField ( \"\u041a\u043b\u0430\u0441\u0441/Class\" , max_length = 250 , choices = class_types ) document = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e \u0440\u043e\u0434\u043e\u0441\u043b\u043e\u0432\u043d\u043e\u0439/Number of the pedigree document\" , unique = True , max_length = 20 , null = False , blank = False ) dad_name = models . CharField ( \"\u041a\u043b\u0438\u0447\u043a\u0430 \u043e\u0442\u0446\u0430/Dad's name\" , max_length = 100 , null = False , blank = True ) mom_name = models . CharField ( \"\u041a\u043b\u0438\u0447\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438/Mom's name\" , max_length = 100 , null = False , blank = True ) last_vaccination = models . DateField ( \"\u0414\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u0438\u0432\u0438\u0432\u043a\u0438/Last vaccination date\" , null = False , blank = False ) dog_info = models . TextField ( \"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u043e\u0431\u0430\u043a\u0435/Info about dog\" , max_length = 2000 , null = False , blank = True ) dog_owner = models . ForeignKey ( Owner , on_delete = models . CASCADE , related_name = \"dog_owner\" , related_query_name = \"dog_owner\" , verbose_name = \"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446/Owner\" ) dog_club = models . ForeignKey ( Club , on_delete = models . CASCADE , related_name = \"dog_club\" , related_query_name = \"dog_club\" , verbose_name = \"\u041a\u043b\u0443\u0431/Club\" ) def __str__ ( self ): return f \" { self . breed } { self . dog_name } (ID { self . id } )\" class Show ( models . Model ): show_types = ( ( \"\u041c\u043e\u043d\u043e/Mono\" , \"\u041e\u0434\u043d\u043e\u043f\u043e\u0440\u043e\u0434\u043d\u0430\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Monobreed exhibition\" ), ( \"\u041f\u043e\u043b\u0438/Poly\" , \"\u0412\u0441\u0435\u043f\u043e\u0440\u043e\u0434\u043d\u0430\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Polybreed exhibition\" ) ) name = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438/Exhibition name\" , max_length = 100 , null = False , blank = False ) begin_date = models . DateTimeField ( \"\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438/Show start\" , null = False , blank = False ) end_date = models . DateTimeField ( \"\u041e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438/Show end\" , null = False , blank = False ) city = models . CharField ( \"\u0413\u043e\u0440\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438/City of the show\" , max_length = 50 , null = False , blank = False ) address = models . CharField ( \"\u0410\u0434\u0440\u0435\u0441\u0441/Address\" , max_length = 250 , null = False , blank = False ) show_type = models . CharField ( \"\u0422\u0438\u043f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438/Exhibition type\" , max_length = 250 , choices = show_types ) host = models . ForeignKey ( Organizer , on_delete = models . CASCADE , related_name = \"host\" , related_query_name = \"org\" , verbose_name = \"\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440/Organizer\" ) def __str__ ( self ): return f \"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Exhibition ' { self . name } ', { self . begin_date } \" #.strftime('%Y') class DogParticipation ( models . Model ): status_choices = ( ( \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" ), ( \"\u0421\u043d\u044f\u0442/Suspended\" , \"\u0421\u043d\u044f\u0442/Suspended\" ), ( \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" , \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" ), ( \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" , \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" ) ) bill_choices = ( ( \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d/Paid\" , \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d/Paid\" ), ( \"\u041d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d/Not paid\" , \"\u041d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d/Not paid\" ) ) checkup_choices = ( ( \"\u041f\u0440\u043e\u0439\u0434\u0435\u043d/Passed\" , \"\u041c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0439\u0434\u0435\u043d/Medical examination was successfully passed\" ), ( \"\u041d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d/Not passed\" , \"\u041c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440 \u043d\u0435 \u0431\u044b\u043b \u043f\u0440\u043e\u0439\u0434\u0435\u043d/Medical examination was not passed\" ) ) medals = ( ( \"\u0417\u043e\u043b\u043e\u0442\u043e/Gold\" , \"\u0417\u043e\u043b\u043e\u0442\u043e \u0437\u0430 \u043f\u0435\u0440\u0432\u043e\u0435 \u043c\u0435\u0441\u0442\u043e/Gold for first place\" ), ( \"\u0421\u0435\u0440\u0435\u0431\u0440\u043e/Silver\" , \"\u0421\u0435\u0440\u0435\u0431\u0440\u043e \u0437\u0430 \u0432\u0442\u043e\u0440\u043e\u0435 \u043c\u0435\u0441\u0442\u043e/Silver for second place\" ), ( \"\u0411\u0440\u043e\u043d\u0437\u0430/Bronze\" , \"\u0411\u0440\u043e\u043d\u0437\u0430 \u0437\u0430 \u0442\u0440\u0435\u0442\u044c\u0435 \u043c\u0435\u0441\u0442\u043e/Bronze for third place\" ), ( \"\u041c\u0435\u0434\u0430\u043b\u044c \u043e\u0442 \u0437\u0440\u0438\u0442\u0435\u043b\u0435\u0439/Audience award\" , \"\u041c\u0435\u0434\u0430\u043b\u044c \u043a\u0430\u043a \u043f\u0440\u0438\u0437 \u0437\u0440\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0441\u0438\u043c\u043f\u0430\u0442\u0438\u0439/Medal as audience sympathy prize\" ) ) show_dog_number = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u0441\u043e\u0431\u0430\u043a\u0438 \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435/Dog's number on show\" , null = False , blank = False ) dog_status = models . CharField ( \"\u0421\u0442\u0430\u0442\u0443\u0441 \u0441\u043e\u0431\u0430\u043a\u0438/Dog's status\" , max_length = 100 , choices = status_choices ) reg_dog_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043e\u0431\u0430\u043a\u0438/Dog registration date\" , null = False , blank = False ) bill = models . CharField ( \"\u0421\u0447\u0451\u0442/Bill\" , max_length = 100 , choices = bill_choices ) checkup = models . CharField ( \"\u041c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440/Checkup\" , max_length = 100 , choices = checkup_choices ) checkup_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440\u0430/Checkup date\" , null = True , blank = True ) participant_dog = models . ForeignKey ( Dog , on_delete = models . CASCADE , related_name = \"dog_reg_participation\" , related_query_name = \"dog_reg\" , verbose_name = \"\u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a-\u0441\u043e\u0431\u0430\u043a\u0430/Participant-dog\" ) show_dog = models . ForeignKey ( Show , on_delete = models . CASCADE , related_name = \"show_reg_dog_participation\" , related_query_name = \"show_dog_reg\" , verbose_name = \"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Exhibition\" ) show_medal = models . CharField ( \"\u041c\u0435\u0434\u0430\u043b\u044c/Medal\" , max_length = 250 , choices = medals , null = True , blank = False ) class Meta : unique_together = ( \"show_dog\" , \"participant_dog\" ) def __str__ ( self ): return f \" { self . show_dog } , { self . participant_dog } \" class Expert ( models . Model ): expert_surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430/Expert's surname\" , max_length = 30 , null = False , blank = False ) expert_name = models . CharField ( \"\u0418\u043c\u044f \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430/Expert's name\" , max_length = 30 , null = False , blank = False ) expert_patronymic = models . CharField ( \"\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430/Expert's patronymic\" , max_length = 30 , null = True , blank = True ) expert_passport = models . CharField ( \"\u0421\u0435\u0440\u0438\u044f \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430/Expert's passport number\" , max_length = 30 , null = False , blank = False ) expert_phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , max_length = 20 , null = False , blank = False ) expert_email = models . CharField ( \"\u041f\u043e\u0447\u0442\u0430/E-mail\" , max_length = 50 , null = True , blank = True ) club = models . ForeignKey ( Club , on_delete = models . CASCADE , related_name = \"expert_club\" , related_query_name = \"exp_club\" , verbose_name = \"\u041a\u043b\u0443\u0431/Club\" ) def __str__ ( self ): return f \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442/Expert { self . expert_surname } { self . expert_name } { self . expert_patronymic } (ID { self . id } )\" class ExpertParticipation ( models . Model ): status_choices = ( ( \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" ), ( \"\u0421\u043d\u044f\u0442/Suspended\" , \"\u0421\u043d\u044f\u0442/Suspended\" ), ( \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" , \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" ), ( \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" , \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" ) ) show_exp_number = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435/Expert's number on show\" ) exp_status = models . CharField ( \"\u0421\u0442\u0430\u0442\u0443\u0441 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430/Expert's status\" , max_length = 250 , choices = status_choices ) reg_exp_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430/Expert registration date\" ) participant_exp = models . ForeignKey ( Expert , on_delete = models . CASCADE , related_name = \"exp_reg_participation\" , related_query_name = \"exp_reg\" , verbose_name = \"\u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a-\u044d\u043a\u0441\u043f\u0435\u0440\u0442/Participant-expert\" ) show_exp = models . ForeignKey ( Show , on_delete = models . CASCADE , related_name = \"show_exp_reg_participation\" , related_query_name = \"show_exp_reg\" , verbose_name = \"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Exhibition\" ) class Meta : unique_together = ( \"show_exp\" , \"participant_exp\" ) unique_together = ( \"show_exp_number\" , \"show_exp\" ) def __str__ ( self ): return f \" { self . participant_exp } , { self . show_exp } \" class Sponsor ( models . Model ): sponsor_name = models . CharField ( \"\u0418\u043c\u044f \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0430/Sponsor name\" , max_length = 200 , null = False , blank = False ) sponsor_phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , max_length = 20 , null = False , blank = False ) sponsor_email = models . CharField ( \"\u041f\u043e\u0447\u0442\u0430/E-mail\" , max_length = 50 , null = True , blank = True ) class Sponsorship ( models . Model ): contract_number = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430/Contract number\" , null = False , blank = False , unique = True ) sign_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430/Contract sign date\" , null = False , blank = False ) sponsor = models . ForeignKey ( Sponsor , on_delete = models . CASCADE , related_name = \"sponsor\" , related_query_name = \"sponsor\" , verbose_name = \"\u0421\u043f\u043e\u043d\u0441\u043e\u0440/Sponsor\" ) sponsor_show = models . ForeignKey ( Show , on_delete = models . CASCADE , related_name = \"sponsor_show\" , related_query_name = \"sponsor_show\" , verbose_name = \"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Exhibition\" ) class ShowSchedule ( models . Model ): breeds = ( ( '\u041a\u043e\u0440\u0433\u0438/Corgi' , '\u041a\u043e\u0440\u0433\u0438/Corgi' ), ( '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' , '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' ), ( '\u0411\u0438\u0433\u043b\u044c/Beagle' , '\u0411\u0438\u0433\u043b\u044c/Beagle' ), ( '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' , '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' ), ( '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' , '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' ), ( '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' , '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' ), ( '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' , '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' ) ) class_types = ( ( \"Baby\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 4 \u0434\u043e 6 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 4 to 6 months old\" ), ( \"Puppy\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 6 \u0434\u043e 9 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 6 to 9 months old\" ), ( \"Junior\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 9 \u0434\u043e 18 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 9 to 18 months old\" ), ( \"Intermediate\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u0434\u043e 24 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 15 to 24 months old\" ), ( \"Open\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 15 months old\" ), ( \"Work\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u0434\u0438\u043f\u043b\u043e\u043c\u043e\u043c/Dogs from 15 months with diploma old\" ), ( \"Champions\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u043f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u044b-\u0447\u043b\u0435\u043d\u0430 FCI/Dogs from 15 months old with FCI Member country Champion certificate\" ), ( \"Veteran\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 8 \u043b\u0435\u0442/Dogs from 8 years old\" ) ) show_breed = models . CharField ( \"\u041f\u043e\u0440\u043e\u0434\u0430/Breed\" , choices = breeds , max_length = 50 , null = False , blank = False ) show_time = models . DateTimeField ( \"\u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f/Date and time of performance\" , null = False , blank = False ) ring_number = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u0440\u0438\u043d\u0433\u0430/Ring number\" , null = False , blank = False ) show_class = models . CharField ( \"\u0412\u044b\u0441\u0442\u0430\u0432\u043e\u0447\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441/Show class\" , max_length = 200 , choices = class_types , null = False , blank = False ) show_schedule = models . ForeignKey ( Show , on_delete = models . CASCADE , related_name = \"show_schedule\" , related_query_name = \"show_schedule\" , verbose_name = \"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Exhibition\" ) def __str__ ( self ): return f \" { self . show_schedule } , { self . show_breed } , \u0440\u0438\u043d\u0433/ring \u2116 { self . ring_number } \" class Grading ( models . Model ): schedule_grade = models . ForeignKey ( ShowSchedule , on_delete = models . CASCADE , related_name = \"schedule_grade\" , related_query_name = \"schedule_grade\" , verbose_name = \"\u0420\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435/Schedulle\" ) dog_grade = models . ForeignKey ( DogParticipation , on_delete = models . CASCADE , related_name = \"dog_grade\" , related_query_name = \"dog_grade\" , verbose_name = \"\u0421\u043e\u0431\u0430\u043a\u0430/Dog\" ) expert_grade = models . ForeignKey ( ExpertParticipation , on_delete = models . CASCADE , related_name = \"expert_grade\" , related_query_name = \"expert_grade\" , verbose_name = \"\u042d\u0441\u043a\u043f\u0435\u0440\u0442/Expert\" ) grade1 = models . IntegerField ( \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 \u21161/Grade for exercise \u21161\" , null = False , blank = True , validators = [ MinValueValidator ( 0 ), MaxValueValidator ( 10 )]) grade2 = models . IntegerField ( \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 \u21162/Grade for exercise \u21162\" , null = False , blank = True , validators = [ MinValueValidator ( 0 ), MaxValueValidator ( 10 )]) grade3 = models . IntegerField ( \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 \u21163/Grade for exercise \u21163\" , null = False , blank = True , validators = [ MinValueValidator ( 0 ), MaxValueValidator ( 10 )]) sum = models . IntegerField ( \"\u0421\u0443\u043c\u043c\u0430 \u043e\u0446\u0435\u043d\u043e\u043a/Grades summary\" , blank = True ) def save ( self , * args , ** kwargs ): if self . grade1 is not None and self . grade2 is not None and self . grade3 is not None : self . sum = self . grade1 + self . grade2 + self . grade3 if self . grade1 is None and self . grade2 is not None and self . grade3 is not None : self . sum = self . grade2 + self . grade3 if self . grade1 is not None and self . grade2 is not None and self . grade3 is None : self . sum = self . grade1 + self . grade3 if self . grade1 is not None and self . grade2 is not None and self . grade3 is None : self . sum = self . grade1 + self . grade2 if self . grade1 is None and self . grade2 is None and self . grade3 is not None : self . sum = self . grade3 if self . grade1 is None and self . grade2 is not None and self . grade3 is None : self . sum = self . grade2 if self . grade1 is not None and self . grade2 is None and self . grade3 is None : self . sum = self . grade1 if self . grade1 is None and self . grade2 is None and self . grade3 is None : self . sum = 0 super ( Grading , self ) . save ( * args , ** kwargs ) \u0424\u0430\u0439\u043b \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 views.py from django.shortcuts import render from rest_framework import generics from rest_framework.views import APIView , Response from .serializers import * from .models import * from django.db.models.aggregates import * class OwnerListAPIView ( generics . ListAPIView ): serializer_class = OwnerSerializer queryset = Owner . objects . all () class OwnerAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = OwnerSerializer queryset = Owner . objects . all () class OwnerCreateAPIView ( generics . CreateAPIView ): serializer_class = OwnerSerializer queryset = Owner . objects . all () class ClubListAPIView ( generics . ListAPIView ): serializer_class = ClubSerializer queryset = Club . objects . all () class ClubAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = ClubSerializer queryset = Club . objects . all () class ClubCreateAPIView ( generics . CreateAPIView ): serializer_class = ClubSerializer queryset = Club . objects . all () class DogListAPIView ( generics . ListAPIView ): serializer_class = DogSerializer queryset = Dog . objects . all () class DogAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = DogRetrieveSerializer queryset = Dog . objects . all () class DogCreateAPIView ( generics . CreateAPIView ): serializer_class = DogRetrieveSerializer queryset = Dog . objects . all () class ShowListAPIView ( generics . ListAPIView ): serializer_class = ShowSerializer queryset = Show . objects . all () class ShowAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = ShowSerializer queryset = Show . objects . all () class ShowCreateAPIView ( generics . CreateAPIView ): serializer_class = ShowSerializer queryset = Show . objects . all () class DogParticipationListAPIView ( generics . ListAPIView ): serializer_class = DogParticipationSerializer queryset = DogParticipation . objects . all () class DogParticipationAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = DogParticipationRetrieveSerializer queryset = DogParticipation . objects . all () class DogParticipantCreateAPIView ( generics . CreateAPIView ): serializer_class = DogParticipationRetrieveSerializer queryset = DogParticipation . objects . all () class ExpertListAPIView ( generics . ListAPIView ): serializer_class = ExpertSerializer queryset = Expert . objects . all () class ExpertAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = ExpertSerializer queryset = Expert . objects . all () class ExpertCreateAPIView ( generics . CreateAPIView ): serializer_class = ExpertSerializer queryset = Expert . objects . all () class ExpertParticipationListAPIView ( generics . ListAPIView ): serializer_class = ExpertParticipationSerializer queryset = ExpertParticipation . objects . all () class ExpertParticipationAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = ExpertParticipationSerializer queryset = ExpertParticipation . objects . all () class ExpertParticipationCreateAPIView ( generics . CreateAPIView ): serializer_class = ExpertParticipationSerializer queryset = ExpertParticipation . objects . all () class SponsorListAPIView ( generics . ListAPIView ): serializer_class = SponsorSerializer queryset = Sponsor . objects . all () class SponsorAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = SponsorSerializer queryset = Sponsor . objects . all () class SponsorCreateAPIView ( generics . CreateAPIView ): serializer_class = SponsorSerializer queryset = Sponsor . objects . all () class SponsorshipListAPIView ( generics . ListAPIView ): serializer_class = SponsorshipSerializer queryset = Sponsorship . objects . all () class SponsorshipAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = SponsorshipSerializer queryset = Sponsorship . objects . all () class SponsorshipCreateAPIView ( generics . CreateAPIView ): serializer_class = SponsorshipSerializer queryset = Sponsorship . objects . all () class ShowScheduleListAPIView ( generics . ListAPIView ): serializer_class = ShowScheduleSerializer queryset = ShowSchedule . objects . all () class ShowScheduleAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = ShowScheduleSerializer queryset = ShowSchedule . objects . all () class ShowScheduleCreateAPIView ( generics . CreateAPIView ): serializer_class = ShowScheduleSerializer queryset = ShowSchedule . objects . all () class GradingListAPIView ( generics . ListAPIView ): serializer_class = GradingSerializer queryset = Grading . objects . all () class GradingAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = GradingSerializer queryset = Grading . objects . all () class GradingCreateAPIView ( generics . CreateAPIView ): serializer_class = GradingSerializer queryset = Grading . objects . filter ( ~ Q ( dog_grade__dog_status = \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" )) #class DogRingAPIView(generics.RetrieveAPIView): # serializer_class = DogRingSerializer # queryset = ShowSchedule.objects.all() class DogRingAPIView ( APIView ): def get ( self , request , id ): rings = Grading . objects . filter ( dog_grade__participant_dog__dog_owner__id = id ) . values ( \"schedule_grade__show_schedule__name\" , \"schedule_grade__show_schedule__begin_date\" , \"dog_grade__participant_dog__dog_name\" , \"dog_grade__participant_dog__breed\" , \"schedule_grade__ring_number\" ) content = { \"rings\" : rings } return Response ( content ) #class ClubBreedAPIView(generics.RetrieveAPIView): #serializer_class = ClubBreedSerializer #queryset = Club.objects.all() class ClubBreedAPIView ( APIView ): def get ( self , request , id ): breeds = Dog . objects . filter ( dog_club__id = id ) . values ( \"breed\" ) . annotate ( count = Count ( \"breed\" )) content = { \"breeds\" : breeds } return Response ( content ) #class DogNotAllowedOrSuspendedCountAPIView(generics.RetrieveAPIView): #serializer_class = DogNotAllowedOrSuspendedCountSerializer #queryset = Show.objects.all() #def get(self, request, show, year): class DogNotAllowedOrSuspendedCountAPIView ( APIView ): def get ( self , request , id ): participants = DogParticipation . objects . filter ( show_dog__id = id ) . filter ( Q ( dog_status = \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" ) | Q ( dog_status = \"\u0421\u043d\u044f\u0442/Suspended\" )) counter = participants . count () dogs = participants . values ( \"show_dog__name\" , \"show_dog__begin_date\" , \"participant_dog__breed\" , \"participant_dog__dog_name\" ) content = { \"counter\" : counter , \"dogs\" : dogs } return Response ( content ) class BreedExpertsAPIView ( APIView ): #serializer_class = BreedExpertsSerializer #queryset = Grading.objects.all() def get ( self , request ): breeds = Grading . objects . values ( \"dog_grade__participant_dog__breed\" , \"expert_grade__participant_exp__expert_surname\" , \"expert_grade__participant_exp__expert_name\" , \"expert_grade__participant_exp__expert_patronymic\" ) . distinct () . order_by ( \"dog_grade__participant_dog__breed\" ) content = { \"breeds\" : breeds } return Response ( content ) class BreedCountAPIView ( APIView ): def get ( self , request ): breed_counter = Dog . objects . values ( \"breed\" ) . annotate ( count = Count ( \"breed\" )) content = { \"breed_counter\" : breed_counter } return Response ( content ) class ReportAPIView ( APIView ): def get ( self , request , id ): show = Show . objects . get ( id = id ) show_title = show . name year = show . begin_date . year participants = DogParticipation . objects . filter ( show_dog__id = id ) counter = participants . count () breed_counter = participants . values ( \"participant_dog__breed\" ) . annotate ( count = Count ( \"participant_dog__breed\" )) best_grades = Grading . objects . filter ( schedule_grade__show_schedule__id = id ) . values ( \"dog_grade__participant_dog__dog_name\" , \"dog_grade__participant_dog__breed\" , \"dog_grade__id\" , \"grade1\" , \"grade2\" , \"grade3\" , \"sum\" ) . order_by ( \"dog_grade__participant_dog__breed\" , \"sum\" ) medals = DogParticipation . objects . filter ( show_dog__id = id ) . values ( \"participant_dog__dog_name\" , \"participant_dog__breed\" , \"show_medal\" ) . annotate ( medals_count = Count ( \"show_medal\" )) . order_by ( \"participant_dog__breed\" , \"dog_grade__sum\" ) content = { \"show_title\" : show_title , \"year\" : year , \"participants_number\" : counter , \"breeds\" : breed_counter , \"best_grades\" : best_grades , \"medals\" : medals } return Response ( content ) \u0424\u0430\u0439\u043b \u0441 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c\u0438 serializers.py from rest_framework import serializers from django.db.models import Q from .models import * class OrganizerSerializer ( serializers . ModelSerializer ): class Meta : model = Organizer fields = \"__all__\" class OwnerSerializer ( serializers . ModelSerializer ): class Meta : model = Owner fields = \"__all__\" class ClubSerializer ( serializers . ModelSerializer ): class Meta : model = Club fields = \"__all__\" class DogSerializer ( serializers . ModelSerializer ): dog_owner = OwnerSerializer () dog_club = ClubSerializer () class Meta : model = Dog fields = [ \"id\" , \"dog_name\" , \"breed\" , \"full_age\" , \"month_age\" , \"document\" , \"dad_name\" , \"mom_name\" , \"last_vaccination\" , \"dog_info\" , \"dog_owner\" , \"dog_club\" ] class DogRetrieveSerializer ( serializers . ModelSerializer ): class Meta : model = Dog fields = [ \"dog_name\" , \"breed\" , \"full_age\" , \"month_age\" , \"dog_class\" , \"document\" , \"dad_name\" , \"mom_name\" , \"last_vaccination\" , \"dog_info\" , \"dog_owner\" , \"dog_club\" ] class ShowSerializer ( serializers . ModelSerializer ): host = OrganizerSerializer class Meta : model = Show fields = \"__all__\" class DogParticipationSerializer ( serializers . ModelSerializer ): participant_dog = DogSerializer () show_dog = ShowSerializer () class Meta : model = DogParticipation fields = [ \"id\" , \"show_dog_number\" , \"dog_status\" , \"reg_dog_date\" , \"bill\" , \"checkup\" , \"checkup_date\" , \"participant_dog\" , \"show_dog\" , \"show_medal\" ] class DogParticipationRetrieveSerializer ( serializers . ModelSerializer ): class Meta : model = DogParticipation fields = [ \"id\" , \"show_dog_number\" , \"dog_status\" , \"reg_dog_date\" , \"bill\" , \"checkup\" , \"checkup_date\" , \"participant_dog\" , \"show_dog\" , \"show_medal\" ] class ExpertSerializer ( serializers . ModelSerializer ): club = ClubSerializer class Meta : model = Expert fields = \"__all__\" class ExpertParticipationSerializer ( serializers . ModelSerializer ): participant_exp = ExpertSerializer show_exp = ShowSerializer class Meta : model = ExpertParticipation fields = \"__all__\" class SponsorSerializer ( serializers . ModelSerializer ): class Meta : model = Sponsor fields = \"__all__\" class SponsorshipSerializer ( serializers . ModelSerializer ): sponsor = SponsorSerializer sponsor_show = ShowSerializer class Meta : model = Sponsorship fields = \"__all__\" class ShowScheduleSerializer ( serializers . ModelSerializer ): show_schedule = ShowSerializer class Meta : model = ShowSchedule fields = \"__all__\" class GradingSerializer ( serializers . ModelSerializer ): dog_grade = DogParticipationSerializer expert_grade = ExpertParticipationSerializer schedule_grade = ShowScheduleSerializer class Meta : model = Grading fields = \"__all__\" class DogRingSerializer ( serializers . ModelSerializer ): owner = OwnerSerializer ( many = True ) dog = DogSerializer ( many = True ) show = ShowSerializer ( many = True ) dog_reg = DogParticipationSerializer ( many = True ) class Meta : model = ShowSchedule fields = [ \"__all__\" ] class DogBreedSerializer ( serializers . ModelSerializer ): class Meta : model = Dog fields = [ \"breed\" ] class ClubBreedSerializer ( serializers . ModelSerializer ): members = DogBreedSerializer ( many = True ) class Meta : model = Club fields = [ \"name\" , \"members\" ] class DogNotAllowedOrSuspendedCountSerializer ( serializers . ModelSerializer ): miss_count = serializers . SerializerMethodField () class Meta : model = Show fields = [ \"begin_date\" , \"miss_count\" ] def get_count ( self , obj ): return obj . show_dog_reg . filter ( Q ( dog_status = \"\u0421\u043d\u044f\u0442/Suspended\" ) | Q ( dog_status = \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" )) . count () class BreedExpertsSerializer ( serializers . ModelSerializer ): show_schedule = ShowScheduleSerializer ( many = True ) experts_reg = ExpertParticipationSerializer ( many = True ) experts = ExpertSerializer ( many = True ) class Meta : model = Grading fields = [ \"__all__\" ] \u0424\u0430\u0439\u043b \u0441\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 urls.py from django.urls import path from drf_yasg.views import get_schema_view from drf_yasg import openapi from rest_framework import permissions from .views import * app_name = \"dogs_app\" schema_view = get_schema_view ( openapi . Info ( title = \"API\" , default_version = \"v2\" , description = \"Description\" , terms_of_service = \"https://www.google.com/policies/terms/\" , contact = openapi . Contact ( email = \"vkorobkovskiy@gmail.com\" ), license = openapi . License ( name = \"BSD License\" ), ), public = True , permission_classes = ( permissions . AllowAny , ), ) urlpatterns = [ path ( \"owner/\" , OwnerListAPIView . as_view ()), path ( \"owner/<int:pk>/\" , OwnerAPIView . as_view ()), path ( \"owner/create/\" , OwnerCreateAPIView . as_view ()), path ( \"club/\" , ClubListAPIView . as_view ()), path ( \"club/<int:pk>/\" , ClubAPIView . as_view ()), path ( \"club/create/\" , ClubCreateAPIView . as_view ()), path ( \"dog/\" , DogListAPIView . as_view ()), path ( \"dog/<int:pk>/\" , DogAPIView . as_view ()), path ( \"dog/create/\" , DogCreateAPIView . as_view ()), path ( \"show/\" , ShowListAPIView . as_view ()), path ( \"show/<int:pk>/\" , ShowAPIView . as_view ()), path ( \"show/create/\" , ShowCreateAPIView . as_view ()), path ( \"dog_reg/\" , DogParticipationListAPIView . as_view ()), path ( \"dog_reg/<int:pk>/\" , DogParticipationAPIView . as_view ()), path ( \"dog_reg/create/\" , DogParticipantCreateAPIView . as_view ()), path ( \"expert/\" , ExpertListAPIView . as_view ()), path ( \"expert/<int:pk>/\" , ExpertAPIView . as_view ()), path ( \"expert/create/\" , ExpertCreateAPIView . as_view ()), path ( \"expert_reg/\" , ExpertParticipationListAPIView . as_view ()), path ( \"expert_reg/<int:pk>/\" , ExpertParticipationAPIView . as_view ()), path ( \"expert_reg/create/\" , ExpertParticipationCreateAPIView . as_view ()), path ( \"sponsor/\" , SponsorListAPIView . as_view ()), path ( \"sponsor/<int:pk>/\" , SponsorAPIView . as_view ()), path ( \"sponsor/create/\" , SponsorCreateAPIView . as_view ()), path ( \"sponsorship/\" , SponsorshipListAPIView . as_view ()), path ( \"sponsorship/<int:pk>/\" , SponsorshipAPIView . as_view ()), path ( \"sponsorship/create/\" , SponsorshipCreateAPIView . as_view ()), path ( \"schedule/\" , ShowScheduleListAPIView . as_view ()), path ( \"schedule/<int:pk>/\" , ShowScheduleAPIView . as_view ()), path ( \"schedule/create/\" , ShowScheduleCreateAPIView . as_view ()), path ( \"grading/\" , GradingListAPIView . as_view ()), path ( \"grading/<int:pk>/\" , GradingAPIView . as_view ()), path ( \"grading/create\" , GradingCreateAPIView . as_view ()), path ( \"dog_ring/<int:id>/\" , DogRingAPIView . as_view ()), path ( \"club_breeds/<int:id>/\" , ClubBreedAPIView . as_view ()), path ( \"miss_count/<int:id>/\" , DogNotAllowedOrSuspendedCountAPIView . as_view ()), path ( \"breed_experts/\" , BreedExpertsAPIView . as_view ()), path ( \"breeds_count/\" , BreedCountAPIView . as_view ()), path ( \"report/<int:id>/\" , ReportAPIView . as_view ()), path ( \"doc/swagger/\" , schema_view . with_ui ( \"swagger\" , cache_timeout = 0 ), name = \"schema-swagger-ui\" ), path ( \"doc/redoc\" , schema_view . with_ui ( \"redoc\" , cache_timeout = 0 ), name = \"schema-redoc\" ), ]","title":"\u041a\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438"},{"location":"lab_work3/#no3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lab_work3/#_1","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 DjangoORM \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u043c\u0443 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u044b API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Djoser \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u21163.1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab_work3/#_2","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0435\u0436\u0435\u0433\u043e\u0434\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0441\u043e\u0431\u0430\u043a. \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043c\u043e\u043d\u043e- \u0438 \u043f\u043e\u043b\u0438\u043f\u043e\u0440\u043e\u0434\u043d\u044b\u0435. \u041e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043e\u0431\u0430\u043a\u0430\u0445 - \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u0445. \u0423\u0447\u0430\u0441\u0442\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u043c \u0438\u043b\u0438 \u043e\u0442 \u043a\u043b\u0443\u0431\u0430. \u0423 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0441\u043f\u043e\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e \u0442\u043e\u043c, \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u043a\u043b\u0443\u0431\u0443 \u043e\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f, \u043a\u043b\u0438\u0447\u043a\u0430, \u043f\u043e\u0440\u043e\u0434\u0430 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u043a\u043b\u0430\u0441\u0441\u043d\u043e\u0441\u0442\u044c, \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0440\u043e\u0434\u043e\u0441\u043b\u043e\u0432\u043d\u043e\u0439 (\u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043a\u043b\u0438\u0447\u043a\u0438 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439), \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u0438\u0432\u0438\u0432\u043a\u0438, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u043e\u0437\u044f\u0438\u043d\u0430. \u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0441\u043e\u0431\u0430\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0439\u0442\u0438 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0422.\u043a. \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043b\u0430\u0442\u043d\u044b\u043c, \u0442\u043e \u0445\u043e\u0437\u044f\u0438\u043d \u043e\u0431\u044f\u0437\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0441\u0447\u0435\u0442 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c. \u0421\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0434\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0439, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0448\u043b\u0430 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0431 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0438 \u0438\u043c\u044f, \u043d\u043e\u043c\u0435\u0440 \u0440\u0438\u043d\u0433\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442, \u043a\u043b\u0443\u0431, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0441\u043e\u0441\u0442\u043e\u0438\u0442. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0438\u043d\u0433 \u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043e\u0432. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0440\u043e\u0434\u0430 \u0441\u043e\u0431\u0430\u043a \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u043d\u0430 \u0441\u0432\u043e\u0435\u043c \u0440\u0438\u043d\u0433\u0435, \u043d\u043e \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u0440\u0438\u043d\u0433\u0435 \u0432 \u0440\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0440\u043e\u0434\u044b. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c 3 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f, \u0437\u0430 \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u0430\u043b\u043b\u044b \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430. \u0418\u0442\u043e\u0433\u043e\u043c \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435 \u043f\u043e \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0431\u0430\u0437\u0443 \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0438\u043b\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430, \u0441\u043d\u044f\u0442\u044c \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u0441 \u0441\u0443\u0434\u0435\u0439\u0441\u0442\u0432\u0430, \u0437\u0430\u043c\u0435\u043d\u0438\u0432 \u0435\u0433\u043e \u0434\u0440\u0443\u0433\u0438\u043c, \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043e\u0431\u0430\u043a\u0443 \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: : \u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0445\u043e\u0437\u044f\u0438\u043d \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u043e\u0431\u0430\u043a\u043e\u0439? \u041a\u0430\u043a\u0438\u043c\u0438 \u043f\u043e\u0440\u043e\u0434\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0443\u0431? \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u0431\u044b\u043b\u0438 \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435? \u041a\u0430\u043a\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0440\u043e\u0434\u0443? \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435? \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 (\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u0440\u043e\u0434\u044b, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0434\u0430\u043b\u0435\u0439 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435).","title":"\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442"},{"location":"lab_work3/#_3","text":"\u0424\u0430\u0439\u043b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 (\u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445) models.py from django.core.validators import MinValueValidator , MaxValueValidator from django.db import models from django.contrib.auth.models import AbstractUser class Organizer ( AbstractUser ): org_surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f/Surname\" , max_length = 30 , null = False , blank = False ) org_name = models . CharField ( \"\u0418\u043c\u044f/Name\" , max_length = 30 , null = False , blank = False ) org_patronymic = models . CharField ( \"\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e/Patronymic\" , max_length = 30 , null = True , blank = True ) org_phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , max_length = 20 , null = True , blank = True ) org_passport = models . CharField ( \"\u0421\u0435\u0440\u0438\u044f \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430/Passport number\" , max_length = 20 , null = False , blank = False ) org_email = models . EmailField ( \"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430/Email address\" , unique = True ) REQUIRED_FIELDS = [ \"org_surname\" , \"org_name\" , \"org_patronymic\" , \"org_phone_number\" , \"org_passport\" , \"org_email\" ] def __str__ ( self ): return f \" { self . org_surname } { self . org_name } { self . org_patronymic } \" class Owner ( models . Model ): owner_surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0445\u043e\u0437\u044f\u0438\u043d\u0430/Owner's surname\" , max_length = 30 , null = False , blank = False ) owner_name = models . CharField ( \"\u0418\u043c\u044f \u0445\u043e\u0437\u044f\u0438\u043d\u0430/Owner's name\" , max_length = 30 , null = False , blank = False ) owner_patronymic = models . CharField ( \"\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0445\u043e\u0437\u044f\u0438\u043d\u0430/Owner's patronymic\" , max_length = 30 , null = True , blank = True ) owner_passport = models . CharField ( \"\u0421\u0435\u0440\u0438\u044f \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430 \u0445\u043e\u0437\u044f\u0438\u043d\u0430/Owner's passport number\" , unique = True , max_length = 30 , null = False , blank = False ) owner_phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , max_length = 20 , unique = True , null = False , blank = False ) owner_email = models . CharField ( \"\u041f\u043e\u0447\u0442\u0430/E-mail\" , max_length = 50 , unique = True , null = True , blank = True ) def __str__ ( self ): return f \"\u0425\u043e\u0437\u044f\u0438\u043d/Owner { self . owner_surname } { self . owner_name } (ID { self . id } )\" class Club ( models . Model ): name = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430/Club name\" , max_length = 100 , null = False , blank = False ) club_phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , unique = True , max_length = 20 , null = False , blank = False ) club_email = models . CharField ( \"\u041f\u043e\u0447\u0442\u0430/E-mail\" , max_length = 50 , unique = True , null = True , blank = True ) def __str__ ( self ): return f \"\u041a\u043b\u0443\u0431/Club { self . name } \" class Dog ( models . Model ): breeds = ( ( '\u041a\u043e\u0440\u0433\u0438/Corgi' , '\u041a\u043e\u0440\u0433\u0438/Corgi' ), ( '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' , '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' ), ( '\u0411\u0438\u0433\u043b\u044c/Beagle' , '\u0411\u0438\u0433\u043b\u044c/Beagle' ), ( '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' , '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' ), ( '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' , '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' ), ( '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' , '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' ), ( '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' , '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' ) ) class_types = ( ( \"Show\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 show/Dogs of show class\" ), ( \"Breed\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 breed/Dogs of breed class\" ), ( \"Pet\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 pet/Dogs of pet class\" ) ) dog_name = models . CharField ( \"\u041a\u043b\u0438\u0447\u043a\u0430/Name\" , max_length = 100 , null = False , blank = True ) breed = models . CharField ( \"\u041f\u043e\u0440\u043e\u0434\u0430/Breed\" , max_length = 100 , choices = breeds ) full_age = models . IntegerField ( \"\u041f\u043e\u043b\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432 \u0433\u043e\u0434\u0430\u0445/Full age in years\" , null = False , blank = False , validators = [ MinValueValidator ( 0 )]) month_age = models . IntegerField ( \"\u041f\u043e\u043b\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432 \u043c\u0435\u0441\u044f\u0446\u0430\u0445/Full age in months\" , null = False , blank = False , validators = [ MinValueValidator ( 0 )]) dog_class = models . CharField ( \"\u041a\u043b\u0430\u0441\u0441/Class\" , max_length = 250 , choices = class_types ) document = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043e \u0440\u043e\u0434\u043e\u0441\u043b\u043e\u0432\u043d\u043e\u0439/Number of the pedigree document\" , unique = True , max_length = 20 , null = False , blank = False ) dad_name = models . CharField ( \"\u041a\u043b\u0438\u0447\u043a\u0430 \u043e\u0442\u0446\u0430/Dad's name\" , max_length = 100 , null = False , blank = True ) mom_name = models . CharField ( \"\u041a\u043b\u0438\u0447\u043a\u0430 \u043c\u0430\u0442\u0435\u0440\u0438/Mom's name\" , max_length = 100 , null = False , blank = True ) last_vaccination = models . DateField ( \"\u0414\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u0438\u0432\u0438\u0432\u043a\u0438/Last vaccination date\" , null = False , blank = False ) dog_info = models . TextField ( \"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u043e\u0431\u0430\u043a\u0435/Info about dog\" , max_length = 2000 , null = False , blank = True ) dog_owner = models . ForeignKey ( Owner , on_delete = models . CASCADE , related_name = \"dog_owner\" , related_query_name = \"dog_owner\" , verbose_name = \"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446/Owner\" ) dog_club = models . ForeignKey ( Club , on_delete = models . CASCADE , related_name = \"dog_club\" , related_query_name = \"dog_club\" , verbose_name = \"\u041a\u043b\u0443\u0431/Club\" ) def __str__ ( self ): return f \" { self . breed } { self . dog_name } (ID { self . id } )\" class Show ( models . Model ): show_types = ( ( \"\u041c\u043e\u043d\u043e/Mono\" , \"\u041e\u0434\u043d\u043e\u043f\u043e\u0440\u043e\u0434\u043d\u0430\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Monobreed exhibition\" ), ( \"\u041f\u043e\u043b\u0438/Poly\" , \"\u0412\u0441\u0435\u043f\u043e\u0440\u043e\u0434\u043d\u0430\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Polybreed exhibition\" ) ) name = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438/Exhibition name\" , max_length = 100 , null = False , blank = False ) begin_date = models . DateTimeField ( \"\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438/Show start\" , null = False , blank = False ) end_date = models . DateTimeField ( \"\u041e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438/Show end\" , null = False , blank = False ) city = models . CharField ( \"\u0413\u043e\u0440\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438/City of the show\" , max_length = 50 , null = False , blank = False ) address = models . CharField ( \"\u0410\u0434\u0440\u0435\u0441\u0441/Address\" , max_length = 250 , null = False , blank = False ) show_type = models . CharField ( \"\u0422\u0438\u043f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438/Exhibition type\" , max_length = 250 , choices = show_types ) host = models . ForeignKey ( Organizer , on_delete = models . CASCADE , related_name = \"host\" , related_query_name = \"org\" , verbose_name = \"\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440/Organizer\" ) def __str__ ( self ): return f \"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Exhibition ' { self . name } ', { self . begin_date } \" #.strftime('%Y') class DogParticipation ( models . Model ): status_choices = ( ( \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" ), ( \"\u0421\u043d\u044f\u0442/Suspended\" , \"\u0421\u043d\u044f\u0442/Suspended\" ), ( \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" , \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" ), ( \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" , \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" ) ) bill_choices = ( ( \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d/Paid\" , \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d/Paid\" ), ( \"\u041d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d/Not paid\" , \"\u041d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d/Not paid\" ) ) checkup_choices = ( ( \"\u041f\u0440\u043e\u0439\u0434\u0435\u043d/Passed\" , \"\u041c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0439\u0434\u0435\u043d/Medical examination was successfully passed\" ), ( \"\u041d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d/Not passed\" , \"\u041c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440 \u043d\u0435 \u0431\u044b\u043b \u043f\u0440\u043e\u0439\u0434\u0435\u043d/Medical examination was not passed\" ) ) medals = ( ( \"\u0417\u043e\u043b\u043e\u0442\u043e/Gold\" , \"\u0417\u043e\u043b\u043e\u0442\u043e \u0437\u0430 \u043f\u0435\u0440\u0432\u043e\u0435 \u043c\u0435\u0441\u0442\u043e/Gold for first place\" ), ( \"\u0421\u0435\u0440\u0435\u0431\u0440\u043e/Silver\" , \"\u0421\u0435\u0440\u0435\u0431\u0440\u043e \u0437\u0430 \u0432\u0442\u043e\u0440\u043e\u0435 \u043c\u0435\u0441\u0442\u043e/Silver for second place\" ), ( \"\u0411\u0440\u043e\u043d\u0437\u0430/Bronze\" , \"\u0411\u0440\u043e\u043d\u0437\u0430 \u0437\u0430 \u0442\u0440\u0435\u0442\u044c\u0435 \u043c\u0435\u0441\u0442\u043e/Bronze for third place\" ), ( \"\u041c\u0435\u0434\u0430\u043b\u044c \u043e\u0442 \u0437\u0440\u0438\u0442\u0435\u043b\u0435\u0439/Audience award\" , \"\u041c\u0435\u0434\u0430\u043b\u044c \u043a\u0430\u043a \u043f\u0440\u0438\u0437 \u0437\u0440\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0441\u0438\u043c\u043f\u0430\u0442\u0438\u0439/Medal as audience sympathy prize\" ) ) show_dog_number = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u0441\u043e\u0431\u0430\u043a\u0438 \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435/Dog's number on show\" , null = False , blank = False ) dog_status = models . CharField ( \"\u0421\u0442\u0430\u0442\u0443\u0441 \u0441\u043e\u0431\u0430\u043a\u0438/Dog's status\" , max_length = 100 , choices = status_choices ) reg_dog_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043e\u0431\u0430\u043a\u0438/Dog registration date\" , null = False , blank = False ) bill = models . CharField ( \"\u0421\u0447\u0451\u0442/Bill\" , max_length = 100 , choices = bill_choices ) checkup = models . CharField ( \"\u041c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440/Checkup\" , max_length = 100 , choices = checkup_choices ) checkup_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440\u0430/Checkup date\" , null = True , blank = True ) participant_dog = models . ForeignKey ( Dog , on_delete = models . CASCADE , related_name = \"dog_reg_participation\" , related_query_name = \"dog_reg\" , verbose_name = \"\u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a-\u0441\u043e\u0431\u0430\u043a\u0430/Participant-dog\" ) show_dog = models . ForeignKey ( Show , on_delete = models . CASCADE , related_name = \"show_reg_dog_participation\" , related_query_name = \"show_dog_reg\" , verbose_name = \"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Exhibition\" ) show_medal = models . CharField ( \"\u041c\u0435\u0434\u0430\u043b\u044c/Medal\" , max_length = 250 , choices = medals , null = True , blank = False ) class Meta : unique_together = ( \"show_dog\" , \"participant_dog\" ) def __str__ ( self ): return f \" { self . show_dog } , { self . participant_dog } \" class Expert ( models . Model ): expert_surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430/Expert's surname\" , max_length = 30 , null = False , blank = False ) expert_name = models . CharField ( \"\u0418\u043c\u044f \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430/Expert's name\" , max_length = 30 , null = False , blank = False ) expert_patronymic = models . CharField ( \"\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430/Expert's patronymic\" , max_length = 30 , null = True , blank = True ) expert_passport = models . CharField ( \"\u0421\u0435\u0440\u0438\u044f \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430/Expert's passport number\" , max_length = 30 , null = False , blank = False ) expert_phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , max_length = 20 , null = False , blank = False ) expert_email = models . CharField ( \"\u041f\u043e\u0447\u0442\u0430/E-mail\" , max_length = 50 , null = True , blank = True ) club = models . ForeignKey ( Club , on_delete = models . CASCADE , related_name = \"expert_club\" , related_query_name = \"exp_club\" , verbose_name = \"\u041a\u043b\u0443\u0431/Club\" ) def __str__ ( self ): return f \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442/Expert { self . expert_surname } { self . expert_name } { self . expert_patronymic } (ID { self . id } )\" class ExpertParticipation ( models . Model ): status_choices = ( ( \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" , \"\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b/Participated\" ), ( \"\u0421\u043d\u044f\u0442/Suspended\" , \"\u0421\u043d\u044f\u0442/Suspended\" ), ( \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" , \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" ), ( \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" , \"\u041d\u0435\u044f\u0432\u043a\u0430/Absence\" ) ) show_exp_number = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435/Expert's number on show\" ) exp_status = models . CharField ( \"\u0421\u0442\u0430\u0442\u0443\u0441 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430/Expert's status\" , max_length = 250 , choices = status_choices ) reg_exp_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430/Expert registration date\" ) participant_exp = models . ForeignKey ( Expert , on_delete = models . CASCADE , related_name = \"exp_reg_participation\" , related_query_name = \"exp_reg\" , verbose_name = \"\u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a-\u044d\u043a\u0441\u043f\u0435\u0440\u0442/Participant-expert\" ) show_exp = models . ForeignKey ( Show , on_delete = models . CASCADE , related_name = \"show_exp_reg_participation\" , related_query_name = \"show_exp_reg\" , verbose_name = \"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Exhibition\" ) class Meta : unique_together = ( \"show_exp\" , \"participant_exp\" ) unique_together = ( \"show_exp_number\" , \"show_exp\" ) def __str__ ( self ): return f \" { self . participant_exp } , { self . show_exp } \" class Sponsor ( models . Model ): sponsor_name = models . CharField ( \"\u0418\u043c\u044f \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0430/Sponsor name\" , max_length = 200 , null = False , blank = False ) sponsor_phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , max_length = 20 , null = False , blank = False ) sponsor_email = models . CharField ( \"\u041f\u043e\u0447\u0442\u0430/E-mail\" , max_length = 50 , null = True , blank = True ) class Sponsorship ( models . Model ): contract_number = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430/Contract number\" , null = False , blank = False , unique = True ) sign_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430/Contract sign date\" , null = False , blank = False ) sponsor = models . ForeignKey ( Sponsor , on_delete = models . CASCADE , related_name = \"sponsor\" , related_query_name = \"sponsor\" , verbose_name = \"\u0421\u043f\u043e\u043d\u0441\u043e\u0440/Sponsor\" ) sponsor_show = models . ForeignKey ( Show , on_delete = models . CASCADE , related_name = \"sponsor_show\" , related_query_name = \"sponsor_show\" , verbose_name = \"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Exhibition\" ) class ShowSchedule ( models . Model ): breeds = ( ( '\u041a\u043e\u0440\u0433\u0438/Corgi' , '\u041a\u043e\u0440\u0433\u0438/Corgi' ), ( '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' , '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' ), ( '\u0411\u0438\u0433\u043b\u044c/Beagle' , '\u0411\u0438\u0433\u043b\u044c/Beagle' ), ( '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' , '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' ), ( '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' , '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' ), ( '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' , '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' ), ( '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' , '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' ) ) class_types = ( ( \"Baby\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 4 \u0434\u043e 6 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 4 to 6 months old\" ), ( \"Puppy\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 6 \u0434\u043e 9 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 6 to 9 months old\" ), ( \"Junior\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 9 \u0434\u043e 18 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 9 to 18 months old\" ), ( \"Intermediate\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u0434\u043e 24 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 15 to 24 months old\" ), ( \"Open\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 15 months old\" ), ( \"Work\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u0434\u0438\u043f\u043b\u043e\u043c\u043e\u043c/Dogs from 15 months with diploma old\" ), ( \"Champions\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u043f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u044b-\u0447\u043b\u0435\u043d\u0430 FCI/Dogs from 15 months old with FCI Member country Champion certificate\" ), ( \"Veteran\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 8 \u043b\u0435\u0442/Dogs from 8 years old\" ) ) show_breed = models . CharField ( \"\u041f\u043e\u0440\u043e\u0434\u0430/Breed\" , choices = breeds , max_length = 50 , null = False , blank = False ) show_time = models . DateTimeField ( \"\u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f/Date and time of performance\" , null = False , blank = False ) ring_number = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u0440\u0438\u043d\u0433\u0430/Ring number\" , null = False , blank = False ) show_class = models . CharField ( \"\u0412\u044b\u0441\u0442\u0430\u0432\u043e\u0447\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441/Show class\" , max_length = 200 , choices = class_types , null = False , blank = False ) show_schedule = models . ForeignKey ( Show , on_delete = models . CASCADE , related_name = \"show_schedule\" , related_query_name = \"show_schedule\" , verbose_name = \"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Exhibition\" ) def __str__ ( self ): return f \" { self . show_schedule } , { self . show_breed } , \u0440\u0438\u043d\u0433/ring \u2116 { self . ring_number } \" class Grading ( models . Model ): schedule_grade = models . ForeignKey ( ShowSchedule , on_delete = models . CASCADE , related_name = \"schedule_grade\" , related_query_name = \"schedule_grade\" , verbose_name = \"\u0420\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435/Schedulle\" ) dog_grade = models . ForeignKey ( DogParticipation , on_delete = models . CASCADE , related_name = \"dog_grade\" , related_query_name = \"dog_grade\" , verbose_name = \"\u0421\u043e\u0431\u0430\u043a\u0430/Dog\" ) expert_grade = models . ForeignKey ( ExpertParticipation , on_delete = models . CASCADE , related_name = \"expert_grade\" , related_query_name = \"expert_grade\" , verbose_name = \"\u042d\u0441\u043a\u043f\u0435\u0440\u0442/Expert\" ) grade1 = models . IntegerField ( \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 \u21161/Grade for exercise \u21161\" , null = False , blank = True , validators = [ MinValueValidator ( 0 ), MaxValueValidator ( 10 )]) grade2 = models . IntegerField ( \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 \u21162/Grade for exercise \u21162\" , null = False , blank = True , validators = [ MinValueValidator ( 0 ), MaxValueValidator ( 10 )]) grade3 = models . IntegerField ( \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 \u21163/Grade for exercise \u21163\" , null = False , blank = True , validators = [ MinValueValidator ( 0 ), MaxValueValidator ( 10 )]) sum = models . IntegerField ( \"\u0421\u0443\u043c\u043c\u0430 \u043e\u0446\u0435\u043d\u043e\u043a/Grades summary\" , blank = True ) def save ( self , * args , ** kwargs ): if self . grade1 is not None and self . grade2 is not None and self . grade3 is not None : self . sum = self . grade1 + self . grade2 + self . grade3 if self . grade1 is None and self . grade2 is not None and self . grade3 is not None : self . sum = self . grade2 + self . grade3 if self . grade1 is not None and self . grade2 is not None and self . grade3 is None : self . sum = self . grade1 + self . grade3 if self . grade1 is not None and self . grade2 is not None and self . grade3 is None : self . sum = self . grade1 + self . grade2 if self . grade1 is None and self . grade2 is None and self . grade3 is not None : self . sum = self . grade3 if self . grade1 is None and self . grade2 is not None and self . grade3 is None : self . sum = self . grade2 if self . grade1 is not None and self . grade2 is None and self . grade3 is None : self . sum = self . grade1 if self . grade1 is None and self . grade2 is None and self . grade3 is None : self . sum = 0 super ( Grading , self ) . save ( * args , ** kwargs ) \u0424\u0430\u0439\u043b \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 views.py from django.shortcuts import render from rest_framework import generics from rest_framework.views import APIView , Response from .serializers import * from .models import * from django.db.models.aggregates import * class OwnerListAPIView ( generics . ListAPIView ): serializer_class = OwnerSerializer queryset = Owner . objects . all () class OwnerAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = OwnerSerializer queryset = Owner . objects . all () class OwnerCreateAPIView ( generics . CreateAPIView ): serializer_class = OwnerSerializer queryset = Owner . objects . all () class ClubListAPIView ( generics . ListAPIView ): serializer_class = ClubSerializer queryset = Club . objects . all () class ClubAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = ClubSerializer queryset = Club . objects . all () class ClubCreateAPIView ( generics . CreateAPIView ): serializer_class = ClubSerializer queryset = Club . objects . all () class DogListAPIView ( generics . ListAPIView ): serializer_class = DogSerializer queryset = Dog . objects . all () class DogAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = DogRetrieveSerializer queryset = Dog . objects . all () class DogCreateAPIView ( generics . CreateAPIView ): serializer_class = DogRetrieveSerializer queryset = Dog . objects . all () class ShowListAPIView ( generics . ListAPIView ): serializer_class = ShowSerializer queryset = Show . objects . all () class ShowAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = ShowSerializer queryset = Show . objects . all () class ShowCreateAPIView ( generics . CreateAPIView ): serializer_class = ShowSerializer queryset = Show . objects . all () class DogParticipationListAPIView ( generics . ListAPIView ): serializer_class = DogParticipationSerializer queryset = DogParticipation . objects . all () class DogParticipationAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = DogParticipationRetrieveSerializer queryset = DogParticipation . objects . all () class DogParticipantCreateAPIView ( generics . CreateAPIView ): serializer_class = DogParticipationRetrieveSerializer queryset = DogParticipation . objects . all () class ExpertListAPIView ( generics . ListAPIView ): serializer_class = ExpertSerializer queryset = Expert . objects . all () class ExpertAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = ExpertSerializer queryset = Expert . objects . all () class ExpertCreateAPIView ( generics . CreateAPIView ): serializer_class = ExpertSerializer queryset = Expert . objects . all () class ExpertParticipationListAPIView ( generics . ListAPIView ): serializer_class = ExpertParticipationSerializer queryset = ExpertParticipation . objects . all () class ExpertParticipationAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = ExpertParticipationSerializer queryset = ExpertParticipation . objects . all () class ExpertParticipationCreateAPIView ( generics . CreateAPIView ): serializer_class = ExpertParticipationSerializer queryset = ExpertParticipation . objects . all () class SponsorListAPIView ( generics . ListAPIView ): serializer_class = SponsorSerializer queryset = Sponsor . objects . all () class SponsorAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = SponsorSerializer queryset = Sponsor . objects . all () class SponsorCreateAPIView ( generics . CreateAPIView ): serializer_class = SponsorSerializer queryset = Sponsor . objects . all () class SponsorshipListAPIView ( generics . ListAPIView ): serializer_class = SponsorshipSerializer queryset = Sponsorship . objects . all () class SponsorshipAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = SponsorshipSerializer queryset = Sponsorship . objects . all () class SponsorshipCreateAPIView ( generics . CreateAPIView ): serializer_class = SponsorshipSerializer queryset = Sponsorship . objects . all () class ShowScheduleListAPIView ( generics . ListAPIView ): serializer_class = ShowScheduleSerializer queryset = ShowSchedule . objects . all () class ShowScheduleAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = ShowScheduleSerializer queryset = ShowSchedule . objects . all () class ShowScheduleCreateAPIView ( generics . CreateAPIView ): serializer_class = ShowScheduleSerializer queryset = ShowSchedule . objects . all () class GradingListAPIView ( generics . ListAPIView ): serializer_class = GradingSerializer queryset = Grading . objects . all () class GradingAPIView ( generics . RetrieveUpdateDestroyAPIView ): serializer_class = GradingSerializer queryset = Grading . objects . all () class GradingCreateAPIView ( generics . CreateAPIView ): serializer_class = GradingSerializer queryset = Grading . objects . filter ( ~ Q ( dog_grade__dog_status = \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" )) #class DogRingAPIView(generics.RetrieveAPIView): # serializer_class = DogRingSerializer # queryset = ShowSchedule.objects.all() class DogRingAPIView ( APIView ): def get ( self , request , id ): rings = Grading . objects . filter ( dog_grade__participant_dog__dog_owner__id = id ) . values ( \"schedule_grade__show_schedule__name\" , \"schedule_grade__show_schedule__begin_date\" , \"dog_grade__participant_dog__dog_name\" , \"dog_grade__participant_dog__breed\" , \"schedule_grade__ring_number\" ) content = { \"rings\" : rings } return Response ( content ) #class ClubBreedAPIView(generics.RetrieveAPIView): #serializer_class = ClubBreedSerializer #queryset = Club.objects.all() class ClubBreedAPIView ( APIView ): def get ( self , request , id ): breeds = Dog . objects . filter ( dog_club__id = id ) . values ( \"breed\" ) . annotate ( count = Count ( \"breed\" )) content = { \"breeds\" : breeds } return Response ( content ) #class DogNotAllowedOrSuspendedCountAPIView(generics.RetrieveAPIView): #serializer_class = DogNotAllowedOrSuspendedCountSerializer #queryset = Show.objects.all() #def get(self, request, show, year): class DogNotAllowedOrSuspendedCountAPIView ( APIView ): def get ( self , request , id ): participants = DogParticipation . objects . filter ( show_dog__id = id ) . filter ( Q ( dog_status = \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" ) | Q ( dog_status = \"\u0421\u043d\u044f\u0442/Suspended\" )) counter = participants . count () dogs = participants . values ( \"show_dog__name\" , \"show_dog__begin_date\" , \"participant_dog__breed\" , \"participant_dog__dog_name\" ) content = { \"counter\" : counter , \"dogs\" : dogs } return Response ( content ) class BreedExpertsAPIView ( APIView ): #serializer_class = BreedExpertsSerializer #queryset = Grading.objects.all() def get ( self , request ): breeds = Grading . objects . values ( \"dog_grade__participant_dog__breed\" , \"expert_grade__participant_exp__expert_surname\" , \"expert_grade__participant_exp__expert_name\" , \"expert_grade__participant_exp__expert_patronymic\" ) . distinct () . order_by ( \"dog_grade__participant_dog__breed\" ) content = { \"breeds\" : breeds } return Response ( content ) class BreedCountAPIView ( APIView ): def get ( self , request ): breed_counter = Dog . objects . values ( \"breed\" ) . annotate ( count = Count ( \"breed\" )) content = { \"breed_counter\" : breed_counter } return Response ( content ) class ReportAPIView ( APIView ): def get ( self , request , id ): show = Show . objects . get ( id = id ) show_title = show . name year = show . begin_date . year participants = DogParticipation . objects . filter ( show_dog__id = id ) counter = participants . count () breed_counter = participants . values ( \"participant_dog__breed\" ) . annotate ( count = Count ( \"participant_dog__breed\" )) best_grades = Grading . objects . filter ( schedule_grade__show_schedule__id = id ) . values ( \"dog_grade__participant_dog__dog_name\" , \"dog_grade__participant_dog__breed\" , \"dog_grade__id\" , \"grade1\" , \"grade2\" , \"grade3\" , \"sum\" ) . order_by ( \"dog_grade__participant_dog__breed\" , \"sum\" ) medals = DogParticipation . objects . filter ( show_dog__id = id ) . values ( \"participant_dog__dog_name\" , \"participant_dog__breed\" , \"show_medal\" ) . annotate ( medals_count = Count ( \"show_medal\" )) . order_by ( \"participant_dog__breed\" , \"dog_grade__sum\" ) content = { \"show_title\" : show_title , \"year\" : year , \"participants_number\" : counter , \"breeds\" : breed_counter , \"best_grades\" : best_grades , \"medals\" : medals } return Response ( content ) \u0424\u0430\u0439\u043b \u0441 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c\u0438 serializers.py from rest_framework import serializers from django.db.models import Q from .models import * class OrganizerSerializer ( serializers . ModelSerializer ): class Meta : model = Organizer fields = \"__all__\" class OwnerSerializer ( serializers . ModelSerializer ): class Meta : model = Owner fields = \"__all__\" class ClubSerializer ( serializers . ModelSerializer ): class Meta : model = Club fields = \"__all__\" class DogSerializer ( serializers . ModelSerializer ): dog_owner = OwnerSerializer () dog_club = ClubSerializer () class Meta : model = Dog fields = [ \"id\" , \"dog_name\" , \"breed\" , \"full_age\" , \"month_age\" , \"document\" , \"dad_name\" , \"mom_name\" , \"last_vaccination\" , \"dog_info\" , \"dog_owner\" , \"dog_club\" ] class DogRetrieveSerializer ( serializers . ModelSerializer ): class Meta : model = Dog fields = [ \"dog_name\" , \"breed\" , \"full_age\" , \"month_age\" , \"dog_class\" , \"document\" , \"dad_name\" , \"mom_name\" , \"last_vaccination\" , \"dog_info\" , \"dog_owner\" , \"dog_club\" ] class ShowSerializer ( serializers . ModelSerializer ): host = OrganizerSerializer class Meta : model = Show fields = \"__all__\" class DogParticipationSerializer ( serializers . ModelSerializer ): participant_dog = DogSerializer () show_dog = ShowSerializer () class Meta : model = DogParticipation fields = [ \"id\" , \"show_dog_number\" , \"dog_status\" , \"reg_dog_date\" , \"bill\" , \"checkup\" , \"checkup_date\" , \"participant_dog\" , \"show_dog\" , \"show_medal\" ] class DogParticipationRetrieveSerializer ( serializers . ModelSerializer ): class Meta : model = DogParticipation fields = [ \"id\" , \"show_dog_number\" , \"dog_status\" , \"reg_dog_date\" , \"bill\" , \"checkup\" , \"checkup_date\" , \"participant_dog\" , \"show_dog\" , \"show_medal\" ] class ExpertSerializer ( serializers . ModelSerializer ): club = ClubSerializer class Meta : model = Expert fields = \"__all__\" class ExpertParticipationSerializer ( serializers . ModelSerializer ): participant_exp = ExpertSerializer show_exp = ShowSerializer class Meta : model = ExpertParticipation fields = \"__all__\" class SponsorSerializer ( serializers . ModelSerializer ): class Meta : model = Sponsor fields = \"__all__\" class SponsorshipSerializer ( serializers . ModelSerializer ): sponsor = SponsorSerializer sponsor_show = ShowSerializer class Meta : model = Sponsorship fields = \"__all__\" class ShowScheduleSerializer ( serializers . ModelSerializer ): show_schedule = ShowSerializer class Meta : model = ShowSchedule fields = \"__all__\" class GradingSerializer ( serializers . ModelSerializer ): dog_grade = DogParticipationSerializer expert_grade = ExpertParticipationSerializer schedule_grade = ShowScheduleSerializer class Meta : model = Grading fields = \"__all__\" class DogRingSerializer ( serializers . ModelSerializer ): owner = OwnerSerializer ( many = True ) dog = DogSerializer ( many = True ) show = ShowSerializer ( many = True ) dog_reg = DogParticipationSerializer ( many = True ) class Meta : model = ShowSchedule fields = [ \"__all__\" ] class DogBreedSerializer ( serializers . ModelSerializer ): class Meta : model = Dog fields = [ \"breed\" ] class ClubBreedSerializer ( serializers . ModelSerializer ): members = DogBreedSerializer ( many = True ) class Meta : model = Club fields = [ \"name\" , \"members\" ] class DogNotAllowedOrSuspendedCountSerializer ( serializers . ModelSerializer ): miss_count = serializers . SerializerMethodField () class Meta : model = Show fields = [ \"begin_date\" , \"miss_count\" ] def get_count ( self , obj ): return obj . show_dog_reg . filter ( Q ( dog_status = \"\u0421\u043d\u044f\u0442/Suspended\" ) | Q ( dog_status = \"\u041d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d/Not allowed\" )) . count () class BreedExpertsSerializer ( serializers . ModelSerializer ): show_schedule = ShowScheduleSerializer ( many = True ) experts_reg = ExpertParticipationSerializer ( many = True ) experts = ExpertSerializer ( many = True ) class Meta : model = Grading fields = [ \"__all__\" ] \u0424\u0430\u0439\u043b \u0441\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 urls.py from django.urls import path from drf_yasg.views import get_schema_view from drf_yasg import openapi from rest_framework import permissions from .views import * app_name = \"dogs_app\" schema_view = get_schema_view ( openapi . Info ( title = \"API\" , default_version = \"v2\" , description = \"Description\" , terms_of_service = \"https://www.google.com/policies/terms/\" , contact = openapi . Contact ( email = \"vkorobkovskiy@gmail.com\" ), license = openapi . License ( name = \"BSD License\" ), ), public = True , permission_classes = ( permissions . AllowAny , ), ) urlpatterns = [ path ( \"owner/\" , OwnerListAPIView . as_view ()), path ( \"owner/<int:pk>/\" , OwnerAPIView . as_view ()), path ( \"owner/create/\" , OwnerCreateAPIView . as_view ()), path ( \"club/\" , ClubListAPIView . as_view ()), path ( \"club/<int:pk>/\" , ClubAPIView . as_view ()), path ( \"club/create/\" , ClubCreateAPIView . as_view ()), path ( \"dog/\" , DogListAPIView . as_view ()), path ( \"dog/<int:pk>/\" , DogAPIView . as_view ()), path ( \"dog/create/\" , DogCreateAPIView . as_view ()), path ( \"show/\" , ShowListAPIView . as_view ()), path ( \"show/<int:pk>/\" , ShowAPIView . as_view ()), path ( \"show/create/\" , ShowCreateAPIView . as_view ()), path ( \"dog_reg/\" , DogParticipationListAPIView . as_view ()), path ( \"dog_reg/<int:pk>/\" , DogParticipationAPIView . as_view ()), path ( \"dog_reg/create/\" , DogParticipantCreateAPIView . as_view ()), path ( \"expert/\" , ExpertListAPIView . as_view ()), path ( \"expert/<int:pk>/\" , ExpertAPIView . as_view ()), path ( \"expert/create/\" , ExpertCreateAPIView . as_view ()), path ( \"expert_reg/\" , ExpertParticipationListAPIView . as_view ()), path ( \"expert_reg/<int:pk>/\" , ExpertParticipationAPIView . as_view ()), path ( \"expert_reg/create/\" , ExpertParticipationCreateAPIView . as_view ()), path ( \"sponsor/\" , SponsorListAPIView . as_view ()), path ( \"sponsor/<int:pk>/\" , SponsorAPIView . as_view ()), path ( \"sponsor/create/\" , SponsorCreateAPIView . as_view ()), path ( \"sponsorship/\" , SponsorshipListAPIView . as_view ()), path ( \"sponsorship/<int:pk>/\" , SponsorshipAPIView . as_view ()), path ( \"sponsorship/create/\" , SponsorshipCreateAPIView . as_view ()), path ( \"schedule/\" , ShowScheduleListAPIView . as_view ()), path ( \"schedule/<int:pk>/\" , ShowScheduleAPIView . as_view ()), path ( \"schedule/create/\" , ShowScheduleCreateAPIView . as_view ()), path ( \"grading/\" , GradingListAPIView . as_view ()), path ( \"grading/<int:pk>/\" , GradingAPIView . as_view ()), path ( \"grading/create\" , GradingCreateAPIView . as_view ()), path ( \"dog_ring/<int:id>/\" , DogRingAPIView . as_view ()), path ( \"club_breeds/<int:id>/\" , ClubBreedAPIView . as_view ()), path ( \"miss_count/<int:id>/\" , DogNotAllowedOrSuspendedCountAPIView . as_view ()), path ( \"breed_experts/\" , BreedExpertsAPIView . as_view ()), path ( \"breeds_count/\" , BreedCountAPIView . as_view ()), path ( \"report/<int:id>/\" , ReportAPIView . as_view ()), path ( \"doc/swagger/\" , schema_view . with_ui ( \"swagger\" , cache_timeout = 0 ), name = \"schema-swagger-ui\" ), path ( \"doc/redoc\" , schema_view . with_ui ( \"redoc\" , cache_timeout = 0 ), name = \"schema-redoc\" ), ]","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"lab_work4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0431\u0430\u0447\u044c\u0438\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a. \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u21163 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u044b\u0435 \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u0438 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u044c\u044e. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043d\u0435\u043c. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 vuetify . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0414\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043d\u0435 \u0432\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0414\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0432\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u041f\u0440\u043e\u0444\u0438\u043b\u044c \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0431\u0430\u043a \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u043e\u0431\u0430\u043a\u0435 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438 \u0432 \u0431\u0430\u0437\u0443 \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0431\u0430\u043a-\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u043e\u0431\u0430\u043a\u0430\u0445-\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438-\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u0432 \u0431\u0430\u0437\u0443","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"lab_work4/#no4","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"lab_work4/#_1","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0431\u0430\u0447\u044c\u0438\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a. \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u21163 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u044b\u0435 \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u0438 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u044c\u044e. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043d\u0435\u043c. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u044c\u044e. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 vuetify .","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab_work4/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b"},{"location":"lab_work4/#_3","text":"","title":"\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"lab_work4/#_4","text":"","title":"\u0414\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043d\u0435 \u0432\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442"},{"location":"lab_work4/#_5","text":"","title":"\u0414\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0432\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442"},{"location":"lab_work4/#_6","text":"","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"lab_work4/#_7","text":"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f"},{"location":"lab_work4/#_8","text":"","title":"\u041f\u0440\u043e\u0444\u0438\u043b\u044c"},{"location":"lab_work4/#_9","text":"","title":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0444\u0438\u043b\u044f"},{"location":"lab_work4/#_10","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0431\u0430\u043a"},{"location":"lab_work4/#_11","text":"","title":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u043e\u0431\u0430\u043a\u0435"},{"location":"lab_work4/#_12","text":"","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438 \u0432 \u0431\u0430\u0437\u0443"},{"location":"lab_work4/#-","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0431\u0430\u043a-\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a"},{"location":"lab_work4/#-_1","text":"","title":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u043e\u0431\u0430\u043a\u0430\u0445-\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a"},{"location":"lab_work4/#-_2","text":"","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438-\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u0432 \u0431\u0430\u0437\u0443"},{"location":"miss_count/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0431\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043d\u0435 \u0434\u043e\u043f\u0443\u0449\u0435\u043d\u044b \u0438\u043b\u0438 \u0431\u044b\u043b\u0438 \u0441\u043d\u044f\u0442\u044b \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438. URL : /miss_count/{id} Method : GET Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: { \"counter\" : 1 , \"dogs\" : [ { \"show_dog__name\" : \"Doggy Show\" , \"show_dog__begin_date\" : \"2020-07-20T12:00:00Z\" , \"participant_dog__breed\" : \"\u041f\u0443\u0434\u0435\u043b\u044c/Poodle\" , \"participant_dog__dog_name\" : \"Storm\" } ] }","title":"/miss_count/{id}/ [GET]"},{"location":"organizer/","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445, \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: : \u041f\u043e\u043b\u0435 \"org_surname\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u041f\u043e\u043b\u0435 \"org_name\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043c\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u041f\u043e\u043b\u0435 \"org_patronymic\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u041f\u043e\u043b\u0435 \"org_phone_number\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u041f\u043e\u043b\u0435 \"org_passport\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0441\u0435\u0440\u0438\u044e \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u041f\u043e\u043b\u0435 \"org_email\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \"Organizer\""},{"location":"owner/","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u0445 \u0441\u043e\u0431\u0430\u043a. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: : \u041f\u043e\u043b\u0435 \"owner_surname\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u041f\u043e\u043b\u0435 \"owner_name\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043c\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u041f\u043e\u043b\u0435 \"owner_patronymic\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u041f\u043e\u043b\u0435 \"owner_phone_number\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u041f\u043e\u043b\u0435 \"owner_passport\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0441\u0435\u0440\u0438\u044e \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u041f\u043e\u043b\u0435 \"owner_email\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \"Owner\""},{"location":"owner_change/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435 \u0441\u043e\u0431\u0430\u043a, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0451 (\u043e\u0434\u043d\u043e \u043f\u043e\u043b\u0435 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. URL : /owner/{id}/ Methods : GET, PUT, PATCH, DELETE Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0441\u043e\u0431\u0430\u043a\u0438 Code GET : 200 OK Code PUT : 200 OK Code PATCH : 200 OK Code DELETE : 204 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f GET: { \"id\" : 1 , \"owner_surname\" : \"Pozdnyakov\" , \"owner_name\" : \"Alexey\" , \"owner_patronymic\" : \"Ivanovich\" , \"owner_passport\" : \"4012255100\" , \"owner_phone_number\" : \"89119116939\" , \"owner_email\" : \"alex-pozd51@gmail.com\" } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PUT (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"owner_surname\" : \"<string>\" , \"owner_name\" : \"<string>\" , \"owner_patronymic\" : \"<string>\" , \"owner_passport\" : \"<string>\" , \"owner_phone_number\" : \"<string>\" , \"owner_email\" : \"<string>\" } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PATCH (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"owner_surname\" : \"<string>\" , \"owner_name\" : \"<string>\" , \"owner_patronymic\" : \"<string>\" , \"owner_passport\" : \"<string>\" , \"owner_phone_number\" : \"<string>\" , \"owner_email\" : \"<string>\" }","title":"/owner/{id}/ [GET, PUT, PATCH, DELETE]"},{"location":"owner_create/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0441\u043e\u0431\u0430\u043a \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0435\u043c. URL : /owner/create Method : POST Auth required : No Permissions required : No Data constraints : {} Code : 201 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"owner_surname\" : \"<string>\" , \"owner_name\" : \"<string>\" , \"owner_patronymic\" : \"<string>\" , \"owner_passport\" : \"<string>\" , \"owner_phone_number\" : \"<string>\" , \"owner_email\" : \"<string>\" }","title":"/owner/create/ [POST]"},{"location":"owner_list/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0441\u043e\u0431\u0430\u043a \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445. URL : /owner/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: [ { \"id\" : 1 , \"owner_surname\" : \"Pozdnyakov\" , \"owner_name\" : \"Alexey\" , \"owner_patronymic\" : \"Ivanovich\" , \"owner_passport\" : \"4012255100\" , \"owner_phone_number\" : \"89119116939\" , \"owner_email\" : \"alex-pozd51@gmail.com\" }, { \"id\" : 2 , \"owner_surname\" : \"Bolshakova\" , \"owner_name\" : \"Elena\" , \"owner_patronymic\" : \"Ivanovna\" , \"owner_passport\" : \"4012512940\" , \"owner_phone_number\" : \"89123409281\" , \"owner_email\" : \"elenab@gmail.com\" } ]","title":"/owner/ [GET]"},{"location":"prac_work3_1/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.1.1 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.1.1 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.1.1 \u0424\u0430\u0439\u043b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 (\u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445) models.py from django.db import models class Owner ( models . Model ): owner_id = models . IntegerField ( primary_key = True ) surname = models . CharField ( max_length = 30 , null = False , blank = False ) name = models . CharField ( max_length = 30 , null = False , blank = False ) birthday_date = models . DateField ( null = True , blank = True ) class Car ( models . Model ): car_id = models . IntegerField ( primary_key = True ) number = models . CharField ( max_length = 15 , null = False , blank = False ) brand = models . CharField ( max_length = 20 , null = False , blank = False ) model = models . CharField ( max_length = 20 , null = False , blank = False ) color = models . CharField ( max_length = 30 , null = True , blank = True ) class Ownership ( models . Model ): owner_car_id = models . IntegerField ( primary_key = True ) owner_id = models . ForeignKey ( Owner , on_delete = models . CASCADE ) car_id = models . ForeignKey ( Car , on_delete = models . CASCADE ) start_date = models . DateField () end_date = models . DateField ( null = True , blank = True ) class DrivingLicense ( models . Model ): license_id = models . IntegerField ( primary_key = True ) owner_id = models . OneToOneField ( Owner , on_delete = models . CASCADE ) license_number = models . CharField ( max_length = 10 , null = False , blank = False ) type = models . CharField ( max_length = 10 , null = False , blank = False ) date_of_issue = models . DateField ( null = False , blank = True ) \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b Owner from project.models import Owner first_owner = Owner . objects . create ( owner_id = 1 , surname = \"Kuborskii\" , name = \"Artem\" , birthday_date = \"2002-08-12\" ) first_owner . save () second_owner = Owner . objects . create ( owner_id = 2 , surname = \"Korobkovskii\" , name = \"Vadim\" , birthday_date = \"2002-10-25\" ) second_owner . save () third_owner = Owner . objects . create ( owner_id = 3 , surname = \"Pozdnyakov\" , name = \"Aleksey\" , birthday_date = \"1951-04-01\" ) third_owner . save () fourth_owner = Owner . objects . create ( owner_id = 4 , surname = \"Bolshakova\" , name = \"Elena\" , birthday_date = \"1951-07-25\" ) fourth_owner . save () fifth_owner = Owner . objects . create ( owner_id = 5 , surname = \"Korobkovskii\" , name = \"Andrey\" , birthday_date = \"1972-10-19\" ) fifth_owner . save () sixth_owner = Owner . objects . create ( owner_id = 6 , surname = \"Korobkovskaya\" , name = \"Natalia\" , birthday_date = \"1973-01-08\" ) sixth_owner . save () \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b Car from project.models import Car first_car = Car . objects . create ( car_id = 1 , number = \"A222AA\" , brand = \"Ferrari\" , model = \"La Ferrari\" , color = \"yellow\" ) first_car . save () second_car = Car . objects . create ( car_id = 2 , number = \"P444XT\" , brand = \"Honda\" , model = \"CRV\" , color = \"white\" ) second_car . save () third_car = Car . objects . create ( car_id = 3 , number = \"P468IP\" , brand = \"BMW\" , model = \"X5\" , color = \"black\" ) third_car . save () fourth_car = Car . objects . create ( car_id = 4 , number = \"N000IK\" , brand = \"Skoda\" , model = \"Octavia\" , color = \"white\" ) fourth_car . save () fifth_car = Car . objects . create ( car_id = 5 , number = \"N444AT\" , brand = \"Mercedes\" , model = \"E-Class\" , color = \"white\" ) fifth_car . save () sixth_car = Car . objects . create ( car_id = 6 , number = \"B090OT\" , brand = \"Jeep\" , model = \"Cherokee\" , color = \"black\" ) sixth_car . save () \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b Ownership from project.models import Ownership first_ownership = Ownership . objects . create ( owner_car_id = 1 , owner_id = Owner . objects . get ( owner_id = 1 ), car_id = Car . objects . get ( car_id = 6 ), start_date = \"2020-01-02\" ) first_ownership . save () second_ownership = Ownership . objects . create ( owner_car_id = 2 , owner_id = Owner . objects . get ( owner_id = 2 ), car_id = Car . objects . get ( car_id = 1 ), start_date = \"2022-11-16\" ) second_ownership . save () third_ownership = Ownership . objects . create ( owner_car_id = 3 , owner_id = Owner . objects . get ( owner_id = 3 ), car_id = Car . objects . get ( car_id = 2 ), start_date = \"2019-06-20\" ) third_ownership . save () fourth_ownership = Ownership . objects . create ( owner_car_id = 4 , owner_id = Owner . objects . get ( owner_id = 4 ), car_id = Car . objects . get ( car_id = 4 ), start_date = \"2022-11-16\" ) fourth_ownership . save () fifth_ownership = Ownership . objects . create ( owner_car_id = 5 , owner_id = Owner . objects . get ( owner_id = 5 ), car_id = Car . objects . get ( car_id = 3 ), start_date = \"2018-07-10\" ) fifth_ownership . save () sixth_ownership = Ownership . objects . create ( owner_car_id = 6 , owner_id = Owner . objects . get ( owner_id = 6 ), car_id = Car . objects . get ( car_id = 5 ), start_date = \"2022-11-16\" ) sixth_ownership . save () \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b DrivingLicense from project.models import DrivingLicense first_license = DrivingLicense . objects . create ( license_id = 1 , owner_id = Owner . objects . get ( owner_id = 1 ), license_number = \"1234567890\" , type = \"B\" , date_of_issue = \"2022-01-01\" ) first_license . save () second_license = DrivingLicense . objects . create ( license_id = 2 , owner_id = Owner . objects . get ( owner_id = 2 ), license_number = \"1234567891\" , type = \"B\" , date_of_issue = \"2022-01-01\" ) second_license . save () third_license = DrivingLicense . objects . create ( license_id = 3 , owner_id = Owner . objects . get ( owner_id = 3 ), license_number = \"1234567892\" , type = \"B\" , date_of_issue = \"2021-01-01\" ) third_olicense . save () fourth_license = DrivingLicense . objects . create ( license_id = 4 , owner_id = Owner . objects . get ( owner_id = 4 ), license_number = \"1234567893\" , type = \"B\" , date_of_issue = \"2022-01-01\" ) fourth_license . save () fifth_license = DrivingLicense . objects . create ( license_id = 5 , owner_id = Owner . objects . get ( owner_id = 5 ), license_number = \"1234567894\" , type = \"B\" , date_of_issue = \"2022-01-01\" ) fifth_license . save () sixth_license = DrivingLicense . objects . create ( license_id = 6 , owner_id = Owner . objects . get ( owner_id = 6 ), license_number = \"1234567895\" , type = \"B\" , date_of_issue = \"2020-01-01\" ) sixth_license . save () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.2.1 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.1 \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c related_name \u043a \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0442\u0430\u043c, \u0433\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.1 \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 (\u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445) models.py from django.db import models class Owner ( models . Model ): owner_id = models . IntegerField ( primary_key = True ) surname = models . CharField ( max_length = 30 , null = False , blank = False ) name = models . CharField ( max_length = 30 , null = False , blank = False ) birthday_date = models . DateField ( null = True , blank = True ) class Car ( models . Model ): car_id = models . IntegerField ( primary_key = True ) number = models . CharField ( max_length = 15 , null = False , blank = False ) brand = models . CharField ( max_length = 20 , null = False , blank = False ) model = models . CharField ( max_length = 20 , null = False , blank = False ) color = models . CharField ( max_length = 30 , null = True , blank = True ) class Ownership ( models . Model ): owner_car_id = models . IntegerField ( primary_key = True ) owner_id = models . ForeignKey ( Owner , related_name = \"hold_owners\" , related_query_name = \"hold_owner\" , on_delete = models . CASCADE ) car_id = models . ForeignKey ( Car , related_name = \"hold_cars\" , related_query_name = \"hold_car\" , on_delete = models . CASCADE ) start_date = models . DateField () end_date = models . DateField ( null = True , blank = True ) class DrivingLicense ( models . Model ): license_id = models . IntegerField ( primary_key = True ) owner_id = models . OneToOneField ( Owner , related_name = \"license_owner_guy\" , related_query_name = \"license_owner\" , on_delete = models . CASCADE ) license_number = models . CharField ( max_length = 10 , null = False , blank = False ) type = models . CharField ( max_length = 10 , null = False , blank = False ) date_of_issue = models . DateField ( null = False , blank = True ) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.2.2 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.2 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 Ferrari. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.2 \u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 Car . objects . filter ( brand = \"Ferrari\" ) \u0412\u044b\u0432\u043e\u0434 < QuerySet [ < Car : Car object ( 1 ) > ] > \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.2.3 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.3 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"Natalia\". \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.3 \u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 Owner . objects . filter ( name = \"Natalia\" ) \u0412\u044b\u0432\u043e\u0434 < QuerySet [ < Owner : Owner object ( 6 ) > ] > \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.2.4 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.4 \u0412\u0437\u044f\u0442\u044c \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430). \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.4 \u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 id = Owner . objects . filter ( surname = \"Pozdnyakov\" , name = \"Aleksey\" )[ 0 ] . owner_id DrivingLicense . objects . get ( owner_id = id ) \u0412\u044b\u0432\u043e\u0434 < DrivingLicense : DrivingLicense object ( 3 ) > \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.2.5 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.5 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0431\u0435\u043b\u044b\u0445 \u043c\u0430\u0448\u0438\u043d. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.5 \u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 Owner . objects . filter ( hold_owner__car_id__color = \"white\" ) \u0412\u044b\u0432\u043e\u0434 < QuerySet [ < Owner : Owner object ( 3 ) > , < Owner : Owner object ( 4 ) > , < Owner : Owner object ( 6 ) > ] > \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.2.6 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.6 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2022. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.6 \u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 Owner . objects . filter ( hold_owner__start_date__year__gte = 2022 ) \u0412\u044b\u0432\u043e\u0434 < QuerySet [ < Owner : Owner object ( 2 ) > , < Owner : Owner object ( 4 ) > , < Owner : Owner object ( 6 ) > , < Owner : Owner object ( 7 ) > ] > \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.3.1 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.1 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0430\u0442\u0443 \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.1 \u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 from django.db.models import Min DrivingLicense . objects . aggregate ( Min ( \"date_of_issue\" )) \u0412\u044b\u0432\u043e\u0434 { 'date_of_issue__min' : datetime . date ( 2020 , 1 , 1 )} \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.3.2 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.2 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.2 \u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 from django.db.models import Max Ownership . objects . filter ( car_id__model = \"CRV\" ) . aggregate ( Max ( \"start_date\" )) \u0412\u044b\u0432\u043e\u0434 { 'start_date__max' : datetime . date ( 2019 , 6 , 20 )} \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.3.3 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.3 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.3 \u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 from django.db.models import Count Owner . objects . values ( \"owner_id\" ) . annotate ( Count ( \"hold_owner__car_id\" )) \u0412\u044b\u0432\u043e\u0434 < QuerySet [{ 'owner_id' : 1 , 'hold_owner__car_id__count' : 1 }, { 'owner_id' : 2 , 'hold_owner__car_id__count' : 1 }, { 'owner_id' : 3 , 'hold_owner__car_id__count' : 1 }, { 'owner_id' : 4 , 'hold_owner__car_id__count' : 1 }, { 'owner_id' : 5 , 'hold_owner__car_id__count' : 1 }, { 'owner_id' : 6 , 'hold_owner__car_id__count' : 1 }, { 'owner_id' : 7 , 'hold_owner__car_id__count' : 1 }] > \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.3.4 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.4 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.4 \u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 from django.db.models import Count Car . objects . values ( \"brand\" ) . annotate ( Count ( \"car_id\" )) \u0412\u044b\u0432\u043e\u0434 < QuerySet [{ 'brand' : 'BMW' , 'car_id__count' : 1 }, { 'brand' : 'Ferrari' , 'car_id__count' : 1 }, { 'brand' : 'Honda' , 'car_id__count' : 1 }, { 'brand' : 'Jeep' , 'car_id__count' : 1 }, { 'brand' : 'Lada' , 'car_id__count' : 1 }, { 'brand' : 'Mercedes' , 'car_id__count' : 1 }, { 'brand' : 'Skoda' , 'car_id__count' : 1 }] > \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.3.5 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.5 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.5 \u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 Owner . objects . order_by ( \"license_owner__date_of_issue\" ) \u0412\u044b\u0432\u043e\u0434 < QuerySet [ < Owner : Owner object ( 7 ) > , < Owner : Owner object ( 6 ) > , < Owner : Owner object ( 3 ) > , < Owner : Owner object ( 1 ) > , < Owner : Owner object ( 2 ) > , < Owner : Owner object ( 4 ) > , < Owner : Owner object ( 5 ) > ] >","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430"},{"location":"prac_work3_1/#no31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1"},{"location":"prac_work3_1/#no311","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.1.1"},{"location":"prac_work3_1/#no311_1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.1.1"},{"location":"prac_work3_1/#no311_2","text":"\u0424\u0430\u0439\u043b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 (\u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445) models.py from django.db import models class Owner ( models . Model ): owner_id = models . IntegerField ( primary_key = True ) surname = models . CharField ( max_length = 30 , null = False , blank = False ) name = models . CharField ( max_length = 30 , null = False , blank = False ) birthday_date = models . DateField ( null = True , blank = True ) class Car ( models . Model ): car_id = models . IntegerField ( primary_key = True ) number = models . CharField ( max_length = 15 , null = False , blank = False ) brand = models . CharField ( max_length = 20 , null = False , blank = False ) model = models . CharField ( max_length = 20 , null = False , blank = False ) color = models . CharField ( max_length = 30 , null = True , blank = True ) class Ownership ( models . Model ): owner_car_id = models . IntegerField ( primary_key = True ) owner_id = models . ForeignKey ( Owner , on_delete = models . CASCADE ) car_id = models . ForeignKey ( Car , on_delete = models . CASCADE ) start_date = models . DateField () end_date = models . DateField ( null = True , blank = True ) class DrivingLicense ( models . Model ): license_id = models . IntegerField ( primary_key = True ) owner_id = models . OneToOneField ( Owner , on_delete = models . CASCADE ) license_number = models . CharField ( max_length = 10 , null = False , blank = False ) type = models . CharField ( max_length = 10 , null = False , blank = False ) date_of_issue = models . DateField ( null = False , blank = True ) \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b Owner from project.models import Owner first_owner = Owner . objects . create ( owner_id = 1 , surname = \"Kuborskii\" , name = \"Artem\" , birthday_date = \"2002-08-12\" ) first_owner . save () second_owner = Owner . objects . create ( owner_id = 2 , surname = \"Korobkovskii\" , name = \"Vadim\" , birthday_date = \"2002-10-25\" ) second_owner . save () third_owner = Owner . objects . create ( owner_id = 3 , surname = \"Pozdnyakov\" , name = \"Aleksey\" , birthday_date = \"1951-04-01\" ) third_owner . save () fourth_owner = Owner . objects . create ( owner_id = 4 , surname = \"Bolshakova\" , name = \"Elena\" , birthday_date = \"1951-07-25\" ) fourth_owner . save () fifth_owner = Owner . objects . create ( owner_id = 5 , surname = \"Korobkovskii\" , name = \"Andrey\" , birthday_date = \"1972-10-19\" ) fifth_owner . save () sixth_owner = Owner . objects . create ( owner_id = 6 , surname = \"Korobkovskaya\" , name = \"Natalia\" , birthday_date = \"1973-01-08\" ) sixth_owner . save () \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b Car from project.models import Car first_car = Car . objects . create ( car_id = 1 , number = \"A222AA\" , brand = \"Ferrari\" , model = \"La Ferrari\" , color = \"yellow\" ) first_car . save () second_car = Car . objects . create ( car_id = 2 , number = \"P444XT\" , brand = \"Honda\" , model = \"CRV\" , color = \"white\" ) second_car . save () third_car = Car . objects . create ( car_id = 3 , number = \"P468IP\" , brand = \"BMW\" , model = \"X5\" , color = \"black\" ) third_car . save () fourth_car = Car . objects . create ( car_id = 4 , number = \"N000IK\" , brand = \"Skoda\" , model = \"Octavia\" , color = \"white\" ) fourth_car . save () fifth_car = Car . objects . create ( car_id = 5 , number = \"N444AT\" , brand = \"Mercedes\" , model = \"E-Class\" , color = \"white\" ) fifth_car . save () sixth_car = Car . objects . create ( car_id = 6 , number = \"B090OT\" , brand = \"Jeep\" , model = \"Cherokee\" , color = \"black\" ) sixth_car . save () \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b Ownership from project.models import Ownership first_ownership = Ownership . objects . create ( owner_car_id = 1 , owner_id = Owner . objects . get ( owner_id = 1 ), car_id = Car . objects . get ( car_id = 6 ), start_date = \"2020-01-02\" ) first_ownership . save () second_ownership = Ownership . objects . create ( owner_car_id = 2 , owner_id = Owner . objects . get ( owner_id = 2 ), car_id = Car . objects . get ( car_id = 1 ), start_date = \"2022-11-16\" ) second_ownership . save () third_ownership = Ownership . objects . create ( owner_car_id = 3 , owner_id = Owner . objects . get ( owner_id = 3 ), car_id = Car . objects . get ( car_id = 2 ), start_date = \"2019-06-20\" ) third_ownership . save () fourth_ownership = Ownership . objects . create ( owner_car_id = 4 , owner_id = Owner . objects . get ( owner_id = 4 ), car_id = Car . objects . get ( car_id = 4 ), start_date = \"2022-11-16\" ) fourth_ownership . save () fifth_ownership = Ownership . objects . create ( owner_car_id = 5 , owner_id = Owner . objects . get ( owner_id = 5 ), car_id = Car . objects . get ( car_id = 3 ), start_date = \"2018-07-10\" ) fifth_ownership . save () sixth_ownership = Ownership . objects . create ( owner_car_id = 6 , owner_id = Owner . objects . get ( owner_id = 6 ), car_id = Car . objects . get ( car_id = 5 ), start_date = \"2022-11-16\" ) sixth_ownership . save () \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b DrivingLicense from project.models import DrivingLicense first_license = DrivingLicense . objects . create ( license_id = 1 , owner_id = Owner . objects . get ( owner_id = 1 ), license_number = \"1234567890\" , type = \"B\" , date_of_issue = \"2022-01-01\" ) first_license . save () second_license = DrivingLicense . objects . create ( license_id = 2 , owner_id = Owner . objects . get ( owner_id = 2 ), license_number = \"1234567891\" , type = \"B\" , date_of_issue = \"2022-01-01\" ) second_license . save () third_license = DrivingLicense . objects . create ( license_id = 3 , owner_id = Owner . objects . get ( owner_id = 3 ), license_number = \"1234567892\" , type = \"B\" , date_of_issue = \"2021-01-01\" ) third_olicense . save () fourth_license = DrivingLicense . objects . create ( license_id = 4 , owner_id = Owner . objects . get ( owner_id = 4 ), license_number = \"1234567893\" , type = \"B\" , date_of_issue = \"2022-01-01\" ) fourth_license . save () fifth_license = DrivingLicense . objects . create ( license_id = 5 , owner_id = Owner . objects . get ( owner_id = 5 ), license_number = \"1234567894\" , type = \"B\" , date_of_issue = \"2022-01-01\" ) fifth_license . save () sixth_license = DrivingLicense . objects . create ( license_id = 6 , owner_id = Owner . objects . get ( owner_id = 6 ), license_number = \"1234567895\" , type = \"B\" , date_of_issue = \"2020-01-01\" ) sixth_license . save ()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.1.1"},{"location":"prac_work3_1/#no321","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.2.1"},{"location":"prac_work3_1/#no321_1","text":"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c related_name \u043a \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0442\u0430\u043c, \u0433\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.1"},{"location":"prac_work3_1/#no321_2","text":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 (\u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445) models.py from django.db import models class Owner ( models . Model ): owner_id = models . IntegerField ( primary_key = True ) surname = models . CharField ( max_length = 30 , null = False , blank = False ) name = models . CharField ( max_length = 30 , null = False , blank = False ) birthday_date = models . DateField ( null = True , blank = True ) class Car ( models . Model ): car_id = models . IntegerField ( primary_key = True ) number = models . CharField ( max_length = 15 , null = False , blank = False ) brand = models . CharField ( max_length = 20 , null = False , blank = False ) model = models . CharField ( max_length = 20 , null = False , blank = False ) color = models . CharField ( max_length = 30 , null = True , blank = True ) class Ownership ( models . Model ): owner_car_id = models . IntegerField ( primary_key = True ) owner_id = models . ForeignKey ( Owner , related_name = \"hold_owners\" , related_query_name = \"hold_owner\" , on_delete = models . CASCADE ) car_id = models . ForeignKey ( Car , related_name = \"hold_cars\" , related_query_name = \"hold_car\" , on_delete = models . CASCADE ) start_date = models . DateField () end_date = models . DateField ( null = True , blank = True ) class DrivingLicense ( models . Model ): license_id = models . IntegerField ( primary_key = True ) owner_id = models . OneToOneField ( Owner , related_name = \"license_owner_guy\" , related_query_name = \"license_owner\" , on_delete = models . CASCADE ) license_number = models . CharField ( max_length = 10 , null = False , blank = False ) type = models . CharField ( max_length = 10 , null = False , blank = False ) date_of_issue = models . DateField ( null = False , blank = True )","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.1"},{"location":"prac_work3_1/#no322","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.2.2"},{"location":"prac_work3_1/#no322_1","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 Ferrari.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.2"},{"location":"prac_work3_1/#no322_2","text":"\u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 Car . objects . filter ( brand = \"Ferrari\" ) \u0412\u044b\u0432\u043e\u0434 < QuerySet [ < Car : Car object ( 1 ) > ] >","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.2"},{"location":"prac_work3_1/#no323","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.2.3"},{"location":"prac_work3_1/#no323_1","text":"\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"Natalia\".","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.3"},{"location":"prac_work3_1/#no323_2","text":"\u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 Owner . objects . filter ( name = \"Natalia\" ) \u0412\u044b\u0432\u043e\u0434 < QuerySet [ < Owner : Owner object ( 6 ) > ] >","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.3"},{"location":"prac_work3_1/#no324","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.2.4"},{"location":"prac_work3_1/#no324_1","text":"\u0412\u0437\u044f\u0442\u044c \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430).","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.4"},{"location":"prac_work3_1/#no324_2","text":"\u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 id = Owner . objects . filter ( surname = \"Pozdnyakov\" , name = \"Aleksey\" )[ 0 ] . owner_id DrivingLicense . objects . get ( owner_id = id ) \u0412\u044b\u0432\u043e\u0434 < DrivingLicense : DrivingLicense object ( 3 ) >","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.4"},{"location":"prac_work3_1/#no325","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.2.5"},{"location":"prac_work3_1/#no325_1","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0431\u0435\u043b\u044b\u0445 \u043c\u0430\u0448\u0438\u043d.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.5"},{"location":"prac_work3_1/#no325_2","text":"\u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 Owner . objects . filter ( hold_owner__car_id__color = \"white\" ) \u0412\u044b\u0432\u043e\u0434 < QuerySet [ < Owner : Owner object ( 3 ) > , < Owner : Owner object ( 4 ) > , < Owner : Owner object ( 6 ) > ] >","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.5"},{"location":"prac_work3_1/#no326","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.2.6"},{"location":"prac_work3_1/#no326_1","text":"\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2022.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.6"},{"location":"prac_work3_1/#no326_2","text":"\u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 Owner . objects . filter ( hold_owner__start_date__year__gte = 2022 ) \u0412\u044b\u0432\u043e\u0434 < QuerySet [ < Owner : Owner object ( 2 ) > , < Owner : Owner object ( 4 ) > , < Owner : Owner object ( 6 ) > , < Owner : Owner object ( 7 ) > ] >","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.2.6"},{"location":"prac_work3_1/#no331","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.3.1"},{"location":"prac_work3_1/#no331_1","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0430\u0442\u0443 \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.1"},{"location":"prac_work3_1/#no331_2","text":"\u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 from django.db.models import Min DrivingLicense . objects . aggregate ( Min ( \"date_of_issue\" )) \u0412\u044b\u0432\u043e\u0434 { 'date_of_issue__min' : datetime . date ( 2020 , 1 , 1 )}","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.1"},{"location":"prac_work3_1/#no332","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.3.2"},{"location":"prac_work3_1/#no332_1","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.2"},{"location":"prac_work3_1/#no332_2","text":"\u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 from django.db.models import Max Ownership . objects . filter ( car_id__model = \"CRV\" ) . aggregate ( Max ( \"start_date\" )) \u0412\u044b\u0432\u043e\u0434 { 'start_date__max' : datetime . date ( 2019 , 6 , 20 )}","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.2"},{"location":"prac_work3_1/#no333","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.3.3"},{"location":"prac_work3_1/#no333_1","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.3"},{"location":"prac_work3_1/#no333_2","text":"\u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 from django.db.models import Count Owner . objects . values ( \"owner_id\" ) . annotate ( Count ( \"hold_owner__car_id\" )) \u0412\u044b\u0432\u043e\u0434 < QuerySet [{ 'owner_id' : 1 , 'hold_owner__car_id__count' : 1 }, { 'owner_id' : 2 , 'hold_owner__car_id__count' : 1 }, { 'owner_id' : 3 , 'hold_owner__car_id__count' : 1 }, { 'owner_id' : 4 , 'hold_owner__car_id__count' : 1 }, { 'owner_id' : 5 , 'hold_owner__car_id__count' : 1 }, { 'owner_id' : 6 , 'hold_owner__car_id__count' : 1 }, { 'owner_id' : 7 , 'hold_owner__car_id__count' : 1 }] >","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.3"},{"location":"prac_work3_1/#no334","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.3.4"},{"location":"prac_work3_1/#no334_1","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.4"},{"location":"prac_work3_1/#no334_2","text":"\u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 from django.db.models import Count Car . objects . values ( \"brand\" ) . annotate ( Count ( \"car_id\" )) \u0412\u044b\u0432\u043e\u0434 < QuerySet [{ 'brand' : 'BMW' , 'car_id__count' : 1 }, { 'brand' : 'Ferrari' , 'car_id__count' : 1 }, { 'brand' : 'Honda' , 'car_id__count' : 1 }, { 'brand' : 'Jeep' , 'car_id__count' : 1 }, { 'brand' : 'Lada' , 'car_id__count' : 1 }, { 'brand' : 'Mercedes' , 'car_id__count' : 1 }, { 'brand' : 'Skoda' , 'car_id__count' : 1 }] >","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.4"},{"location":"prac_work3_1/#no335","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163.3.5"},{"location":"prac_work3_1/#no335_1","text":"\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.5"},{"location":"prac_work3_1/#no335_2","text":"\u041a\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 Owner . objects . order_by ( \"license_owner__date_of_issue\" ) \u0412\u044b\u0432\u043e\u0434 < QuerySet [ < Owner : Owner object ( 7 ) > , < Owner : Owner object ( 6 ) > , < Owner : Owner object ( 3 ) > , < Owner : Owner object ( 1 ) > , < Owner : Owner object ( 2 ) > , < Owner : Owner object ( 4 ) > , < Owner : Owner object ( 5 ) > ] >","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u21163.3.5"},{"location":"report/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435. \u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442: : \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0433\u043e\u0434 \u0435\u0451 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435 \u041e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u041c\u0435\u0434\u0430\u043b\u0438, \u0437\u0430\u0432\u043e\u0435\u0432\u0430\u043d\u043d\u044b\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438 URL : /report/{id} Method : GET Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: { \"show_title\" : \"Doggy Show\" , \"year\" : 2020 , \"participants_number\" : 10 , \"breeds\" : [ { \"participant_dog__breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"count\" : 3 }, { \"participant_dog__breed\" : \"\u041f\u0443\u0434\u0435\u043b\u044c/Poodle\" , \"count\" : 1 }, { \"participant_dog__breed\" : \"\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever\" , \"count\" : 3 }, { \"participant_dog__breed\" : \"\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed\" , \"count\" : 3 } ], \"best_grades\" : [ { \"dog_grade__participant_dog__dog_name\" : \"Fluffy\" , \"dog_grade__participant_dog__breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"dog_grade__id\" : 1 , \"grade1\" : 6 , \"grade2\" : 7 , \"grade3\" : 6 , \"sum\" : 19 }, { \"dog_grade__participant_dog__dog_name\" : \"Coffee\" , \"dog_grade__participant_dog__breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"dog_grade__id\" : 3 , \"grade1\" : 8 , \"grade2\" : 8 , \"grade3\" : 6 , \"sum\" : 22 }, { \"dog_grade__participant_dog__dog_name\" : \"Leo\" , \"dog_grade__participant_dog__breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"dog_grade__id\" : 2 , \"grade1\" : 9 , \"grade2\" : 9 , \"grade3\" : 5 , \"sum\" : 23 }, { \"dog_grade__participant_dog__dog_name\" : \"Finn\" , \"dog_grade__participant_dog__breed\" : \"\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever\" , \"dog_grade__id\" : 9 , \"grade1\" : 8 , \"grade2\" : 7 , \"grade3\" : 6 , \"sum\" : 21 }, { \"dog_grade__participant_dog__dog_name\" : \"Teddy\" , \"dog_grade__participant_dog__breed\" : \"\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever\" , \"dog_grade__id\" : 7 , \"grade1\" : 8 , \"grade2\" : 8 , \"grade3\" : 8 , \"sum\" : 24 }, { \"dog_grade__participant_dog__dog_name\" : \"Zeus\" , \"dog_grade__participant_dog__breed\" : \"\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever\" , \"dog_grade__id\" : 8 , \"grade1\" : 9 , \"grade2\" : 9 , \"grade3\" : 9 , \"sum\" : 27 }, { \"dog_grade__participant_dog__dog_name\" : \"Cookie\" , \"dog_grade__participant_dog__breed\" : \"\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed\" , \"dog_grade__id\" : 5 , \"grade1\" : 9 , \"grade2\" : 7 , \"grade3\" : 6 , \"sum\" : 22 }, { \"dog_grade__participant_dog__dog_name\" : \"Cloudy\" , \"dog_grade__participant_dog__breed\" : \"\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed\" , \"dog_grade__id\" : 4 , \"grade1\" : 8 , \"grade2\" : 8 , \"grade3\" : 8 , \"sum\" : 24 }, { \"dog_grade__participant_dog__dog_name\" : \"Snow\" , \"dog_grade__participant_dog__breed\" : \"\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed\" , \"dog_grade__id\" : 6 , \"grade1\" : 10 , \"grade2\" : 10 , \"grade3\" : 9 , \"sum\" : 29 } ], \"medals\" : [ { \"participant_dog__dog_name\" : \"Fluffy\" , \"participant_dog__breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"show_medal\" : \"\u0411\u0440\u043e\u043d\u0437\u0430/Bronze\" , \"medals_count\" : 1 }, { \"participant_dog__dog_name\" : \"Coffee\" , \"participant_dog__breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"show_medal\" : \"\u0421\u0435\u0440\u0435\u0431\u0440\u043e/Silver\" , \"medals_count\" : 1 }, { \"participant_dog__dog_name\" : \"Leo\" , \"participant_dog__breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"show_medal\" : \"\u0417\u043e\u043b\u043e\u0442\u043e/Gold\" , \"medals_count\" : 1 }, { \"participant_dog__dog_name\" : \"Storm\" , \"participant_dog__breed\" : \"\u041f\u0443\u0434\u0435\u043b\u044c/Poodle\" , \"show_medal\" : null , \"medals_count\" : 0 }, { \"participant_dog__dog_name\" : \"Finn\" , \"participant_dog__breed\" : \"\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever\" , \"show_medal\" : \"\u0411\u0440\u043e\u043d\u0437\u0430/Bronze\" , \"medals_count\" : 1 }, { \"participant_dog__dog_name\" : \"Teddy\" , \"participant_dog__breed\" : \"\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever\" , \"show_medal\" : \"\u0421\u0435\u0440\u0435\u0431\u0440\u043e/Silver\" , \"medals_count\" : 1 }, { \"participant_dog__dog_name\" : \"Zeus\" , \"participant_dog__breed\" : \"\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever\" , \"show_medal\" : \"\u0417\u043e\u043b\u043e\u0442\u043e/Gold\" , \"medals_count\" : 1 }, { \"participant_dog__dog_name\" : \"Cookie\" , \"participant_dog__breed\" : \"\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed\" , \"show_medal\" : \"\u0411\u0440\u043e\u043d\u0437\u0430/Bronze\" , \"medals_count\" : 1 }, { \"participant_dog__dog_name\" : \"Cloudy\" , \"participant_dog__breed\" : \"\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed\" , \"show_medal\" : \"\u0421\u0435\u0440\u0435\u0431\u0440\u043e/Silver\" , \"medals_count\" : 1 }, { \"participant_dog__dog_name\" : \"Snow\" , \"participant_dog__breed\" : \"\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed\" , \"show_medal\" : \"\u0417\u043e\u043b\u043e\u0442\u043e/Gold\" , \"medals_count\" : 1 } ] }","title":"/report/{id} [GET]"},{"location":"schedule_change/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0438, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0451 (\u043e\u0434\u043d\u043e \u043f\u043e\u043b\u0435 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. URL : /schedule/{id}/ Methods : GET, PUT, PATCH, DELETE Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f Code GET : 200 OK Code PUT : 200 OK Code PATCH : 200 OK Code DELETE : 204 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f GET: { \"id\" : 1 , \"show_breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"show_time\" : \"2020-07-20T12:00:00Z\" , \"ring_number\" : 1 , \"show_class\" : \"Open\" , \"show_schedule\" : 1 } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PUT (\u0432\u043c\u0435\u0441\u0442\u043e <integer> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <datetime> \u2014 \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"show_breed\" : \"<choice>\" , \"show_time\" : \"<datetime>\" , \"ring_number\" : <i nte ger> , \"show_class\" : \"<choice>\" , \"show_schedule\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u0435 \"show_schedule\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \"Show\". \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PATCH (\u0432\u043c\u0435\u0441\u0442\u043e <integer> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <datetime> \u2014 \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"show_breed\" : \"<choice>\" , \"show_time\" : \"<datetime>\" , \"ring_number\" : <i nte ger> , \"show_class\" : \"<choice>\" , \"show_schedule\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u0435 \"show_schedule\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \"Show\".","title":"/schedule/{id}/ [GET, PUT, PATCH, DELETE]"},{"location":"schedule_create/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u043e\u0435 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0435\u043c. URL : /schedule/create Method : POST Auth required : No Permissions required : No Data constraints : {} Code : 201 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 (\u0432\u043c\u0435\u0441\u0442\u043e <integer> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <datetime> \u2014 \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"show_breed\" : \"<choice>\" , \"show_time\" : \"<datetime>\" , \"ring_number\" : <i nte ger> , \"show_class\" : \"<choice>\" , \"show_schedule\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u0435 \"show_schedule\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \"Show\".","title":"/schedule/create/ [POST]"},{"location":"schedule_list/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445. URL : /schedule/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: [ { \"id\" : 1 , \"show_breed\" : \"\u041a\u043e\u0440\u0433\u0438/Corgi\" , \"show_time\" : \"2020-07-20T12:00:00Z\" , \"ring_number\" : 1 , \"show_class\" : \"Open\" , \"show_schedule\" : 1 }, { \"id\" : 2 , \"show_breed\" : \"\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed\" , \"show_time\" : \"2020-07-20T13:00:00Z\" , \"ring_number\" : 2 , \"show_class\" : \"Open\" , \"show_schedule\" : 1 } ]","title":"/schedule/ [GET]"},{"location":"show/","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430\u0445. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: : \u041f\u043e\u043b\u0435 \"name\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u041f\u043e\u043b\u0435 \"begin_date\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u041f\u043e\u043b\u0435 \"end_date\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u041f\u043e\u043b\u0435 \"city\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0433\u043e\u0440\u043e\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u043e\u0439\u0434\u0435\u043c \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430 \u041f\u043e\u043b\u0435 \"address\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0430\u0434\u0440\u0435\u0441, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u043e\u0439\u0434\u0435\u0442 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430 \u041f\u043e\u043b\u0435 \"show_type\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0442\u0438\u043f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u041f\u043e\u043b\u0435 \"host\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Organizer \u0421\u043f\u0438\u0441\u043a\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430: C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"show_type\" show_types = ( ( \"\u041c\u043e\u043d\u043e/Mono\" , \"\u041e\u0434\u043d\u043e\u043f\u043e\u0440\u043e\u0434\u043d\u0430\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Monobreed exhibition\" ), ( \"\u041f\u043e\u043b\u0438/Poly\" , \"\u0412\u0441\u0435\u043f\u043e\u0440\u043e\u0434\u043d\u0430\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Polybreed exhibition\" ) )","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \"Show\""},{"location":"show/#_1","text":"","title":"\u0421\u043f\u0438\u0441\u043a\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430:"},{"location":"show/#c-show_type","text":"show_types = ( ( \"\u041c\u043e\u043d\u043e/Mono\" , \"\u041e\u0434\u043d\u043e\u043f\u043e\u0440\u043e\u0434\u043d\u0430\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Monobreed exhibition\" ), ( \"\u041f\u043e\u043b\u0438/Poly\" , \"\u0412\u0441\u0435\u043f\u043e\u0440\u043e\u0434\u043d\u0430\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430/Polybreed exhibition\" ) )","title":"C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"show_type\""},{"location":"show_change/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0451 (\u043e\u0434\u043d\u043e \u043f\u043e\u043b\u0435 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. URL : /club/{id}/ Methods : GET, PUT, PATCH, DELETE Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 Code GET : 200 OK Code PUT : 200 OK Code PATCH : 200 OK Code DELETE : 204 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f GET: { \"id\" : 1 , \"name\" : \"Doggy Show\" , \"begin_date\" : \"2020-07-20T12:00:00Z\" , \"end_date\" : \"2020-07-20T18:00:00Z\" , \"city\" : \"Saint-Petersburg\" , \"address\" : \"Tipanova street, 7\" , \"show_type\" : \"\u041f\u043e\u043b\u0438/Poly\" , \"host\" : 1 } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PUT (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <integer> \u2014 \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <datetime> \u2014 \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"name\" : \"<string>\" , \"begin_date\" : \"<datetime>\" , \"end_date\" : \"<datetime>>\" , \"city\" : \"<string>\" , \"address\" : \"<string>\" , \"show_type\" : \"<choice>\" , \"host\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u0435 \"host\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \"Organizer\". \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PATCH (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <integer> \u2014 \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <datetime> \u2014 \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"name\" : \"<string>\" , \"begin_date\" : \"<datetime>\" , \"end_date\" : \"<datetime>>\" , \"city\" : \"<string>\" , \"address\" : \"<string>\" , \"show_type\" : \"<choice>\" , \"host\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u0435 \"host\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \"Organizer\".","title":"/show/{id}/ [GET, PUT, PATCH, DELETE]"},{"location":"show_create/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u0443\u044e \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0443 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0435\u0439. URL : /show/create Method : POST Auth required : No Permissions required : No Data constraints : {} Code : 201 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <integer> \u2014 \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <datetime> \u2014 \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"name\" : \"<string>\" , \"begin_date\" : \"<datetime>\" , \"end_date\" : \"<datetime>>\" , \"city\" : \"<string>\" , \"address\" : \"<string>\" , \"show_type\" : \"<choice>\" , \"host\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u0435 \"host\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \"Organizer\".","title":"/show/create/ [POST]"},{"location":"show_list/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445. URL : /show/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: [ { \"id\" : 1 , \"name\" : \"Doggy Show\" , \"begin_date\" : \"2020-07-20T12:00:00Z\" , \"end_date\" : \"2020-07-20T18:00:00Z\" , \"city\" : \"Saint-Petersburg\" , \"address\" : \"Tipanova street, 7\" , \"show_type\" : \"\u041f\u043e\u043b\u0438/Poly\" , \"host\" : 1 }, { \"id\" : 2 , \"name\" : \"Big Corgy\" , \"begin_date\" : \"2020-09-12T13:00:00Z\" , \"end_date\" : \"2020-07-20T16:00:00Z\" , \"city\" : \"Saint-Petersburg\" , \"address\" : \"Nevskiy avenue , 120\" , \"show_type\" : \"\u041c\u043e\u043d\u043e/Mono\" , \"host\" : 1 } ]","title":"/show/ [GET]"},{"location":"show_schedule/","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0430\u0445. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: : \u041f\u043e\u043b\u0435 \"show_breed\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0443\u044e \u043d\u0430 \u0440\u0438\u043d\u0433\u0435 \u043f\u043e\u0440\u043e\u0434\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0430\u0434\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u041f\u043e\u043b\u0435 \"show_time\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0440\u0438\u043d\u0433\u0435 \u041f\u043e\u043b\u0435 \"ring_number\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u043e\u043c\u0435\u0440 \u0440\u0438\u043d\u0433\u0430 \u041f\u043e\u043b\u0435 \"show_class\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0438\u0445 \u043d\u0430 \u0440\u0438\u043d\u0433\u0435 \u0441\u043e\u0431\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u041f\u043e\u043b\u0435 \"show_schedule\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Show \u0421\u043f\u0438\u0441\u043a\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430: C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"show_breed\" breeds = ( ( '\u041a\u043e\u0440\u0433\u0438/Corgi' , '\u041a\u043e\u0440\u0433\u0438/Corgi' ), ( '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' , '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' ), ( '\u0411\u0438\u0433\u043b\u044c/Beagle' , '\u0411\u0438\u0433\u043b\u044c/Beagle' ), ( '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' , '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' ), ( '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' , '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' ), ( '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' , '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' ), ( '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' , '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' ) ) C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"show_class\" class_types = ( ( \"Baby\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 4 \u0434\u043e 6 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 4 to 6 months old\" ), ( \"Puppy\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 6 \u0434\u043e 9 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 6 to 9 months old\" ), ( \"Junior\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 9 \u0434\u043e 18 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 9 to 18 months old\" ), ( \"Intermediate\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u0434\u043e 24 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 15 to 24 months old\" ), ( \"Open\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 15 months old\" ), ( \"Work\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u0434\u0438\u043f\u043b\u043e\u043c\u043e\u043c/Dogs from 15 months with diploma old\" ), ( \"Champions\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u043f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u044b-\u0447\u043b\u0435\u043d\u0430 FCI/Dogs from 15 months old with FCI Member country Champion certificate\" ), ( \"Veteran\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 8 \u043b\u0435\u0442/Dogs from 8 years old\" ) )","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \"ShowSchedule\""},{"location":"show_schedule/#_1","text":"","title":"\u0421\u043f\u0438\u0441\u043a\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430:"},{"location":"show_schedule/#c-show_breed","text":"breeds = ( ( '\u041a\u043e\u0440\u0433\u0438/Corgi' , '\u041a\u043e\u0440\u0433\u0438/Corgi' ), ( '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' , '\u041d\u0435\u043c\u0435\u0446\u043a\u0430\u044f \u043e\u0432\u0447\u0430\u0440\u043a\u0430/German shepherd' ), ( '\u0411\u0438\u0433\u043b\u044c/Beagle' , '\u0411\u0438\u0433\u043b\u044c/Beagle' ), ( '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' , '\u041f\u0443\u0434\u0435\u043b\u044c/Poodle' ), ( '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' , '\u0420\u0435\u0442\u0440\u0438\u0432\u0435\u0440/Retriever' ), ( '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' , '\u0421\u0430\u043c\u043e\u0435\u0434/Samoyed' ), ( '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' , '\u0414\u043e\u0431\u0435\u0440\u043c\u0430\u043d/Doberman' ) )","title":"C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"show_breed\""},{"location":"show_schedule/#c-show_class","text":"class_types = ( ( \"Baby\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 4 \u0434\u043e 6 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 4 to 6 months old\" ), ( \"Puppy\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 6 \u0434\u043e 9 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 6 to 9 months old\" ), ( \"Junior\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 9 \u0434\u043e 18 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 9 to 18 months old\" ), ( \"Intermediate\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u0434\u043e 24 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 15 to 24 months old\" ), ( \"Open\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u043c\u0435\u0441\u044f\u0446\u0435\u0432/Dogs from 15 months old\" ), ( \"Work\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u0434\u0438\u043f\u043b\u043e\u043c\u043e\u043c/Dogs from 15 months with diploma old\" ), ( \"Champions\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 15 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u043f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u044b-\u0447\u043b\u0435\u043d\u0430 FCI/Dogs from 15 months old with FCI Member country Champion certificate\" ), ( \"Veteran\" , \"\u0421\u043e\u0431\u0430\u043a\u0438 \u043e\u0442 8 \u043b\u0435\u0442/Dogs from 8 years old\" ) )","title":"C\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u044f \"show_class\""},{"location":"sponsor/","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0430\u0445. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: : \u041f\u043e\u043b\u0435 \"sponsor_name\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0430 \u041f\u043e\u043b\u0435 \"sponsor_phone_number\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0430 \u041f\u043e\u043b\u0435 \"sponsor_email\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0430","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \"Sponsor\""},{"location":"sponsor_change/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0441\u043f\u043e\u043d\u043e\u0441\u043e\u0440\u0435, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0451 (\u043e\u0434\u043d\u043e \u043f\u043e\u043b\u0435 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. URL : /expert/{id}/ Methods : GET, PUT, PATCH, DELETE Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0430 Code GET : 200 OK Code PUT : 200 OK Code PATCH : 200 OK Code DELETE : 204 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f GET: { \"id\" : 1 , \"sponsor_name\" : \"Everything for our little friends\" , \"sponsor_phone_number\" : \"89325409147\" , \"sponsor_email\" : \"everythingforfriends@gmail.com\" } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PUT (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"sponsor_name\" : \"string\" , \"sponsor_phone_number\" : \"string\" , \"sponsor_email\" : \"string\" } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PATCH (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"sponsor_name\" : \"string\" , \"sponsor_phone_number\" : \"string\" , \"sponsor_email\" : \"string\" }","title":"/sponsor/{id}/ [GET, PUT, PATCH, DELETE]"},{"location":"sponsor_create/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0430 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0435\u043c. URL : /sponsor/create Method : POST Auth required : No Permissions required : No Data constraints : {} Code : 201 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 (\u0432\u043c\u0435\u0441\u0442\u043e <string> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f): { \"sponsor_name\" : \"string\" , \"sponsor_phone_number\" : \"string\" , \"sponsor_email\" : \"string\" }","title":"/sponsor/create/ [POST]"},{"location":"sponsor_list/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u043e\u0432 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445. URL : /sponsor/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: [ { \"id\" : 1 , \"sponsor_name\" : \"Everything for our little friends\" , \"sponsor_phone_number\" : \"89325409147\" , \"sponsor_email\" : \"everythingforfriends@gmail.com\" }, { \"id\" : 2 , \"sponsor_name\" : \"Money for dogs\" , \"sponsor_phone_number\" : \"89319245029\" , \"sponsor_email\" : \"moneyfordogs@gmail.com\" } ]","title":"/sponsor/ [GET]"},{"location":"sponsorship/","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0430\u0445. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f: : \u041f\u043e\u043b\u0435 \"contract_number\" \u0445\u0440\u0430\u043d\u0438\u0442 \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u041f\u043e\u043b\u0435 \"sign_date\" \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u0442\u0443 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u041f\u043e\u043b\u0435 \"sponsor\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Sponsor \u041f\u043e\u043b\u0435 \"sponsor_show\" \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Show","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \"Sponsorship\""},{"location":"sponsorship_change/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0441\u0442\u0432\u0435, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0451 (\u043e\u0434\u043d\u043e \u043f\u043e\u043b\u0435 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. URL : /sponsorship/{id}/ Methods : GET, PUT, PATCH, DELETE Auth required : No Permissions required : No Data constraints : {} Parameters : id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0441\u0442\u0432\u0430 Code GET : 200 OK Code PUT : 200 OK Code PATCH : 200 OK Code DELETE : 204 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f GET: { \"id\" : 1 , \"contract_number\" : 1 , \"sign_date\" : \"2020-09-01\" , \"sponsor\" : 1 , \"sponsor_show\" : 2 } \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PUT (\u0432\u043c\u0435\u0441\u0442\u043e <integer> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <date> \u2014 \u0434\u0430\u0442\u0443, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"contract_number\" : <i nte ger> , \"sign_date\" : \"<date>\" , \"sponsor\" : <i nte ger> , \"sponsor_show\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"sponsor\" \u0438 \"sponsor_show\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"Sponsor\" \u0438 \"Show\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043b\u044f PATCH (\u0432\u043c\u0435\u0441\u0442\u043e <integer> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <date> \u2014 \u0434\u0430\u0442\u0443, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"contract_number\" : <i nte ger> , \"sign_date\" : \"<date>\" , \"sponsor\" : <i nte ger> , \"sponsor_show\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"sponsor\" \u0438 \"sponsor_show\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"Sponsor\" \u0438 \"Show\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","title":"/sponsorship/{id}/ [GET, PUT, PATCH, DELETE]"},{"location":"sponsorship_create/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u0432\u043e\u0435 \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0441\u0442\u0432\u043e \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0435\u043c. URL : /sponsorship/create Method : POST Auth required : No Permissions required : No Data constraints : {} Code : 201 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430 (\u0432\u043c\u0435\u0441\u0442\u043e <integer> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u043c\u0435\u0441\u0442\u043e <date> \u2014 \u0434\u0430\u0442\u0443, \u0432\u043c\u0435\u0441\u0442\u043e <choice> \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0435): { \"contract_number\" : <i nte ger> , \"sign_date\" : \"<date>\" , \"sponsor\" : <i nte ger> , \"sponsor_show\" : <i nte ger> } \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0432 \u043f\u043e\u043b\u044f \"sponsor\" \u0438 \"sponsor_show\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \"Sponsor\" \u0438 \"Show\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","title":"/sponsorship/create/ [POST]"},{"location":"sponsorship_list/","text":"\u0414\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u0441\u0442\u0432 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0438\u0445. URL : /sponsorship/ Method : GET Auth required : No Permissions required : No Data constraints : {} Code : 200 OK Content : {[]} \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430: [ { \"id\" : 1 , \"contract_number\" : 1 , \"sign_date\" : \"2020-09-01\" , \"sponsor\" : 1 , \"sponsor_show\" : 2 }, { \"id\" : 2 , \"contract_number\" : 2 , \"sign_date\" : \"2021-09-01\" , \"sponsor\" : 1 , \"sponsor_show\" : 5 } ]","title":"/sponsorship/ [GET]"}]}