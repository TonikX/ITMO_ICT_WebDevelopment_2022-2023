{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023 \u041a\u043e\u0440\u043e\u0431\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0412\u0430\u0434\u0438\u043c, \u0433\u0440\u0443\u043f\u043f\u0430 K33422","title":"\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e"},{"location":"#web-2022-2023","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023"},{"location":"#k33422","text":"","title":"\u041a\u043e\u0440\u043e\u0431\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0412\u0430\u0434\u0438\u043c, \u0433\u0440\u0443\u043f\u043f\u0430 K33422"},{"location":"lab_work1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket host = \"localhost\" port = 2468 message = \"Hello, client! I'm happy to meet you too!\" server = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) server . bind (( host , port )) while True : received_message , address = server . recvfrom ( 4096 ) print ( \"Client said: \" , received_message . decode ( \"utf-8\" )) server . sendto ( message . encode ( \"utf-8\" ), address ) server . close () break \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket host = \"localhost\" port = 2468 message = \"Hello, server! Nice to meet you!\" client = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM , 0 ) client . sendto ( message . encode ( \"utf-8\" ), ( host , port )) received_message , address = client . recvfrom ( 4096 ) print ( \"Server said: \" , received_message . decode ( \"utf-8\" )) client . close () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412 \u043c\u043e\u0451\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0447\u0451\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket host = \"localhost\" port = 2468 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () connection , address = server . accept () a = str () b = str () h = str () area = str () while not area : while not a : connection . sendto ( \"Upper base of the trapezoid\" . encode ( \"utf-8\" ), address ) data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) a = float ( data ) while not b : connection . sendto ( \"Lower base of the trapezoid\" . encode ( \"utf-8\" ), address ) data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) b = float ( data ) while not h : connection . sendto ( \"The height of the trapezoid\" . encode ( \"utf-8\" ), address ) data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) h = float ( data ) area = 0.5 * ( a + b ) * h connection . sendto ( str . encode ( f \"The area of this trapezoid is { area } \" , encoding = \"utf-8\" ), address ) connection . close () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket host = \"localhost\" port = 2468 client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( host , port )) a = input ( \"Enter the length of the upper base of the trapezoid: \" ) print () b = input ( \"Enter the length of the lower base of the trapezoid: \" ) print () h = input ( \"Enter the length of the height of the trapezoid: \" ) print () a = a . encode ( \"utf-8\" ) b = b . encode ( \"utf-8\" ) h = h . encode ( \"utf-8\" ) while not a . isdigit (): print ( \"The length of the upper base of the trapezoid must be a number! Try again, please!\" ) print () a = input ( \"Enter the length of the upper base of the trapezoid: \" ) print () a = a . encode ( \"utf-8\" ) while not b . isdigit (): print ( \"The length of the lower base of the trapezoid must be a number! Try again, please!\" ) print () b = input ( \"Enter the length of the lower base of the trapezoid: \" ) print () b = b . encode ( \"utf-8\" ) while not h . isdigit (): print ( \"The length of the height of the trapezoid must be a number! Try again, please!\" ) print () h = input ( \"Enter the length of the height of the trapezoid: \" ) print () h = h . encode ( \"utf-8\" ) while True : data = client . recv ( 4096 ) data = data . decode ( \"utf-8\" ) if data == \"Upper base of the trapezoid\" : client . sendto ( a , ( host , port )) if data == \"Lower base of the trapezoid\" : client . sendto ( b , ( host , port )) if data == \"The height of the trapezoid\" : client . sendto ( h , ( host , port )) if data . startswith ( \"The area\" ): print ( f \"Server calculated the area of the trapezoid with next parameters: \\n \" f \" 1) Length of the upper base of the trapezoid: { float ( a ) } \\n \" f \" 2) Length of the lower base of the trapezoid: { float ( b ) } \\n \" f \" 3) Length of the height of the trapezoid: { float ( h ) } \\n \" ) print ( data ) break client . close () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0424\u0430\u0439\u043b index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Results of the second round of the group stage of the Champions League season 2022/2023 </ title > </ head > < body > < h1 > Group A </ h1 > < article > Liverpool 2:1 Ajax < br /> Rangers 0:3 Napoli </ article > < h1 > Group B </ h1 > < article > Bayer 2:0 Atletico < br /> Portu 0:4 Brugge </ article > < h1 > Group C </ h1 > < article > Victoria Plzen 0:2 Inter < br /> Bayern Munich 2:0 Barcelona </ article > < h1 > Group D </ h1 > < article > Sporting 2:0 Tottenham < br /> Marseille 0:1 Eintracht </ article > < h1 > Group E </ h1 > < article > Milan 3:1 Dinamo Zagreb < br /> Chelsea 1:1 Red Bull Salzburg </ article > < h1 > Group F </ h1 > < article > Shakhtar Donetzk 1:1 Celtic < br /> Real Madrid 2:0 Red Bull Leipzig </ article > < h1 > Group G </ h1 > < article > Manchester City 2:1 Borussia Dortmund < br /> Copenhagen 0:0 Sevilla </ article > < h1 > Group H </ h1 > < article > Maccabi Haifa 1:3 PSG < br /> Juventus 1:2 Benfica </ article > </ body > </ html > \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket host = \"localhost\" port = 2468 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () while True : connection , address = server . accept () page = open ( \"index.html\" ) info = page . read () page . close () data = \"HTTP/1.1 200 OK \\r\\n Content-Type: text/html; charset=utf-8 \\r\\n\\r\\n \" + info connection . sendto ( data . encode ( \"utf-8\" ), address ) print ( \"Client receive the information\" ) break connection . close () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket host = \"localhost\" port = 2468 client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( host , port )) data = client . recv ( 20480 ) print ( data . decode ( \"utf-8\" )) client . close () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading . \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u042f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u043b \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 TCP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket import threading host = \"localhost\" port = 2468 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () print ( \"The chat has been started!\" ) clients = [] users = [] def broadcast ( message , client ): for i in clients : if i != client : i . send ( message ) def handle ( client ): while True : message = client . recv ( 8192 ) if message . decode ( \"utf-8\" ) == \"leave\" : i = clients . index ( client ) clients . remove ( client ) client . close () user = users [ i ] users . remove ( user ) message = \" {} left the chat.\" . format ( user ) . encode ( \"utf-8\" ) broadcast ( message , client ) break broadcast ( message , client ) def receive (): while True : connection , address = server . accept () message = \"What's your username?\" connection . sendto ( message . encode ( \"utf-8\" ), address ) user = connection . recv ( 8192 ) user = user . decode ( \"utf-8\" ) users . append ( user ) clients . append ( connection ) message = \"You have entered the chat! Welcome!\" connection . sendto ( message . encode ( \"utf-8\" ), address ) message = \"Type word 'leave' to leave this chat\" connection . sendto ( message . encode ( \"utf-8\" ), address ) message = \" {} has entered this chat.\" . format ( user ) broadcast ( message . encode ( \"utf-8\" ), connection ) thread = threading . Thread ( target = handle , args = ( connection , )) thread . start () receive () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b\u044b client1.py, client2.py, client3.py (\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b, \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430) import socket import threading host = \"localhost\" port = 2468 client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( host , port )) user = input ( \"What's your username? Enter it here, please: \" ) def receiving_message (): while True : message = client . recv ( 8192 ) message = message . decode ( \"utf-8\" ) if message == \"What's your username?\" : client . sendto ( user . encode ( \"utf-8\" ), ( host , port )) else : print ( message ) def sending_message (): while True : text = input ( \"\" ) if text == \"leave\" : client . sendto ( text . encode ( \"utf-8\" ), ( host , port )) print ( \"You left this chat!\" ) client . close () break else : message = \" {} : {} \" . format ( user , text ) client . sendto ( message . encode ( \"utf-8\" ), ( host , port )) receive_thread = threading . Thread ( target = receiving_message ) sending_thread = threading . Thread ( target = sending_message ) receive_thread . start () sending_thread . start () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket . \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043c\u0435\u0442\u044c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0424\u0430\u0439\u043b response.py \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c Response class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket from response import Response class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port self . points = { \"Data science\" : [ \"100\" , \"95\" , \"76\" ], \"Theory of chances\" : [ \"100\" , \"84\" ], \"Philosophy\" : [ \"92\" , \"84\" , \"73\" , \"61\" , \"100\" ]} def serve_forever ( self ): server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) address = ( self . host , self . port ) try : server . bind ( address ) server . listen () while True : connection , address = server . accept () self . serve_client ( connection ) except KeyboardInterrupt : server . close () def serve_client ( self , connection ): try : data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) request = self . parse_request ( data ) result = self . handle_request ( request ) self . send_response ( connection , result ) except Exception as exception_text : print ( \"Client connection failed: \" , exception_text ) connection . close () def parse_request ( self , data ): request = data . rstrip ( ' \\r\\n ' ) text = request [: data . index ( \" \\n \" )] . split () if len ( text ) != 3 : raise Exception ( 'Malformed request line' ) method , target , version = text if version != 'HTTP/1.1' : raise Exception ( 'Unexpected HTTP version' ) request = { 'data' : {}, 'method' : method } if '?' in target : request [ 'method' ] = 'POST' data = target . split ( '?' )[ 1 ] . split ( '&' ) for value in data : index , info = value . split ( '=' ) request [ 'data' ][ index ] = info return request def handle_request ( self , request ): if request [ 'method' ] == 'POST' : return self . handle_post ( request ) else : return self . handle_get () def handle_get ( self ): type = \"text/html; charset=utf-8\" first_settings = \"<html><head><style></style></head><body>\" course = \"<form><label>Name of discipline: </label><input name='course' /><br><br>\" points = \"<label>Number of points: </label><input name='points' /><br><br>\" button = \"<input type='submit'></form>\" body = first_settings + course + points + button for course_name in self . points : body += f \"<div><span> { course_name } : { self . points [ course_name ] } </span></div>\" second_settings = \"</body></html>\" body += second_settings body = body . encode ( \"utf-8\" ) headers = [( \"Content-Type\" , type ), ( \"Content-Length\" , len ( body ))] return Response ( 200 , \"OK\" , headers , body ) def handle_post ( self , request ): course = request [ \"data\" ][ \"course\" ] points = request [ \"data\" ][ \"points\" ] if course not in self . points : self . points [ course ] = [] if int ( points ) < 0 or int ( points ) > 103 : raise Exception ( \"Wrong number of points! Please, enter a number between 0 and 103.\" ) self . points [ course ] . append ( points ) return self . handle_get () def send_response ( self , connection , response ): file = connection . makefile ( 'wb' ) status_line = f \"HTTP/1.1 { response . status } { response . reason } \\r\\n \" status_line = status_line . encode ( \"utf-8\" ) file . write ( status_line ) if response . headers : for ( index , info ) in response . headers : header_line = f \" { index } : { info } \\r\\n \" file . write ( header_line . encode ( \"utf-8\" )) file . write ( b \" \\r\\n \" ) if response . body : file . write ( response . body ) file . flush () file . close () def get_error ( self , code , text ): return Response ( code , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , text ) if __name__ == '__main__' : host = 'localhost' port = 2468 server = MyHTTPServer ( host , port ) try : server . serve_forever () except KeyboardInterrupt : pass","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab_work1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab_work1/#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket host = \"localhost\" port = 2468 message = \"Hello, client! I'm happy to meet you too!\" server = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) server . bind (( host , port )) while True : received_message , address = server . recvfrom ( 4096 ) print ( \"Client said: \" , received_message . decode ( \"utf-8\" )) server . sendto ( message . encode ( \"utf-8\" ), address ) server . close () break \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket host = \"localhost\" port = 2468 message = \"Hello, server! Nice to meet you!\" client = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM , 0 ) client . sendto ( message . encode ( \"utf-8\" ), ( host , port )) received_message , address = client . recvfrom ( 4096 ) print ( \"Server said: \" , received_message . decode ( \"utf-8\" )) client . close ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"lab_work1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412 \u043c\u043e\u0451\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0447\u0451\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket host = \"localhost\" port = 2468 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () connection , address = server . accept () a = str () b = str () h = str () area = str () while not area : while not a : connection . sendto ( \"Upper base of the trapezoid\" . encode ( \"utf-8\" ), address ) data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) a = float ( data ) while not b : connection . sendto ( \"Lower base of the trapezoid\" . encode ( \"utf-8\" ), address ) data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) b = float ( data ) while not h : connection . sendto ( \"The height of the trapezoid\" . encode ( \"utf-8\" ), address ) data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) h = float ( data ) area = 0.5 * ( a + b ) * h connection . sendto ( str . encode ( f \"The area of this trapezoid is { area } \" , encoding = \"utf-8\" ), address ) connection . close () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket host = \"localhost\" port = 2468 client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( host , port )) a = input ( \"Enter the length of the upper base of the trapezoid: \" ) print () b = input ( \"Enter the length of the lower base of the trapezoid: \" ) print () h = input ( \"Enter the length of the height of the trapezoid: \" ) print () a = a . encode ( \"utf-8\" ) b = b . encode ( \"utf-8\" ) h = h . encode ( \"utf-8\" ) while not a . isdigit (): print ( \"The length of the upper base of the trapezoid must be a number! Try again, please!\" ) print () a = input ( \"Enter the length of the upper base of the trapezoid: \" ) print () a = a . encode ( \"utf-8\" ) while not b . isdigit (): print ( \"The length of the lower base of the trapezoid must be a number! Try again, please!\" ) print () b = input ( \"Enter the length of the lower base of the trapezoid: \" ) print () b = b . encode ( \"utf-8\" ) while not h . isdigit (): print ( \"The length of the height of the trapezoid must be a number! Try again, please!\" ) print () h = input ( \"Enter the length of the height of the trapezoid: \" ) print () h = h . encode ( \"utf-8\" ) while True : data = client . recv ( 4096 ) data = data . decode ( \"utf-8\" ) if data == \"Upper base of the trapezoid\" : client . sendto ( a , ( host , port )) if data == \"Lower base of the trapezoid\" : client . sendto ( b , ( host , port )) if data == \"The height of the trapezoid\" : client . sendto ( h , ( host , port )) if data . startswith ( \"The area\" ): print ( f \"Server calculated the area of the trapezoid with next parameters: \\n \" f \" 1) Length of the upper base of the trapezoid: { float ( a ) } \\n \" f \" 2) Length of the lower base of the trapezoid: { float ( b ) } \\n \" f \" 3) Length of the height of the trapezoid: { float ( h ) } \\n \" ) print ( data ) break client . close ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"lab_work1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0424\u0430\u0439\u043b index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Results of the second round of the group stage of the Champions League season 2022/2023 </ title > </ head > < body > < h1 > Group A </ h1 > < article > Liverpool 2:1 Ajax < br /> Rangers 0:3 Napoli </ article > < h1 > Group B </ h1 > < article > Bayer 2:0 Atletico < br /> Portu 0:4 Brugge </ article > < h1 > Group C </ h1 > < article > Victoria Plzen 0:2 Inter < br /> Bayern Munich 2:0 Barcelona </ article > < h1 > Group D </ h1 > < article > Sporting 2:0 Tottenham < br /> Marseille 0:1 Eintracht </ article > < h1 > Group E </ h1 > < article > Milan 3:1 Dinamo Zagreb < br /> Chelsea 1:1 Red Bull Salzburg </ article > < h1 > Group F </ h1 > < article > Shakhtar Donetzk 1:1 Celtic < br /> Real Madrid 2:0 Red Bull Leipzig </ article > < h1 > Group G </ h1 > < article > Manchester City 2:1 Borussia Dortmund < br /> Copenhagen 0:0 Sevilla </ article > < h1 > Group H </ h1 > < article > Maccabi Haifa 1:3 PSG < br /> Juventus 1:2 Benfica </ article > </ body > </ html > \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket host = \"localhost\" port = 2468 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () while True : connection , address = server . accept () page = open ( \"index.html\" ) info = page . read () page . close () data = \"HTTP/1.1 200 OK \\r\\n Content-Type: text/html; charset=utf-8 \\r\\n\\r\\n \" + info connection . sendto ( data . encode ( \"utf-8\" ), address ) print ( \"Client receive the information\" ) break connection . close () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket host = \"localhost\" port = 2468 client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( host , port )) data = client . recv ( 20480 ) print ( data . decode ( \"utf-8\" )) client . close ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"lab_work1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading . \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u042f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u043b \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 TCP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket import threading host = \"localhost\" port = 2468 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () print ( \"The chat has been started!\" ) clients = [] users = [] def broadcast ( message , client ): for i in clients : if i != client : i . send ( message ) def handle ( client ): while True : message = client . recv ( 8192 ) if message . decode ( \"utf-8\" ) == \"leave\" : i = clients . index ( client ) clients . remove ( client ) client . close () user = users [ i ] users . remove ( user ) message = \" {} left the chat.\" . format ( user ) . encode ( \"utf-8\" ) broadcast ( message , client ) break broadcast ( message , client ) def receive (): while True : connection , address = server . accept () message = \"What's your username?\" connection . sendto ( message . encode ( \"utf-8\" ), address ) user = connection . recv ( 8192 ) user = user . decode ( \"utf-8\" ) users . append ( user ) clients . append ( connection ) message = \"You have entered the chat! Welcome!\" connection . sendto ( message . encode ( \"utf-8\" ), address ) message = \"Type word 'leave' to leave this chat\" connection . sendto ( message . encode ( \"utf-8\" ), address ) message = \" {} has entered this chat.\" . format ( user ) broadcast ( message . encode ( \"utf-8\" ), connection ) thread = threading . Thread ( target = handle , args = ( connection , )) thread . start () receive () \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b\u044b client1.py, client2.py, client3.py (\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b, \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430) import socket import threading host = \"localhost\" port = 2468 client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( host , port )) user = input ( \"What's your username? Enter it here, please: \" ) def receiving_message (): while True : message = client . recv ( 8192 ) message = message . decode ( \"utf-8\" ) if message == \"What's your username?\" : client . sendto ( user . encode ( \"utf-8\" ), ( host , port )) else : print ( message ) def sending_message (): while True : text = input ( \"\" ) if text == \"leave\" : client . sendto ( text . encode ( \"utf-8\" ), ( host , port )) print ( \"You left this chat!\" ) client . close () break else : message = \" {} : {} \" . format ( user , text ) client . sendto ( message . encode ( \"utf-8\" ), ( host , port )) receive_thread = threading . Thread ( target = receiving_message ) sending_thread = threading . Thread ( target = sending_message ) receive_thread . start () sending_thread . start ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"lab_work1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket . \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043c\u0435\u0442\u044c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0424\u0430\u0439\u043b response.py \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c Response class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket from response import Response class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port self . points = { \"Data science\" : [ \"100\" , \"95\" , \"76\" ], \"Theory of chances\" : [ \"100\" , \"84\" ], \"Philosophy\" : [ \"92\" , \"84\" , \"73\" , \"61\" , \"100\" ]} def serve_forever ( self ): server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) address = ( self . host , self . port ) try : server . bind ( address ) server . listen () while True : connection , address = server . accept () self . serve_client ( connection ) except KeyboardInterrupt : server . close () def serve_client ( self , connection ): try : data = connection . recv ( 4096 ) data = data . decode ( \"utf-8\" ) request = self . parse_request ( data ) result = self . handle_request ( request ) self . send_response ( connection , result ) except Exception as exception_text : print ( \"Client connection failed: \" , exception_text ) connection . close () def parse_request ( self , data ): request = data . rstrip ( ' \\r\\n ' ) text = request [: data . index ( \" \\n \" )] . split () if len ( text ) != 3 : raise Exception ( 'Malformed request line' ) method , target , version = text if version != 'HTTP/1.1' : raise Exception ( 'Unexpected HTTP version' ) request = { 'data' : {}, 'method' : method } if '?' in target : request [ 'method' ] = 'POST' data = target . split ( '?' )[ 1 ] . split ( '&' ) for value in data : index , info = value . split ( '=' ) request [ 'data' ][ index ] = info return request def handle_request ( self , request ): if request [ 'method' ] == 'POST' : return self . handle_post ( request ) else : return self . handle_get () def handle_get ( self ): type = \"text/html; charset=utf-8\" first_settings = \"<html><head><style></style></head><body>\" course = \"<form><label>Name of discipline: </label><input name='course' /><br><br>\" points = \"<label>Number of points: </label><input name='points' /><br><br>\" button = \"<input type='submit'></form>\" body = first_settings + course + points + button for course_name in self . points : body += f \"<div><span> { course_name } : { self . points [ course_name ] } </span></div>\" second_settings = \"</body></html>\" body += second_settings body = body . encode ( \"utf-8\" ) headers = [( \"Content-Type\" , type ), ( \"Content-Length\" , len ( body ))] return Response ( 200 , \"OK\" , headers , body ) def handle_post ( self , request ): course = request [ \"data\" ][ \"course\" ] points = request [ \"data\" ][ \"points\" ] if course not in self . points : self . points [ course ] = [] if int ( points ) < 0 or int ( points ) > 103 : raise Exception ( \"Wrong number of points! Please, enter a number between 0 and 103.\" ) self . points [ course ] . append ( points ) return self . handle_get () def send_response ( self , connection , response ): file = connection . makefile ( 'wb' ) status_line = f \"HTTP/1.1 { response . status } { response . reason } \\r\\n \" status_line = status_line . encode ( \"utf-8\" ) file . write ( status_line ) if response . headers : for ( index , info ) in response . headers : header_line = f \" { index } : { info } \\r\\n \" file . write ( header_line . encode ( \"utf-8\" )) file . write ( b \" \\r\\n \" ) if response . body : file . write ( response . body ) file . flush () file . close () def get_error ( self , code , text ): return Response ( code , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , text ) if __name__ == '__main__' : host = 'localhost' port = 2468 server = MyHTTPServer ( host , port ) try : server . serve_forever () except KeyboardInterrupt : pass","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"lab_work2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. - \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: 1. \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. 2. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. 3. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. 4. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. 5. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0424\u0430\u0439\u043b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 (\u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445) models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.core.validators import MinValueValidator , MaxValueValidator , MinLengthValidator , MaxLengthValidator from django.core.exceptions import ValidationError from django.dispatch import receiver from django.db.models.signals import * from .models import * from django.conf import settings from django.contrib.auth import get_user_model from django.db.models.deletion import CASCADE from datetime import datetime class User ( AbstractUser ): username = models . CharField ( \"\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f/Username\" , max_length = 30 , unique = True ) password = models . CharField ( \"\u041f\u0430\u0440\u043e\u043b\u044c/Password\" , max_length = 30 ) surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f/Surname\" , max_length = 30 , null = False , blank = True ) name = models . CharField ( \"\u0418\u043c\u044f/Name\" , max_length = 30 , null = False , blank = False ) phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , max_length = 15 , null = True , blank = True ) passport = models . CharField ( \"\u0421\u0435\u0440\u0438\u044f \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430/Passport number\" , max_length = 20 , null = False , blank = False ) email = models . EmailField ( \"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430/Email address\" , unique = True ) birthday_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f/Birthday date\" , null = True , blank = True ) def __str__ ( self ): if self . is_superuser : return f ' { self . username } (superuser)' return f \" { self . surname } { self . name } \" class Hotel ( models . Model ): hotel_name = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f/Hotel name\" , max_length = 100 ) address = models . CharField ( \"\u0410\u0434\u0440\u0435\u0441\u0441/Address\" , max_length = 255 ) rating = models . IntegerField ( \"\u0420\u0435\u0439\u0442\u0438\u043d\u0433/Rating\" , validators = [ MinValueValidator ( 1 ), MaxValueValidator ( 5 )]) owner_surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430/Owner's surname\" , max_length = 30 , null = False , blank = True ) owner_name = models . CharField ( \"\u0418\u043c\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430/Owner's name\" , max_length = 30 , null = False , blank = False ) description = models . TextField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435/Description\" , max_length = 1000 , blank = True ) def __str__ ( self ): return f \" { self . hotel_name } , { self . rating } star hotel\" class Room ( models . Model ): TYPES = [ ( \"S\" , \"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Standard\" ), ( \"S+\" , \"\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Superior\" ), ( \"Su\" , \"\u041d\u043e\u043c\u0435\u0440 \u0441 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u043e\u0439 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u043a\u043e\u0439/Suite\" ), ( \"F\" , \"\u0421\u0435\u043c\u0435\u0439\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Family room\" ), ( \"St\" , \"\u0421\u0442\u0443\u0434\u0438\u044f/Studio\" ), ( \"D\" , \"\u0414\u0435\u043b\u044e\u043a\u0441/Deluxe\" ), ( \"HR\" , \"\u041d\u043e\u043c\u0435\u0440 \u0434\u043b\u044f \u043c\u043e\u043b\u043e\u0434\u043e\u0436\u0451\u043d\u043e\u0432/Honeymoon room\" ), ( \"HS\" , '\u041d\u043e\u043c\u0435\u0440 \u043b\u044e\u043a\u0441 \u0434\u043b\u044f \u043c\u043e\u043b\u043e\u0434\u043e\u0436\u0451\u043d\u043e\u0432/Honeymoon suite' ), ( \"Dpl\" , \"\u0414\u0432\u0443\u0445\u044d\u0442\u0430\u0436\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Duplex\" ), ( \"BR\" , \"\u041d\u043e\u043c\u0435\u0440 \u0441 \u0431\u0430\u043b\u043a\u043e\u043d\u043e\u043c/Balcony room\" ), ( \"PA\" , \"\u041d\u043e\u043c\u0435\u0440 \u0441 \u0432\u044b\u0445\u043e\u0434\u043e\u043c \u043a \u0431\u0430\u0441\u0441\u0435\u0439\u043d\u0443/Pool access room\" ), ( \"B+\" , \"\u041d\u043e\u043c\u0435\u0440 \u0431\u0438\u0437\u043d\u0435\u0441-\u043a\u043b\u0430\u0441\u0441\u0430/Business room\" ), ( \"P\" , \"\u041f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043d\u043e\u043c\u0435\u0440/President\" ), ( \"CR\" , \"\u0423\u0433\u043b\u043e\u0432\u043e\u0439 \u043d\u043e\u043c\u0435\u0440/Corner room\" ), ( \"A\" , \"\u0410\u043f\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b/Apartments\" ) ] hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , verbose_name = \"\u041e\u0442\u0435\u043b\u044c/Hotel\" ) number = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b/Room number\" , null = False , blank = False ) floor = models . IntegerField ( \"\u042d\u0442\u0430\u0436/Floor\" , validators = [ MinValueValidator ( 1 )]) type = models . CharField ( max_length = 5 , choices = TYPES , null = False , blank = False ) persons = models . IntegerField ( \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0440\u043e\u0432\u0430\u0442\u0435\u0439/Number of beds\" , validators = [ MinValueValidator ( 1 )]) price = models . PositiveIntegerField ( \"\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0437\u0430 \u043e\u0434\u043d\u0443 \u043d\u043e\u0447\u044c/Price for one night\" , null = False , blank = False ) description = models . TextField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430/Room description\" , max_length = 1000 , null = False , blank = True ) class Meta : unique_together = ( \"hotel\" , \"number\" ) def __str__ ( self ): return f \"Hotel { self . hotel . hotel_name } , room \u2116 { self . number } ( { self . floor } floor)\" class Reservation ( models . Model ): room = models . ForeignKey ( Room , on_delete = models . CASCADE , verbose_name = \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b/Room number\" ) guest = models . ForeignKey ( User , on_delete = models . CASCADE , verbose_name = \"\u0413\u043e\u0441\u0442\u044c/Guest\" ) check_in = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-in date\" , null = False , blank = False ) check_out = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-out date\" , null = False , blank = False ) price = models . PositiveIntegerField ( \"\u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f/Full accommodation cost\" , null = False , blank = False ) checked_in = models . BooleanField ( default = False ) @property def accommodation_duration ( self ): difference = ( self . check_out - self . check_in ) return difference . days def date_check ( self ): if self . check_out < self . check_in : raise ValidationError ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u0442\u044b \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-out date must be greater than\" \"check-in date\" ) def save ( self , * args , ** kwargs ): self . price = self . room . price * self . accommodation_duration super ( Reservation , self ) . save ( * args , ** kwargs ) def __str__ ( self ): return f \" { self . room . hotel . hotel_name } , room \u2116 { self . room . number } | { self . check_in } \u2014 { self . check_out } \" class Review ( models . Model ): RATINGS = [ ( \"1\" , \"\u0423\u0436\u0430\u0441\u043d\u043e/Awful\" ), ( \"2\" , \"\u041f\u043b\u043e\u0445\u043e/Bad\" ), ( \"3\" , \"\u0423\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e/Okay\" ), ( \"4\" , \"\u0425\u043e\u0440\u043e\u0448\u043e/Good\" ), ( \"5\" , \"\u041e\u0442\u043b\u0438\u0447\u043d\u043e/Great\" ) ] reservation = models . ForeignKey ( Reservation , on_delete = models . CASCADE ) check_in_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-in date\" ) check_out_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-out date\" ) review = models . TextField ( \"\u041e\u0442\u0437\u044b\u0432/Review\" , max_length = 5000 , null = False , blank = False ) rating = models . CharField ( \"\u041e\u0446\u0435\u043d\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432 \u043e\u0442\u0435\u043b\u0435/Rate your stay at the hotel\" , choices = RATINGS , max_length = 1 ) def save ( self , * args , ** kwargs ): self . check_in_date = self . reservation . check_in self . check_out_date = self . reservation . check_out super ( Review , self ) . save ( * args , ** kwargs ) \u0424\u0430\u0439\u043b \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 views.py from django.core.paginator import Paginator from django.views.generic.base import TemplateView from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import CreateView , DeleteView , UpdateView from django.contrib import messages from django.shortcuts import render , redirect , get_object_or_404 from django.contrib.auth import authenticate , login , logout from .models import * from .forms import * class Homepage ( TemplateView ): template_name = 'index.html' def register ( request ): if request . user . is_authenticated : return redirect ( '/main_page/' ) else : form = UserForm () if request . method == 'POST' : form = UserForm ( request . POST ) if form . is_valid (): form . save () return redirect ( 'login' ) data = { 'form' : form } return render ( request , 'register.html' , data ) def login_ ( request ): if request . user . is_authenticated : return redirect ( '/main_page/' ) else : if request . method == 'POST' : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( '/main_page/' ) data = {} return render ( request , 'login.html' , data ) def logout_ ( request ): logout ( request ) return redirect ( 'login' ) class IndexView ( TemplateView ): template_name = \"index1.html\" class HotelRetrieveView ( DetailView ): model = Hotel template_name = 'hotel_detail.html' class ListReservation ( ListView ): model = Reservation template_name = 'reservation.html' all_reservations = Reservation . objects paginate_by = 10 class ReservationCreateView ( CreateView ): model = Reservation form_class = ReservationForm template_name = 'reservation_create.html' def create_reservation ( request ): data = {} form = ReservationForm ( request . POST or None ) if form . is_valid (): form . save () data [ 'form' ] = form return render ( request , \"reservation_create.html\" , data ) class ReservationRetrieveView ( DetailView ): model = Reservation template_name = 'reservation_detail.html' class ReservationUpdateView ( UpdateView ): model = Reservation form_class = ReservationForm template_name = 'reservation_update.html' class ReservationDeleteView ( DeleteView ): model = Reservation template_name = 'reservation_delete.html' class HotelList ( ListView ): model = Hotel template_name = 'hotel.html' all_hotels = Hotel . objects paginate_by = 10 class GuestsList ( ListView ): model = Reservation template_name = 'guests.html' all_guests = Reservation . objects paginate_by = 10 class ListRoom ( ListView ): model = Room template_name = \"room_list.html\" all_rooms = Room . objects paginate_by = 10 class RoomRetrieveView ( DetailView ): model = Room template_name = \"room_detail.html\" class ReviewCreateView ( CreateView ): model = Review form_class = ReviewForm template_name = \"review_create.html\" class ReviewList ( ListView ): model = Review template_name = \"review.html\" all_review = Review . objects paginate_by = 10 class ReviewRetrieveView ( DetailView ): model = Review template_name = \"review_detail.html\" \u0424\u0430\u0439\u043b \u0441 \u0444\u043e\u0440\u043c\u0430\u043c\u0438 forms.py from .models import * from django import forms from django.contrib.auth.forms import UserCreationForm class ReservationForm ( forms . ModelForm ): class Meta : model = Reservation fields = [ 'guest' , 'room' , 'check_in' , 'check_out' ] class UserForm ( UserCreationForm ): class Meta : model = User fields = [ 'username' , 'surname' , 'name' , 'phone_number' , 'passport' , 'email' , 'birthday_date' ] class ReviewForm ( forms . ModelForm ): class Meta : model = Review fields = [ 'reservation' , 'review' , 'rating' ] \u0424\u0430\u0439\u043b \u0441\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 urls.py from django.urls import path from .views import * urlpatterns = [ path ( '' , Homepage . as_view ()), path ( 'register/' , register , name = 'register' ), path ( 'login/' , login_ , name = 'login' ), path ( 'logout/' , logout_ , name = 'logout' ), path ( 'main_page/' , IndexView . as_view (), name = 'main_page' ), path ( 'hotels/' , HotelList . as_view (), name = 'hotel_list' ), path ( 'hotels/<str:pk>' , HotelRetrieveView . as_view ()), path ( 'reservations/' , ListReservation . as_view (), name = 'my_reservation' ), path ( 'reservations/create/' , ReservationCreateView . as_view ( success_url = '/reservations/' ), name = 'reservation' ), #path('reservations/create/', create_reservation, name='reservation'), path ( 'reservations/<str:pk>' , ReservationRetrieveView . as_view ()), path ( 'reservations/<str:pk>/update/' , ReservationUpdateView . as_view ( success_url = '/reservations/' )), path ( 'reservations/<int:pk>/delete/' , ReservationDeleteView . as_view ( success_url = '/reservations/' )), path ( 'rooms/' , ListRoom . as_view (), name = 'room_list' ), path ( 'rooms/<str:pk>' , RoomRetrieveView . as_view ()), path ( 'reviews/' , ReviewList . as_view (), name = 'review' ), path ( 'reviews/create/' , ReviewCreateView . as_view ( success_url = '/reviews/' ), name = 'review_create' ), path ( 'reviews/<str:pk>' , ReviewRetrieveView . as_view ()), path ( 'guests/' , GuestsList . as_view (), name = 'guests' ), ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_work2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_work2/#_1","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. - \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: 1. \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. 2. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. 3. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. 4. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. 5. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab_work2/#_2","text":"\u0424\u0430\u0439\u043b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 (\u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445) models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.core.validators import MinValueValidator , MaxValueValidator , MinLengthValidator , MaxLengthValidator from django.core.exceptions import ValidationError from django.dispatch import receiver from django.db.models.signals import * from .models import * from django.conf import settings from django.contrib.auth import get_user_model from django.db.models.deletion import CASCADE from datetime import datetime class User ( AbstractUser ): username = models . CharField ( \"\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f/Username\" , max_length = 30 , unique = True ) password = models . CharField ( \"\u041f\u0430\u0440\u043e\u043b\u044c/Password\" , max_length = 30 ) surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f/Surname\" , max_length = 30 , null = False , blank = True ) name = models . CharField ( \"\u0418\u043c\u044f/Name\" , max_length = 30 , null = False , blank = False ) phone_number = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/Phone number\" , max_length = 15 , null = True , blank = True ) passport = models . CharField ( \"\u0421\u0435\u0440\u0438\u044f \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442\u0430/Passport number\" , max_length = 20 , null = False , blank = False ) email = models . EmailField ( \"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430/Email address\" , unique = True ) birthday_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f/Birthday date\" , null = True , blank = True ) def __str__ ( self ): if self . is_superuser : return f ' { self . username } (superuser)' return f \" { self . surname } { self . name } \" class Hotel ( models . Model ): hotel_name = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f/Hotel name\" , max_length = 100 ) address = models . CharField ( \"\u0410\u0434\u0440\u0435\u0441\u0441/Address\" , max_length = 255 ) rating = models . IntegerField ( \"\u0420\u0435\u0439\u0442\u0438\u043d\u0433/Rating\" , validators = [ MinValueValidator ( 1 ), MaxValueValidator ( 5 )]) owner_surname = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430/Owner's surname\" , max_length = 30 , null = False , blank = True ) owner_name = models . CharField ( \"\u0418\u043c\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430/Owner's name\" , max_length = 30 , null = False , blank = False ) description = models . TextField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435/Description\" , max_length = 1000 , blank = True ) def __str__ ( self ): return f \" { self . hotel_name } , { self . rating } star hotel\" class Room ( models . Model ): TYPES = [ ( \"S\" , \"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Standard\" ), ( \"S+\" , \"\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Superior\" ), ( \"Su\" , \"\u041d\u043e\u043c\u0435\u0440 \u0441 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u043e\u0439 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u043a\u043e\u0439/Suite\" ), ( \"F\" , \"\u0421\u0435\u043c\u0435\u0439\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Family room\" ), ( \"St\" , \"\u0421\u0442\u0443\u0434\u0438\u044f/Studio\" ), ( \"D\" , \"\u0414\u0435\u043b\u044e\u043a\u0441/Deluxe\" ), ( \"HR\" , \"\u041d\u043e\u043c\u0435\u0440 \u0434\u043b\u044f \u043c\u043e\u043b\u043e\u0434\u043e\u0436\u0451\u043d\u043e\u0432/Honeymoon room\" ), ( \"HS\" , '\u041d\u043e\u043c\u0435\u0440 \u043b\u044e\u043a\u0441 \u0434\u043b\u044f \u043c\u043e\u043b\u043e\u0434\u043e\u0436\u0451\u043d\u043e\u0432/Honeymoon suite' ), ( \"Dpl\" , \"\u0414\u0432\u0443\u0445\u044d\u0442\u0430\u0436\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440/Duplex\" ), ( \"BR\" , \"\u041d\u043e\u043c\u0435\u0440 \u0441 \u0431\u0430\u043b\u043a\u043e\u043d\u043e\u043c/Balcony room\" ), ( \"PA\" , \"\u041d\u043e\u043c\u0435\u0440 \u0441 \u0432\u044b\u0445\u043e\u0434\u043e\u043c \u043a \u0431\u0430\u0441\u0441\u0435\u0439\u043d\u0443/Pool access room\" ), ( \"B+\" , \"\u041d\u043e\u043c\u0435\u0440 \u0431\u0438\u0437\u043d\u0435\u0441-\u043a\u043b\u0430\u0441\u0441\u0430/Business room\" ), ( \"P\" , \"\u041f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043d\u043e\u043c\u0435\u0440/President\" ), ( \"CR\" , \"\u0423\u0433\u043b\u043e\u0432\u043e\u0439 \u043d\u043e\u043c\u0435\u0440/Corner room\" ), ( \"A\" , \"\u0410\u043f\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b/Apartments\" ) ] hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , verbose_name = \"\u041e\u0442\u0435\u043b\u044c/Hotel\" ) number = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b/Room number\" , null = False , blank = False ) floor = models . IntegerField ( \"\u042d\u0442\u0430\u0436/Floor\" , validators = [ MinValueValidator ( 1 )]) type = models . CharField ( max_length = 5 , choices = TYPES , null = False , blank = False ) persons = models . IntegerField ( \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0440\u043e\u0432\u0430\u0442\u0435\u0439/Number of beds\" , validators = [ MinValueValidator ( 1 )]) price = models . PositiveIntegerField ( \"\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0437\u0430 \u043e\u0434\u043d\u0443 \u043d\u043e\u0447\u044c/Price for one night\" , null = False , blank = False ) description = models . TextField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430/Room description\" , max_length = 1000 , null = False , blank = True ) class Meta : unique_together = ( \"hotel\" , \"number\" ) def __str__ ( self ): return f \"Hotel { self . hotel . hotel_name } , room \u2116 { self . number } ( { self . floor } floor)\" class Reservation ( models . Model ): room = models . ForeignKey ( Room , on_delete = models . CASCADE , verbose_name = \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b/Room number\" ) guest = models . ForeignKey ( User , on_delete = models . CASCADE , verbose_name = \"\u0413\u043e\u0441\u0442\u044c/Guest\" ) check_in = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-in date\" , null = False , blank = False ) check_out = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-out date\" , null = False , blank = False ) price = models . PositiveIntegerField ( \"\u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f/Full accommodation cost\" , null = False , blank = False ) checked_in = models . BooleanField ( default = False ) @property def accommodation_duration ( self ): difference = ( self . check_out - self . check_in ) return difference . days def date_check ( self ): if self . check_out < self . check_in : raise ValidationError ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u0442\u044b \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-out date must be greater than\" \"check-in date\" ) def save ( self , * args , ** kwargs ): self . price = self . room . price * self . accommodation_duration super ( Reservation , self ) . save ( * args , ** kwargs ) def __str__ ( self ): return f \" { self . room . hotel . hotel_name } , room \u2116 { self . room . number } | { self . check_in } \u2014 { self . check_out } \" class Review ( models . Model ): RATINGS = [ ( \"1\" , \"\u0423\u0436\u0430\u0441\u043d\u043e/Awful\" ), ( \"2\" , \"\u041f\u043b\u043e\u0445\u043e/Bad\" ), ( \"3\" , \"\u0423\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e/Okay\" ), ( \"4\" , \"\u0425\u043e\u0440\u043e\u0448\u043e/Good\" ), ( \"5\" , \"\u041e\u0442\u043b\u0438\u0447\u043d\u043e/Great\" ) ] reservation = models . ForeignKey ( Reservation , on_delete = models . CASCADE ) check_in_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-in date\" ) check_out_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0441\u0435\u043b\u0435\u043d\u0438\u044f/Check-out date\" ) review = models . TextField ( \"\u041e\u0442\u0437\u044b\u0432/Review\" , max_length = 5000 , null = False , blank = False ) rating = models . CharField ( \"\u041e\u0446\u0435\u043d\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432 \u043e\u0442\u0435\u043b\u0435/Rate your stay at the hotel\" , choices = RATINGS , max_length = 1 ) def save ( self , * args , ** kwargs ): self . check_in_date = self . reservation . check_in self . check_out_date = self . reservation . check_out super ( Review , self ) . save ( * args , ** kwargs ) \u0424\u0430\u0439\u043b \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 views.py from django.core.paginator import Paginator from django.views.generic.base import TemplateView from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import CreateView , DeleteView , UpdateView from django.contrib import messages from django.shortcuts import render , redirect , get_object_or_404 from django.contrib.auth import authenticate , login , logout from .models import * from .forms import * class Homepage ( TemplateView ): template_name = 'index.html' def register ( request ): if request . user . is_authenticated : return redirect ( '/main_page/' ) else : form = UserForm () if request . method == 'POST' : form = UserForm ( request . POST ) if form . is_valid (): form . save () return redirect ( 'login' ) data = { 'form' : form } return render ( request , 'register.html' , data ) def login_ ( request ): if request . user . is_authenticated : return redirect ( '/main_page/' ) else : if request . method == 'POST' : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( '/main_page/' ) data = {} return render ( request , 'login.html' , data ) def logout_ ( request ): logout ( request ) return redirect ( 'login' ) class IndexView ( TemplateView ): template_name = \"index1.html\" class HotelRetrieveView ( DetailView ): model = Hotel template_name = 'hotel_detail.html' class ListReservation ( ListView ): model = Reservation template_name = 'reservation.html' all_reservations = Reservation . objects paginate_by = 10 class ReservationCreateView ( CreateView ): model = Reservation form_class = ReservationForm template_name = 'reservation_create.html' def create_reservation ( request ): data = {} form = ReservationForm ( request . POST or None ) if form . is_valid (): form . save () data [ 'form' ] = form return render ( request , \"reservation_create.html\" , data ) class ReservationRetrieveView ( DetailView ): model = Reservation template_name = 'reservation_detail.html' class ReservationUpdateView ( UpdateView ): model = Reservation form_class = ReservationForm template_name = 'reservation_update.html' class ReservationDeleteView ( DeleteView ): model = Reservation template_name = 'reservation_delete.html' class HotelList ( ListView ): model = Hotel template_name = 'hotel.html' all_hotels = Hotel . objects paginate_by = 10 class GuestsList ( ListView ): model = Reservation template_name = 'guests.html' all_guests = Reservation . objects paginate_by = 10 class ListRoom ( ListView ): model = Room template_name = \"room_list.html\" all_rooms = Room . objects paginate_by = 10 class RoomRetrieveView ( DetailView ): model = Room template_name = \"room_detail.html\" class ReviewCreateView ( CreateView ): model = Review form_class = ReviewForm template_name = \"review_create.html\" class ReviewList ( ListView ): model = Review template_name = \"review.html\" all_review = Review . objects paginate_by = 10 class ReviewRetrieveView ( DetailView ): model = Review template_name = \"review_detail.html\" \u0424\u0430\u0439\u043b \u0441 \u0444\u043e\u0440\u043c\u0430\u043c\u0438 forms.py from .models import * from django import forms from django.contrib.auth.forms import UserCreationForm class ReservationForm ( forms . ModelForm ): class Meta : model = Reservation fields = [ 'guest' , 'room' , 'check_in' , 'check_out' ] class UserForm ( UserCreationForm ): class Meta : model = User fields = [ 'username' , 'surname' , 'name' , 'phone_number' , 'passport' , 'email' , 'birthday_date' ] class ReviewForm ( forms . ModelForm ): class Meta : model = Review fields = [ 'reservation' , 'review' , 'rating' ] \u0424\u0430\u0439\u043b \u0441\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 urls.py from django.urls import path from .views import * urlpatterns = [ path ( '' , Homepage . as_view ()), path ( 'register/' , register , name = 'register' ), path ( 'login/' , login_ , name = 'login' ), path ( 'logout/' , logout_ , name = 'logout' ), path ( 'main_page/' , IndexView . as_view (), name = 'main_page' ), path ( 'hotels/' , HotelList . as_view (), name = 'hotel_list' ), path ( 'hotels/<str:pk>' , HotelRetrieveView . as_view ()), path ( 'reservations/' , ListReservation . as_view (), name = 'my_reservation' ), path ( 'reservations/create/' , ReservationCreateView . as_view ( success_url = '/reservations/' ), name = 'reservation' ), #path('reservations/create/', create_reservation, name='reservation'), path ( 'reservations/<str:pk>' , ReservationRetrieveView . as_view ()), path ( 'reservations/<str:pk>/update/' , ReservationUpdateView . as_view ( success_url = '/reservations/' )), path ( 'reservations/<int:pk>/delete/' , ReservationDeleteView . as_view ( success_url = '/reservations/' )), path ( 'rooms/' , ListRoom . as_view (), name = 'room_list' ), path ( 'rooms/<str:pk>' , RoomRetrieveView . as_view ()), path ( 'reviews/' , ReviewList . as_view (), name = 'review' ), path ( 'reviews/create/' , ReviewCreateView . as_view ( success_url = '/reviews/' ), name = 'review_create' ), path ( 'reviews/<str:pk>' , ReviewRetrieveView . as_view ()), path ( 'guests/' , GuestsList . as_view (), name = 'guests' ), ]","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"}]}