# Generated by Django 4.1.2 on 2022-11-29 13:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organizer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('org_surname', models.CharField(max_length=30, verbose_name='Фамилия/Surname')),
                ('org_name', models.CharField(max_length=30, verbose_name='Имя/Name')),
                ('org_patronymic', models.CharField(blank=True, max_length=30, null=True, verbose_name='Отчество/Patronymic')),
                ('org_phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер телефона/Phone number')),
                ('org_passport', models.CharField(max_length=20, verbose_name='Серия и номер пасспорта/Passport number')),
                ('org_email', models.EmailField(max_length=254, unique=True, verbose_name='Электронная почта/Email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название клуба/Club name')),
                ('club_phone_number', models.CharField(max_length=20, verbose_name='Номер телефона/Phone number')),
                ('club_email', models.CharField(blank=True, max_length=50, null=True, verbose_name='Почта/E-mail')),
            ],
        ),
        migrations.CreateModel(
            name='Dog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dog_name', models.CharField(blank=True, max_length=100, verbose_name='Кличка/Name')),
                ('breed', models.CharField(choices=[('Корги/Corgi', 'Корги/Corgi'), ('Немецкая овчарка/German shepherd', 'Немецкая овчарка/German shepherd'), ('Бигль/Beagle', 'Бигль/Beagle'), ('Пудель/Poodle', 'Пудель/Poodle'), ('Ретривер/Retriever', 'Ретривер/Retriever'), ('Самоед/Samoyed', 'Самоед/Samoyed'), ('Доберман/Doberman', 'Доберман/Doberman')], max_length=100, verbose_name='Порода/Breed')),
                ('full_age', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Полный возраст в годах/Full age in years')),
                ('month_age', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Полный возраст в месяцах/Full age in months')),
                ('dog_class', models.CharField(choices=[('Show', 'Собаки класса show/Dogs of show class'), ('Breed', 'Собаки класса breed/Dogs of breed class'), ('Pet', 'Собаки класса pet/Dogs of pet class')], max_length=250, verbose_name='Класс/Class')),
                ('document', models.CharField(max_length=20, verbose_name='Номер документа о родословной/Number of the pedigree document')),
                ('dad_name', models.CharField(blank=True, max_length=100, verbose_name="Кличка отца/Dad's name")),
                ('mom_name', models.CharField(blank=True, max_length=100, verbose_name="Кличка матери/Mom's name")),
                ('last_vaccination', models.DateField(verbose_name='Дата последней прививки/Last vaccination date')),
                ('dog_info', models.TextField(blank=True, max_length=2000, verbose_name='Информация о собаке/Info about dog')),
                ('dog_club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dog_club', related_query_name='dog_club', to='dogs_app.club', verbose_name='Клуб/Club')),
            ],
        ),
        migrations.CreateModel(
            name='DogParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_dog_number', models.IntegerField(verbose_name="Номер собаки на выставке/Dog's number on show")),
                ('dog_status', models.CharField(choices=[('Участвовал/Participated', 'Участвовал/Participated'), ('Снят/Suspended', 'Снят/Suspended'), ('Не допущен/Not allowed', 'Не допущен/Not allowed'), ('Неявка/Absence', 'Неявка/Absence')], max_length=100, verbose_name="Статус собаки/Dog's status")),
                ('reg_dog_date', models.DateField(verbose_name='Дата регистрации собаки/Dog registration date')),
                ('bill', models.CharField(choices=[('Оплачен/Paid', 'Оплачен/Paid'), ('Не оплачен/Not paid', 'Не оплачен/Not paid')], max_length=100, verbose_name='Счёт/Bill')),
                ('checkup', models.CharField(choices=[('Пройден/Passed', 'Медосмотр успешно пройден/Medical examination was successfully passed'), ('Не пройден/Not passed', 'Медосмотр не был пройден/Medical examination was not passed')], max_length=100, verbose_name='Медосмотр/Checkup')),
                ('checkup_date', models.DateField(blank=True, null=True, verbose_name='Дата прохождения медосмотра/Checkup date')),
                ('show_medal', models.CharField(choices=[('Золото/Gold', 'Золото за первое место/Gold for first place'), ('Серебро/Silver', 'Серебро за второе место/Silver for second place'), ('Бронза/Bronze', 'Бронза за третье место/Bronze for third place'), ('Медаль от зрителей/Audience award', 'Медаль как приз зрительских симпатий/Medal as audience sympathy prize')], max_length=250, null=True, verbose_name='Медаль/Medal')),
                ('participant_dog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dog_reg_participation', related_query_name='dog_reg', to='dogs_app.dog', verbose_name='Участник-собака/Participant-dog')),
            ],
        ),
        migrations.CreateModel(
            name='Expert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expert_surname', models.CharField(max_length=30, verbose_name="Фамилия эксперта/Expert's surname")),
                ('expert_name', models.CharField(max_length=30, verbose_name="Имя эксперта/Expert's name")),
                ('expert_patronymic', models.CharField(blank=True, max_length=30, null=True, verbose_name="Отчество эксперта/Expert's patronymic")),
                ('expert_passport', models.CharField(max_length=30, verbose_name="Серия и номер пасспорта эксперта/Expert's passport number")),
                ('expert_phone_number', models.CharField(max_length=20, verbose_name='Номер телефона/Phone number')),
                ('expert_email', models.CharField(blank=True, max_length=50, null=True, verbose_name='Почта/E-mail')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expert_club', related_query_name='exp_club', to='dogs_app.club', verbose_name='Клуб/Club')),
            ],
        ),
        migrations.CreateModel(
            name='ExpertParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_exp_number', models.IntegerField(verbose_name="Номер эксперта на выставке/Expert's number on show")),
                ('exp_status', models.CharField(choices=[('Участвовал/Participated', 'Участвовал/Participated'), ('Снят/Suspended', 'Снят/Suspended'), ('Не допущен/Not allowed', 'Не допущен/Not allowed'), ('Неявка/Absence', 'Неявка/Absence')], max_length=250, verbose_name="Статус эксперта/Expert's status")),
                ('reg_exp_date', models.DateField(verbose_name='Дата регистрации эксперта/Expert registration date')),
                ('participant_exp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exp_reg_participation', related_query_name='exp_reg', to='dogs_app.expert', verbose_name='Участник-эксперт/Participant-expert')),
            ],
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_surname', models.CharField(max_length=30, verbose_name="Фамилия хозяина/Owner's surname")),
                ('owner_name', models.CharField(max_length=30, verbose_name="Имя хозяина/Owner's name")),
                ('owner_patronymic', models.CharField(blank=True, max_length=30, null=True, verbose_name="Отчество хозяина/Owner's patronymic")),
                ('owner_passport', models.CharField(max_length=30, verbose_name="Серия и номер пасспорта хозяина/Owner's passport number")),
                ('owner_phone_number', models.CharField(max_length=20, verbose_name='Номер телефона/Phone number')),
                ('owner_email', models.CharField(blank=True, max_length=50, null=True, verbose_name='Почта/E-mail')),
            ],
        ),
        migrations.CreateModel(
            name='Show',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название выставки/Exhibition name')),
                ('begin_date', models.DateTimeField(verbose_name='Начало выставки/Show start')),
                ('end_date', models.DateTimeField(verbose_name='Окончание выставки/Show end')),
                ('city', models.CharField(max_length=50, verbose_name='Город проведения выставки/City of the show')),
                ('address', models.CharField(max_length=250, verbose_name='Адресс/Address')),
                ('show_type', models.CharField(choices=[('Моно/Mono', 'Однопородная выставка/Monobreed exhibition'), ('Поли/Poly', 'Всепородная выставка/Polybreed exhibition')], max_length=250, verbose_name='Тип выставки/Exhibition type')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='host', related_query_name='org', to=settings.AUTH_USER_MODEL, verbose_name='Организатор/Organizer')),
            ],
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sponsor_name', models.CharField(max_length=200, verbose_name='Имя спонсора/Sponsor name')),
                ('sponsor_phone_number', models.CharField(max_length=20, verbose_name='Номер телефона/Phone number')),
                ('sponsor_email', models.CharField(blank=True, max_length=50, null=True, verbose_name='Почта/E-mail')),
            ],
        ),
        migrations.CreateModel(
            name='Sponsorship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_number', models.IntegerField(unique=True, verbose_name='Номер контракта/Contract number')),
                ('sign_date', models.DateField(verbose_name='Дата подписания контракта/Contract sign date')),
                ('sponsor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsor', related_query_name='sponsor', to='dogs_app.sponsor', verbose_name='Спонсор/Sponsor')),
                ('sponsor_show', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsor_show', related_query_name='sponsor_show', to='dogs_app.show', verbose_name='Выставка/Exhibition')),
            ],
        ),
        migrations.CreateModel(
            name='ShowSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_breed', models.CharField(choices=[('Корги/Corgi', 'Корги/Corgi'), ('Немецкая овчарка/German shepherd', 'Немецкая овчарка/German shepherd'), ('Бигль/Beagle', 'Бигль/Beagle'), ('Пудель/Poodle', 'Пудель/Poodle'), ('Ретривер/Retriever', 'Ретривер/Retriever'), ('Самоед/Samoyed', 'Самоед/Samoyed'), ('Доберман/Doberman', 'Доберман/Doberman')], max_length=50, verbose_name='Порода/Breed')),
                ('show_time', models.DateTimeField(verbose_name='Дата и время выступления/Date and time of performance')),
                ('ring_number', models.IntegerField(verbose_name='Номер ринга/Ring number')),
                ('show_class', models.CharField(choices=[('Baby', 'Собаки от 4 до 6 месяцев/Dogs from 4 to 6 months old'), ('Puppy', 'Собаки от 6 до 9 месяцев/Dogs from 6 to 9 months old'), ('Junior', 'Собаки от 9 до 18 месяцев/Dogs from 9 to 18 months old'), ('Intermediate', 'Собаки от 15 до 24 месяцев/Dogs from 15 to 24 months old'), ('Open', 'Собаки от 15 месяцев/Dogs from 15 months old'), ('Work', 'Собаки от 15 месяцев с дипломом/Dogs from 15 months with diploma old'), ('Champions', 'Собаки от 15 месяцев при наличии сертификата Чемпиона страны-члена FCI/Dogs from 15 months old with FCI Member country Champion certificate'), ('Veteran', 'Собаки от 8 лет/Dogs from 8 years old')], max_length=200, verbose_name='Выставочный класс/Show class')),
                ('show_schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='show_schedule', related_query_name='show_schedule', to='dogs_app.show', verbose_name='Выставка/Exhibition')),
            ],
        ),
        migrations.CreateModel(
            name='Grading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade1', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Оценка за упражнение №1/Grade for exercise №1')),
                ('grade2', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Оценка за упражнение №2/Grade for exercise №2')),
                ('grade3', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Оценка за упражнение №3/Grade for exercise №3')),
                ('sum', models.IntegerField(verbose_name='Сумма оценок/Grades summary')),
                ('dog_grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dog_grade', related_query_name='dog_grade', to='dogs_app.dogparticipation', verbose_name='Собака/Dog')),
                ('expert_grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expert_grade', related_query_name='expert_grade', to='dogs_app.expertparticipation', verbose_name='Эскперт/Expert')),
                ('schedule_grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_grade', related_query_name='schedule_grade', to='dogs_app.showschedule', verbose_name='Расписание/Schedulle')),
            ],
        ),
        migrations.AddField(
            model_name='expertparticipation',
            name='show_exp',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='show_exp_reg_participation', related_query_name='show_exp_reg', to='dogs_app.show', verbose_name='Выставка/Exhibition'),
        ),
        migrations.AddField(
            model_name='dogparticipation',
            name='show_dog',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='show_reg_dog_participation', related_query_name='show_dog_reg', to='dogs_app.show', verbose_name='Выставка/Exhibition'),
        ),
        migrations.AddField(
            model_name='dog',
            name='dog_owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dog_owner', related_query_name='dog_owner', to='dogs_app.owner', verbose_name='Владелец/Owner'),
        ),
        migrations.AlterUniqueTogether(
            name='dogparticipation',
            unique_together={('show_dog_number', 'show_dog')},
        ),
    ]
