{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0441\u0442\u0435\u043d\u044c \u0410\u043d\u043d\u044b \u041a33421","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#33421","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0441\u0442\u0435\u043d\u044c \u0410\u043d\u043d\u044b \u041a33421"},{"location":"lr1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 8080)) s.listen(1) conn, addr = s.accept() while True: data = conn.recv(1024) if not data: break conn.sendall('Hello, client.'.encode('utf-8')) print(data.decode('utf-8')) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 8080)) s.sendall('Hello, server.'.encode('utf-8')) data = s.recv(1024) print(data.decode('utf-8')) s.close() \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py from math import sqrt import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 3030)) s.listen(1) conn, addr = s.accept() while True: data = conn.recv(1024) if not data: break coefs = data.decode('utf-8').split(',') for i in range(len(coefs)): coefs[i] = int(coefs[i]) d = coefs[1]**2 - 4*coefs[0]*coefs[2] if d < 0: conn.sendall('No solutions'.encode('utf-8')) elif d == 0: result = 'Equations`s roots: ' + str(round(-coefs[1]/(2*coefs[0]),3)) conn.sendall(result.encode('utf-8')) else: result = 'Quadratic equations`s roots: ' + str(round((-coefs[1]-sqrt(d))/(2*coefs[0]),3)) + ' ' + str(round((-coefs[1]+sqrt(d))/(2*coefs[0]),3)) conn.sendall(result.encode('utf-8')) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 3030)) print('Enter quadratic equation`s coefficients') a, b, c = map(int, input().split()) s.sendall((str(a)+','+str(b)+','+str(c)).encode('utf-8')) answer = s.recv(1024) print(answer.decode('utf-8')) s.close() \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py import socket def main(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 8080)) s.listen(1) while True: conn, addr = s.accept() # \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u043c html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\nContent-Type: text/html\\n\\n' + html_content conn.sendall(html_response.encode('utf-8')) conn.close() if __name__ == '__main__': main() Html \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Test page</title> </head> <body> <p> \"Hello, world!\" </p> </body> </html> \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py import threading, socket def send_to_chat(sender, msg): for client in clients: if sender != client: client.sendall(msg) def handle_client(cl_sock, cl_addr): #\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print(f'Client {cl_addr[0]}:{cl_addr[1]} join the chat') while True: try: message = cl_sock.recv(1024) #\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 if message.decode('utf-8').find('bye besties') != -1: #\u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043a\u0438\u0434\u0430\u0435\u0442 send_to_chat(cl_sock, message) break elif message.decode('utf-8').find('Error') != -1: break send_to_chat(cl_sock, message) #\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0447\u0430\u0442\u0430 except socket.error: print(f'Client {cl_addr[0]}:{cl_addr[1]} left all of the sudden') break print (f'Client {cl_addr[0]}:{cl_addr[1]} left the chat :(') clients.remove(cl_sock) cl_sock.close() #\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = 'localhost' port = 9090 s.bind((host,port)) s.listen(100) clients = [] print('Starting chat server') while True: try: client_socket, client_address = s.accept() if client_address not in clients: clients.append(client_socket) t1 = threading.Thread(target = handle_client, args =(client_socket, client_address)) t1.start() except KeyboardInterrupt: print('Server stopped') break s.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * client.py import socket, threading, time shutdown = False def recive(): while not shutdown: try: data = s.recv(1024).decode('utf-8') print(data) except socket.error: time.sleep(0.5) continue s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = 'localhost' port = 9090 s.connect((host,port)) s.setblocking(0) alias = input(\"Enter your nickname: \") print('If you want to leave the chat type `bye besties` ') rt = threading.Thread(target = recive) rt.start() while True: try: message = input() s.sendall((f'{alias} :: {message}').encode('utf-8')) if message == 'bye besties': print('You have left the chat') shutdown = True break except: s.sendall('Error'.encode('utf-8')) print('Error. Disconnected') shutdown = True break s.close()","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1_1","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 8080)) s.listen(1) conn, addr = s.accept() while True: data = conn.recv(1024) if not data: break conn.sendall('Hello, client.'.encode('utf-8')) print(data.decode('utf-8')) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 8080)) s.sendall('Hello, server.'.encode('utf-8')) data = s.recv(1024) print(data.decode('utf-8')) s.close()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lr1/#no2","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py from math import sqrt import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 3030)) s.listen(1) conn, addr = s.accept() while True: data = conn.recv(1024) if not data: break coefs = data.decode('utf-8').split(',') for i in range(len(coefs)): coefs[i] = int(coefs[i]) d = coefs[1]**2 - 4*coefs[0]*coefs[2] if d < 0: conn.sendall('No solutions'.encode('utf-8')) elif d == 0: result = 'Equations`s roots: ' + str(round(-coefs[1]/(2*coefs[0]),3)) conn.sendall(result.encode('utf-8')) else: result = 'Quadratic equations`s roots: ' + str(round((-coefs[1]-sqrt(d))/(2*coefs[0]),3)) + ' ' + str(round((-coefs[1]+sqrt(d))/(2*coefs[0]),3)) conn.sendall(result.encode('utf-8')) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 3030)) print('Enter quadratic equation`s coefficients') a, b, c = map(int, input().split()) s.sendall((str(a)+','+str(b)+','+str(c)).encode('utf-8')) answer = s.recv(1024) print(answer.decode('utf-8')) s.close()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lr1/#no3","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py import socket def main(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 8080)) s.listen(1) while True: conn, addr = s.accept() # \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u043c html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\nContent-Type: text/html\\n\\n' + html_content conn.sendall(html_response.encode('utf-8')) conn.close() if __name__ == '__main__': main() Html \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Test page</title> </head> <body> <p> \"Hello, world!\" </p> </body> </html>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"lr1/#no4","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py import threading, socket def send_to_chat(sender, msg): for client in clients: if sender != client: client.sendall(msg) def handle_client(cl_sock, cl_addr): #\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print(f'Client {cl_addr[0]}:{cl_addr[1]} join the chat') while True: try: message = cl_sock.recv(1024) #\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 if message.decode('utf-8').find('bye besties') != -1: #\u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043a\u0438\u0434\u0430\u0435\u0442 send_to_chat(cl_sock, message) break elif message.decode('utf-8').find('Error') != -1: break send_to_chat(cl_sock, message) #\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0447\u0430\u0442\u0430 except socket.error: print(f'Client {cl_addr[0]}:{cl_addr[1]} left all of the sudden') break print (f'Client {cl_addr[0]}:{cl_addr[1]} left the chat :(') clients.remove(cl_sock) cl_sock.close() #\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = 'localhost' port = 9090 s.bind((host,port)) s.listen(100) clients = [] print('Starting chat server') while True: try: client_socket, client_address = s.accept() if client_address not in clients: clients.append(client_socket) t1 = threading.Thread(target = handle_client, args =(client_socket, client_address)) t1.start() except KeyboardInterrupt: print('Server stopped') break s.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * client.py import socket, threading, time shutdown = False def recive(): while not shutdown: try: data = s.recv(1024).decode('utf-8') print(data) except socket.error: time.sleep(0.5) continue s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = 'localhost' port = 9090 s.connect((host,port)) s.setblocking(0) alias = input(\"Enter your nickname: \") print('If you want to leave the chat type `bye besties` ') rt = threading.Thread(target = recive) rt.start() while True: try: message = input() s.sendall((f'{alias} :: {message}').encode('utf-8')) if message == 'bye besties': print('You have left the chat') shutdown = True break except: s.sendall('Error'.encode('utf-8')) print('Error. Disconnected') shutdown = True break s.close()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"}]}