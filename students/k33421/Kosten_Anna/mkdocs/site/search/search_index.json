{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0441\u0442\u0435\u043d\u044c \u0410\u043d\u043d\u044b \u041a33421","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#33421","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0441\u0442\u0435\u043d\u044c \u0410\u043d\u043d\u044b \u041a33421"},{"location":"lr1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 8080)) s.listen(1) conn, addr = s.accept() while True: data = conn.recv(1024) if not data: break conn.sendall('Hello, client.'.encode('utf-8')) print(data.decode('utf-8')) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 8080)) s.sendall('Hello, server.'.encode('utf-8')) data = s.recv(1024) print(data.decode('utf-8')) s.close() \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py from math import sqrt import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 3030)) s.listen(1) conn, addr = s.accept() while True: data = conn.recv(1024) if not data: break coefs = data.decode('utf-8').split(',') for i in range(len(coefs)): coefs[i] = int(coefs[i]) d = coefs[1]**2 - 4*coefs[0]*coefs[2] if d < 0: conn.sendall('No solutions'.encode('utf-8')) elif d == 0: result = 'Equations`s roots: ' + str(round(-coefs[1]/(2*coefs[0]),3)) conn.sendall(result.encode('utf-8')) else: result = 'Quadratic equations`s roots: ' + str(round((-coefs[1]-sqrt(d))/(2*coefs[0]),3)) + ' ' + str(round((-coefs[1]+sqrt(d))/(2*coefs[0]),3)) conn.sendall(result.encode('utf-8')) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 3030)) print('Enter quadratic equation`s coefficients') a, b, c = map(int, input().split()) s.sendall((str(a)+','+str(b)+','+str(c)).encode('utf-8')) answer = s.recv(1024) print(answer.decode('utf-8')) s.close() \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py import socket def main(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 8080)) s.listen(1) while True: conn, addr = s.accept() # \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u043c html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\nContent-Type: text/html\\n\\n' + html_content conn.sendall(html_response.encode('utf-8')) conn.close() if __name__ == '__main__': main() Html \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Test page</title> </head> <body> <p> \"Hello, world!\" </p> </body> </html> \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py import threading, socket def send_to_chat(sender, msg): for client in clients: if sender != client: client.sendall(msg) def handle_client(cl_sock, cl_addr): #\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print(f'Client {cl_addr[0]}:{cl_addr[1]} join the chat') while True: try: message = cl_sock.recv(1024) #\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 if message.decode('utf-8').find('bye besties') != -1: #\u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043a\u0438\u0434\u0430\u0435\u0442 send_to_chat(cl_sock, message) break elif message.decode('utf-8').find('Error') != -1: break send_to_chat(cl_sock, message) #\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0447\u0430\u0442\u0430 except socket.error: print(f'Client {cl_addr[0]}:{cl_addr[1]} left all of the sudden') break print (f'Client {cl_addr[0]}:{cl_addr[1]} left the chat :(') clients.remove(cl_sock) cl_sock.close() #\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = 'localhost' port = 9090 s.bind((host,port)) s.listen(100) clients = [] print('Starting chat server') while True: try: client_socket, client_address = s.accept() if client_address not in clients: clients.append(client_socket) t1 = threading.Thread(target = handle_client, args =(client_socket, client_address)) t1.start() except KeyboardInterrupt: print('Server stopped') break s.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * client.py import socket, threading, time shutdown = False def recive(): while not shutdown: try: data = s.recv(1024).decode('utf-8') print(data) except socket.error: time.sleep(0.5) continue s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = 'localhost' port = 9090 s.connect((host,port)) s.setblocking(0) alias = input(\"Enter your nickname: \") print('If you want to leave the chat type `bye besties` ') rt = threading.Thread(target = recive) rt.start() while True: try: message = input() s.sendall((f'{alias} :: {message}').encode('utf-8')) if message == 'bye besties': print('You have left the chat') shutdown = True break except: s.sendall('Error'.encode('utf-8')) print('Error. Disconnected') shutdown = True break s.close()","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1_1","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 8080)) s.listen(1) conn, addr = s.accept() while True: data = conn.recv(1024) if not data: break conn.sendall('Hello, client.'.encode('utf-8')) print(data.decode('utf-8')) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 8080)) s.sendall('Hello, server.'.encode('utf-8')) data = s.recv(1024) print(data.decode('utf-8')) s.close()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lr1/#no2","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py from math import sqrt import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 3030)) s.listen(1) conn, addr = s.accept() while True: data = conn.recv(1024) if not data: break coefs = data.decode('utf-8').split(',') for i in range(len(coefs)): coefs[i] = int(coefs[i]) d = coefs[1]**2 - 4*coefs[0]*coefs[2] if d < 0: conn.sendall('No solutions'.encode('utf-8')) elif d == 0: result = 'Equations`s roots: ' + str(round(-coefs[1]/(2*coefs[0]),3)) conn.sendall(result.encode('utf-8')) else: result = 'Quadratic equations`s roots: ' + str(round((-coefs[1]-sqrt(d))/(2*coefs[0]),3)) + ' ' + str(round((-coefs[1]+sqrt(d))/(2*coefs[0]),3)) conn.sendall(result.encode('utf-8')) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 3030)) print('Enter quadratic equation`s coefficients') a, b, c = map(int, input().split()) s.sendall((str(a)+','+str(b)+','+str(c)).encode('utf-8')) answer = s.recv(1024) print(answer.decode('utf-8')) s.close()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lr1/#no3","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py import socket def main(): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 8080)) s.listen(1) while True: conn, addr = s.accept() # \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u043c html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\nContent-Type: text/html\\n\\n' + html_content conn.sendall(html_response.encode('utf-8')) conn.close() if __name__ == '__main__': main() Html \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Test page</title> </head> <body> <p> \"Hello, world!\" </p> </body> </html>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"lr1/#no4","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * server.py import threading, socket def send_to_chat(sender, msg): for client in clients: if sender != client: client.sendall(msg) def handle_client(cl_sock, cl_addr): #\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print(f'Client {cl_addr[0]}:{cl_addr[1]} join the chat') while True: try: message = cl_sock.recv(1024) #\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 if message.decode('utf-8').find('bye besties') != -1: #\u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043a\u0438\u0434\u0430\u0435\u0442 send_to_chat(cl_sock, message) break elif message.decode('utf-8').find('Error') != -1: break send_to_chat(cl_sock, message) #\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0447\u0430\u0442\u0430 except socket.error: print(f'Client {cl_addr[0]}:{cl_addr[1]} left all of the sudden') break print (f'Client {cl_addr[0]}:{cl_addr[1]} left the chat :(') clients.remove(cl_sock) cl_sock.close() #\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = 'localhost' port = 9090 s.bind((host,port)) s.listen(100) clients = [] print('Starting chat server') while True: try: client_socket, client_address = s.accept() if client_address not in clients: clients.append(client_socket) t1 = threading.Thread(target = handle_client, args =(client_socket, client_address)) t1.start() except KeyboardInterrupt: print('Server stopped') break s.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f * client.py import socket, threading, time shutdown = False def recive(): while not shutdown: try: data = s.recv(1024).decode('utf-8') print(data) except socket.error: time.sleep(0.5) continue s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = 'localhost' port = 9090 s.connect((host,port)) s.setblocking(0) alias = input(\"Enter your nickname: \") print('If you want to leave the chat type `bye besties` ') rt = threading.Thread(target = recive) rt.start() while True: try: message = input() s.sendall((f'{alias} :: {message}').encode('utf-8')) if message == 'bye besties': print('You have left the chat') shutdown = True break except: s.sendall('Error'.encode('utf-8')) print('Error. Disconnected') shutdown = True break s.close()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"lr2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c models.py - \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 from django.db import models from datetime import date from django.contrib.auth.models import AbstractUser class Owner(AbstractUser): owner_id = models.IntegerField(primary_key=True) date_of_birth = models.DateField(null=True) passport = models.CharField(max_length=15, blank=False, null=False, unique=True) address = models.CharField(max_length=100, blank=False, null=False) nationality = models.CharField(max_length=30, blank=True, null=False) class Car(models.Model): id_number = models.IntegerField(primary_key=True) brand = models.CharField(max_length=30) car_model = models.CharField(max_length=30) color = models.CharField(max_length=30) official_number = models.CharField(max_length=30) class Owning(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) begin_date = models.DateField(default=date(2010, 1, 1)) end_date = models.DateField(default=date(2020, 1, 1)) class DrivingLicense(models.Model): LICENCE_TYPES = ( ('A', 'Motorcycles'), ('B', 'Cars'), ('D', 'Buses'), ) number = models.IntegerField(primary_key=True) owner = models.ForeignKey(Owner, on_delete=models.CASCADE) date_of_issue = models.DateField(default=date(2010, 1, 1)) type = models.CharField(max_length=3, choices=LICENCE_TYPES) \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: AUTH_USER_MODEL = 'project_first_app.Owner' \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432: owners.hmtl <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Owners</title> <style> table { border-spacing: 20px 10px; font-weight: bold; } </style> </head> <body> {% if new %} <form method=\"POST\" enctype=\"multipart/form-data\"> {% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Submit\"> </form> {% else %} <table> <thead> <tr> <th>Name</th> <th>Surname</th> <th>Date of birth</th> <th>Passport</th> <th>Address</th> <th>Nationality</th> </tr> </thead> <tbody> {% if all %} {% for owner in owners %} <tr> <th>{{ owner.first_name }}</th> <th>{{ owner.last_name }}</th> <th>{{ owner.date_of_birth }}</th> <th>{{ owner.passport }}</th> <th>{{ owner.address }}</th> <th>{{ owner.nationality }}</th> </tr> {% endfor %} {% endif %} {% if one %} <tr> <th>{{ owner.first_name }}</th> <th>{{ owner.last_name }}</th> <th>{{ owner.date_of_birth }}</th> <th>{{ owner.passport }}</th> <th>{{ owner.address }}</th> <th>{{ owner.nationality }}</th> </tr> {% endif %} </tbody> </table> {% endif %} <a href=\"../create_owner\">New</a> </body> </html> urls.py urlpatterns = [ path('owners/', views.all_owners_detail), path('owner/<int:owner_id>/', views.owner_detail), path('create_owner/', views.create_owner), path('cars/', AllCars.as_view()), path('car/<int:pk>/', OneCar.as_view()), path('car/<int:pk>/update/', CarUpdate.as_view()), path('car/create/', CarCreate.as_view()), path('car/<int:pk>/delete/', CarDelete.as_view()), ] views.py from django.shortcuts import render , get_object_or_404, redirect from django.views.generic import ListView, DetailView, UpdateView, CreateView, DeleteView from project_first_app.form import OwnerForm from .models import Owner, Car def all_owners_detail(request): context = {\"owners\": Owner.objects.all(), \"all\": True} return render(request, 'owners.html', context) def owner_detail(request, owner_id): context = get_object_or_404(Owner, pk=owner_id) return render(request, 'owners.html', {\"owner\": context, \"one\": True}) def create_owner(request): form = OwnerForm(request.POST or None) if form.is_valid(): form.save() return redirect('/owners') return render(request, \"owners.html\", {\"form\": form, \"new\": True}) class AllCars(ListView): model = Car template_name = \"cars.html\" class OneCar(DetailView): model = Car template_name = \"cars.html\" class CarDelete(DeleteView): model = Car template_name = 'car_confirm_delete.html' success_url = '/cars/' class CarCreate(CreateView): model = Car template_name = 'car_create_update.html' fields = ['id_number', 'brand', 'car_model', 'color', 'official_number'] success_url = '/cars/ class CarUpdate(UpdateView): model = Car fields = ['id_number', 'brand', 'car_model', 'color', 'official_number'] success_url = '/cars/' template_name = 'car_create_update.html' \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u043a\u043e\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c\u0430\u0442\u0438\u043a, \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041c\u043e\u0434\u0435\u043b\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0422\u0435\u043c\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f \u041c\u0435\u0441\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0417\u0430\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 models.py from django.db import models from django.contrib.auth.models import User class Conference(models.Model): name = models.CharField(max_length=100) description = models.TextField(null=True, blank=True) participation_cond = models.TextField(null=True, blank=True) def __str__(self): return self.name class Place(models.Model): name = models.CharField(max_length=50) address = models.CharField(max_length=150) def __str__(self): return self.name class Theme(models.Model): name = models.CharField(max_length=50) def __str__(self): return self.name class PlannedConference(models.Model): conference = models.ForeignKey(Conference, on_delete=models.CASCADE) place = models.ForeignKey( Place, on_delete=models.SET_NULL, null=True, blank=True) themes = models.ManyToManyField(Theme) start_date = models.DateTimeField() end_date = models.DateTimeField() def __str__(self): return self.conference.name class RegisteredSpeech(models.Model): conference = models.ForeignKey(PlannedConference, on_delete=models.CASCADE) user = models.ForeignKey(User, on_delete=models.CASCADE) name = models.CharField(max_length=100, null=True) results = models.BooleanField(null=True, blank=True) def __str__(self): return self.name class Comment(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) conference = models.ForeignKey(PlannedConference, on_delete=models.CASCADE) rating = models.IntegerField( choices=[(i, i) for i in range(0, 11)], null=True, blank=True, default=None) text = models.TextField() date = models.DateTimeField(auto_now=True, null=True) def __str__(self): return self.user.username \u0428\u0430\u0431\u043b\u043e\u043d\u044b \u0422\u0430\u043a \u043a\u0430\u043a \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0438\u043c\u0435\u044e\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043e\u0431\u044a\u0435\u043c, \u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0443 \u043a\u043e\u0434 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0443\u0441\u0442\u0438\u043c. \u0421\u043f\u0438\u0441\u043e\u043a \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432: * main.html - \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0448\u0430\u0431\u043b\u043e\u043d * conference_detail.html - \u0448\u0430\u0431\u043b\u043e\u043d \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 {% extends 'conf/main.html' %} {% block content %} <div class=\"conference\"> <div class=\"header-bar\"> <h1 class=\"header\">{{conference.conference.name}}</h1> {% if request.user.is_authenticated %} <a class=\"inroll\" href={% url 'conference_register' conference.id%}>\u0417\u0430\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0438\u043c</a> {% endif %} </div> <h3>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435</h3> <p class=\"description\">{{conference.conference.description}}</p> <h3>\u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f</h3> <p class=\"part-cond\">{{conference.conference.participation_cond}}</p> <h3>\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438</h3> <div class=\"info\"> <p class=\"place\">\u0410\u0434\u0440\u0435\u0441: <i>{{conference.place.name}} | {{conference.place.address}}</i></p> <p class=\"date\">\u0414\u0430\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f: {{conference.start_date}} - {{conference.end_date}}</p> </div> </div> <div class=\"register-section\"> <div class=\"header-bar\"> <h3 class=\"header\">\u0412\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f</h3> </div> {% if registers|length > 0 %} {% for register in registers %} <h4>{{register.user}} - <i>{{register.name}}</i></h4> {% endfor %} {% else %} <p>\u0412\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 \u043d\u0435\u0442</p> {% endif %} </div> <div class=\"comment-section\"> <div class=\"header-bar\"> <h3 class=\"header\">\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438</h3> </div> {% if request.user.is_authenticated %} <form class='comment-form' method=\"post\"> {% csrf_token %} <p class=\"rating\">\u0420\u0435\u0439\u0442\u0438\u043d\u0433: {{ comment_form.rating }}</p> <p class=\"text\">\u0422\u0435\u043a\u0441\u0442: <br /> {{comment_form.text}}</p> {{comment_form.user}} {{comment_form.conference}} <input class=\"button\" type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"> </form> {% endif %} {% for comment in comments %} <div class=\"comment\"> <div class=\"header-bar\"> <h4 class=\"author\">{{comment.user|title}}</h4> <h3 class=\"rating\">{{comment.rating|title}}</h3> </div> <p class=\"text\">{{comment.text}}</p> </div> {% endfor %} </div> {% endblock content %} conference_register.html - \u0444\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 coferences_list.html - \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 login.html - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0444\u043e\u0440\u043c\u043e\u0439 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 logout.html - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 register.html - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 registeredspeech_confirm_delete.html - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f registers.html - \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 theme_detail.html - \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0442\u0435\u043c\u0435 themes_list.html - \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f views.py class RegisterPage(FormView): template_name = 'conf/register.html' form_class = UserCreationForm redirect_authenticated_user = True success_url = reverse_lazy('conferences') def form_valid(self, form): user = form.save() if user is not None: login(self.request, user) return super(RegisterPage, self).form_valid(form) def get(self, *args, **kwargs): if self.request.user.is_authenticated: return redirect('conferences') return super(RegisterPage, self).get(*args, **kwargs) class CustomLoginView(LoginView): template_name = 'conf/login.html' fields = '__all__' redirect_authenticated_user = True def get_success_url(self): return reverse_lazy('conferences') class ConferencesList(ListView): model = PlannedConference template_name = 'conf/conferences_list.html' context_object_name = 'conferences' def conference_detail(request, pk): conference = PlannedConference.objects.get(pk=pk) registers = RegisteredSpeech.objects.filter( conference__pk=pk, results=True) comments = Comment.objects.filter(conference__pk=pk) initial = {'conference': conference, 'user': request.user} comment_form = CommentForm(initial=initial) if request.method == 'POST': c_form = CommentForm(request.POST) if c_form.is_valid(): c_form. save() else: comment_form = c_form context = {'conference': conference, 'comments': comments, 'comment_form': comment_form, 'registers': registers} return render(request, 'conf/conference_detail.html', context) class ThemesList(ListView): model = Theme template_name = 'conf/themes_list.html' context_object_name = 'themes' class ThemeDetail(DetailView): model = Theme context_object_name = 'theme' template_name = 'conf/theme_detail.html' def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context[\"conferences\"] = PlannedConference.objects.filter( themes__id=context['theme'].id) return context @login_required def conference_register_view(request, pk): conference = PlannedConference.objects.get(pk=pk) initial = {'conference': conference, 'user': request.user} form = SpeechRegisterForm(initial=initial) if request.method == 'POST': c_form = SpeechRegisterForm(request.POST) if c_form.is_valid(): c_form. save() return redirect(f'/conference/{pk}') else: form = c_form context = {'conference': conference, 'form': form} return render(request, 'conf/conference_register.html', context) class RegisterList(LoginRequiredMixin, ListView): model = RegisteredSpeech template_name = 'conf/registers.html' context_object_name = 'registers' class DeleteRegisterView(LoginRequiredMixin, DeleteView): model = RegisteredSpeech context_object_name = 'register' success_url = reverse_lazy('my_registers') \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0435\u0439: /conferences/ - \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 /conference/ / - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 /conference/ /register/ - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 /myregisters/ - \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 /myregisters/delete/ / - \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 /themes/ - \u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 /themes/ / - \u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0442\u0435\u043c\u0435 /login/ - \u0412\u043e\u0439\u0442\u0438 \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 /logout/ - \u0412\u044b\u0439\u0442\u0438 \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 /register/ - \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f urls.py urlpatterns = [ path('', ConferencesList.as_view(), name='conferences'), path('conference/<int:pk>', conference_detail, name='conference'), path('conference/<int:pk>/register', conference_register_view, name='conference_register'), path('myregisters', RegisterList.as_view(), name='my_registers'), path('myregisters/delete/<int:pk>', DeleteRegisterView.as_view(), name='register_delete'), path('themes', ThemesList.as_view(), name='themes'), path('themes/<int:pk>', ThemeDetail.as_view(), name='theme'), path('login', CustomLoginView.as_view(), name='login'), path('logout', LogoutView.as_view(next_page='conferences'), name='logout'), path('register', RegisterPage.as_view(), name='register'), ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#_1","text":"models.py - \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 from django.db import models from datetime import date from django.contrib.auth.models import AbstractUser class Owner(AbstractUser): owner_id = models.IntegerField(primary_key=True) date_of_birth = models.DateField(null=True) passport = models.CharField(max_length=15, blank=False, null=False, unique=True) address = models.CharField(max_length=100, blank=False, null=False) nationality = models.CharField(max_length=30, blank=True, null=False) class Car(models.Model): id_number = models.IntegerField(primary_key=True) brand = models.CharField(max_length=30) car_model = models.CharField(max_length=30) color = models.CharField(max_length=30) official_number = models.CharField(max_length=30) class Owning(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) begin_date = models.DateField(default=date(2010, 1, 1)) end_date = models.DateField(default=date(2020, 1, 1)) class DrivingLicense(models.Model): LICENCE_TYPES = ( ('A', 'Motorcycles'), ('B', 'Cars'), ('D', 'Buses'), ) number = models.IntegerField(primary_key=True) owner = models.ForeignKey(Owner, on_delete=models.CASCADE) date_of_issue = models.DateField(default=date(2010, 1, 1)) type = models.CharField(max_length=3, choices=LICENCE_TYPES) \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: AUTH_USER_MODEL = 'project_first_app.Owner' \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432: owners.hmtl <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Owners</title> <style> table { border-spacing: 20px 10px; font-weight: bold; } </style> </head> <body> {% if new %} <form method=\"POST\" enctype=\"multipart/form-data\"> {% csrf_token %} {{ form.as_p }} <input type=\"submit\" value=\"Submit\"> </form> {% else %} <table> <thead> <tr> <th>Name</th> <th>Surname</th> <th>Date of birth</th> <th>Passport</th> <th>Address</th> <th>Nationality</th> </tr> </thead> <tbody> {% if all %} {% for owner in owners %} <tr> <th>{{ owner.first_name }}</th> <th>{{ owner.last_name }}</th> <th>{{ owner.date_of_birth }}</th> <th>{{ owner.passport }}</th> <th>{{ owner.address }}</th> <th>{{ owner.nationality }}</th> </tr> {% endfor %} {% endif %} {% if one %} <tr> <th>{{ owner.first_name }}</th> <th>{{ owner.last_name }}</th> <th>{{ owner.date_of_birth }}</th> <th>{{ owner.passport }}</th> <th>{{ owner.address }}</th> <th>{{ owner.nationality }}</th> </tr> {% endif %} </tbody> </table> {% endif %} <a href=\"../create_owner\">New</a> </body> </html> urls.py urlpatterns = [ path('owners/', views.all_owners_detail), path('owner/<int:owner_id>/', views.owner_detail), path('create_owner/', views.create_owner), path('cars/', AllCars.as_view()), path('car/<int:pk>/', OneCar.as_view()), path('car/<int:pk>/update/', CarUpdate.as_view()), path('car/create/', CarCreate.as_view()), path('car/<int:pk>/delete/', CarDelete.as_view()), ] views.py from django.shortcuts import render , get_object_or_404, redirect from django.views.generic import ListView, DetailView, UpdateView, CreateView, DeleteView from project_first_app.form import OwnerForm from .models import Owner, Car def all_owners_detail(request): context = {\"owners\": Owner.objects.all(), \"all\": True} return render(request, 'owners.html', context) def owner_detail(request, owner_id): context = get_object_or_404(Owner, pk=owner_id) return render(request, 'owners.html', {\"owner\": context, \"one\": True}) def create_owner(request): form = OwnerForm(request.POST or None) if form.is_valid(): form.save() return redirect('/owners') return render(request, \"owners.html\", {\"form\": form, \"new\": True}) class AllCars(ListView): model = Car template_name = \"cars.html\" class OneCar(DetailView): model = Car template_name = \"cars.html\" class CarDelete(DeleteView): model = Car template_name = 'car_confirm_delete.html' success_url = '/cars/' class CarCreate(CreateView): model = Car template_name = 'car_create_update.html' fields = ['id_number', 'brand', 'car_model', 'color', 'official_number'] success_url = '/cars/ class CarUpdate(UpdateView): model = Car fields = ['id_number', 'brand', 'car_model', 'color', 'official_number'] success_url = '/cars/' template_name = 'car_create_update.html'","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lr2/#_2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lr2/#_3","text":"\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c\u0430\u0442\u0438\u043a, \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c.","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u043a\u043e\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439"},{"location":"lr2/#_4","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0422\u0435\u043c\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f \u041c\u0435\u0441\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0417\u0430\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 models.py from django.db import models from django.contrib.auth.models import User class Conference(models.Model): name = models.CharField(max_length=100) description = models.TextField(null=True, blank=True) participation_cond = models.TextField(null=True, blank=True) def __str__(self): return self.name class Place(models.Model): name = models.CharField(max_length=50) address = models.CharField(max_length=150) def __str__(self): return self.name class Theme(models.Model): name = models.CharField(max_length=50) def __str__(self): return self.name class PlannedConference(models.Model): conference = models.ForeignKey(Conference, on_delete=models.CASCADE) place = models.ForeignKey( Place, on_delete=models.SET_NULL, null=True, blank=True) themes = models.ManyToManyField(Theme) start_date = models.DateTimeField() end_date = models.DateTimeField() def __str__(self): return self.conference.name class RegisteredSpeech(models.Model): conference = models.ForeignKey(PlannedConference, on_delete=models.CASCADE) user = models.ForeignKey(User, on_delete=models.CASCADE) name = models.CharField(max_length=100, null=True) results = models.BooleanField(null=True, blank=True) def __str__(self): return self.name class Comment(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) conference = models.ForeignKey(PlannedConference, on_delete=models.CASCADE) rating = models.IntegerField( choices=[(i, i) for i in range(0, 11)], null=True, blank=True, default=None) text = models.TextField() date = models.DateTimeField(auto_now=True, null=True) def __str__(self): return self.user.username","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"lr2/#_5","text":"\u0422\u0430\u043a \u043a\u0430\u043a \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0438\u043c\u0435\u044e\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043e\u0431\u044a\u0435\u043c, \u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0443 \u043a\u043e\u0434 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0443\u0441\u0442\u0438\u043c. \u0421\u043f\u0438\u0441\u043e\u043a \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432: * main.html - \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0448\u0430\u0431\u043b\u043e\u043d * conference_detail.html - \u0448\u0430\u0431\u043b\u043e\u043d \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 {% extends 'conf/main.html' %} {% block content %} <div class=\"conference\"> <div class=\"header-bar\"> <h1 class=\"header\">{{conference.conference.name}}</h1> {% if request.user.is_authenticated %} <a class=\"inroll\" href={% url 'conference_register' conference.id%}>\u0417\u0430\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0438\u043c</a> {% endif %} </div> <h3>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435</h3> <p class=\"description\">{{conference.conference.description}}</p> <h3>\u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f</h3> <p class=\"part-cond\">{{conference.conference.participation_cond}}</p> <h3>\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438</h3> <div class=\"info\"> <p class=\"place\">\u0410\u0434\u0440\u0435\u0441: <i>{{conference.place.name}} | {{conference.place.address}}</i></p> <p class=\"date\">\u0414\u0430\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f: {{conference.start_date}} - {{conference.end_date}}</p> </div> </div> <div class=\"register-section\"> <div class=\"header-bar\"> <h3 class=\"header\">\u0412\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f</h3> </div> {% if registers|length > 0 %} {% for register in registers %} <h4>{{register.user}} - <i>{{register.name}}</i></h4> {% endfor %} {% else %} <p>\u0412\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 \u043d\u0435\u0442</p> {% endif %} </div> <div class=\"comment-section\"> <div class=\"header-bar\"> <h3 class=\"header\">\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438</h3> </div> {% if request.user.is_authenticated %} <form class='comment-form' method=\"post\"> {% csrf_token %} <p class=\"rating\">\u0420\u0435\u0439\u0442\u0438\u043d\u0433: {{ comment_form.rating }}</p> <p class=\"text\">\u0422\u0435\u043a\u0441\u0442: <br /> {{comment_form.text}}</p> {{comment_form.user}} {{comment_form.conference}} <input class=\"button\" type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"> </form> {% endif %} {% for comment in comments %} <div class=\"comment\"> <div class=\"header-bar\"> <h4 class=\"author\">{{comment.user|title}}</h4> <h3 class=\"rating\">{{comment.rating|title}}</h3> </div> <p class=\"text\">{{comment.text}}</p> </div> {% endfor %} </div> {% endblock content %} conference_register.html - \u0444\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 coferences_list.html - \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 login.html - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0444\u043e\u0440\u043c\u043e\u0439 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 logout.html - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 register.html - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 registeredspeech_confirm_delete.html - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f registers.html - \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 theme_detail.html - \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0442\u0435\u043c\u0435 themes_list.html - \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c","title":"\u0428\u0430\u0431\u043b\u043e\u043d\u044b"},{"location":"lr2/#_6","text":"views.py class RegisterPage(FormView): template_name = 'conf/register.html' form_class = UserCreationForm redirect_authenticated_user = True success_url = reverse_lazy('conferences') def form_valid(self, form): user = form.save() if user is not None: login(self.request, user) return super(RegisterPage, self).form_valid(form) def get(self, *args, **kwargs): if self.request.user.is_authenticated: return redirect('conferences') return super(RegisterPage, self).get(*args, **kwargs) class CustomLoginView(LoginView): template_name = 'conf/login.html' fields = '__all__' redirect_authenticated_user = True def get_success_url(self): return reverse_lazy('conferences') class ConferencesList(ListView): model = PlannedConference template_name = 'conf/conferences_list.html' context_object_name = 'conferences' def conference_detail(request, pk): conference = PlannedConference.objects.get(pk=pk) registers = RegisteredSpeech.objects.filter( conference__pk=pk, results=True) comments = Comment.objects.filter(conference__pk=pk) initial = {'conference': conference, 'user': request.user} comment_form = CommentForm(initial=initial) if request.method == 'POST': c_form = CommentForm(request.POST) if c_form.is_valid(): c_form. save() else: comment_form = c_form context = {'conference': conference, 'comments': comments, 'comment_form': comment_form, 'registers': registers} return render(request, 'conf/conference_detail.html', context) class ThemesList(ListView): model = Theme template_name = 'conf/themes_list.html' context_object_name = 'themes' class ThemeDetail(DetailView): model = Theme context_object_name = 'theme' template_name = 'conf/theme_detail.html' def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context[\"conferences\"] = PlannedConference.objects.filter( themes__id=context['theme'].id) return context @login_required def conference_register_view(request, pk): conference = PlannedConference.objects.get(pk=pk) initial = {'conference': conference, 'user': request.user} form = SpeechRegisterForm(initial=initial) if request.method == 'POST': c_form = SpeechRegisterForm(request.POST) if c_form.is_valid(): c_form. save() return redirect(f'/conference/{pk}') else: form = c_form context = {'conference': conference, 'form': form} return render(request, 'conf/conference_register.html', context) class RegisterList(LoginRequiredMixin, ListView): model = RegisteredSpeech template_name = 'conf/registers.html' context_object_name = 'registers' class DeleteRegisterView(LoginRequiredMixin, DeleteView): model = RegisteredSpeech context_object_name = 'register' success_url = reverse_lazy('my_registers')","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"lr2/#_7","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0435\u0439: /conferences/ - \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 /conference/ / - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 /conference/ /register/ - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 /myregisters/ - \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 /myregisters/delete/ / - \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 /themes/ - \u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 /themes/ / - \u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0442\u0435\u043c\u0435 /login/ - \u0412\u043e\u0439\u0442\u0438 \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 /logout/ - \u0412\u044b\u0439\u0442\u0438 \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 /register/ - \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f urls.py urlpatterns = [ path('', ConferencesList.as_view(), name='conferences'), path('conference/<int:pk>', conference_detail, name='conference'), path('conference/<int:pk>/register', conference_register_view, name='conference_register'), path('myregisters', RegisterList.as_view(), name='my_registers'), path('myregisters/delete/<int:pk>', DeleteRegisterView.as_view(), name='register_delete'), path('themes', ThemesList.as_view(), name='themes'), path('themes/<int:pk>', ThemeDetail.as_view(), name='theme'), path('login', CustomLoginView.as_view(), name='login'), path('logout', LogoutView.as_view(next_page='conferences'), name='logout'), path('register', RegisterPage.as_view(), name='register'), ]","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"pr3_1/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041c\u043e\u0434\u0435\u043b\u0438 models.py from django.db import models class Transport_owner(models.Model): id_owner = models.IntegerField(primary_key=True) last_name = models.CharField(max_length=30, null=False) first_name = models.CharField(max_length=30, null=False) date_birthday = models.DateField() class Transport(models.Model): id_car = models.IntegerField(primary_key=True) gov_number = models.CharField(max_length=15, null=False) brand = models.CharField(max_length=20, null=False) model_car = models.CharField(max_length=20, null=False) color = models.CharField(max_length=30, null=True) class Ownership(models.Model): id_owner_car = models.IntegerField(primary_key=True) id_owner = models.ForeignKey(Transport_owner, on_delete=models.CASCADE, related_name=\"ownership\") id_car = models.ForeignKey(Transport, on_delete=models.CASCADE) date_start = models.DateField() sate_end = models.DateField(null=True) class License(models.Model): id_doc = models.IntegerField(primary_key=True) id_owner = models.ForeignKey(Transport_owner, on_delete=models.CASCADE) number_doc = models.CharField(max_length=10, null=False) type_doc = models.CharField(max_length=10, null=False) date_start_doc = models.DateField() \u041f\u0435\u0440\u0435\u0439\u0434\u0435\u043c \u0432 shell \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 Transport_owner(1, '\u0424\u0430\u043c\u0438\u043b\u0438\u044f1', '\u0418\u043c\u044f1', '1902-01-1').save() Transport_owner(2, '\u0424\u0430\u043c\u0438\u043b\u0438\u044f2', '\u0418\u043c\u044f2', '1902-01-2').save() Transport_owner(3, '\u0424\u0430\u043c\u0438\u043b\u0438\u044f3', '\u0418\u043c\u044f3', '1902-01-3').save() Transport_owner(4, '\u0424\u0430\u043c\u0438\u043b\u0438\u044f4', '\u0418\u043c\u044f4', '1902-01-4').save() Transport_owner(5, '\u0424\u0430\u043c\u0438\u043b\u0438\u044f5', '\u0418\u043c\u044f5', '1902-01-5').save() Transport_owner(6, '\u0424\u0430\u043c\u0438\u043b\u0438\u044f6', '\u0418\u043c\u044f6', '1902-01-6').save() \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 Transport(0, 'A123BC', 'Brand0', 'Model0', 'green').save() Transport(1, 'A124BC', 'Brand1', 'Model1', 'red').save() Transport(2, 'A125BC', 'Brand2', 'Model2', 'black').save() Transport(3, 'A126BC', 'Brand3', 'Model3', 'blue').save() Transport(4, 'A127BC', 'Brand4', 'Model4', 'blue').save() Transport(5, 'A128BC', 'Brand5', 'Model5', 'black').save() Transport(6, 'A129BC', 'Brand6', 'Model6', 'blue').save() \u0412\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0440\u0430\u0432\u0430 License('1', '1', 'num1', 'type1', '1995-05-1').save() License('2', '2', 'num2', 'type2', '1995-05-2').save() License('3', '3', 'num3', 'type3', '1995-05-3').save() License('4', '4', 'num4', 'type4', '1995-05-4').save() License('5', '5', 'num5', 'type5', '1995-05-5').save() License('6', '6', 'num6', 'type6', '1995-05-6').save() \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\u043c\u0438 Ownership('1', '1', '1', '2000-08-1', '2010-08-1').save() Ownership('2', '2', '2', '2000-08-2', '2010-08-2').save() Ownership('3', '3', '3', '2000-08-3', '2010-08-3').save() Ownership('4', '4', '4', '2000-08-4', '2010-08-4').save() Ownership('5', '5', '5', '2000-08-5', '2010-08-5').save() Ownership('6', '6', '6', '2000-08-6', '2010-08-6').save() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) >>> Transport.objects.filter(brand=\"Brand3\") <QuerySet [<Transport: Transport object (3)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) >>> Transport_owner.objects.filter(first_name=\"\u0418\u043c\u044f5\") <QuerySet [<Transport_owner: Transport_owner object (5)>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) >>> needed_id = Transport_owner.objects.all()[2].id_owner >>> License.objects.get(id_owner=needed_id) <License: License object (3)> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) >>> Transport_owner.objects.filter(ownership__id_car__color='blue') <QuerySet [ <Transport_owner: Transport_owner object (3)>, <Transport_owner: Transport_owner object (4)>, <Transport_owner: Transport_owner object (6)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) >>> Transport_owner.objects.filter(ownership__date_start='2000-01-01') <QuerySet [<Transport_owner: Transport_owner object (1)>, <Transport_owner: Transport_owner object (2)>, <Transport_owner: Transport_owner object (3)>, <Transport_owner: Transport_owner object (4)>, <Transport_owner: Transport_owner object (5)>, <Transport_owner: Transport_owner object (6)>]> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> License.objects.aggregate(date_start_doc=Min(\"date_start_doc\")) {'date_start_doc': datetime.date(1995, 5, 1)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 >>> Ownership.objects.aggregate(date_start=Max(\"date_start\")) {'date_start': datetime.date(2000, 8, 6)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f >>> Ownership.objects.values(\"id_owner\").annotate(Count(\"id_car\")) <QuerySet [{'id_owner': 1, 'id_car__count': 1}, {'id_owner': 2, 'id_car__count': 1}, {'id_owner': 3, 'id_car__count': 1}, {'id_owner': 4, 'id_car__count': 1}, {'id_owner': 5, 'id_car__count': 1}, {'id_owner': 6, 'id_car__count': 1}] \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 >>> Transport.objects.values(\"brand\").annotate(Count(\"id_car\")) <QuerySet [{'brand': 'Brand3', 'id_car__count': 1}, {'brand': 'Brand4', 'id_car__count': 3}, {'brand': 'Brand5', 'id_car__count': 1}, {'brand': 'Brand6', 'id_car__count': 1}] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c .distinct() >>> sort_by_date = License.objects.all().order_by(\"date_start_doc\") >>> for i in sort_by_date: ... needed_id = i.id_owner.id_owner ... print( Ownership.objects.filter(id_owner__id_owner=needed_id) ) <QuerySet [<Ownership: Ownership object (4)>]> <QuerySet [<Ownership: Ownership object (1)>]> <QuerySet [<Ownership: Ownership object (2)>]> <QuerySet [<Ownership: Ownership object (3)>]> <QuerySet [<Ownership: Ownership object (5)>]> <QuerySet [<Ownership: Ownership object (6)>]>","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"pr3_1/#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"pr3_1/#1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"pr3_1/#_1","text":"models.py from django.db import models class Transport_owner(models.Model): id_owner = models.IntegerField(primary_key=True) last_name = models.CharField(max_length=30, null=False) first_name = models.CharField(max_length=30, null=False) date_birthday = models.DateField() class Transport(models.Model): id_car = models.IntegerField(primary_key=True) gov_number = models.CharField(max_length=15, null=False) brand = models.CharField(max_length=20, null=False) model_car = models.CharField(max_length=20, null=False) color = models.CharField(max_length=30, null=True) class Ownership(models.Model): id_owner_car = models.IntegerField(primary_key=True) id_owner = models.ForeignKey(Transport_owner, on_delete=models.CASCADE, related_name=\"ownership\") id_car = models.ForeignKey(Transport, on_delete=models.CASCADE) date_start = models.DateField() sate_end = models.DateField(null=True) class License(models.Model): id_doc = models.IntegerField(primary_key=True) id_owner = models.ForeignKey(Transport_owner, on_delete=models.CASCADE) number_doc = models.CharField(max_length=10, null=False) type_doc = models.CharField(max_length=10, null=False) date_start_doc = models.DateField() \u041f\u0435\u0440\u0435\u0439\u0434\u0435\u043c \u0432 shell \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 Transport_owner(1, '\u0424\u0430\u043c\u0438\u043b\u0438\u044f1', '\u0418\u043c\u044f1', '1902-01-1').save() Transport_owner(2, '\u0424\u0430\u043c\u0438\u043b\u0438\u044f2', '\u0418\u043c\u044f2', '1902-01-2').save() Transport_owner(3, '\u0424\u0430\u043c\u0438\u043b\u0438\u044f3', '\u0418\u043c\u044f3', '1902-01-3').save() Transport_owner(4, '\u0424\u0430\u043c\u0438\u043b\u0438\u044f4', '\u0418\u043c\u044f4', '1902-01-4').save() Transport_owner(5, '\u0424\u0430\u043c\u0438\u043b\u0438\u044f5', '\u0418\u043c\u044f5', '1902-01-5').save() Transport_owner(6, '\u0424\u0430\u043c\u0438\u043b\u0438\u044f6', '\u0418\u043c\u044f6', '1902-01-6').save() \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 Transport(0, 'A123BC', 'Brand0', 'Model0', 'green').save() Transport(1, 'A124BC', 'Brand1', 'Model1', 'red').save() Transport(2, 'A125BC', 'Brand2', 'Model2', 'black').save() Transport(3, 'A126BC', 'Brand3', 'Model3', 'blue').save() Transport(4, 'A127BC', 'Brand4', 'Model4', 'blue').save() Transport(5, 'A128BC', 'Brand5', 'Model5', 'black').save() Transport(6, 'A129BC', 'Brand6', 'Model6', 'blue').save() \u0412\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0440\u0430\u0432\u0430 License('1', '1', 'num1', 'type1', '1995-05-1').save() License('2', '2', 'num2', 'type2', '1995-05-2').save() License('3', '3', 'num3', 'type3', '1995-05-3').save() License('4', '4', 'num4', 'type4', '1995-05-4').save() License('5', '5', 'num5', 'type5', '1995-05-5').save() License('6', '6', 'num6', 'type6', '1995-05-6').save() \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\u043c\u0438 Ownership('1', '1', '1', '2000-08-1', '2010-08-1').save() Ownership('2', '2', '2', '2000-08-2', '2010-08-2').save() Ownership('3', '3', '3', '2000-08-3', '2010-08-3').save() Ownership('4', '4', '4', '2000-08-4', '2010-08-4').save() Ownership('5', '5', '5', '2000-08-5', '2010-08-5').save() Ownership('6', '6', '6', '2000-08-6', '2010-08-6').save()","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"pr3_1/#2","text":"\u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) >>> Transport.objects.filter(brand=\"Brand3\") <QuerySet [<Transport: Transport object (3)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) >>> Transport_owner.objects.filter(first_name=\"\u0418\u043c\u044f5\") <QuerySet [<Transport_owner: Transport_owner object (5)>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) >>> needed_id = Transport_owner.objects.all()[2].id_owner >>> License.objects.get(id_owner=needed_id) <License: License object (3)> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) >>> Transport_owner.objects.filter(ownership__id_car__color='blue') <QuerySet [ <Transport_owner: Transport_owner object (3)>, <Transport_owner: Transport_owner object (4)>, <Transport_owner: Transport_owner object (6)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) >>> Transport_owner.objects.filter(ownership__date_start='2000-01-01') <QuerySet [<Transport_owner: Transport_owner object (1)>, <Transport_owner: Transport_owner object (2)>, <Transport_owner: Transport_owner object (3)>, <Transport_owner: Transport_owner object (4)>, <Transport_owner: Transport_owner object (5)>, <Transport_owner: Transport_owner object (6)>]>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"pr3_1/#3","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> License.objects.aggregate(date_start_doc=Min(\"date_start_doc\")) {'date_start_doc': datetime.date(1995, 5, 1)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 >>> Ownership.objects.aggregate(date_start=Max(\"date_start\")) {'date_start': datetime.date(2000, 8, 6)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f >>> Ownership.objects.values(\"id_owner\").annotate(Count(\"id_car\")) <QuerySet [{'id_owner': 1, 'id_car__count': 1}, {'id_owner': 2, 'id_car__count': 1}, {'id_owner': 3, 'id_car__count': 1}, {'id_owner': 4, 'id_car__count': 1}, {'id_owner': 5, 'id_car__count': 1}, {'id_owner': 6, 'id_car__count': 1}] \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 >>> Transport.objects.values(\"brand\").annotate(Count(\"id_car\")) <QuerySet [{'brand': 'Brand3', 'id_car__count': 1}, {'brand': 'Brand4', 'id_car__count': 3}, {'brand': 'Brand5', 'id_car__count': 1}, {'brand': 'Brand6', 'id_car__count': 1}] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c .distinct() >>> sort_by_date = License.objects.all().order_by(\"date_start_doc\") >>> for i in sort_by_date: ... needed_id = i.id_owner.id_owner ... print( Ownership.objects.filter(id_owner__id_owner=needed_id) ) <QuerySet [<Ownership: Ownership object (4)>]> <QuerySet [<Ownership: Ownership object (1)>]> <QuerySet [<Ownership: Ownership object (2)>]> <QuerySet [<Ownership: Ownership object (3)>]> <QuerySet [<Ownership: Ownership object (5)>]> <QuerySet [<Ownership: Ownership object (6)>]>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"}]}