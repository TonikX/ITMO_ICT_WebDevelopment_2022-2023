{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041b\u0438\u043f\u0438\u043d\u043e\u0439 \u041e\u043b\u044c\u0433\u0438 K33421","title":"\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e"},{"location":"#web-","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"#k33421","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041b\u0438\u043f\u0438\u043d\u043e\u0439 \u041e\u043b\u044c\u0433\u0438 K33421"},{"location":"labs/lab1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 server.py import socket udp_sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_DGRAM ) udp_sock . bind (( '' , 9090 )) # Listen for incoming datagrams while ( True ): client_msg , address = udp_sock . recvfrom ( 1024 ) print ( client_msg . decode ()) udp_sock . sendto ( b \"Hello, client\" , address ) client.py import socket udp_sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_DGRAM ) udp_sock . sendto ( b 'Hello, server' , ( \"localhost\" , 9090 )) data , port_address = udp_sock . recvfrom ( 1024 ) print ( data . decode ()) \u0417\u0430\u0434\u0430\u0447\u0430 \u21162. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432. \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. server.py import socket from math import sqrt def solve_eq ( a : float , b : float , c : float ): d = b ** 2 - 4 * a * c return ( - b - sqrt ( d )) / ( 2 * a ), ( - b + sqrt ( d )) / ( 2 * a ) if __name__ == \"__main__\" : sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . bind (( '' , 9090 )) sock . listen ( 1 ) conn , addr = sock . accept () # new socket, client address while True : data = conn . recv ( 1024 ) if not data : break a , b , c = map ( float , data . decode () . split ()) result = solve_eq ( a , b , c ) msg = f ' { result [ 0 ] } { result [ 1 ] } ' . encode () conn . send ( msg ) conn . close () client.py import socket if __name__ == \"__main__\" : sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . connect (( 'localhost' , 9090 )) abc = input () . encode () sock . send ( abc ) data = sock . recv ( 1024 ) print ( data . decode ()) sock . close () \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 server.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . bind (( 'localhost' , 8002 )) s . listen ( 1 ) while True : conn , addr = s . accept () html_page = open ( 'index.html' ) html_content = html_page . read () html_page . close () html_response = 'HTTP/1.0 200 OK \\n ' + html_content conn . sendall ( html_response . encode ( 'utf-8' )) conn . close () #sock.close() client.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . connect (( 'localhost' , 8002 )) data = s . recv ( 1024 ) #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430. print ( data . decode ( 'utf-8' )) s . close () index.html < html > < head > < title > Hello World </ title > </ head > < body > < h1 > Hello World! </ h1 > < p > Welcome to my page. </ p > </ body > </ html > \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 server.py import threading import socket from typing import List host = 'localhost' port = 8000 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () clients : List [ socket . socket ] = [] nicknames : List [ bytes ] = [] def broadcast ( message : bytes ): for client in clients : client . send ( message ) def handle_client ( client ): \"\"\"Getting client message and sending it to chat. In case of error (client disconnect) delete client from chat.\"\"\" while True : try : message = client . recv ( 1024 ) broadcast ( message ) except : # any connection error or value error idx = clients . index ( client ) clients . remove ( idx ) broadcast ( f \" { nicknames [ idx ] } has left the chat.\" . encode ()) nicknames . remove ( idx ) client . close () break def recieve_cons (): while True : print ( \"Server's listening...\" ) client , address = server . accept () print ( f \"Connected with { address } \" ) client . send ( \"Send a nickname\" . encode ()) nickname = client . recv ( 1024 ) nicknames . append ( nickname ) clients . append ( client ) broadcast ( f \" { nickname } joined the chat.\" . encode ()) client . send ( \"You are connected\" . encode ()) thread = threading . Thread ( target = handle_client , args = ( client , )) thread . start () if __name__ == \"__main__\" : recieve_cons () client.py import threading import socket nickname = input ( 'Enter a nickname: ' ) client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( 'localhost' , 8000 )) def recieve_mes (): while True : try : message = client . recv ( 1024 ) . decode () if message == \"Send a nickname\" : client . send ( nickname . encode ()) else : print ( message ) except : print ( 'Error occurred. Disconnect.' ) client . close () break def send_mes (): while True : message = f \" { nickname } : { input ( '' ) } \" . encode () client . send ( message ) thread_recieve = threading . Thread ( target = recieve_mes ) thread_recieve . start () thread_send = threading . Thread ( target = send_mes ) thread_send . start () \u0417\u0430\u0434\u0430\u0447\u0430 \u21165 server.py import socket import sys from typing import Dict , Tuple , List class MyHTTPServer : def __init__ ( self , host , port ): \"\"\" Initializing HTTP server. Creating database for saving records of grades. :param host: Host address. :param port: Free port for server. \"\"\" self . host = host self . port = port self . database : List [ Tuple [ str , str ]] = [] # tcp connection self . _conn = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) def run_server ( self ): \"\"\"Activates HTTP server.\"\"\" self . _conn . bind (( self . host , self . port )) # listen to 1 client. self . _conn . listen ( 1 ) while True : client , address = self . _conn . accept () print ( f \"Connected at { address } \" ) self . client_dialogue ( client ) def client_dialogue ( self , client : socket . socket ): \"\"\"Handling client request and sending response. \"\"\" data = client . recv ( 4096 ) . decode () if data is None : return None response = self . handle_request ( data ) client . send ( response . encode ()) @staticmethod def parse_request ( data : str ) -> Tuple [ str , str ]: \"\"\"Get request info.\"\"\" data = data . replace ( \" \\r \" , \"\" ) try : # get request from first line req = data [: data . index ( \" \\n \" )] except ValueError : # when we don't send anything return data , \"\" if \" \\n\\n \" in data : body = data [ data . index ( \" \\n \" ) + 1 :] . split ( \" \\n\\n \" )[ 1 ] else : body = \"\" return req , body @staticmethod def parse_body ( body : str ) -> Dict [ str , str ]: \"\"\" Parse body args. :param body: body of request :return: Dict of args. \"\"\" body_dict : Dict [ str , str ] = {} for elem in body . split ( '&' ): head_name = elem [: elem . index ( '=' )] value = elem [ elem . index ( '=' ) + 1 :] . replace ( '+' , ' ' ) body_dict [ head_name ] = value return body_dict def handle_request ( self , data : str ) -> str : \"\"\"Handling user's request and send a page. \"\"\" req , body = self . parse_request ( data ) method , url , smt = req . split () response = f \" { smt } 200 OK \\n\\n \" if method == 'GET' and url == '/index' : with open ( 'index.html' ) as f : response += f . read () elif method == 'GET' and url == '/table' : with open ( 'grading.html' ) as f : lines = f . readlines () table = [ f \"<tr><td> { s } </td><td> { g } </td></tr>\" for s , g in self . database ] response += ' \\n ' . join ( lines [: 8 ]) + ' \\n ' . join ( table ) + ' \\n ' . join ( lines [ 8 :]) elif method == 'POST' and url == '/send' : parsed_body = self . parse_body ( body ) self . database . append (( parsed_body [ 'subject' ], parsed_body [ 'grade' ])) return response else : return f \" { smt } 400 \\n\\n Bad request \\n\\n \" return response if __name__ == '__main__' : host = \"localhost\" port = 8005 serv = MyHTTPServer ( host , port ) serv . run_server () grading.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Task 5 </ title > </ head > < body > < table border = \"1\" > </ table > < a href = \"/index\" > Index </ a > </ body > </ html > index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Task 5 </ title > < script > function submitForm () { let http = new XMLHttpRequest (); http . open ( \"POST\" , \"http://127.0.0.1:8005/send\" , true ); http . setRequestHeader ( \"Content-type\" , \"application/x-www-form-urlencoded\" ); let args = \"grade=\" + document . getElementById ( \"grade\" ). value + \"&subject=\" + document . getElementById ( \"subject\" ). value ; http . send ( args ); } </ script > </ head > < body > < form method = \"post\" action = \"#\" onsubmit = \"submitForm();return false;\" > < label for = \"subject\" > Subj </ label > < input type = \"text\" name = \"subject\" id = \"subject\" /> < label for = \"grade\" > Grade </ label > < input type = \"number\" name = \"grade\" id = \"grade\" /> < input type = \"submit\" > </ form > < a href = \"/table\" > Grading table </ a > </ body > </ html >","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"labs/lab1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"labs/lab1/#no1_1","text":"server.py import socket udp_sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_DGRAM ) udp_sock . bind (( '' , 9090 )) # Listen for incoming datagrams while ( True ): client_msg , address = udp_sock . recvfrom ( 1024 ) print ( client_msg . decode ()) udp_sock . sendto ( b \"Hello, client\" , address ) client.py import socket udp_sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_DGRAM ) udp_sock . sendto ( b 'Hello, server' , ( \"localhost\" , 9090 )) data , port_address = udp_sock . recvfrom ( 1024 ) print ( data . decode ())","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"labs/lab1/#no2","text":"server.py import socket from math import sqrt def solve_eq ( a : float , b : float , c : float ): d = b ** 2 - 4 * a * c return ( - b - sqrt ( d )) / ( 2 * a ), ( - b + sqrt ( d )) / ( 2 * a ) if __name__ == \"__main__\" : sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . bind (( '' , 9090 )) sock . listen ( 1 ) conn , addr = sock . accept () # new socket, client address while True : data = conn . recv ( 1024 ) if not data : break a , b , c = map ( float , data . decode () . split ()) result = solve_eq ( a , b , c ) msg = f ' { result [ 0 ] } { result [ 1 ] } ' . encode () conn . send ( msg ) conn . close () client.py import socket if __name__ == \"__main__\" : sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . connect (( 'localhost' , 9090 )) abc = input () . encode () sock . send ( abc ) data = sock . recv ( 1024 ) print ( data . decode ()) sock . close ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432. \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f."},{"location":"labs/lab1/#no3","text":"server.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . bind (( 'localhost' , 8002 )) s . listen ( 1 ) while True : conn , addr = s . accept () html_page = open ( 'index.html' ) html_content = html_page . read () html_page . close () html_response = 'HTTP/1.0 200 OK \\n ' + html_content conn . sendall ( html_response . encode ( 'utf-8' )) conn . close () #sock.close() client.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . connect (( 'localhost' , 8002 )) data = s . recv ( 1024 ) #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430. print ( data . decode ( 'utf-8' )) s . close () index.html < html > < head > < title > Hello World </ title > </ head > < body > < h1 > Hello World! </ h1 > < p > Welcome to my page. </ p > </ body > </ html >","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"labs/lab1/#no4","text":"server.py import threading import socket from typing import List host = 'localhost' port = 8000 server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server . bind (( host , port )) server . listen () clients : List [ socket . socket ] = [] nicknames : List [ bytes ] = [] def broadcast ( message : bytes ): for client in clients : client . send ( message ) def handle_client ( client ): \"\"\"Getting client message and sending it to chat. In case of error (client disconnect) delete client from chat.\"\"\" while True : try : message = client . recv ( 1024 ) broadcast ( message ) except : # any connection error or value error idx = clients . index ( client ) clients . remove ( idx ) broadcast ( f \" { nicknames [ idx ] } has left the chat.\" . encode ()) nicknames . remove ( idx ) client . close () break def recieve_cons (): while True : print ( \"Server's listening...\" ) client , address = server . accept () print ( f \"Connected with { address } \" ) client . send ( \"Send a nickname\" . encode ()) nickname = client . recv ( 1024 ) nicknames . append ( nickname ) clients . append ( client ) broadcast ( f \" { nickname } joined the chat.\" . encode ()) client . send ( \"You are connected\" . encode ()) thread = threading . Thread ( target = handle_client , args = ( client , )) thread . start () if __name__ == \"__main__\" : recieve_cons () client.py import threading import socket nickname = input ( 'Enter a nickname: ' ) client = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) client . connect (( 'localhost' , 8000 )) def recieve_mes (): while True : try : message = client . recv ( 1024 ) . decode () if message == \"Send a nickname\" : client . send ( nickname . encode ()) else : print ( message ) except : print ( 'Error occurred. Disconnect.' ) client . close () break def send_mes (): while True : message = f \" { nickname } : { input ( '' ) } \" . encode () client . send ( message ) thread_recieve = threading . Thread ( target = recieve_mes ) thread_recieve . start () thread_send = threading . Thread ( target = send_mes ) thread_send . start ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"labs/lab1/#no5","text":"server.py import socket import sys from typing import Dict , Tuple , List class MyHTTPServer : def __init__ ( self , host , port ): \"\"\" Initializing HTTP server. Creating database for saving records of grades. :param host: Host address. :param port: Free port for server. \"\"\" self . host = host self . port = port self . database : List [ Tuple [ str , str ]] = [] # tcp connection self . _conn = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) def run_server ( self ): \"\"\"Activates HTTP server.\"\"\" self . _conn . bind (( self . host , self . port )) # listen to 1 client. self . _conn . listen ( 1 ) while True : client , address = self . _conn . accept () print ( f \"Connected at { address } \" ) self . client_dialogue ( client ) def client_dialogue ( self , client : socket . socket ): \"\"\"Handling client request and sending response. \"\"\" data = client . recv ( 4096 ) . decode () if data is None : return None response = self . handle_request ( data ) client . send ( response . encode ()) @staticmethod def parse_request ( data : str ) -> Tuple [ str , str ]: \"\"\"Get request info.\"\"\" data = data . replace ( \" \\r \" , \"\" ) try : # get request from first line req = data [: data . index ( \" \\n \" )] except ValueError : # when we don't send anything return data , \"\" if \" \\n\\n \" in data : body = data [ data . index ( \" \\n \" ) + 1 :] . split ( \" \\n\\n \" )[ 1 ] else : body = \"\" return req , body @staticmethod def parse_body ( body : str ) -> Dict [ str , str ]: \"\"\" Parse body args. :param body: body of request :return: Dict of args. \"\"\" body_dict : Dict [ str , str ] = {} for elem in body . split ( '&' ): head_name = elem [: elem . index ( '=' )] value = elem [ elem . index ( '=' ) + 1 :] . replace ( '+' , ' ' ) body_dict [ head_name ] = value return body_dict def handle_request ( self , data : str ) -> str : \"\"\"Handling user's request and send a page. \"\"\" req , body = self . parse_request ( data ) method , url , smt = req . split () response = f \" { smt } 200 OK \\n\\n \" if method == 'GET' and url == '/index' : with open ( 'index.html' ) as f : response += f . read () elif method == 'GET' and url == '/table' : with open ( 'grading.html' ) as f : lines = f . readlines () table = [ f \"<tr><td> { s } </td><td> { g } </td></tr>\" for s , g in self . database ] response += ' \\n ' . join ( lines [: 8 ]) + ' \\n ' . join ( table ) + ' \\n ' . join ( lines [ 8 :]) elif method == 'POST' and url == '/send' : parsed_body = self . parse_body ( body ) self . database . append (( parsed_body [ 'subject' ], parsed_body [ 'grade' ])) return response else : return f \" { smt } 400 \\n\\n Bad request \\n\\n \" return response if __name__ == '__main__' : host = \"localhost\" port = 8005 serv = MyHTTPServer ( host , port ) serv . run_server () grading.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Task 5 </ title > </ head > < body > < table border = \"1\" > </ table > < a href = \"/index\" > Index </ a > </ body > </ html > index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Task 5 </ title > < script > function submitForm () { let http = new XMLHttpRequest (); http . open ( \"POST\" , \"http://127.0.0.1:8005/send\" , true ); http . setRequestHeader ( \"Content-type\" , \"application/x-www-form-urlencoded\" ); let args = \"grade=\" + document . getElementById ( \"grade\" ). value + \"&subject=\" + document . getElementById ( \"subject\" ). value ; http . send ( args ); } </ script > </ head > < body > < form method = \"post\" action = \"#\" onsubmit = \"submitForm();return false;\" > < label for = \"subject\" > Subj </ label > < input type = \"text\" name = \"subject\" id = \"subject\" /> < label for = \"grade\" > Grade </ label > < input type = \"number\" name = \"grade\" id = \"grade\" /> < input type = \"submit\" > </ form > < a href = \"/table\" > Grading table </ a > </ body > </ html >","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21165"},{"location":"labs/lab2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0422\u0430\u0431\u043b\u043e \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0422\u0430\u0431\u043b\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a: \u0424\u0418\u041e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043e\u043f\u044b\u0442 \u0438 \u043a\u043b\u0430\u0441\u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438. models.py from datetime import datetime from django.db import models from django.contrib.auth.models import User , AbstractUser from django.core.validators import MinValueValidator , MaxValueValidator # from race_winners_project.race_winners_project.settings import AUTH_USER_MODEL # Create your models here. class Racer ( AbstractUser ): first_name = models . CharField ( \"\u0418\u043c\u044f\" , max_length = 30 ) last_name = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\" , max_length = 30 ) fathername = models . CharField ( \"\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e\" , null = True , blank = True , max_length = 30 ) team_name = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\" , null = True , blank = True , max_length = 30 ) user_descr = models . TextField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\" , null = True , blank = True ) car_descr = models . TextField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0430\u0448\u0438\u043d\u044b\" , null = True , blank = True ) experience = models . IntegerField ( \"\u041e\u043f\u044b\u0442\" , null = True , blank = True ) USER_TYPE = [ ( 'A' , '\u0412\u044b\u0441\u0448\u0438\u0439' ), ( 'B' , '\u0412\u044b\u0441\u043e\u043a\u0438\u0439' ), ( 'C' , '\u0418\u043d\u043e\u0435' )] type_user = models . CharField ( \"\u041a\u043b\u0430\u0441\u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\" , max_length = 30 , choices = USER_TYPE , default = 'C' ) username = models . CharField ( \"\u041b\u043e\u0433\u0438\u043d\" , primary_key = True , max_length = 50 ) REQUIRED_FIELDS = [ 'first_name' , 'last_name' ] # class Meta(AbstractUser.Meta): # swappable = 'AUTH_USER_MODEL' def __str__ ( self ): return f \" { self . last_name } { self . first_name } \" class Race ( models . Model ): num_race = models . AutoField ( \"\u041d\u043e\u043c\u0435\u0440 \u0433\u043e\u043d\u043a\u0438\" , primary_key = True ) name_race = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0433\u043e\u043d\u043a\u0438\" , max_length = 50 ) date_race = models . DateTimeField ( \"\u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0433\u043e\u043d\u043a\u0438\" , unique = True ) place_race = models . CharField ( \"\u041c\u0435\u0441\u0442\u043e \u0433\u043e\u043d\u043a\u0438\" , max_length = 50 ) first_place = models . ForeignKey ( 'Racer' , on_delete = models . CASCADE , null = True , blank = True ) second_place = models . ForeignKey ( 'Racer' , on_delete = models . CASCADE , null = True , blank = True , related_name = 'sec_place' ) third_place = models . ForeignKey ( 'Racer' , on_delete = models . CASCADE , null = True , blank = True , related_name = 'th_pace' ) def __str__ ( self ): return f \"\u0413\u043e\u043d\u043a\u0430 \u2116 { self . num_race } , { self . name_race } \" class RegistrationRace ( models . Model ): num_reg = models . AutoField ( \"\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\" , primary_key = True ) num_race_reg = models . ForeignKey ( Race , on_delete = models . CASCADE ) num_user_reg = models . ForeignKey ( 'Racer' , on_delete = models . CASCADE ) def __str__ ( self ): return ( f \" { self . num_race_reg } , user: { self . num_user_reg } \" ) class Comment ( models . Model ): id_review = models . AutoField ( primary_key = True ) num_race = models . ForeignKey ( Race , on_delete = models . CASCADE ) time_race = models . DateTimeField ( \"\u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0435\u0437\u0434\u0430\" ) comment_time = models . DateTimeField ( default = datetime . now (), blank = True ) COMMENT_TYPES = [( 'RACE_Q' , '\u0412\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0435' ), ( 'COLLAB_Q' , '\u0412\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435' ), ( 'OTHER' , '\u0418\u043d\u043e\u0435' )] rate = models . IntegerField ( \"\u041f\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\" , default = 10 , validators = [ MaxValueValidator ( 10 ), MinValueValidator ( 1 )], null = True , blank = True ) username = models . ForeignKey ( 'Racer' , on_delete = models . CASCADE ) type_comment = models . CharField ( \"\u0422\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\" , max_length = 30 , choices = COMMENT_TYPES ) text = models . TextField ( \"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a \u0433\u043e\u043d\u043a\u0435\" ) def save ( self , * args , ** kwargs ): self . time_race = self . num_race . date_race super ( Comment , self ) . save ( * args , ** kwargs ) views.py from django.http import Http404 from django.shortcuts import render from django.urls import reverse from django.views.generic import ListView , UpdateView , CreateView , DeleteView from django.contrib.auth import authenticate , login , logout from django.contrib.auth.decorators import login_required from django.contrib.auth.mixins import LoginRequiredMixin from django.shortcuts import render , redirect from django.db import IntegrityError from .forms import MakeComment from .models import * # Create your views here. def main_page ( request ): return render ( request , 'main.html' ) def register ( request ): if request . method == \"POST\" : username = request . POST [ \"username\" ] password = request . POST [ \"password\" ] email = request . POST [ \"email\" ] first_name = request . POST . get ( \"first_name\" , 'NaN' ) team_name = request . POST . get ( \"team_name\" , 'NaN' ) fathername = request . POST . get ( \"fathername\" , 'NaN' ) experience = request . POST . get ( \"experience\" , 'NaN' ) last_name = request . POST . get ( \"last_name\" , 'NaN' ) confirmation = request . POST [ \"confirmation\" ] if password != confirmation : return render ( request , \"register_django.html\" , { \"message\" : \"passwords do not match\" }) try : if experience == '' : experience = 0 student = Racer . objects . create_user ( username , email , password , fathername = fathername , team_name = team_name , experience = experience ) student . first_name = first_name student . last_name = last_name student . save () # homeworks = Homework.objects.all() # for homework in homeworks: # assignment = Assignment(student=student, homework=homework) # assignment.save() except IntegrityError : return render ( request , \"register_django.html\" , { \"message\" : \"username already taken\" }) login ( request , student ) return redirect ( reverse ( \"races\" )) else : return render ( request , \"register_django.html\" ) def log_in ( request ): if request . method == \"POST\" : username = request . POST [ 'username' ] password = request . POST [ 'password' ] user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( reverse ( 'races' )) else : error_text = 'invalid credentials' return render ( request , 'login_django.html' , locals ()) # @login_required # def log_out(request): # logout(request) # return redirect(reverse('logout')) # class RegisterUser ( CreateView ): model = Racer fields = [ 'username' , 'first_name' , 'last_name' , 'fathername' , 'team_name' , 'user_descr' , 'car_descr' , 'experience' , 'type_user' ] success_url = '/user_list/' template_name = \"user_register.html\" class UserList ( ListView ): # list view model = Racer template_name = 'user_list.html' class RaceList ( ListView ): # list view model = Race template_name = 'race_list.html' def get_race ( request , id_race : int ): # https:..race/1/ try : race = Race . objects . get ( pk = id_race ) except Race . DoesNotExist : raise Http404 ( \"Race does not exist.\" ) return render ( request , 'race.html' , { 'race' : race }) class RegRaceList ( ListView ): # list view model = RegistrationRace template_name = 'reg_race_list.html' def reg_race_list_vies ( request ): context = { 'reg_races' : RegistrationRace . objects . filter ( num_user_reg = request . user ) } print ( request . user ) print ( '--' , context ) return render ( request , 'reg_race_list.html' , context ) class RegRaceCreate ( CreateView ): model = RegistrationRace template_name = 'reg_race_form.html' fields = [ 'num_race_reg' ] success_url = '/reg_race/list/' def form_valid ( self , form ): form . instance . num_user_reg = self . request . user return super () . form_valid ( form ) class RegRaceDelete ( DeleteView ): model = RegistrationRace template_name = 'reg_race_delete.html' success_url = '/reg_race/list/' class RegRaceUpdate ( UpdateView ): model = RegistrationRace fields = [ 'num_race_reg' ] template_name = 'reg_race_update.html' success_url = '/reg_race/list/' @login_required def make_comment ( request ): data = {} form = MakeComment ( request . POST or None ) user_racer = None if request . user . is_authenticated : user_racer = request . user # request.POST['username'] = username else : return None if form . is_valid (): bet = form . save ( commit = False ) # the bet isn't saved just yet bet . username = user_racer # you add the user here bet . save () data [ 'form' ] = form return render ( request , 'comment_create.html' , data ) def all_comments ( request ): list_comments = { \"object_list\" : Comment . objects . all ()} return render ( request , 'comments_list.html' , list_comments ) racers_app/urls.py from django.urls import path from .views import * from django.contrib.auth import views as auth_views urlpatterns = [ # path('registration/', RegisterUser.as_view(), name='reg'), path ( 'registration/' , register , name = 'reg' ), path ( 'user_list/' , UserList . as_view ()), path ( 'race/list/' , RaceList . as_view (), name = 'races' ), path ( 'race/<int:id_race>' , get_race ), path ( 'main/' , main_page , name = 'main' ), path ( 'reg_race/list/' , reg_race_list_vies ), path ( 'reg_race/' , login_required ( RegRaceCreate . as_view ()), name = 'reg-race' ), path ( 'reg_race/<int:pk>/update/' , RegRaceUpdate . as_view ()), path ( 'reg_race/<int:pk>/delete/' , RegRaceDelete . as_view ()), path ( 'comments/create/' , make_comment , name = 'comment-create' ), path ( 'comments/list/' , all_comments ), path ( 'login/' , log_in , name = 'login' ), path ( 'logout/' , auth_views . LogoutView . as_view ( template_name = 'logout_django.html' ), name = 'logout' ) ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"labs/lab2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"labs/lab2/#_1","text":"\u0422\u0430\u0431\u043b\u043e \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0422\u0430\u0431\u043b\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a: \u0424\u0418\u041e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043e\u043f\u044b\u0442 \u0438 \u043a\u043b\u0430\u0441\u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"labs/lab2/#modelspy","text":"from datetime import datetime from django.db import models from django.contrib.auth.models import User , AbstractUser from django.core.validators import MinValueValidator , MaxValueValidator # from race_winners_project.race_winners_project.settings import AUTH_USER_MODEL # Create your models here. class Racer ( AbstractUser ): first_name = models . CharField ( \"\u0418\u043c\u044f\" , max_length = 30 ) last_name = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\" , max_length = 30 ) fathername = models . CharField ( \"\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e\" , null = True , blank = True , max_length = 30 ) team_name = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\" , null = True , blank = True , max_length = 30 ) user_descr = models . TextField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\" , null = True , blank = True ) car_descr = models . TextField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0430\u0448\u0438\u043d\u044b\" , null = True , blank = True ) experience = models . IntegerField ( \"\u041e\u043f\u044b\u0442\" , null = True , blank = True ) USER_TYPE = [ ( 'A' , '\u0412\u044b\u0441\u0448\u0438\u0439' ), ( 'B' , '\u0412\u044b\u0441\u043e\u043a\u0438\u0439' ), ( 'C' , '\u0418\u043d\u043e\u0435' )] type_user = models . CharField ( \"\u041a\u043b\u0430\u0441\u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\" , max_length = 30 , choices = USER_TYPE , default = 'C' ) username = models . CharField ( \"\u041b\u043e\u0433\u0438\u043d\" , primary_key = True , max_length = 50 ) REQUIRED_FIELDS = [ 'first_name' , 'last_name' ] # class Meta(AbstractUser.Meta): # swappable = 'AUTH_USER_MODEL' def __str__ ( self ): return f \" { self . last_name } { self . first_name } \" class Race ( models . Model ): num_race = models . AutoField ( \"\u041d\u043e\u043c\u0435\u0440 \u0433\u043e\u043d\u043a\u0438\" , primary_key = True ) name_race = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0433\u043e\u043d\u043a\u0438\" , max_length = 50 ) date_race = models . DateTimeField ( \"\u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0433\u043e\u043d\u043a\u0438\" , unique = True ) place_race = models . CharField ( \"\u041c\u0435\u0441\u0442\u043e \u0433\u043e\u043d\u043a\u0438\" , max_length = 50 ) first_place = models . ForeignKey ( 'Racer' , on_delete = models . CASCADE , null = True , blank = True ) second_place = models . ForeignKey ( 'Racer' , on_delete = models . CASCADE , null = True , blank = True , related_name = 'sec_place' ) third_place = models . ForeignKey ( 'Racer' , on_delete = models . CASCADE , null = True , blank = True , related_name = 'th_pace' ) def __str__ ( self ): return f \"\u0413\u043e\u043d\u043a\u0430 \u2116 { self . num_race } , { self . name_race } \" class RegistrationRace ( models . Model ): num_reg = models . AutoField ( \"\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\" , primary_key = True ) num_race_reg = models . ForeignKey ( Race , on_delete = models . CASCADE ) num_user_reg = models . ForeignKey ( 'Racer' , on_delete = models . CASCADE ) def __str__ ( self ): return ( f \" { self . num_race_reg } , user: { self . num_user_reg } \" ) class Comment ( models . Model ): id_review = models . AutoField ( primary_key = True ) num_race = models . ForeignKey ( Race , on_delete = models . CASCADE ) time_race = models . DateTimeField ( \"\u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0435\u0437\u0434\u0430\" ) comment_time = models . DateTimeField ( default = datetime . now (), blank = True ) COMMENT_TYPES = [( 'RACE_Q' , '\u0412\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0435' ), ( 'COLLAB_Q' , '\u0412\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435' ), ( 'OTHER' , '\u0418\u043d\u043e\u0435' )] rate = models . IntegerField ( \"\u041f\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\" , default = 10 , validators = [ MaxValueValidator ( 10 ), MinValueValidator ( 1 )], null = True , blank = True ) username = models . ForeignKey ( 'Racer' , on_delete = models . CASCADE ) type_comment = models . CharField ( \"\u0422\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\" , max_length = 30 , choices = COMMENT_TYPES ) text = models . TextField ( \"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a \u0433\u043e\u043d\u043a\u0435\" ) def save ( self , * args , ** kwargs ): self . time_race = self . num_race . date_race super ( Comment , self ) . save ( * args , ** kwargs )","title":"models.py"},{"location":"labs/lab2/#viewspy","text":"from django.http import Http404 from django.shortcuts import render from django.urls import reverse from django.views.generic import ListView , UpdateView , CreateView , DeleteView from django.contrib.auth import authenticate , login , logout from django.contrib.auth.decorators import login_required from django.contrib.auth.mixins import LoginRequiredMixin from django.shortcuts import render , redirect from django.db import IntegrityError from .forms import MakeComment from .models import * # Create your views here. def main_page ( request ): return render ( request , 'main.html' ) def register ( request ): if request . method == \"POST\" : username = request . POST [ \"username\" ] password = request . POST [ \"password\" ] email = request . POST [ \"email\" ] first_name = request . POST . get ( \"first_name\" , 'NaN' ) team_name = request . POST . get ( \"team_name\" , 'NaN' ) fathername = request . POST . get ( \"fathername\" , 'NaN' ) experience = request . POST . get ( \"experience\" , 'NaN' ) last_name = request . POST . get ( \"last_name\" , 'NaN' ) confirmation = request . POST [ \"confirmation\" ] if password != confirmation : return render ( request , \"register_django.html\" , { \"message\" : \"passwords do not match\" }) try : if experience == '' : experience = 0 student = Racer . objects . create_user ( username , email , password , fathername = fathername , team_name = team_name , experience = experience ) student . first_name = first_name student . last_name = last_name student . save () # homeworks = Homework.objects.all() # for homework in homeworks: # assignment = Assignment(student=student, homework=homework) # assignment.save() except IntegrityError : return render ( request , \"register_django.html\" , { \"message\" : \"username already taken\" }) login ( request , student ) return redirect ( reverse ( \"races\" )) else : return render ( request , \"register_django.html\" ) def log_in ( request ): if request . method == \"POST\" : username = request . POST [ 'username' ] password = request . POST [ 'password' ] user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( reverse ( 'races' )) else : error_text = 'invalid credentials' return render ( request , 'login_django.html' , locals ()) # @login_required # def log_out(request): # logout(request) # return redirect(reverse('logout')) # class RegisterUser ( CreateView ): model = Racer fields = [ 'username' , 'first_name' , 'last_name' , 'fathername' , 'team_name' , 'user_descr' , 'car_descr' , 'experience' , 'type_user' ] success_url = '/user_list/' template_name = \"user_register.html\" class UserList ( ListView ): # list view model = Racer template_name = 'user_list.html' class RaceList ( ListView ): # list view model = Race template_name = 'race_list.html' def get_race ( request , id_race : int ): # https:..race/1/ try : race = Race . objects . get ( pk = id_race ) except Race . DoesNotExist : raise Http404 ( \"Race does not exist.\" ) return render ( request , 'race.html' , { 'race' : race }) class RegRaceList ( ListView ): # list view model = RegistrationRace template_name = 'reg_race_list.html' def reg_race_list_vies ( request ): context = { 'reg_races' : RegistrationRace . objects . filter ( num_user_reg = request . user ) } print ( request . user ) print ( '--' , context ) return render ( request , 'reg_race_list.html' , context ) class RegRaceCreate ( CreateView ): model = RegistrationRace template_name = 'reg_race_form.html' fields = [ 'num_race_reg' ] success_url = '/reg_race/list/' def form_valid ( self , form ): form . instance . num_user_reg = self . request . user return super () . form_valid ( form ) class RegRaceDelete ( DeleteView ): model = RegistrationRace template_name = 'reg_race_delete.html' success_url = '/reg_race/list/' class RegRaceUpdate ( UpdateView ): model = RegistrationRace fields = [ 'num_race_reg' ] template_name = 'reg_race_update.html' success_url = '/reg_race/list/' @login_required def make_comment ( request ): data = {} form = MakeComment ( request . POST or None ) user_racer = None if request . user . is_authenticated : user_racer = request . user # request.POST['username'] = username else : return None if form . is_valid (): bet = form . save ( commit = False ) # the bet isn't saved just yet bet . username = user_racer # you add the user here bet . save () data [ 'form' ] = form return render ( request , 'comment_create.html' , data ) def all_comments ( request ): list_comments = { \"object_list\" : Comment . objects . all ()} return render ( request , 'comments_list.html' , list_comments )","title":"views.py"},{"location":"labs/lab2/#racers_appurlspy","text":"from django.urls import path from .views import * from django.contrib.auth import views as auth_views urlpatterns = [ # path('registration/', RegisterUser.as_view(), name='reg'), path ( 'registration/' , register , name = 'reg' ), path ( 'user_list/' , UserList . as_view ()), path ( 'race/list/' , RaceList . as_view (), name = 'races' ), path ( 'race/<int:id_race>' , get_race ), path ( 'main/' , main_page , name = 'main' ), path ( 'reg_race/list/' , reg_race_list_vies ), path ( 'reg_race/' , login_required ( RegRaceCreate . as_view ()), name = 'reg-race' ), path ( 'reg_race/<int:pk>/update/' , RegRaceUpdate . as_view ()), path ( 'reg_race/<int:pk>/delete/' , RegRaceDelete . as_view ()), path ( 'comments/create/' , make_comment , name = 'comment-create' ), path ( 'comments/list/' , all_comments ), path ( 'login/' , log_in , name = 'login' ), path ( 'logout/' , auth_views . LogoutView . as_view ( template_name = 'logout_django.html' ), name = 'logout' ) ]","title":"racers_app/urls.py"},{"location":"labs/lab3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b lib/ booking/create/ - \u0437\u0430\u043f\u0438\u0441\u044c \u043a\u043d\u0438\u0433\u0438 \u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f 'readers/list/' - \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0438\u0445 \u043a\u043d\u0438\u0433 \u043d\u0430 \u0440\u0443\u043a\u0430\u0445 'books/list/' - \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043d\u0438\u0433 'instances/list/' - \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 'halls/list/' - \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043b\u043e\u0432 \u0441 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0438 \u043a\u043d\u0438\u0433\u0430\u043c\u0438 'readers/create/' - \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f 'books/create/' - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 'instance/create/' - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u043d\u0441\u0442\u0430\u043d\u0442\u0441\u0430 \u043a\u043d\u0438\u043d\u0438 'instance_place/create/' - \u0437\u0430\u043f\u0438\u0441\u044c \u043a\u043d\u0438\u0433\u0438 \u043d\u0430 \u043c\u0435\u0441\u0442\u043e \u0422\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u044d\u043d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0435 \u043c\u0435\u043d\u044f\u0442\u044c \u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438: - 'booking/ /update/' - 'reader_place/ /update/' - 'instance_place/ /update/' - 'book/ /update/' - 'instance/ /update/' - 'reader/ /update/'","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"labs/lab3/#no3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"labs/lab3/#_1","text":"\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"labs/lab3/#_2","text":"","title":"\u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b"},{"location":"labs/lab3/#_3","text":"lib/ booking/create/ - \u0437\u0430\u043f\u0438\u0441\u044c \u043a\u043d\u0438\u0433\u0438 \u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f 'readers/list/' - \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0438\u0445 \u043a\u043d\u0438\u0433 \u043d\u0430 \u0440\u0443\u043a\u0430\u0445 'books/list/' - \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043d\u0438\u0433 'instances/list/' - \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 'halls/list/' - \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043b\u043e\u0432 \u0441 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0438 \u043a\u043d\u0438\u0433\u0430\u043c\u0438 'readers/create/' - \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f 'books/create/' - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 'instance/create/' - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u043d\u0441\u0442\u0430\u043d\u0442\u0441\u0430 \u043a\u043d\u0438\u043d\u0438 'instance_place/create/' - \u0437\u0430\u043f\u0438\u0441\u044c \u043a\u043d\u0438\u0433\u0438 \u043d\u0430 \u043c\u0435\u0441\u0442\u043e \u0422\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u044d\u043d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0435 \u043c\u0435\u043d\u044f\u0442\u044c \u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438: - 'booking/ /update/' - 'reader_place/ /update/' - 'instance_place/ /update/' - 'book/ /update/' - 'instance/ /update/' - 'reader/ /update/'","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b"},{"location":"labs/lab4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164 \u0417\u0430\u0434\u0430\u0447\u0430 \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043f\u043e\u0440\u0442\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u044e\u0437\u0435\u0440\u0430 \u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043d\u0438\u0433 \u0412\u0437\u044f\u0442\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0412\u0437\u044f\u0442\u0438\u0435 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0435\u0441\u043b\u0438 \u043a\u0442\u043e-\u0442\u043e \u0443\u0436\u0435 \u0447\u0438\u0442\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u0415\u0441\u043b\u0438 \u0435\u0433\u043e \u0447\u0438\u0442\u0430\u0435\u0442\u0435 \u0412\u044b, \u0442\u043e \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443. \u0412\u043e\u0437\u0432\u0440\u0430\u0442 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u041b\u043e\u0433\u0430\u0443\u0442","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"labs/lab4/#no4","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"labs/lab4/#_1","text":"\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","title":"\u0417\u0430\u0434\u0430\u0447\u0430"},{"location":"labs/lab4/#_2","text":"","title":"\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b"},{"location":"labs/lab4/#_3","text":"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043f\u043e\u0440\u0442\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438"},{"location":"labs/lab4/#_4","text":"","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u044e\u0437\u0435\u0440\u0430"},{"location":"labs/lab4/#_5","text":"","title":"\u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442"},{"location":"labs/lab4/#_6","text":"","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"labs/lab4/#_7","text":"","title":"\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043d\u0438\u0433"},{"location":"labs/lab4/#_8","text":"\u0412\u0437\u044f\u0442\u0438\u0435 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0435\u0441\u043b\u0438 \u043a\u0442\u043e-\u0442\u043e \u0443\u0436\u0435 \u0447\u0438\u0442\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u0415\u0441\u043b\u0438 \u0435\u0433\u043e \u0447\u0438\u0442\u0430\u0435\u0442\u0435 \u0412\u044b, \u0442\u043e \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443.","title":"\u0412\u0437\u044f\u0442\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438"},{"location":"labs/lab4/#_9","text":"","title":"\u0412\u043e\u0437\u0432\u0440\u0430\u0442 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443"},{"location":"labs/lab4/#_10","text":"","title":"\u041b\u043e\u0433\u0430\u0443\u0442"},{"location":"labs/practical_work3/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0417\u0430\u043f\u0440\u043e\u0441 1 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): >>> Auto . objects . filter ( mark = \"Toyota\" ) < QuerySet [ < Auto : Toyota , T0008 > , < Auto : Toyota , T009 > ] > \u0417\u0430\u043f\u0440\u043e\u0441 2 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): >>> Owner . objects . filter ( first_name = \"Maria\" ) < QuerySet [ < Owner : maria > , < Owner : Maria_Drobisheva > ] > \u0417\u0430\u043f\u0440\u043e\u0441 3 \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): >>> License . objects . get ( owner_id = Owner . objects . get ( id = 1 )) < License : License object ( 1 ) > \u0417\u0430\u043f\u0440\u043e\u0441 4 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): Owner . objects . filter ( owner__auto_id__color = 'black' ) < QuerySet [ < Owner : Olga > , < Owner : Roman > , < Owner : Olga > ] > \u0417\u0430\u043f\u0440\u043e\u0441 5 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): >>> Owner . objects . filter ( owner__date_start__gte = \"2022-05-01\" ) < QuerySet [ < Owner : Olga > , < Owner : Roman > , < Owner : Egor > , < Owner : fluff > , < Owner : maria > , < Owner : Olga > ] > \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0417\u0430\u043f\u0440\u043e\u0441 1 \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> License . objects . aggregate ( date_of_license = Min ( \"date_get\" )) { 'date_of_license' : datetime . date ( 2022 , 10 , 2 )} \u0417\u0430\u043f\u0440\u043e\u0441 2 \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: >>> Owning . objects . aggregate ( start_date = Max ( \"date_start\" )) { 'start_date' : datetime . date ( 2022 , 12 , 5 )} \u0417\u0430\u043f\u0440\u043e\u0441 3 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: >>> Owning . objects . values ( \"owner_auto\" ) . annotate ( Count ( \"auto_id\" )) < QuerySet [{ 'owner_auto' : 1 , 'auto_id__count' : 2 }, { 'owner_auto' : 2 , 'auto_id__count' : 1 }, { 'owner_auto' : 3 , 'auto_id__count' : 1 }, { 'owner_auto' : 5 , 'auto_id__count' : 1 }, { 'owner_auto' : 6 , 'auto_id__count' : 1 }] > \u0417\u0430\u043f\u0440\u043e\u0441 4 \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: < QuerySet [{ 'mark' : 'A' , 'id__count' : 5 }, { 'mark' : 'Toyota' , 'id__count' : 2 }] > \u0417\u0430\u043f\u0440\u043e\u0441 5 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> License . objects . values ( \"owner_id\" ) . order_by ( \"date_get\" ) < QuerySet [{ 'owner_id' : 1 }, { 'owner_id' : 2 }] >","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"labs/practical_work3/#no3","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"labs/practical_work3/#32","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e:","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.2"},{"location":"labs/practical_work3/#1","text":"\u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): >>> Auto . objects . filter ( mark = \"Toyota\" ) < QuerySet [ < Auto : Toyota , T0008 > , < Auto : Toyota , T009 > ] >","title":"\u0417\u0430\u043f\u0440\u043e\u0441 1"},{"location":"labs/practical_work3/#2","text":"\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): >>> Owner . objects . filter ( first_name = \"Maria\" ) < QuerySet [ < Owner : maria > , < Owner : Maria_Drobisheva > ] >","title":"\u0417\u0430\u043f\u0440\u043e\u0441 2"},{"location":"labs/practical_work3/#3","text":"\u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): >>> License . objects . get ( owner_id = Owner . objects . get ( id = 1 )) < License : License object ( 1 ) >","title":"\u0417\u0430\u043f\u0440\u043e\u0441 3"},{"location":"labs/practical_work3/#4","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): Owner . objects . filter ( owner__auto_id__color = 'black' ) < QuerySet [ < Owner : Olga > , < Owner : Roman > , < Owner : Olga > ] >","title":"\u0417\u0430\u043f\u0440\u043e\u0441 4"},{"location":"labs/practical_work3/#5","text":"\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): >>> Owner . objects . filter ( owner__date_start__gte = \"2022-05-01\" ) < QuerySet [ < Owner : Olga > , < Owner : Roman > , < Owner : Egor > , < Owner : fluff > , < Owner : maria > , < Owner : Olga > ] >","title":"\u0417\u0430\u043f\u0440\u043e\u0441 5"},{"location":"labs/practical_work3/#33","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0417\u0430\u043f\u0440\u043e\u0441 1 \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> License . objects . aggregate ( date_of_license = Min ( \"date_get\" )) { 'date_of_license' : datetime . date ( 2022 , 10 , 2 )} \u0417\u0430\u043f\u0440\u043e\u0441 2 \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: >>> Owning . objects . aggregate ( start_date = Max ( \"date_start\" )) { 'start_date' : datetime . date ( 2022 , 12 , 5 )} \u0417\u0430\u043f\u0440\u043e\u0441 3 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: >>> Owning . objects . values ( \"owner_auto\" ) . annotate ( Count ( \"auto_id\" )) < QuerySet [{ 'owner_auto' : 1 , 'auto_id__count' : 2 }, { 'owner_auto' : 2 , 'auto_id__count' : 1 }, { 'owner_auto' : 3 , 'auto_id__count' : 1 }, { 'owner_auto' : 5 , 'auto_id__count' : 1 }, { 'owner_auto' : 6 , 'auto_id__count' : 1 }] > \u0417\u0430\u043f\u0440\u043e\u0441 4 \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: < QuerySet [{ 'mark' : 'A' , 'id__count' : 5 }, { 'mark' : 'Toyota' , 'id__count' : 2 }] > \u0417\u0430\u043f\u0440\u043e\u0441 5 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> License . objects . values ( \"owner_id\" ) . order_by ( \"date_get\" ) < QuerySet [{ 'owner_id' : 1 }, { 'owner_id' : 2 }] >","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.3"}]}