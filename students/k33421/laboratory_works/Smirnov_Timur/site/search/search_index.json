{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041c\u043e\u044f \u043a\u0440\u0443\u0442\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0430 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023 \u0421\u043c\u0438\u0440\u043d\u043e\u0432 \u0422\u0438\u043c\u0443\u0440 K33421","title":"\u041c\u043e\u044f \u043a\u0440\u0443\u0442\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0430 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023"},{"location":"#web-2022-2023","text":"","title":"\u041c\u043e\u044f \u043a\u0440\u0443\u0442\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0430 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023"},{"location":"#k33421","text":"","title":"\u0421\u043c\u0438\u0440\u043d\u043e\u0432 \u0422\u0438\u043c\u0443\u0440 K33421"},{"location":"laboratory_work_1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 server.py import socket sock = socket . socket () sock . bind (( '' , 9090 )) sock . listen ( 1 ) conn , addr = sock . accept () data = conn . recv ( 1024 ) print ( data . decode ( 'utf-8' )) msg = 'Hello, client!' conn . send ( msg . encode ( 'utf-8' )) conn . close () client.py import socket sock = socket . socket () sock . connect (( 'localhost' , 9090 )) msg = 'Hello, server!' sock . send ( msg . encode ( 'utf-8' )) data = sock . recv ( 1024 ) sock . close () print ( data . decode ( 'utf-8' )) \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 server.py import socket # d - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 class Server : def __init__ ( self , sock = None ): if sock is None : self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) else : self . sock = sock def parallelogram_square ( self , base , height ): return int ( base ) * int ( height ) def send ( self , msg ): self . conn . send ( msg . encode ( 'utf-8' )) def receive ( self ): data = self . conn . recv ( 1024 ) return data . decode ( 'utf-8' ) def start ( self ): self . sock . bind (( '' , 9090 )) self . sock . listen ( 1 ) self . conn , self . addr = self . sock . accept () def close ( self ): self . sock . close () def main (): srv = Server () srv . start () srv . send ( \"Input base lenght of the parallelogram: \" ) base = srv . receive () srv . send ( \"Input height of the parallelogram: \" ) height = srv . receive () square = srv . parallelogram_square ( base , height ) srv . send ( f \"Square of the parallelogram is { square } \" ) srv . close () if __name__ == '__main__' : main () client.py import socket sock = socket . socket () sock . connect (( 'localhost' , 9090 )) data = sock . recv ( 1024 ) . decode ( 'utf-8' ) print ( data ) base = input ( '>>' ) sock . send ( base . encode ( 'utf-8' )) data = sock . recv ( 1024 ) . decode ( 'utf-8' ) print ( data ) height = input ( '>>' ) sock . send ( height . encode ( 'utf-8' )) data = sock . recv ( 1024 ) . decode ( 'utf-8' ) print ( data ) input ( 'Push ENTER to exit >>' ) \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 server.py import socket def main (): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( 'localhost' , 9090 )) sock . listen ( 1 ) while True : try : conn , addr = sock . accept () response_type = \"HTTP/1.0 200 OK \\n \" headers = \"Content-Type: text/html \\n\\n \" with open ( 'index.html' , 'r' ) as f : body = f . read () res = response_type + headers + body conn . send ( res . encode ( 'utf-8' )) conn . close () except KeyboardInterrupt : sock . close () break if __name__ == \"__main__\" : main () index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > wtf... </ title > < style type = \"text/css\" > body { background-image : url ( 'https://www.meme-arsenal.com/memes/d9376e8a26b220ed9cc58f90327353f6.jpg' ); background-repeat : no-repeat ; background-size : cover ; color : white ; word-break : break-all ; } </ style > </ head > < body > < h1 > AHAHAHAHAHHAAHAHAHAH </ h1 > </ body > </ html > \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 server.py import socket import sys from threading import Thread class ChatServer : def __init__ ( self , host , port ): self . clients = [] self . host = host self . port = port self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) def __shutdown ( self ): for conn in self . clients : conn . close () self . sock . close () sys . exit ( 0 ) def __client_broadcast ( self , message , sender ): for conn in self . clients . copy (): if conn != sender : try : conn . send ( message ) except OSError : print ( \"Someone disconnected\" ) self . clients . remove ( conn ) def __client_listen ( self , conn ): conn . settimeout ( 30 ) while True : try : message = conn . recv ( 1024 ) print ( message . decode ()) self . __client_broadcast ( message , conn ) except OSError : conn . close () break def __main ( self ): self . sock . bind (( self . host , self . port )) self . sock . listen ( 10 ) while True : try : conn , address = self . sock . accept () print ( f \"Connection at { address } \" ) self . clients . append ( conn ) Thread ( target = self . __client_listen , args = ( conn ,)) . start () except KeyboardInterrupt : self . __shutdown () def run ( self ): Thread ( target = self . __main ) . start () if __name__ == '__main__' : print ( \"Starting server...\" ) server = ChatServer ( '127.0.0.1' , 14900 ) server . run () print ( \"Server started\" ) client.py import socket import sys from threading import Thread class ChatClient : def __init__ ( self , host , port , username ): self . host = host self . port = port self . username = username self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) def __send ( self ): while True : try : msg = input ( '>>' ) if msg : self . sock . send ( f \" { self . username } : { msg } \" . encode ()) except ( KeyboardInterrupt , EOFError ): self . conn . close () sys . exit ( 0 ) def __recieve ( self ): while True : try : msg = self . sock . recv ( 1024 ) . decode () if msg : print ( msg ) except KeyboardInterrupt : self . sock . close () sys . exit ( 0 ) except ConnectionError : # Unexpected connection error print ( \"Connection error\" ) self . sock . close () sys . exit ( 1 ) def run ( self ): # Connect self . sock . connect (( self . host , self . port )) # Run threaded functions Thread ( target = self . __send ) . start () Thread ( target = self . __recieve ) . start () if __name__ == '__main__' : name = input ( \"Your username: \" ) print ( \"Connecting to server...\" ) client = ChatClient ( '127.0.0.1' , 14900 , name ) client . run () \u0417\u0430\u0434\u0430\u0447\u0430 \u21165 http_server_task_5.py import socket class MyHTTPServer : def __init__ ( self , host , port ): self . _host = host self . _port = port self . _marks = dict () def serve_forever ( self ): serv_sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM , proto = 0 ) try : serv_sock . bind (( self . _host , self . _port )) serv_sock . listen () while True : conn , _ = serv_sock . accept () try : self . serve_client ( conn ) except Exception as e : print ( 'Client serving failed' , e ) finally : serv_sock . close () def serve_client ( self , conn ): try : method , url , headers = self . parse_request ( conn ) resp = self . handle_request ( method , url ) self . send_response ( conn , resp , headers ) except ConnectionResetError : conn = None if conn : conn . close () def parse_request ( self , conn ): if conn : data = conn . recv ( 16384 ) . decode ( 'utf-8' ) . replace ( ' \\r ' , '' ) . split ( ' \\n ' ) method , url , _ = data [ 0 ] . split () headers = data [ 1 : data . index ( '' )] return method , url , headers def get_params ( self , url ): if '?' in url : i = url . index ( '?' ) params = { param . split ( '=' )[ 0 ]: param . split ( '=' )[ 1 ] for param in url [ i + 1 :] . split ( '&' ) if param } url = url [: i ] . split ( '/' )[ 1 :] else : url = url . split ( '/' )[ 1 :] params = None return url , params def handle_request ( self , method , url ): url , params = self . get_params ( url ) print ( '-------------------------' ) print ( url , params ) if method == 'GET' : resp = \"HTTP/1.1 200 OK \\n\\n \" body = '<!DOCTYPE html><html lang=\"en\"><head><html><head><title>Journal</title></head></html><body>' if url [ 0 ] == 'marks' : if len ( url ) == 1 : for subj in self . _marks : body += f \"<b> { subj } </b> : { self . _marks [ subj ] } </br></body></html>\" elif len ( url ) == 2 : if url [ 1 ] in self . _marks : body += f \"<b> { url [ 1 ] } </b> : { self . _marks [ url [ 1 ]] } </body></html>\" else : body += '<h1>404 ERROR</h1></body></html>' else : body += '<h1>Wrong address</h1></body></html>' return resp + body elif method == 'POST' : resp = \"HTTP/1.1 201 Created \\n\\n \" if url [ 0 ] == 'marks' and params : if 'subject' in params and 'mark' in params : self . _marks [ params [ 'subject' ]] = params [ 'mark' ] return resp def send_response ( self , conn , resp , headers ): conn . send ( resp . encode ( 'utf-8' )) if __name__ == '__main__' : host = '127.0.0.1' port = 9090 serv = MyHTTPServer ( host , port ) try : serv . serve_forever () except KeyboardInterrupt : pass","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"laboratory_work_1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"laboratory_work_1/#no1_1","text":"server.py import socket sock = socket . socket () sock . bind (( '' , 9090 )) sock . listen ( 1 ) conn , addr = sock . accept () data = conn . recv ( 1024 ) print ( data . decode ( 'utf-8' )) msg = 'Hello, client!' conn . send ( msg . encode ( 'utf-8' )) conn . close () client.py import socket sock = socket . socket () sock . connect (( 'localhost' , 9090 )) msg = 'Hello, server!' sock . send ( msg . encode ( 'utf-8' )) data = sock . recv ( 1024 ) sock . close () print ( data . decode ( 'utf-8' ))","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"laboratory_work_1/#no2","text":"server.py import socket # d - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 class Server : def __init__ ( self , sock = None ): if sock is None : self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) else : self . sock = sock def parallelogram_square ( self , base , height ): return int ( base ) * int ( height ) def send ( self , msg ): self . conn . send ( msg . encode ( 'utf-8' )) def receive ( self ): data = self . conn . recv ( 1024 ) return data . decode ( 'utf-8' ) def start ( self ): self . sock . bind (( '' , 9090 )) self . sock . listen ( 1 ) self . conn , self . addr = self . sock . accept () def close ( self ): self . sock . close () def main (): srv = Server () srv . start () srv . send ( \"Input base lenght of the parallelogram: \" ) base = srv . receive () srv . send ( \"Input height of the parallelogram: \" ) height = srv . receive () square = srv . parallelogram_square ( base , height ) srv . send ( f \"Square of the parallelogram is { square } \" ) srv . close () if __name__ == '__main__' : main () client.py import socket sock = socket . socket () sock . connect (( 'localhost' , 9090 )) data = sock . recv ( 1024 ) . decode ( 'utf-8' ) print ( data ) base = input ( '>>' ) sock . send ( base . encode ( 'utf-8' )) data = sock . recv ( 1024 ) . decode ( 'utf-8' ) print ( data ) height = input ( '>>' ) sock . send ( height . encode ( 'utf-8' )) data = sock . recv ( 1024 ) . decode ( 'utf-8' ) print ( data ) input ( 'Push ENTER to exit >>' )","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"laboratory_work_1/#no3","text":"server.py import socket def main (): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( 'localhost' , 9090 )) sock . listen ( 1 ) while True : try : conn , addr = sock . accept () response_type = \"HTTP/1.0 200 OK \\n \" headers = \"Content-Type: text/html \\n\\n \" with open ( 'index.html' , 'r' ) as f : body = f . read () res = response_type + headers + body conn . send ( res . encode ( 'utf-8' )) conn . close () except KeyboardInterrupt : sock . close () break if __name__ == \"__main__\" : main () index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > wtf... </ title > < style type = \"text/css\" > body { background-image : url ( 'https://www.meme-arsenal.com/memes/d9376e8a26b220ed9cc58f90327353f6.jpg' ); background-repeat : no-repeat ; background-size : cover ; color : white ; word-break : break-all ; } </ style > </ head > < body > < h1 > AHAHAHAHAHHAAHAHAHAH </ h1 > </ body > </ html >","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"laboratory_work_1/#no4","text":"server.py import socket import sys from threading import Thread class ChatServer : def __init__ ( self , host , port ): self . clients = [] self . host = host self . port = port self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) def __shutdown ( self ): for conn in self . clients : conn . close () self . sock . close () sys . exit ( 0 ) def __client_broadcast ( self , message , sender ): for conn in self . clients . copy (): if conn != sender : try : conn . send ( message ) except OSError : print ( \"Someone disconnected\" ) self . clients . remove ( conn ) def __client_listen ( self , conn ): conn . settimeout ( 30 ) while True : try : message = conn . recv ( 1024 ) print ( message . decode ()) self . __client_broadcast ( message , conn ) except OSError : conn . close () break def __main ( self ): self . sock . bind (( self . host , self . port )) self . sock . listen ( 10 ) while True : try : conn , address = self . sock . accept () print ( f \"Connection at { address } \" ) self . clients . append ( conn ) Thread ( target = self . __client_listen , args = ( conn ,)) . start () except KeyboardInterrupt : self . __shutdown () def run ( self ): Thread ( target = self . __main ) . start () if __name__ == '__main__' : print ( \"Starting server...\" ) server = ChatServer ( '127.0.0.1' , 14900 ) server . run () print ( \"Server started\" ) client.py import socket import sys from threading import Thread class ChatClient : def __init__ ( self , host , port , username ): self . host = host self . port = port self . username = username self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) def __send ( self ): while True : try : msg = input ( '>>' ) if msg : self . sock . send ( f \" { self . username } : { msg } \" . encode ()) except ( KeyboardInterrupt , EOFError ): self . conn . close () sys . exit ( 0 ) def __recieve ( self ): while True : try : msg = self . sock . recv ( 1024 ) . decode () if msg : print ( msg ) except KeyboardInterrupt : self . sock . close () sys . exit ( 0 ) except ConnectionError : # Unexpected connection error print ( \"Connection error\" ) self . sock . close () sys . exit ( 1 ) def run ( self ): # Connect self . sock . connect (( self . host , self . port )) # Run threaded functions Thread ( target = self . __send ) . start () Thread ( target = self . __recieve ) . start () if __name__ == '__main__' : name = input ( \"Your username: \" ) print ( \"Connecting to server...\" ) client = ChatClient ( '127.0.0.1' , 14900 , name ) client . run ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"laboratory_work_1/#no5","text":"http_server_task_5.py import socket class MyHTTPServer : def __init__ ( self , host , port ): self . _host = host self . _port = port self . _marks = dict () def serve_forever ( self ): serv_sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM , proto = 0 ) try : serv_sock . bind (( self . _host , self . _port )) serv_sock . listen () while True : conn , _ = serv_sock . accept () try : self . serve_client ( conn ) except Exception as e : print ( 'Client serving failed' , e ) finally : serv_sock . close () def serve_client ( self , conn ): try : method , url , headers = self . parse_request ( conn ) resp = self . handle_request ( method , url ) self . send_response ( conn , resp , headers ) except ConnectionResetError : conn = None if conn : conn . close () def parse_request ( self , conn ): if conn : data = conn . recv ( 16384 ) . decode ( 'utf-8' ) . replace ( ' \\r ' , '' ) . split ( ' \\n ' ) method , url , _ = data [ 0 ] . split () headers = data [ 1 : data . index ( '' )] return method , url , headers def get_params ( self , url ): if '?' in url : i = url . index ( '?' ) params = { param . split ( '=' )[ 0 ]: param . split ( '=' )[ 1 ] for param in url [ i + 1 :] . split ( '&' ) if param } url = url [: i ] . split ( '/' )[ 1 :] else : url = url . split ( '/' )[ 1 :] params = None return url , params def handle_request ( self , method , url ): url , params = self . get_params ( url ) print ( '-------------------------' ) print ( url , params ) if method == 'GET' : resp = \"HTTP/1.1 200 OK \\n\\n \" body = '<!DOCTYPE html><html lang=\"en\"><head><html><head><title>Journal</title></head></html><body>' if url [ 0 ] == 'marks' : if len ( url ) == 1 : for subj in self . _marks : body += f \"<b> { subj } </b> : { self . _marks [ subj ] } </br></body></html>\" elif len ( url ) == 2 : if url [ 1 ] in self . _marks : body += f \"<b> { url [ 1 ] } </b> : { self . _marks [ url [ 1 ]] } </body></html>\" else : body += '<h1>404 ERROR</h1></body></html>' else : body += '<h1>Wrong address</h1></body></html>' return resp + body elif method == 'POST' : resp = \"HTTP/1.1 201 Created \\n\\n \" if url [ 0 ] == 'marks' and params : if 'subject' in params and 'mark' in params : self . _marks [ params [ 'subject' ]] = params [ 'mark' ] return resp def send_response ( self , conn , resp , headers ): conn . send ( resp . encode ( 'utf-8' )) if __name__ == '__main__' : host = '127.0.0.1' port = 9090 serv = MyHTTPServer ( host , port ) try : serv . serve_forever () except KeyboardInterrupt : pass","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21165"},{"location":"laboratory_work_2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u043a\u043e\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c\u0430\u0442\u0438\u043a, \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041c\u043e\u0434\u0435\u043b\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0422\u0435\u043c\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f \u041c\u0435\u0441\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0417\u0430\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 models.py from django.db import models from django.contrib.auth.models import User class Theme ( models . Model ): name = models . CharField ( max_length = 50 ) def __str__ ( self ): return self . name class Conference ( models . Model ): name = models . CharField ( max_length = 100 ) description = models . TextField ( null = True , blank = True ) participation_cond = models . TextField ( null = True , blank = True ) def __str__ ( self ): return self . name class Place ( models . Model ): name = models . CharField ( max_length = 50 ) address = models . CharField ( max_length = 150 ) def __str__ ( self ): return self . name class PlannedConference ( models . Model ): conference = models . ForeignKey ( Conference , on_delete = models . CASCADE ) place = models . ForeignKey ( Place , on_delete = models . SET_NULL , null = True , blank = True ) themes = models . ManyToManyField ( Theme ) start_date = models . DateTimeField () end_date = models . DateTimeField () def __str__ ( self ): return self . conference . name + ' | ' + self . place . name [: 50 ] + ( '...' if len ( self . place . name ) > 50 else '' ) class Meta : ordering = [ 'start_date' ] class RegisteredConference ( models . Model ): conference = models . ForeignKey ( PlannedConference , on_delete = models . CASCADE ) user = models . ForeignKey ( User , on_delete = models . CASCADE ) name = models . CharField ( max_length = 100 , null = True ) results = models . BooleanField ( null = True , blank = True ) def __str__ ( self ): return self . name class Comment ( models . Model ): user = models . ForeignKey ( User , on_delete = models . CASCADE ) conference = models . ForeignKey ( PlannedConference , on_delete = models . CASCADE ) rating = models . IntegerField ( choices = [( i , i ) for i in range ( 0 , 11 )], null = True , blank = True , default = None ) text = models . TextField () date = models . DateTimeField ( auto_now = True , null = True ) def __str__ ( self ): return self . user . first_name + ' | ' + self . text [: 50 ] + ( '...' if len ( self . text ) > 50 else '' ) class Meta : ordering = [ '-date' ] \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u044b views.py from django.shortcuts import render , redirect from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import DeleteView , FormView from django.contrib.auth.decorators import login_required from django.urls import reverse_lazy from django.contrib.auth.views import LoginView from django.contrib.auth.mixins import LoginRequiredMixin from django.contrib.auth.forms import UserCreationForm from django.contrib.auth import login from .models import Theme , PlannedConference , RegisteredConference , Comment from .forms import CommentForm , ConferenceRegisterForm class CustomLoginView ( LoginView ): template_name = 'conferences/login.html' fields = '__all__' redirect_authenticated_user = True def get_success_url ( self ): return reverse_lazy ( 'conferences' ) class RegisterPage ( FormView ): template_name = 'conferences/register.html' form_class = UserCreationForm redirect_authenticated_user = True success_url = reverse_lazy ( 'conferences' ) def form_valid ( self , form ): user = form . save () if user is not None : login ( self . request , user ) return super ( RegisterPage , self ) . form_valid ( form ) def get ( self , * args , ** kwargs ): if self . request . user . is_authenticated : return redirect ( 'conferences' ) return super ( RegisterPage , self ) . get ( * args , ** kwargs ) class ConferencesList ( ListView ): model = PlannedConference template_name = 'conferences/conferences_list.html' context_object_name = 'conferences' def conference_detail ( request , pk ): conference = PlannedConference . objects . get ( pk = pk ) registers = RegisteredConference . objects . filter ( conference__pk = pk , results = True ) comments = Comment . objects . filter ( conference__pk = pk ) initial = { 'conference' : conference , 'user' : request . user } comment_form = CommentForm ( initial = initial ) if request . method == 'POST' : c_form = CommentForm ( request . POST ) if c_form . is_valid (): c_form . save () else : comment_form = c_form context = { 'conference' : conference , 'comments' : comments , 'comment_form' : comment_form , 'registers' : registers } return render ( request , 'conferences/conference_detail.html' , context ) class ThemesList ( ListView ): model = Theme template_name = 'conferences/themes_list.html' context_object_name = 'themes' class ThemeDetail ( DetailView ): model = Theme context_object_name = 'theme' template_name = 'conferences/theme_detail.html' def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"conferences\" ] = PlannedConference . objects . filter ( themes__id = context [ 'theme' ] . id ) return context @login_required def conference_register_view ( request , pk ): conference = PlannedConference . objects . get ( pk = pk ) initial = { 'conference' : conference , 'user' : request . user } form = ConferenceRegisterForm ( initial = initial ) if request . method == 'POST' : c_form = ConferenceRegisterForm ( request . POST ) if c_form . is_valid (): c_form . save () return redirect ( f '/conference/ { pk } ' ) else : form = c_form context = { 'conference' : conference , 'form' : form } return render ( request , 'conferences/conference_register.html' , context ) class RegisterList ( LoginRequiredMixin , ListView ): model = RegisteredConference template_name = 'conferences/registers.html' context_object_name = 'registers' class DeleteRegisterView ( LoginRequiredMixin , DeleteView ): model = RegisteredConference context_object_name = 'register' success_url = reverse_lazy ( 'my_registers' ) URLs \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0435\u0439: /conferences/ - \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 /conference/ / - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 /conference/ /register/ - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 /myregisters/ - \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 /myregisters/delete/ / - \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 /themes/ - \u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 /themes/ / - \u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0442\u0435\u043c\u0435 /login/ - \u0412\u043e\u0439\u0442\u0438 \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 /logout/ - \u0412\u044b\u0439\u0442\u0438 \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 /register/ - \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f urls.py from django.urls import path from django.contrib.auth.views import LogoutView from .views import ConferencesList , CustomLoginView , RegisterPage , ThemesList , ThemeDetail , conference_detail , conference_register_view , RegisterList , DeleteRegisterView urlpatterns = [ path ( '' , ConferencesList . as_view (), name = 'conferences' ), path ( 'conference/<int:pk>' , conference_detail , name = 'conference' ), path ( 'conference/<int:pk>/register' , conference_register_view , name = 'conference_register' ), path ( 'myregisters' , RegisterList . as_view (), name = 'my_registers' ), path ( 'myregisters/delete/<int:pk>' , DeleteRegisterView . as_view (), name = 'register_delete' ), path ( 'themes' , ThemesList . as_view (), name = 'themes' ), path ( 'themes/<int:pk>' , ThemeDetail . as_view (), name = 'theme' ), path ( 'login' , CustomLoginView . as_view (), name = 'login' ), path ( 'logout' , LogoutView . as_view ( next_page = 'conferences' ), name = 'logout' ), path ( 'register' , RegisterPage . as_view (), name = 'register' ), ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"laboratory_work_2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"laboratory_work_2/#_1","text":"\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c\u0430\u0442\u0438\u043a, \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c.","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u043a\u043e\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439"},{"location":"laboratory_work_2/#_2","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0422\u0435\u043c\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f \u041c\u0435\u0441\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0417\u0430\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 models.py from django.db import models from django.contrib.auth.models import User class Theme ( models . Model ): name = models . CharField ( max_length = 50 ) def __str__ ( self ): return self . name class Conference ( models . Model ): name = models . CharField ( max_length = 100 ) description = models . TextField ( null = True , blank = True ) participation_cond = models . TextField ( null = True , blank = True ) def __str__ ( self ): return self . name class Place ( models . Model ): name = models . CharField ( max_length = 50 ) address = models . CharField ( max_length = 150 ) def __str__ ( self ): return self . name class PlannedConference ( models . Model ): conference = models . ForeignKey ( Conference , on_delete = models . CASCADE ) place = models . ForeignKey ( Place , on_delete = models . SET_NULL , null = True , blank = True ) themes = models . ManyToManyField ( Theme ) start_date = models . DateTimeField () end_date = models . DateTimeField () def __str__ ( self ): return self . conference . name + ' | ' + self . place . name [: 50 ] + ( '...' if len ( self . place . name ) > 50 else '' ) class Meta : ordering = [ 'start_date' ] class RegisteredConference ( models . Model ): conference = models . ForeignKey ( PlannedConference , on_delete = models . CASCADE ) user = models . ForeignKey ( User , on_delete = models . CASCADE ) name = models . CharField ( max_length = 100 , null = True ) results = models . BooleanField ( null = True , blank = True ) def __str__ ( self ): return self . name class Comment ( models . Model ): user = models . ForeignKey ( User , on_delete = models . CASCADE ) conference = models . ForeignKey ( PlannedConference , on_delete = models . CASCADE ) rating = models . IntegerField ( choices = [( i , i ) for i in range ( 0 , 11 )], null = True , blank = True , default = None ) text = models . TextField () date = models . DateTimeField ( auto_now = True , null = True ) def __str__ ( self ): return self . user . first_name + ' | ' + self . text [: 50 ] + ( '...' if len ( self . text ) > 50 else '' ) class Meta : ordering = [ '-date' ]","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"laboratory_work_2/#_3","text":"views.py from django.shortcuts import render , redirect from django.views.generic.list import ListView from django.views.generic.detail import DetailView from django.views.generic.edit import DeleteView , FormView from django.contrib.auth.decorators import login_required from django.urls import reverse_lazy from django.contrib.auth.views import LoginView from django.contrib.auth.mixins import LoginRequiredMixin from django.contrib.auth.forms import UserCreationForm from django.contrib.auth import login from .models import Theme , PlannedConference , RegisteredConference , Comment from .forms import CommentForm , ConferenceRegisterForm class CustomLoginView ( LoginView ): template_name = 'conferences/login.html' fields = '__all__' redirect_authenticated_user = True def get_success_url ( self ): return reverse_lazy ( 'conferences' ) class RegisterPage ( FormView ): template_name = 'conferences/register.html' form_class = UserCreationForm redirect_authenticated_user = True success_url = reverse_lazy ( 'conferences' ) def form_valid ( self , form ): user = form . save () if user is not None : login ( self . request , user ) return super ( RegisterPage , self ) . form_valid ( form ) def get ( self , * args , ** kwargs ): if self . request . user . is_authenticated : return redirect ( 'conferences' ) return super ( RegisterPage , self ) . get ( * args , ** kwargs ) class ConferencesList ( ListView ): model = PlannedConference template_name = 'conferences/conferences_list.html' context_object_name = 'conferences' def conference_detail ( request , pk ): conference = PlannedConference . objects . get ( pk = pk ) registers = RegisteredConference . objects . filter ( conference__pk = pk , results = True ) comments = Comment . objects . filter ( conference__pk = pk ) initial = { 'conference' : conference , 'user' : request . user } comment_form = CommentForm ( initial = initial ) if request . method == 'POST' : c_form = CommentForm ( request . POST ) if c_form . is_valid (): c_form . save () else : comment_form = c_form context = { 'conference' : conference , 'comments' : comments , 'comment_form' : comment_form , 'registers' : registers } return render ( request , 'conferences/conference_detail.html' , context ) class ThemesList ( ListView ): model = Theme template_name = 'conferences/themes_list.html' context_object_name = 'themes' class ThemeDetail ( DetailView ): model = Theme context_object_name = 'theme' template_name = 'conferences/theme_detail.html' def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"conferences\" ] = PlannedConference . objects . filter ( themes__id = context [ 'theme' ] . id ) return context @login_required def conference_register_view ( request , pk ): conference = PlannedConference . objects . get ( pk = pk ) initial = { 'conference' : conference , 'user' : request . user } form = ConferenceRegisterForm ( initial = initial ) if request . method == 'POST' : c_form = ConferenceRegisterForm ( request . POST ) if c_form . is_valid (): c_form . save () return redirect ( f '/conference/ { pk } ' ) else : form = c_form context = { 'conference' : conference , 'form' : form } return render ( request , 'conferences/conference_register.html' , context ) class RegisterList ( LoginRequiredMixin , ListView ): model = RegisteredConference template_name = 'conferences/registers.html' context_object_name = 'registers' class DeleteRegisterView ( LoginRequiredMixin , DeleteView ): model = RegisteredConference context_object_name = 'register' success_url = reverse_lazy ( 'my_registers' )","title":"\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u044b"},{"location":"laboratory_work_2/#urls","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0435\u0439: /conferences/ - \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 /conference/ / - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 /conference/ /register/ - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 /myregisters/ - \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 /myregisters/delete/ / - \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 /themes/ - \u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 /themes/ / - \u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0442\u0435\u043c\u0435 /login/ - \u0412\u043e\u0439\u0442\u0438 \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 /logout/ - \u0412\u044b\u0439\u0442\u0438 \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 /register/ - \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f urls.py from django.urls import path from django.contrib.auth.views import LogoutView from .views import ConferencesList , CustomLoginView , RegisterPage , ThemesList , ThemeDetail , conference_detail , conference_register_view , RegisterList , DeleteRegisterView urlpatterns = [ path ( '' , ConferencesList . as_view (), name = 'conferences' ), path ( 'conference/<int:pk>' , conference_detail , name = 'conference' ), path ( 'conference/<int:pk>/register' , conference_register_view , name = 'conference_register' ), path ( 'myregisters' , RegisterList . as_view (), name = 'my_registers' ), path ( 'myregisters/delete/<int:pk>' , DeleteRegisterView . as_view (), name = 'register_delete' ), path ( 'themes' , ThemesList . as_view (), name = 'themes' ), path ( 'themes/<int:pk>' , ThemeDetail . as_view (), name = 'theme' ), path ( 'login' , CustomLoginView . as_view (), name = 'login' ), path ( 'logout' , LogoutView . as_view ( next_page = 'conferences' ), name = 'logout' ), path ( 'register' , RegisterPage . as_view (), name = 'register' ), ]","title":"URLs"},{"location":"practice_3_1/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041c\u043e\u0434\u0435\u043b\u0438 models.py from django.db import models class Transport_owner ( models . Model ): id_owner = models . IntegerField ( primary_key = True ) last_name = models . CharField ( max_length = 30 , null = False ) first_name = models . CharField ( max_length = 30 , null = False ) date_birthday = models . DateField () class Transport ( models . Model ): id_car = models . IntegerField ( primary_key = True ) gov_number = models . CharField ( max_length = 15 , null = False ) brand = models . CharField ( max_length = 20 , null = False ) model_car = models . CharField ( max_length = 20 , null = False ) color = models . CharField ( max_length = 30 , null = True ) class Ownership ( models . Model ): id_owner_car = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( Transport_owner , on_delete = models . CASCADE , related_name = \"ownership\" ) id_car = models . ForeignKey ( Transport , on_delete = models . CASCADE ) date_start = models . DateField () sate_end = models . DateField ( null = True ) class License ( models . Model ): id_doc = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( Transport_owner , on_delete = models . CASCADE ) number_doc = models . CharField ( max_length = 10 , null = False ) type_doc = models . CharField ( max_length = 10 , null = False ) date_start_doc = models . DateField () \u041f\u0435\u0440\u0435\u0439\u0434\u0435\u043c \u0432 shell \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 Transport_owner ( 1 , '\u0424\u0430\u043c\u0438\u043b\u0438\u044f1' , '\u0418\u043c\u044f1' , '1902-01-1' ) . save () Transport_owner ( 2 , '\u0424\u0430\u043c\u0438\u043b\u0438\u044f2' , '\u0418\u043c\u044f2' , '1902-01-2' ) . save () Transport_owner ( 3 , '\u0424\u0430\u043c\u0438\u043b\u0438\u044f3' , '\u0418\u043c\u044f3' , '1902-01-3' ) . save () Transport_owner ( 4 , '\u0424\u0430\u043c\u0438\u043b\u0438\u044f4' , '\u0418\u043c\u044f4' , '1902-01-4' ) . save () Transport_owner ( 5 , '\u0424\u0430\u043c\u0438\u043b\u0438\u044f5' , '\u0418\u043c\u044f5' , '1902-01-5' ) . save () Transport_owner ( 6 , '\u0424\u0430\u043c\u0438\u043b\u0438\u044f6' , '\u0418\u043c\u044f6' , '1902-01-6' ) . save () \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 Transport ( 0 , 'A123BC' , 'Brand0' , 'Model0' , 'green' ) . save () Transport ( 1 , 'A124BC' , 'Brand1' , 'Model1' , 'red' ) . save () Transport ( 2 , 'A125BC' , 'Brand2' , 'Model2' , 'black' ) . save () Transport ( 3 , 'A126BC' , 'Brand3' , 'Model3' , 'blue' ) . save () Transport ( 4 , 'A127BC' , 'Brand4' , 'Model4' , 'blue' ) . save () Transport ( 5 , 'A128BC' , 'Brand5' , 'Model5' , 'black' ) . save () Transport ( 6 , 'A129BC' , 'Brand6' , 'Model6' , 'blue' ) . save () \u0412\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0440\u0430\u0432\u0430 License ( '1' , '1' , 'num1' , 'type1' , '1995-05-1' ) . save () License ( '2' , '2' , 'num2' , 'type2' , '1995-05-2' ) . save () License ( '3' , '3' , 'num3' , 'type3' , '1995-05-3' ) . save () License ( '4' , '4' , 'num4' , 'type4' , '1995-05-4' ) . save () License ( '5' , '5' , 'num5' , 'type5' , '1995-05-5' ) . save () License ( '6' , '6' , 'num6' , 'type6' , '1995-05-6' ) . save () \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\u043c\u0438 Ownership ( '1' , '1' , '1' , '2000-08-1' , '2010-08-1' ) . save () Ownership ( '2' , '2' , '2' , '2000-08-2' , '2010-08-2' ) . save () Ownership ( '3' , '3' , '3' , '2000-08-3' , '2010-08-3' ) . save () Ownership ( '4' , '4' , '4' , '2000-08-4' , '2010-08-4' ) . save () Ownership ( '5' , '5' , '5' , '2000-08-5' , '2010-08-5' ) . save () Ownership ( '6' , '6' , '6' , '2000-08-6' , '2010-08-6' ) . save () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) >>> Transport.objects.filter ( brand = \"Brand3\" ) <QuerySet [ <Transport: Transport object ( 3 ) > ] > \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) >>> Transport_owner.objects.filter ( first_name = \"\u0418\u043c\u044f5\" ) <QuerySet [ <Transport_owner: Transport_owner object ( 5 ) > ] > \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) >>> needed_id = Transport_owner.objects.all ()[ 2 ] .id_owner >>> License.objects.get ( id_owner = needed_id ) <License: License object ( 3 ) > \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) >>> Transport_owner.objects.filter ( ownership__id_car__color = 'blue' ) <QuerySet [ <Transport_owner: Transport_owner object ( 3 ) >, <Transport_owner: Transport_owner object ( 4 ) >, <Transport_owner: Transport_owner object ( 6 ) > ] > \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) >>> Transport_owner.objects.filter ( ownership__date_start = '2000-01-01' ) <QuerySet [ <Transport_owner: Transport_owner object ( 1 ) >, <Transport_owner: Transport_owner object ( 2 ) >, <Transport_owner: Transport_owner object ( 3 ) >, <Transport_owner: Transport_owner object ( 4 ) >, <Transport_owner: Transport_owner object ( 5 ) >, <Transport_owner: Transport_owner object ( 6 ) > ] > \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> License.objects.aggregate ( date_start_doc = Min ( \"date_start_doc\" )) { 'date_start_doc' : datetime.date ( 1995 , 5 , 1 )} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 >>> Ownership.objects.aggregate ( date_start = Max ( \"date_start\" )) { 'date_start' : datetime.date ( 2000 , 8 , 6 )} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f >>> Ownership.objects.values ( \"id_owner\" ) .annotate ( Count ( \"id_car\" )) <QuerySet [{ 'id_owner' : 1 , 'id_car__count' : 1 } , { 'id_owner' : 2 , 'id_car__count' : 1 } , { 'id_owner' : 3 , 'id_car__count' : 1 } , { 'id_owner' : 4 , 'id_car__count' : 1 } , { 'id_owner' : 5 , 'id_car__count' : 1 } , { 'id_owner' : 6 , 'id_car__count' : 1 }] \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 >>> Transport.objects.values ( \"brand\" ) .annotate ( Count ( \"id_car\" )) <QuerySet [{ 'brand' : 'Brand3' , 'id_car__count' : 1 } , { 'brand' : 'Brand4' , 'id_car__count' : 3 } , { 'brand' : 'Brand5' , 'id_car__count' : 1 } , { 'brand' : 'Brand6' , 'id_car__count' : 1 }] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c .distinct() >>> sort_by_date = License.objects.all () .order_by ( \"date_start_doc\" ) >>> for i in sort_by_date: ... needed_id = i.id_owner.id_owner ... print ( Ownership.objects.filter ( id_owner__id_owner = needed_id ) ) <QuerySet [ <Ownership: Ownership object ( 4 ) > ] > <QuerySet [ <Ownership: Ownership object ( 1 ) > ] > <QuerySet [ <Ownership: Ownership object ( 2 ) > ] > <QuerySet [ <Ownership: Ownership object ( 3 ) > ] > <QuerySet [ <Ownership: Ownership object ( 5 ) > ] > <QuerySet [ <Ownership: Ownership object ( 6 ) > ] >","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"practice_3_1/#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"practice_3_1/#1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"practice_3_1/#_1","text":"models.py from django.db import models class Transport_owner ( models . Model ): id_owner = models . IntegerField ( primary_key = True ) last_name = models . CharField ( max_length = 30 , null = False ) first_name = models . CharField ( max_length = 30 , null = False ) date_birthday = models . DateField () class Transport ( models . Model ): id_car = models . IntegerField ( primary_key = True ) gov_number = models . CharField ( max_length = 15 , null = False ) brand = models . CharField ( max_length = 20 , null = False ) model_car = models . CharField ( max_length = 20 , null = False ) color = models . CharField ( max_length = 30 , null = True ) class Ownership ( models . Model ): id_owner_car = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( Transport_owner , on_delete = models . CASCADE , related_name = \"ownership\" ) id_car = models . ForeignKey ( Transport , on_delete = models . CASCADE ) date_start = models . DateField () sate_end = models . DateField ( null = True ) class License ( models . Model ): id_doc = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( Transport_owner , on_delete = models . CASCADE ) number_doc = models . CharField ( max_length = 10 , null = False ) type_doc = models . CharField ( max_length = 10 , null = False ) date_start_doc = models . DateField () \u041f\u0435\u0440\u0435\u0439\u0434\u0435\u043c \u0432 shell \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 Transport_owner ( 1 , '\u0424\u0430\u043c\u0438\u043b\u0438\u044f1' , '\u0418\u043c\u044f1' , '1902-01-1' ) . save () Transport_owner ( 2 , '\u0424\u0430\u043c\u0438\u043b\u0438\u044f2' , '\u0418\u043c\u044f2' , '1902-01-2' ) . save () Transport_owner ( 3 , '\u0424\u0430\u043c\u0438\u043b\u0438\u044f3' , '\u0418\u043c\u044f3' , '1902-01-3' ) . save () Transport_owner ( 4 , '\u0424\u0430\u043c\u0438\u043b\u0438\u044f4' , '\u0418\u043c\u044f4' , '1902-01-4' ) . save () Transport_owner ( 5 , '\u0424\u0430\u043c\u0438\u043b\u0438\u044f5' , '\u0418\u043c\u044f5' , '1902-01-5' ) . save () Transport_owner ( 6 , '\u0424\u0430\u043c\u0438\u043b\u0438\u044f6' , '\u0418\u043c\u044f6' , '1902-01-6' ) . save () \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 Transport ( 0 , 'A123BC' , 'Brand0' , 'Model0' , 'green' ) . save () Transport ( 1 , 'A124BC' , 'Brand1' , 'Model1' , 'red' ) . save () Transport ( 2 , 'A125BC' , 'Brand2' , 'Model2' , 'black' ) . save () Transport ( 3 , 'A126BC' , 'Brand3' , 'Model3' , 'blue' ) . save () Transport ( 4 , 'A127BC' , 'Brand4' , 'Model4' , 'blue' ) . save () Transport ( 5 , 'A128BC' , 'Brand5' , 'Model5' , 'black' ) . save () Transport ( 6 , 'A129BC' , 'Brand6' , 'Model6' , 'blue' ) . save () \u0412\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0440\u0430\u0432\u0430 License ( '1' , '1' , 'num1' , 'type1' , '1995-05-1' ) . save () License ( '2' , '2' , 'num2' , 'type2' , '1995-05-2' ) . save () License ( '3' , '3' , 'num3' , 'type3' , '1995-05-3' ) . save () License ( '4' , '4' , 'num4' , 'type4' , '1995-05-4' ) . save () License ( '5' , '5' , 'num5' , 'type5' , '1995-05-5' ) . save () License ( '6' , '6' , 'num6' , 'type6' , '1995-05-6' ) . save () \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\u043c\u0438 Ownership ( '1' , '1' , '1' , '2000-08-1' , '2010-08-1' ) . save () Ownership ( '2' , '2' , '2' , '2000-08-2' , '2010-08-2' ) . save () Ownership ( '3' , '3' , '3' , '2000-08-3' , '2010-08-3' ) . save () Ownership ( '4' , '4' , '4' , '2000-08-4' , '2010-08-4' ) . save () Ownership ( '5' , '5' , '5' , '2000-08-5' , '2010-08-5' ) . save () Ownership ( '6' , '6' , '6' , '2000-08-6' , '2010-08-6' ) . save ()","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"practice_3_1/#2","text":"\u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) >>> Transport.objects.filter ( brand = \"Brand3\" ) <QuerySet [ <Transport: Transport object ( 3 ) > ] > \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) >>> Transport_owner.objects.filter ( first_name = \"\u0418\u043c\u044f5\" ) <QuerySet [ <Transport_owner: Transport_owner object ( 5 ) > ] > \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) >>> needed_id = Transport_owner.objects.all ()[ 2 ] .id_owner >>> License.objects.get ( id_owner = needed_id ) <License: License object ( 3 ) > \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) >>> Transport_owner.objects.filter ( ownership__id_car__color = 'blue' ) <QuerySet [ <Transport_owner: Transport_owner object ( 3 ) >, <Transport_owner: Transport_owner object ( 4 ) >, <Transport_owner: Transport_owner object ( 6 ) > ] > \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) >>> Transport_owner.objects.filter ( ownership__date_start = '2000-01-01' ) <QuerySet [ <Transport_owner: Transport_owner object ( 1 ) >, <Transport_owner: Transport_owner object ( 2 ) >, <Transport_owner: Transport_owner object ( 3 ) >, <Transport_owner: Transport_owner object ( 4 ) >, <Transport_owner: Transport_owner object ( 5 ) >, <Transport_owner: Transport_owner object ( 6 ) > ] >","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"practice_3_1/#3","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> License.objects.aggregate ( date_start_doc = Min ( \"date_start_doc\" )) { 'date_start_doc' : datetime.date ( 1995 , 5 , 1 )} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 >>> Ownership.objects.aggregate ( date_start = Max ( \"date_start\" )) { 'date_start' : datetime.date ( 2000 , 8 , 6 )} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f >>> Ownership.objects.values ( \"id_owner\" ) .annotate ( Count ( \"id_car\" )) <QuerySet [{ 'id_owner' : 1 , 'id_car__count' : 1 } , { 'id_owner' : 2 , 'id_car__count' : 1 } , { 'id_owner' : 3 , 'id_car__count' : 1 } , { 'id_owner' : 4 , 'id_car__count' : 1 } , { 'id_owner' : 5 , 'id_car__count' : 1 } , { 'id_owner' : 6 , 'id_car__count' : 1 }] \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 >>> Transport.objects.values ( \"brand\" ) .annotate ( Count ( \"id_car\" )) <QuerySet [{ 'brand' : 'Brand3' , 'id_car__count' : 1 } , { 'brand' : 'Brand4' , 'id_car__count' : 3 } , { 'brand' : 'Brand5' , 'id_car__count' : 1 } , { 'brand' : 'Brand6' , 'id_car__count' : 1 }] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c .distinct() >>> sort_by_date = License.objects.all () .order_by ( \"date_start_doc\" ) >>> for i in sort_by_date: ... needed_id = i.id_owner.id_owner ... print ( Ownership.objects.filter ( id_owner__id_owner = needed_id ) ) <QuerySet [ <Ownership: Ownership object ( 4 ) > ] > <QuerySet [ <Ownership: Ownership object ( 1 ) > ] > <QuerySet [ <Ownership: Ownership object ( 2 ) > ] > <QuerySet [ <Ownership: Ownership object ( 3 ) > ] > <QuerySet [ <Ownership: Ownership object ( 5 ) > ] > <QuerySet [ <Ownership: Ownership object ( 6 ) > ] >","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"secret_santa/","text":"\u041f\u0435\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \"\u0422\u0430\u0439\u043d\u044b\u0439 \u0441\u0430\u043d\u0442\u0430\" (\u043b\u0440 3-4) \u041c\u043e\u0434\u0435\u043b\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u041b\u043e\u0431\u0431\u0438 \u0413\u043e\u0441\u0442\u044c \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c Custom Account Manager models.py from django.db import models from django.conf import settings from string import ascii_lowercase import random def generate_unique_code (): length = 6 while True : code = '' . join ( random . choices ( ascii_lowercase , k = length )) if Lobby . objects . filter ( code = code ) . count () == 0 : break return code class Lobby ( models . Model ): code = models . CharField ( max_length = 10 , unique = True , default = generate_unique_code , primary_key = True ) name = models . CharField ( max_length = 50 ) event_date = models . DateField ( null = True , blank = True ) created = models . DateField ( auto_now_add = True ) started = models . BooleanField ( default = False , null = True , blank = True ) def __str__ ( self ): return self . code class Meta : verbose_name = 'Lobby' verbose_name_plural = 'Lobbies' class Guest ( models . Model ): lobby = models . ForeignKey ( Lobby , on_delete = models . CASCADE ) user = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) is_host = models . BooleanField ( default = False ) giving_to = models . ForeignKey ( 'Guest' , on_delete = models . SET_NULL , null = True , blank = True ) def __str__ ( self ): return self . lobby . code + ' | ' + self . user . username from django.db import models from django.utils import timezone from django.utils.translation import gettext_lazy as _ from django.contrib.auth.models import AbstractBaseUser , PermissionsMixin , BaseUserManager class CustomAccountManager ( BaseUserManager ): def create_superuser ( self , username , name , password , ** other_fields ): other_fields . setdefault ( 'is_staff' , True ) other_fields . setdefault ( 'is_superuser' , True ) other_fields . setdefault ( 'is_active' , True ) if other_fields . get ( 'is_staff' ) is not True : raise ValueError ( 'Superuser must be assigned to is_staff=True.' ) if other_fields . get ( 'is_superuser' ) is not True : raise ValueError ( 'Superuser must be assigned to is_superuser=True.' ) return self . create_user ( username , name , password , ** other_fields ) def create_user ( self , username , name , password , ** other_fields ): if not username : raise ValueError ( _ ( 'You must provide a username' )) user = self . model ( username = username , name = name , ** other_fields ) user . set_password ( password ) user . save () return user class User ( AbstractBaseUser , PermissionsMixin ): username = models . CharField ( max_length = 150 , unique = True ) name = models . CharField ( max_length = 150 ) preferences = models . TextField ( _ ( 'preferences' ), max_length = 500 , blank = True ) start_date = models . DateTimeField ( default = timezone . now ) is_staff = models . BooleanField ( default = False ) is_active = models . BooleanField ( default = True ) objects = CustomAccountManager () USERNAME_FIELD = 'username' REQUIRED_FIELDS = [ 'name' ] def __str__ ( self ): return self . username \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u044b views.py from functools import partial from django.http import JsonResponse from django.shortcuts import render from rest_framework.decorators import api_view from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status from rest_framework import generics from .models import Lobby , Guest from .serializers import LobbySerializer , GuestSerializer from rest_framework.permissions import AllowAny , IsAuthenticated from django.conf import settings # Create your views here. class LobbyList ( generics . ListCreateAPIView ): permission_classes = [ IsAuthenticated ] queryset = Lobby . objects . all () serializer_class = LobbySerializer class LobbyDetail ( generics . RetrieveUpdateDestroyAPIView ): permission_classes = [ IsAuthenticated ] queryset = Lobby . objects . all () serializer_class = LobbySerializer class LobbyGuests ( APIView ): permission_classes = [ IsAuthenticated ] def get ( self , request , pk ): guests = Guest . objects . filter ( lobby = pk ) . order_by ( 'id' ) serializer = GuestSerializer ( guests , many = True ) return Response ( serializer . data , status = status . HTTP_200_OK ) # def post(self, request, pk): # data = request.data # guest = Guest.objects.create( # lobby=Lobby.objects.get(pk=pk), # user=settings.AUTH_USER_MODEL.objects.get(pk=data['user_id']), # is_host=data['is_host'] # ) # # Create an article from the above data # serializer = GuestSerializer(guest) # if serializer.is_valid(raise_exception=True): # guest_saved = serializer.save() # return Response(guest_saved) class GuestList ( generics . ListCreateAPIView ): permission_classes = [ IsAuthenticated ] queryset = Guest . objects . all () serializer_class = GuestSerializer class GuestDetail ( generics . RetrieveUpdateDestroyAPIView ): permission_classes = [ IsAuthenticated ] queryset = Guest . objects . all () serializer_class = GuestSerializer class Shuffle_lobby ( APIView ): permission_classes = [ IsAuthenticated ] def get ( self , request , pk ): guests = Guest . objects . filter ( lobby = pk ) . order_by ( '?' ) lobby = Lobby . objects . get ( code = pk ) lobby . started = True lobby . save () for i , guest in enumerate ( guests ): guest . giving_to = guests [( i + 1 ) % len ( guests )] guest . save () # serializer = GuestSerializer(guests, many=True) return Response ( 'guests are successfully shuffled!' ) URLs \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0435\u0439: api/lobby/ - \u0421\u043f\u0438\u0441\u043e\u043a \u043b\u043e\u0431\u0431\u0438 api/guest/ - \u0421\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 api/lobby/ / - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043b\u043e\u0431\u0431\u0438 api/guest/ / - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0433\u043e\u0441\u0442\u044f api/lobby/ /guest/ - \u0421\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u043e\u0431\u0431\u0438 api/lobby/ /shuffle/ - \u041f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0433\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u043e\u0431\u0431\u0438 api/token/ - \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f / \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 api/token/refresh/ - \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 access \u0442\u043e\u043a\u0435\u043d\u0430 api/user/ / - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 api/user/create/ - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f api/user/logout/blacklist/ - \u041b\u043e\u0433\u0430\u0443\u0442 \u0424\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 Auth - \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f CreateLobby - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043b\u043e\u0431\u0431\u0438 Home - \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 JoinLobby - \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u043a \u043b\u043e\u0431\u0431\u0438 Lobby - \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043b\u043e\u0431\u0431\u0438 NotFound - \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043a\u0438 404 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b BackButton - \u041a\u043d\u043e\u043f\u043a\u0430 \u043d\u0430\u0437\u0430\u0434 Button - \u041a\u043d\u043e\u043f\u043a\u0430 FormWrapper - \u041e\u0431\u0435\u0440\u0442\u043a\u0430 \u0434\u043b\u044f \u0444\u043e\u0440\u043c Header - \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a Help - \u041f\u043e\u043c\u043e\u0449\u043d\u0438\u043a InputField - \u041f\u043e\u043b\u0435 \u0432\u0432\u043e\u0434\u0430 Loader - \u041a\u0440\u0443\u0442\u0438\u043b\u043a\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 PrivateRoute - \u041f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 \u043c\u0430\u0440\u0448\u0440\u0443\u0442 Textarea - \u041f\u043e\u043b\u0435 \u0432\u0432\u043e\u0434\u0430 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0445\u0443\u043a\u0438 useMultistepForm - \u0445\u0443\u043a \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0445 \u0444\u043e\u0440\u043c useMultistepForm.ts import { ReactElement , useState } from 'react' ; export function useMultistepForm ( steps : ReactElement []) { const [ currentStepIndex , setCurrentStepIndex ] = useState ( 0 ); function next () { setCurrentStepIndex (( i ) => { if ( i >= steps . length - 1 ) return i ; return i + 1 ; }); } function back () { setCurrentStepIndex (( i ) => { if ( i <= 0 ) return i ; return i - 1 ; }); } function goTo ( index : number ) { setCurrentStepIndex ( index ); } return { currentStepIndex , step : steps [ currentStepIndex ], steps , isFirstStep : currentStepIndex === 0 , isLastStep : currentStepIndex === steps . length - 1 , goTo , next , back , }; } Docker docker-compose.yml #docker-compose.yml version: \"3.8\" services: db: image: postgres:latest # image: pgdb-v2 environment: - POSTGRES_DB = sntwnf - POSTGRES_USER = admin - POSTGRES_PASSWORD = admin backend: restart: always build: context: ./backend_django command: gunicorn santa.wsgi --bind 0 .0.0.0:8000 # command: python3 manage.py runserver 0 .0.0.0:8000 ports: - \"8000:8000\" depends_on: - db frontend: build: context: ./frontend volumes: - react_build:/frontend/build nginx: restart: always image: nginx:latest ports: - 80 :8080 volumes: - ./nginx/nginx-setup.conf:/etc/nginx/conf.d/default.conf:ro - react_build:/var/www/frontend depends_on: - backend - frontend volumes: react_build: backend Dockerfile FROM python:3 ENV PYTHONUNBUFFERED = 1 WORKDIR /backend_django COPY . /backend_django RUN pip3 install -r requirements.txt COPY . . frontend Dockerfile FROM node:15.13-alpine WORKDIR /frontend COPY . . RUN npm install RUN npm run build nginx nginx-setup.conf upstream api { server backend : 8000 ; } server { listen 8080 ; location / { root /var/www/frontend ; } location /api/ { proxy_pass http://api ; proxy_set_header Host $http_host ; } }","title":"\u041f\u0435\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \"\u0422\u0430\u0439\u043d\u044b\u0439 \u0441\u0430\u043d\u0442\u0430\" (\u043b\u0440 3-4)"},{"location":"secret_santa/#3-4","text":"","title":"\u041f\u0435\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \"\u0422\u0430\u0439\u043d\u044b\u0439 \u0441\u0430\u043d\u0442\u0430\" (\u043b\u0440 3-4)"},{"location":"secret_santa/#_1","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u041b\u043e\u0431\u0431\u0438 \u0413\u043e\u0441\u0442\u044c \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c Custom Account Manager models.py from django.db import models from django.conf import settings from string import ascii_lowercase import random def generate_unique_code (): length = 6 while True : code = '' . join ( random . choices ( ascii_lowercase , k = length )) if Lobby . objects . filter ( code = code ) . count () == 0 : break return code class Lobby ( models . Model ): code = models . CharField ( max_length = 10 , unique = True , default = generate_unique_code , primary_key = True ) name = models . CharField ( max_length = 50 ) event_date = models . DateField ( null = True , blank = True ) created = models . DateField ( auto_now_add = True ) started = models . BooleanField ( default = False , null = True , blank = True ) def __str__ ( self ): return self . code class Meta : verbose_name = 'Lobby' verbose_name_plural = 'Lobbies' class Guest ( models . Model ): lobby = models . ForeignKey ( Lobby , on_delete = models . CASCADE ) user = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) is_host = models . BooleanField ( default = False ) giving_to = models . ForeignKey ( 'Guest' , on_delete = models . SET_NULL , null = True , blank = True ) def __str__ ( self ): return self . lobby . code + ' | ' + self . user . username from django.db import models from django.utils import timezone from django.utils.translation import gettext_lazy as _ from django.contrib.auth.models import AbstractBaseUser , PermissionsMixin , BaseUserManager class CustomAccountManager ( BaseUserManager ): def create_superuser ( self , username , name , password , ** other_fields ): other_fields . setdefault ( 'is_staff' , True ) other_fields . setdefault ( 'is_superuser' , True ) other_fields . setdefault ( 'is_active' , True ) if other_fields . get ( 'is_staff' ) is not True : raise ValueError ( 'Superuser must be assigned to is_staff=True.' ) if other_fields . get ( 'is_superuser' ) is not True : raise ValueError ( 'Superuser must be assigned to is_superuser=True.' ) return self . create_user ( username , name , password , ** other_fields ) def create_user ( self , username , name , password , ** other_fields ): if not username : raise ValueError ( _ ( 'You must provide a username' )) user = self . model ( username = username , name = name , ** other_fields ) user . set_password ( password ) user . save () return user class User ( AbstractBaseUser , PermissionsMixin ): username = models . CharField ( max_length = 150 , unique = True ) name = models . CharField ( max_length = 150 ) preferences = models . TextField ( _ ( 'preferences' ), max_length = 500 , blank = True ) start_date = models . DateTimeField ( default = timezone . now ) is_staff = models . BooleanField ( default = False ) is_active = models . BooleanField ( default = True ) objects = CustomAccountManager () USERNAME_FIELD = 'username' REQUIRED_FIELDS = [ 'name' ] def __str__ ( self ): return self . username","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"secret_santa/#_2","text":"views.py from functools import partial from django.http import JsonResponse from django.shortcuts import render from rest_framework.decorators import api_view from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status from rest_framework import generics from .models import Lobby , Guest from .serializers import LobbySerializer , GuestSerializer from rest_framework.permissions import AllowAny , IsAuthenticated from django.conf import settings # Create your views here. class LobbyList ( generics . ListCreateAPIView ): permission_classes = [ IsAuthenticated ] queryset = Lobby . objects . all () serializer_class = LobbySerializer class LobbyDetail ( generics . RetrieveUpdateDestroyAPIView ): permission_classes = [ IsAuthenticated ] queryset = Lobby . objects . all () serializer_class = LobbySerializer class LobbyGuests ( APIView ): permission_classes = [ IsAuthenticated ] def get ( self , request , pk ): guests = Guest . objects . filter ( lobby = pk ) . order_by ( 'id' ) serializer = GuestSerializer ( guests , many = True ) return Response ( serializer . data , status = status . HTTP_200_OK ) # def post(self, request, pk): # data = request.data # guest = Guest.objects.create( # lobby=Lobby.objects.get(pk=pk), # user=settings.AUTH_USER_MODEL.objects.get(pk=data['user_id']), # is_host=data['is_host'] # ) # # Create an article from the above data # serializer = GuestSerializer(guest) # if serializer.is_valid(raise_exception=True): # guest_saved = serializer.save() # return Response(guest_saved) class GuestList ( generics . ListCreateAPIView ): permission_classes = [ IsAuthenticated ] queryset = Guest . objects . all () serializer_class = GuestSerializer class GuestDetail ( generics . RetrieveUpdateDestroyAPIView ): permission_classes = [ IsAuthenticated ] queryset = Guest . objects . all () serializer_class = GuestSerializer class Shuffle_lobby ( APIView ): permission_classes = [ IsAuthenticated ] def get ( self , request , pk ): guests = Guest . objects . filter ( lobby = pk ) . order_by ( '?' ) lobby = Lobby . objects . get ( code = pk ) lobby . started = True lobby . save () for i , guest in enumerate ( guests ): guest . giving_to = guests [( i + 1 ) % len ( guests )] guest . save () # serializer = GuestSerializer(guests, many=True) return Response ( 'guests are successfully shuffled!' )","title":"\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u044b"},{"location":"secret_santa/#urls","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0435\u0439: api/lobby/ - \u0421\u043f\u0438\u0441\u043e\u043a \u043b\u043e\u0431\u0431\u0438 api/guest/ - \u0421\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 api/lobby/ / - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043b\u043e\u0431\u0431\u0438 api/guest/ / - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0433\u043e\u0441\u0442\u044f api/lobby/ /guest/ - \u0421\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u043e\u0431\u0431\u0438 api/lobby/ /shuffle/ - \u041f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u0433\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u043e\u0431\u0431\u0438 api/token/ - \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f / \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 api/token/refresh/ - \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 access \u0442\u043e\u043a\u0435\u043d\u0430 api/user/ / - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 api/user/create/ - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f api/user/logout/blacklist/ - \u041b\u043e\u0433\u0430\u0443\u0442","title":"URLs"},{"location":"secret_santa/#_3","text":"","title":"\u0424\u0440\u043e\u043d\u0442\u0435\u043d\u0434"},{"location":"secret_santa/#_4","text":"Auth - \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f CreateLobby - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043b\u043e\u0431\u0431\u0438 Home - \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 JoinLobby - \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u043a \u043b\u043e\u0431\u0431\u0438 Lobby - \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043b\u043e\u0431\u0431\u0438 NotFound - \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043a\u0438 404","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446"},{"location":"secret_santa/#_5","text":"BackButton - \u041a\u043d\u043e\u043f\u043a\u0430 \u043d\u0430\u0437\u0430\u0434 Button - \u041a\u043d\u043e\u043f\u043a\u0430 FormWrapper - \u041e\u0431\u0435\u0440\u0442\u043a\u0430 \u0434\u043b\u044f \u0444\u043e\u0440\u043c Header - \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a Help - \u041f\u043e\u043c\u043e\u0449\u043d\u0438\u043a InputField - \u041f\u043e\u043b\u0435 \u0432\u0432\u043e\u0434\u0430 Loader - \u041a\u0440\u0443\u0442\u0438\u043b\u043a\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 PrivateRoute - \u041f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 \u043c\u0430\u0440\u0448\u0440\u0443\u0442 Textarea - \u041f\u043e\u043b\u0435 \u0432\u0432\u043e\u0434\u0430 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b"},{"location":"secret_santa/#_6","text":"useMultistepForm - \u0445\u0443\u043a \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0445 \u0444\u043e\u0440\u043c useMultistepForm.ts import { ReactElement , useState } from 'react' ; export function useMultistepForm ( steps : ReactElement []) { const [ currentStepIndex , setCurrentStepIndex ] = useState ( 0 ); function next () { setCurrentStepIndex (( i ) => { if ( i >= steps . length - 1 ) return i ; return i + 1 ; }); } function back () { setCurrentStepIndex (( i ) => { if ( i <= 0 ) return i ; return i - 1 ; }); } function goTo ( index : number ) { setCurrentStepIndex ( index ); } return { currentStepIndex , step : steps [ currentStepIndex ], steps , isFirstStep : currentStepIndex === 0 , isLastStep : currentStepIndex === steps . length - 1 , goTo , next , back , }; }","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0445\u0443\u043a\u0438"},{"location":"secret_santa/#docker","text":"docker-compose.yml #docker-compose.yml version: \"3.8\" services: db: image: postgres:latest # image: pgdb-v2 environment: - POSTGRES_DB = sntwnf - POSTGRES_USER = admin - POSTGRES_PASSWORD = admin backend: restart: always build: context: ./backend_django command: gunicorn santa.wsgi --bind 0 .0.0.0:8000 # command: python3 manage.py runserver 0 .0.0.0:8000 ports: - \"8000:8000\" depends_on: - db frontend: build: context: ./frontend volumes: - react_build:/frontend/build nginx: restart: always image: nginx:latest ports: - 80 :8080 volumes: - ./nginx/nginx-setup.conf:/etc/nginx/conf.d/default.conf:ro - react_build:/var/www/frontend depends_on: - backend - frontend volumes: react_build:","title":"Docker"},{"location":"secret_santa/#backend","text":"Dockerfile FROM python:3 ENV PYTHONUNBUFFERED = 1 WORKDIR /backend_django COPY . /backend_django RUN pip3 install -r requirements.txt COPY . .","title":"backend"},{"location":"secret_santa/#frontend","text":"Dockerfile FROM node:15.13-alpine WORKDIR /frontend COPY . . RUN npm install RUN npm run build","title":"frontend"},{"location":"secret_santa/#nginx","text":"nginx-setup.conf upstream api { server backend : 8000 ; } server { listen 8080 ; location / { root /var/www/frontend ; } location /api/ { proxy_pass http://api ; proxy_set_header Host $http_host ; } }","title":"nginx"}]}