{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0432\u0430 \u0444\u0430\u0439\u043b\u0430 - \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. client.py \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0435\u0442, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0435\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. import socket #\u0438\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 conn = socket.socket(socket.SOCK_DGRAM) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 UDP conn.connect((socket.gethostname(), 1234)) #\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0445\u043e\u0441\u0442\u0443 (IP-\u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442) msg = 'Hello, server' #\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 conn.send(msg.encode(\"utf-8\")) # data = b\"\" #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0439 \u0431\u0430\u0439\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 tmp = conn.recv(16384) #\u043e\u0442\u0441\u044e\u0434\u0430 \u0432\u0441\u0435 \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e while tmp: data += tmp tmp = conn.recv(16384) print(data.decode(\"utf-8\")) conn.close() server.py \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. import socket #\u0438\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sock = socket.socket(socket.SOCK_DGRAM) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 UDP # \u0414\u043b\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f bind \u0441\u043e\u043a\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430: \u0445\u043e\u0441\u0442 \u0438 \u043f\u043e\u0440\u0442. sock.bind((socket.gethostname(), 1234)) sock.listen(1) #\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 while True: try: #\u043f\u043e\u043a\u0430 \u0432\u0435\u0440\u043d\u043e, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0431\u043b\u043e\u043a \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0438\u0446\u0439 #\u0424-\u0446\u0438\u044f \u0436\u0434\u0451\u0442 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043d\u0438\u043c \u0441\u043e\u043a\u0435\u0442 \u0438 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f. #\u0410\u0434\u0440\u0435\u0441 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u043f\u043e\u0440\u0442\u0430. conn, addr = sock.accept() data = conn.recv(16384) #\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b-\u043c \u0431\u0430\u0439\u0442 udata = data.decode(\"utf-8\") #\u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 bytes \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 print(udata) msg = \"Hello, client\" #\u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 conn.send(msg.encode(\"utf-8\")) #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435, \u0442.\u043a. \u0444-\u0446\u0438\u044f send \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u0438\u043f bytes conn.close() #\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 except KeyboardInterrupt: #\u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0431\u043b\u043e\u043a \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0438\u0446\u0439 sock.close() #\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 break Commands py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Hello, server - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Hello, client - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: a. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 client.py \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0435\u0442, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0435\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((socket.gethostname(), 1234)) while True: data = sock.recv(1024) print(f\"server: {data.decode()}\") msg = input(\"Client: \") sock.send(str.encode(msg)) server.py \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 (\u043a\u0430\u0442\u0435\u0442\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430), \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 (\u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430) \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. import socket def pifagor(a, b): #\u0444\u0443\u043d\u043a\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443 return a**2 + b**2 sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 TCP sock.bind((socket.gethostname(), 1234)) # \u0414\u043b\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f bind \u0441\u043e\u043a\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430: \u0445\u043e\u0441\u0442 \u0438 \u043f\u043e\u0440\u0442. sock.listen(1) #\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 #\u0424-\u0446\u0438\u044f \u0436\u0434\u0451\u0442 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043d\u0438\u043c \u0441\u043e\u043a\u0435\u0442 \u0438 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f. #\u0410\u0434\u0440\u0435\u0441 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u043f\u043e\u0440\u0442\u0430. conn, addr = sock.accept() #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435, \u0442.\u043a. \u0444-\u0446\u0438\u044f send \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u0438\u043f bytes conn.send(str.encode(f\"Hello, client\\n\" f\"I solve Pythagorean theorem\\n\" f\"Enter A as a number\\n\")) a = \"\" #\u043a\u0430\u0442\u0435\u0442 b = \"\" #\u043a\u0430\u0442\u0435\u0442 c = \"\" #\u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430 while not c: while not a: #\u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u0430\u0442\u0435\u0442 data = conn.recv(1024).decode() #\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b-\u043c \u0431\u0430\u0439\u0442 if data.isdigit(): #\u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 a = int(data) #\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 integer conn.send(b\"Enter B as a number\\n\") #\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 else: conn.send(b\"Not a number\\n\" b\"Enter A as a number\\n\") #\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435, \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 while not b: #\u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0442\u0435\u0442 data = conn.recv(1024).decode() if data.isdigit(): b = int(data) else: conn.send(b\"Not a number\\n\" b\"Enter B as a number\\n\") c = pifagor(a, b) #\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0432\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 \u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443 conn.send(str.encode(f\"\u041e\u0442\u0432\u0435\u0442: {c}\")) #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 conn.close() #\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 Commands py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>server: Hello, client >>I solve Pythagorean theorem >>Enter A as a number 2 >>Client: 2 >>server: Enter B as a number 3 >>server: \u041e\u0442\u0432\u0435\u0442: 13 - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. client.py \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0435\u0442, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0435\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\u0439. import socket with socket.socket() as sock: sock.connect((socket.gethostname(), 1234)) sock.settimeout(5) sock.send(b\"GET / HTTP/1.1\\n\") data = sock.recv(16384) udata = data.decode('utf-8') print(udata) server.py \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. import socket with socket.socket() as sock: sock.bind((socket.gethostname(), 1234)) sock.listen(1) conn, addr = sock.accept() with conn: with open('C:/Users/work11pro1/.virtualenvs/ITMO_ICT_WebDevelopment_2022-2023/students/k33421/laboratory_works/Bobrova_Maria/laboratory_work_1/task_3/index.html') as f: msg = f.read() print(conn.recv(16348).decode('utf-8')) response = 'HTTP/1.0 200 OK\\n\\n' + msg conn.sendall(response.encode('utf-8')) index.html \u0418\u0437 \u044d\u0442\u043e\u0433\u043e html \u0444\u0430\u0439\u043b\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>CandyShop</title> </head> <body> <center> <h1>CandyShop</h1> </center> <p>Hi there! Please, buy candies</p> </body> </html> Commands py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>GET / HTTP/1.1 - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>HTTP/1.0 200 OK - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >> - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435: <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>CandyShop</title> </head> <body> <center> <h1>CandyShop</h1> </center> <p>Hi there! Please, buy candies</p> </body> </html> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. client.py Thread \u2014 \u044d\u0442\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0432 \u0432\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u0432\u0435 \u0438 \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u041d\u043e \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0442\u043e\u043a\u0438 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e: \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043a\u0430\u0436\u0435\u0442\u0441\u044f. \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0435\u0442, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0435\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. \u0412 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u044e\u0437\u0435\u0440\u044b, \u043e\u0442 \u043a\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0445\u043e\u0434\u044f\u0442. import socket, threading # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) while True: name = input('\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u0438\u0447\u043d\u044b\u0439 \u043d\u0438\u043a, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430: ') if 1 < len(name) < 10: break # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client.connect((socket.gethostname(), 1234)) print('-' * 5 + '\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443' + '-' * 5) print('-' * 5 + 'Enter, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c' + '-' * 5) def outdatas(): while True: # \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 outdata = input('') print() if outdata == 'enter': break # \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 client.send(f'{name}:{outdata}'.encode('utf-8')) print('%s:%s' % (name, outdata)) def indatas(): while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 indata = client.recv(1024) # \u0417\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e print(indata.decode('utf-8')) # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t1 = threading.Thread(target=indatas, name='input') # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t2 = threading.Thread(target=outdatas, name='out') # \u041d\u0430\u0447\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c t1.start() t2.start() # \u0417\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0442\u043e\u043a, \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c\u0441\u044f, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430. # t1.join() t2.join() # \u0417\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 print('-' * 5 + '\u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d' + '-' * 5) client.close() server.py \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. import socket, threading # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u043a\u0435\u0442\u0430 server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0423\u043a\u0430\u0436\u0438\u0442\u0435 IP \u0438 \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server.bind((socket.gethostname(), 1234)) # \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 server.listen(5) print('Enter Enter \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430') # \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 clients = list() # \u0425\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u043f\u043e\u0442\u043e\u043a\u0438 end = list() # \u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u0430\u0434\u0440\u0435\u0441\u0430 \u043a\u043e\u0441\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 def accept(): while True: client, addr = server.accept() clients.append(client) print(\"\\ r\" + '-' * 5 + f'\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0447\u0435\u0440\u0435\u0437 {addr}: \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- {len (clients)}' + '-' * 5, end = '') #\u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043b\u044e\u0434\u044c\u043c\u0438 def recv_data(client): while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 try: indata = client.recv(1024) except Exception as e: clients.remove(client) end.remove(client) print(\"\\ r\" + '-' * 5 + f'\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d: \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- {len (clients)}' + '-' * 5, end = '') break print(indata.decode('utf-8')) for clien in clients: # \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0435\u0435 \u0434\u0440\u0443\u0433\u0438\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c if clien != client: clien.send(indata) def outdatas(): while True: # \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 print('') outdata = input('') print() if outdata == 'enter': break print('\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432\u0441\u0435\u043c:% s' % outdata) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 for client in clients: client.send(f\"\u0421\u0435\u0440\u0432\u0435\u0440: {outdata}\".encode('utf-8')) def indatas(): while True: # \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0446\u0438\u043a\u043b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043f\u043e\u0442\u043e\u043a for clien in clients: # \u0415\u0441\u043b\u0438 \u043f\u043e\u0442\u043e\u043a \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c if clien in end: continue index = threading.Thread(target=recv_data, args=(clien,)) index.start() end.append(clien) # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t1 = threading.Thread(target=indatas, name='input') t1.start() # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t2 = threading.Thread(target=outdatas, name='out') t2.start() # \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t3 = threading.Thread(target=accept(), name='accept') t3.start() # \u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u043a\u0440\u0443\u0433, \u043f\u043e\u043a\u0430 \u043f\u043e\u0434\u043f\u043e\u0442\u043e\u043a \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d, \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u044c\u0441\u044f # t1.join() t2.join() # \u0412\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432\u0441\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u044b for client in clients: client.close() print('-' * 5 + '\u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d' + '-' * 5) Commands py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. Enter Enter \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u0438\u0447\u043d\u044b\u0439 \u043d\u0438\u043a, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430: - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Maria - \u0412\u0432\u043e\u0434\u0438\u043c \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. -----\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443----- -----Enter, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c----- - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 >>Hi! - \u0412\u0432\u043e\u0434\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. Maria:Hi! - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \\ r-----\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0447\u0435\u0440\u0435\u0437 ('192.168.56.1', 49653): \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- 1-----Maria:Hi! - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u0438\u0447\u043d\u044b\u0439 \u043d\u0438\u043a, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430: - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Sofia - \u0412\u0432\u043e\u0434\u0438\u043c \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. -----\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443----- -----Enter, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c----- - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 >>Hello, Mary) - \u0412\u0432\u043e\u0434\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. Sofia:Hello, Mary) - \u0412\u044b\u0432\u043e\u0434 \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0438 \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445. \\ r-----\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0447\u0435\u0440\u0435\u0437 ('192.168.56.1', 49766): \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- 2-----Sofia:Hello, Mary) - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u0418 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. server.py \u0421\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. import socket class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u043a\u0435\u0442\u0430 self.points = {\"Maths\": [\"4\"]} def serve_forever(self): try: self.server.bind((self.host, self.port)) # \u0423\u043a\u0430\u0436\u0438\u0442\u0435 IP \u0438 \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 self.server.listen() # \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 while True: client, address = self.server.accept() #\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 Socket \u0434\u043b\u044f \u0437\u0430\u043d\u043e\u0432\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. self.serve_client(client) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 > {self.host}:{self.port}\") except KeyboardInterrupt: #\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0435\u0435 \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043a\u043b\u0430\u0432\u0438\u0448\u0438 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 self.server.close() def serve_client(self, client): try: data = client.recv(1024).decode() req = self.parse_request(data) res = self.handle_request(req) self.send_response(client, res) print(f'\u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f') except Exception: print(f'\u041a\u043b\u0438\u0435\u043d\u0442 \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f') client.close() #\u0427\u0442\u0435\u043d\u0438\u0435 \u0438 \u0440\u0430\u0437\u0431\u043e\u0440 (\u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0435) HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 def parse_request(self, data): #\u0438\u0437 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443, \u0442.\u0435. \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0431\u0430\u0439\u0442, \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0449\u0443\u044e\u0441\u044f \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0435\u0439 \\r\\n req = data.rstrip('\\r\\n') text = req[:data.index(\"\\n\")].split() if len(text) != 3: raise Exception('Malformed request line') method, target, version = text if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') req = {'data': {}, 'method': method} if '?' in target: req['method'] = 'POST' data = target.split('?')[1].split('&') for value in data: index, info = value.split('=') req['data'][index] = info return req # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_post(self, req): course = req[\"data\"][\"course\"] points = req[\"data\"][\"points\"] if course not in self.points: self.points[course] = [] if int(points) < 1 or int(points) > 5: raise Exception(f\"\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438\") self.points[course].append(points) return self.handle_get() def handle_get(self): type = \"text/html; charset=utf-8\" first_settings = \"<html><head><style></style></head><body>\" course = \"<form><label>Subject: </label><input name='course' /><br><br>\" points = \"<label>Grade: </label><input name='points' /><br><br>\" button = \"<input type='submit'></form>\" body = first_settings + course + points + button for course_name in self.points: body += f\"<div><span>{course_name}: {self.points[course_name]}</span></div>\" second_settings = \"</body></html>\" body += second_settings body = body.encode(\"utf-8\") headers = [(\"Content-Type\", type), (\"Content-Length\", len(body))] return Response(200, \"OK\", headers, body) #\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 def send_response(self, client, res): #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 file = client.makefile('wb') status_line = f\"HTTP/1.1 {res.status} {res.reason}\\r\\n\" status_line = status_line.encode(\"utf-8\") file.write(status_line) if res.headers: for (index, info) in res.headers: header_line = f\"{index}: {info}\\r\\n\" file.write(header_line.encode(\"utf-8\")) file.write(b\"\\r\\n\") if res.body: file.write(res.body) file.flush() file.close() #\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0430 \u043b\u044e\u0431\u043e\u043c \u0438\u0437 \u044d\u0442\u0430\u043f\u043e\u0432, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435 def get_error(self, code, text): return Response(code, \"OK\", \"Content-Type: text/html; charset=utf-8\", text) if __name__ == \"__main__\": MyHTTPServer(\"localhost\", 9095, \"example.com\").serve_forever() Commands py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. 'localhost:9095' - \u0412\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u043f\u043e\u0438\u0441\u043a\u043e\u0432\u0438\u043a \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b models.py from django.db import models from django.contrib.auth.models import AbstractUser class User(AbstractUser): is_student = models.BooleanField(default=False) is_teacher = models.BooleanField(default=False) with_additional_info = models.BooleanField(default=False) CHARACTERS = [ ('K', 'K') ] NUMBERS = [ (1, '3241'), (2, '3242') ] SUBJECTS = [ (\"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430\", \"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430\"), (\"\u0418\u0441\u0442\u043e\u0440\u0438\u044f\", \"\u0418\u0441\u0442\u043e\u0440\u0438\u044f\"), (\"\u041a\u0418\u0413\", \"\u041a\u0418\u0413\"), (\"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\", \"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\"), (\"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\", \"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\") ] class StudentGroup(models.Model): character = models.CharField(max_length=1, choices=CHARACTERS, default=\"K\", verbose_name=\"\u041b\u0438\u0442\u0435\u0440\u0430\") number = models.IntegerField(choices=NUMBERS, default=1, verbose_name=\"\u041d\u043e\u043c\u0435\u0440\") def __str__(self): return f\"{self.character}{self.number}\" class Student(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True) student_group = models.ForeignKey(StudentGroup, on_delete=models.CASCADE, null=True) def __str__(self): return f\"{self.user.first_name} {self.user.last_name}\" class Teacher(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True) subject = models.CharField(max_length=30, choices=SUBJECTS, verbose_name=\"\u041f\u0440\u0435\u0434\u043c\u0435\u0442\") def __str__(self): return f\"{self.user.first_name} {self.user.last_name}\" class Homework(models.Model): student_group = models.ForeignKey(StudentGroup, on_delete=models.CASCADE, null=True) teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, null=True) subject = models.CharField(max_length=30, choices=SUBJECTS, verbose_name=\"\u041f\u0440\u0435\u0434\u043c\u0435\u0442\") start_date = models.DateTimeField(verbose_name=\"\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438\") end_date = models.DateTimeField(verbose_name=\"\u0421\u0434\u0430\u0442\u044c \u0434\u043e\") task_description = models.TextField(verbose_name=\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\") fine_info = models.CharField(max_length=150, verbose_name=\"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445\") max_points = models.IntegerField(verbose_name=\"\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432\") class HomeworkAnswer(models.Model): homework = models.ForeignKey(Homework, on_delete=models.CASCADE) student = models.ForeignKey(Student, on_delete=models.CASCADE) date = models.DateTimeField(auto_now=True, blank=True) answer = models.TextField(null=True, blank=True, verbose_name=\"\u041e\u0442\u0432\u0435\u0442\") class TeacherAnswerOnHomework(models.Model): homework_answer = models.OneToOneField(HomeworkAnswer, on_delete=models.CASCADE, primary_key=True) points = models.IntegerField(default=0, verbose_name=\"\u0411\u0430\u043b\u043b\u044b\") message = models.TextField(null=True, blank=True, verbose_name=\"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\") teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True) date = models.DateTimeField(auto_now=True, blank=True) forms.py from django.contrib.auth.forms import UserCreationForm from django import forms from .models import Teacher, Student, User, Homework, StudentGroup, HomeworkAnswer, TeacherAnswerOnHomework ROLES = [ ('teacher', 'Teacher'), ('student', 'Student'), ] groups = [(group.pk, group) for group in StudentGroup.objects.all()] class RegisterForm(UserCreationForm): role = forms.ChoiceField( required=True, choices=ROLES ) class Meta: model = User fields = (\"username\", \"first_name\", \"last_name\", \"password1\", \"password2\") def save(self, commit=True): user = super(RegisterForm, self).save(commit=False) print(\"ROLE\", self.cleaned_data[\"role\"]) if self.cleaned_data[\"role\"] == \"teacher\": user.is_teacher = True if self.cleaned_data[\"role\"] == \"student\": user.is_student = True if commit: user.save() return user class TeacherForm(forms.ModelForm): def __init__(self, *args, **kwargs): self.user = kwargs.pop('user', None) super(TeacherForm, self).__init__(*args, **kwargs) class Meta: model = Teacher fields = [\"subject\"] def save(self, commit=True): teacher = super(TeacherForm, self).save(commit=False) teacher.user = self.user teacher.user.with_additional_info = True if commit: teacher.user.save() teacher.save() return teacher class StudentForm(forms.Form): def __init__(self, *args, **kwargs): self.user = kwargs.pop('user', None) super(StudentForm, self).__init__(*args, **kwargs) student_group = forms.ChoiceField(required=True, choices=groups) def save(self, commit=True): student = Student() student.user = self.user student.user.with_additional_info = True student.student_group = StudentGroup.objects.get(pk=self.cleaned_data[\"student_group\"]) if commit: student.user.save() student.save() return student class TeacherAnswerOnHomeworkForm(forms.ModelForm): class Meta: model = TeacherAnswerOnHomework fields = [\"points\", \"message\"] def __init__(self, *args, **kwargs): self.homework_answer = kwargs.pop('homework_answer', None) self.user = kwargs.pop('user', None) super(TeacherAnswerOnHomeworkForm, self).__init__(*args, **kwargs) def save(self, commit=True): teacher_homework_answer = super(TeacherAnswerOnHomeworkForm, self).save(commit=False) teacher_homework_answer.homework_answer = self.homework_answer teacher_homework_answer.teacher = self.user.teacher if commit: teacher_homework_answer.save() return teacher_homework_answer class HomeworkAnswerForm(forms.ModelForm): def __init__(self, *args, **kwargs): self.homework = kwargs.pop('homework', None) self.student = kwargs.pop('student', None) super(HomeworkAnswerForm, self).__init__(*args, **kwargs) class Meta: model = HomeworkAnswer fields = [\"answer\"] answer = forms.CharField(label='message', max_length=180) def save(self, commit=True): homework_answer = super(HomeworkAnswerForm, self).save(commit=False) homework_answer.homework = self.homework homework_answer.student = self.student if commit: homework_answer.save() return homework_answer class HomeworkForm(forms.ModelForm): def __init__(self, *args, **kwargs): self.user = kwargs.pop('user', None) super(HomeworkForm, self).__init__(*args, **kwargs) class Meta: model = Homework fields = [\"task_description\", \"start_date\", \"end_date\", \"max_points\", \"fine_info\"] widgets = { \"start_date\": forms.DateInput(format='%d/%m/%Y', attrs={'type': 'date'}), \"end_date\": forms.DateInput(format='%d/%m/%Y', attrs={'type': 'date'}) } student_group = forms.ChoiceField(required=True, choices=groups) def save(self, commit=True): homework = super(HomeworkForm, self).save(commit=False) homework.student_group = StudentGroup.objects.get(pk=self.cleaned_data[\"student_group\"]) homework.teacher = Teacher.objects.get(user=self.user) homework.subject = homework.teacher.subject if commit: homework.save() return homework views.py from django.shortcuts import render # Create your views here. import django.db import django.db from django.http import HttpResponse from django.shortcuts import render, redirect from django.contrib.auth.decorators import login_required from .decorators import student_required, teacher_required, additional_info_check from django.contrib.auth import authenticate, login, logout from .forms import RegisterForm, TeacherForm, StudentForm, HomeworkAnswerForm, HomeworkForm, \\ TeacherAnswerOnHomeworkForm from .models import Homework, Teacher, Student, HomeworkAnswer, TeacherAnswerOnHomework def registerPage(requset): form = RegisterForm if requset.method == \"POST\": form = RegisterForm(requset.POST) if form.is_valid(): form.save() return redirect('login') context = {'form': form} return render(requset, 'pages/register.html', context) def loginPage(request): if request.method == \"POST\": username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('home') context = {} return render(request, 'pages/login.html', context) @login_required(login_url='login') def add_info(request): if request.user.is_teacher: if request.method == \"POST\": form = TeacherForm(request.POST, user=request.user) if form.is_valid(): form.save() return redirect('home') else: form = TeacherForm(user=request.user) context = {\"form\": form} return render(request, \"pages/add_info.html\", context) if request.user.is_student: if request.method == \"POST\": form = StudentForm(request.POST, user=request.user) if form.is_valid(): form.save() return redirect('home') else: form = StudentForm(user=request.user) context = {\"form\": form} return render(request, \"pages/add_info.html\", context) return HttpResponse(\"You are not teacher or student\") @login_required(login_url='login') @additional_info_check() def home(request): if request.user.is_teacher: return redirect(\"teacher_home\") if request.user.is_student: return redirect(\"student_home\") return HttpResponse(\"You are not teacher or student\") def get_checked_and_unchecked_homeworks(homeworks): checked_homeworks = [] unchecked_homeworks = [] for homework in homeworks: try: t = homework.teacheransweronhomework if t: checked_homeworks.append(homework) except TeacherAnswerOnHomework.DoesNotExist: unchecked_homeworks.append(homework) return {\"checked_homeworks\": checked_homeworks, \"unchecked_homeworks\": unchecked_homeworks} @login_required(login_url='login') @teacher_required() def teacher_marks_page(request): homeworks = Homework.objects.filter(teacher=request.user.teacher) homework_answers = [] for homework in homeworks: try: homework_answers.append(HomeworkAnswer.objects.get(homework=homework)) except HomeworkAnswer.DoesNotExist: continue filtered_homeworks = get_checked_and_unchecked_homeworks(homework_answers) context = {\"homework_answers\": homework_answers, \"checked_homeworks\": filtered_homeworks[\"checked_homeworks\"], \"unchecked_homeworks\": filtered_homeworks[\"unchecked_homeworks\"]} return render(request, 'pages/marks.html', context) @login_required(login_url='login') @student_required() def student_marks_page(request): student = Student.objects.get(user=request.user) homeworks = Homework.objects.filter(student_group=student.student_group) homework_answers = [] for homework in homeworks: try: homework_answers.append(HomeworkAnswer.objects.get(homework=homework)) except HomeworkAnswer.DoesNotExist: continue filtered_homeworks = get_checked_and_unchecked_homeworks(homework_answers) context = {\"homework_answers\": homework_answers, \"checked_homeworks\": filtered_homeworks[\"checked_homeworks\"], \"unchecked_homeworks\": filtered_homeworks[\"unchecked_homeworks\"]} return render(request, 'pages/marks.html', context) @login_required(login_url='login') @teacher_required() def delete_homework(request, work_id): homework = Homework.objects.get(pk=work_id) homework.delete() return redirect(\"home\") @login_required(login_url='login') @teacher_required() def change_homework(request, work_id): homework = Homework.objects.get_or_create(pk=work_id)[0] if request.method == \"POST\": form = HomeworkForm(request.POST, instance=homework, user=request.user) if form.is_valid(): form.save() return redirect(\"home\") form = HomeworkForm(instance=homework, user=request.user) context = {\"word_id\": work_id, \"form\": form, \"homework\": homework} return render(request, 'pages/create_homework.html', context) @login_required(login_url='login') @teacher_required() def create_homework(request): if request.method == \"POST\": form = HomeworkForm(request.POST, user=request.user) if form.is_valid(): form.save() return redirect(\"home\") form = HomeworkForm(user=request.user) context = {\"form\": form} return render(request, 'pages/create_homework.html', context) @login_required(login_url='login') @teacher_required() def teacher_home_page(request): teacher = Teacher.objects.get(user=request.user) homeworks = Homework.objects.filter(teacher=teacher) context = {\"homeworks\": homeworks} return render(request, \"pages/home.html\", context) @login_required(login_url='login') @student_required() def student_home_page(request): student = Student.objects.get(user=request.user) completed_words = HomeworkAnswer.objects.all() completed_words = [work.homework for work in completed_words] homeworks = Homework.objects.filter(student_group=student.student_group) homeworks = [homework for homework in homeworks if homework not in completed_words] context = {\"homeworks\": homeworks} return render(request, \"pages/home.html\", context) @login_required(login_url='login') @login_required() def marks(request): if request.user.is_teacher: return redirect('teacher_marks') if request.user.is_student: return redirect('student_marks') @login_required(login_url='login') @teacher_required() def rate_homework(request, work_id): try: homework_answer = HomeworkAnswer.objects.get(pk=work_id) except HomeworkAnswer.DoesNotExist: return HttpResponse(\"Homework answer does not exist\") try: if request.method == \"POST\": form = TeacherAnswerOnHomeworkForm(request.POST, instance=homework_answer.teacheransweronhomework, homework_answer=homework_answer, user=request.user) if form.is_valid(): form.save() return redirect(\"marks\") form = TeacherAnswerOnHomeworkForm(instance=homework_answer.teacheransweronhomework, homework_answer=homework_answer, user=request.user) context = {\"form\": form, \"homework_answer\": homework_answer} return render(request, 'pages/rate_homework.html', context) except TeacherAnswerOnHomework.DoesNotExist: if request.method == \"POST\": form = TeacherAnswerOnHomeworkForm(request.POST, homework_answer=homework_answer, user=request.user) if form.is_valid(): form.save() return redirect(\"marks\") form = TeacherAnswerOnHomeworkForm(homework_answer=homework_answer, user=request.user) context = {\"form\": form, \"homework_answer\": homework_answer} return render(request, 'pages/rate_homework.html', context) @login_required(login_url='login') @student_required() def make_homework(request, work_id): student = Student.objects.get(user=request.user) try: homework = Homework.objects.get(pk=work_id) except Homework.DoesNotExist: return HttpResponse(\"Homework answer does not exist\") if request.method == \"POST\": form = HomeworkAnswerForm(request.POST, homework=homework, student=student) if form.is_valid(): form.save() return redirect(\"marks\") form = HomeworkAnswerForm(homework=homework, student=student) context = {\"form\": form, \"homework\": homework} return render(request, 'pages/make_homework.html', context) @login_required(login_url='login') def logoutUser(request): logout(request) return redirect('login') urls.py from django.contrib import admin from django.urls import path import table.views urlpatterns = [ path('admin/', admin.site.urls), path('register/', table.views.registerPage, name=\"register\"), path('login/', table.views.loginPage, name=\"login\"), path(\"\", table.views.home, name=\"home\"), path(\"add_info/\", table.views.add_info, name=\"add_info\"), path(\"logout/\", table.views.logoutUser, name=\"logout\"), path(\"marks/\", table.views.marks, name=\"marks\"), path(\"teacher_marks/\", table.views.teacher_marks_page, name=\"teacher_marks\"), path(\"student_marks/\", table.views.student_marks_page, name=\"student_marks\"), path(\"make_homework/<int:work_id>/\", table.views.make_homework, name=\"make_homework\"), path(\"change_homework/<int:work_id>/\", table.views.change_homework, name=\"change_homework\"), path(\"create_homework/\", table.views.create_homework, name=\"create_homework\"), path(\"teacher_home/\", table.views.teacher_home_page, name=\"teacher_home\"), path(\"student_home/\", table.views.student_home_page, name=\"student_home\"), path(\"delete_homework/<int:work_id>/\", table.views.delete_homework, name=\"delete_homework\"), path(\"rate_homework/<int:work_id>/\", table.views.rate_homework, name=\"rate_homework\") ] \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. models.py from django.db import models from django.contrib.auth.models import AbstractUser # Create your models here. class Car_owner(models.Model): id_owner = models.IntegerField(primary_key = True) last_name = models.CharField(max_length = 30, null = False) first_name = models.CharField(max_length = 30, null = False) birth_day = models.DateField(null = True) passport = models.IntegerField(null=True) address = models.CharField(max_length=50, null=True, blank=True) nationality = models.CharField(max_length=20, null=True, blank=True) class Car(models.Model): id_car = models.IntegerField(primary_key = True) state_number = models.CharField(max_length = 15, null = False) mark_car = models.CharField(max_length = 20, null = False) model_car = models.CharField(max_length = 20, null = False) color = models.CharField(max_length = 30, null = True) class Ownerdhip(models.Model): id_owner_car = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Car_owner, on_delete = models.CASCADE) id_car = models.ForeignKey(Car, on_delete = models.CASCADE) start_date = models.DateField() end_date = models.DateField(null = True) class Driver_license(models.Model): id_license = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Car_owner, on_delete = models.CASCADE) license_number = models.CharField(max_length = 10, null = False) type = models.CharField(max_length = 10, null = False) date_of_license= models.DateField() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432: Car_owner(1, 'LN1', 'FN1', '1990-01-1').save() Car_owner(2, 'LN2', 'FN2', '1991-01-1').save() Car_owner(3, 'LN3', 'FN3', '1992-01-1').save() Car_owner(4, 'LN4', 'FN4', '1993-01-1').save() Car_owner(5, 'LN5', 'FN5', '1994-01-1').save() Car_owner(6, 'LN6', 'FN6', '1995-01-1').save() for i in Car_owner.objects.all(): ...: print(i) ...: Car_owner object (1) Car_owner object (2) Car_owner object (3) Car_owner object (4) Car_owner object (5) Car_owner object (6) for i in Car_owner.objects.all(): ...: print(i.id_owner) ...: 1 2 3 4 5 6 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Car(1, 'A1A1', 'BMW', 'Model1', 'white').save() Car(2, 'A2A2', 'BMW', 'Model2', 'black').save() Car(3, 'A3A3', 'Toyota', 'Model3', 'blue').save() Car(4, 'A4A4', 'Toyota', 'Model4', 'white').save() Car(5, 'A5A5', 'Audi', 'Model5', 'red').save() Car(6, 'A6A6', 'Audi', 'Model6', 'balck').save() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 Driver_license(1, 1, '1234567', 'B', '2010-01-01').save() Driver_license(2, 2, '4567890', 'B', '2011-01-01').save() Driver_license(3, 3, '6527810', 'B', '2012-01-01').save() Driver_license(4, 4, '65228340', 'B', '2013-01-01').save() Driver_license(5, 5, '15228143', 'B', '2014-01-01').save() Driver_license(6, 6, '13298123', 'B', '2015-01-01').save() \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Ownerdhip(1, 1, 1, '2011-01-01', '2012-01-01').save() Ownerdhip(2, 2, 2, '2012-01-01', '2013-01-01').save() Ownerdhip(3, 3, 3, '2013-01-01', '2014-01-01').save() Ownerdhip(4, 4, 4, '2014-01-01', '2015-01-01').save() Ownerdhip(5, 5, 5, '2015-01-01', '2016-01-01').save() Ownerdhip(6, 6, 6, '2016-01-01', '2017-01-01').save() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0417\u0430\u043f\u0440\u043e\u0441 1 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): In [45]: Car.objects.filter(mark_car=\"Toyota\") Out[45]: <QuerySet [<Car: Car object (3)>, <Car: Car object (4)>]> \u0417\u0430\u043f\u0440\u043e\u0441 2 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): In [46]: Car_owner.objects.filter(first_name=\"FN3\") Out[46]: <QuerySet [<Car_owner: Car_owner object (3)>]> \u0417\u0430\u043f\u0440\u043e\u0441 3 \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): In [48]: take_id = Car_owner.objects.all()[1].id_owner In [49]: Driver_license.objects.get(id_owner=take_id) Out[49]: <Driver_license: Driver_license object (2)> \u0417\u0430\u043f\u0440\u043e\u0441 4 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): In [2]: Car_owner.objects.filter(ownership__id_car__color = 'red') Out[2]: <QuerySet [<Car_owner: Car_owner object (5)>]> \u0417\u0430\u043f\u0440\u043e\u0441 5 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): In [3]: Car_owner.objects.filter(ownership__start_date__gte=\"2013-01-01\") Out[3]: <QuerySet [<Car_owner: Car_owner object (3)>, <Car_owner: Car_owner object (4)>, <Car_owner: Car_owner object (5)>, <Car_owner: Car_owner object (6)>]> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0417\u0430\u043f\u0440\u043e\u0441 1 \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: In [59]: from django.db.models import Min, Max In [60]: Driver_license.objects.aggregate(date_of_license=Min(\"date_of_license\")) Out[60]: {'date_of_license': datetime.date(2010, 1, 1)} \u0417\u0430\u043f\u0440\u043e\u0441 2 \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: In [62]: Ownerdhip.objects.aggregate(start_date=Max(\"start_date\")) Out[62]: {'start_date': datetime.date(2016, 1, 1)} \u0417\u0430\u043f\u0440\u043e\u0441 3 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: In [64]: from django.db.models import Count In [65]: Ownerdhip.objects.values(\"id_owner\").annotate(Count(\"id_car\")) Out[65]: <QuerySet [{'id_owner': 1, 'id_car__count': 1}, {'id_owner': 2, 'id_car__count': 1}, {'id_owner': 3, 'id_car__count': 1}, {'id_owner': 4, 'id_car__count': 1}, {'id_owner': 5, 'id _car__count': 1}, {'id_owner': 6, 'id_car__count': 1}]> \u0417\u0430\u043f\u0440\u043e\u0441 4 \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: In [66]: Car.objects.values(\"mark_car\").annotate(Count(\"id_car\")) Out[66]: <QuerySet [{'mark_car': 'Audi', 'id_car__count': 2}, {'mark_car': 'BMW', 'id_car__count': 2}, {'mark_car': 'Toyota', 'id_car__count': 2}]> \u0417\u0430\u043f\u0440\u043e\u0441 5 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: In [79]: Car_owner.objects.order_by(\"driver_license__date_of_license\") Out[79]: <QuerySet [<Car_owner: Car_owner object (1)>, <Car_owner: Car_owner object (2)>, <Car_owner: Car_owner object (3)>, <Car_owner: Car_owner object (4)>, <Car_owner: Car_owner objec t (5)>, <Car_owner: Car_owner object (6)>]> \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 models.py from django.db import models from django.contrib.auth.models import AbstractUser class Organizer(AbstractUser): tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Participant(models.Model): name = models.CharField(max_length=100) breed_types = ( ('h', 'haski'), ('t', 'terrier'), ('b', 'bulldog'), ) breed = models.CharField(max_length=1, choices=breed_types) age = models.IntegerField() family = models.CharField(max_length=1000) owner_data = models.CharField(max_length=1000) club = models.ForeignKey('Club', on_delete=models.CASCADE, null=True, blank=True ) def __str__(self): return self.name class Show(models.Model): year = models.IntegerField(primary_key=True) show_types = ( ('mono', 'mono-breed'), ('poly', 'poly-breed') ) type = models.CharField(max_length=4, choices=show_types) participants = models.ManyToManyField('Participant', # through='Participation', related_name='show_participants' ) def __str__(self): return str(self.year) class Participation(models.Model): participant = models.ForeignKey('Participant', on_delete=models.CASCADE) medal_types = ( ('g', 'gold'), ('s', 'silver'), ('b', 'bronze'), ) medal = models.CharField(max_length=1, choices=medal_types, null=True) rings = models.ManyToManyField('Ring', null=True, blank=True) vaccinated = models.DateField() dismissed = models.BooleanField() final_grade = models.IntegerField(blank=True, null=True) def __str__(self): return f'{self.participant}' class Expert(models.Model): name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) club = models.CharField(max_length=100) def __str__(self): return f'{self.name} {self.last_name}' class Club(models.Model): name = models.CharField(max_length=100) members = models.ManyToManyField('Participant', related_name='club_members' ) def __str__(self): return self.name class Ring(models.Model): show = models.ForeignKey('Show', on_delete=models.CASCADE) experts = models.ManyToManyField('Expert', # through='Grade' related_name='ring_experts', null=True, blank=True ) breed_types = ( ('h', 'haski'), ('t', 'terrier'), ('b', 'bulldog'), ) breed = models.CharField(max_length=1, choices=breed_types) def __str__(self): return f'{self.show} {self.breed}' serializers.py from rest_framework import serializers from .models import * '''\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f; \uf0b7 \u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0445\u043e\u0437\u044f\u0438\u043d \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u043e\u0431\u0430\u043a\u043e\u0439? ! \uf0b7 \u041a\u0430\u043a\u0438\u043c\u0438 \u043f\u043e\u0440\u043e\u0434\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0443\u0431? ! \uf0b7 \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u0431\u044b\u043b\u0438 \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435? ! \uf0b7 \u041a\u0430\u043a\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0440\u043e\u0434\u0443? ! \uf0b7 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435?''' class ExpertSerializer(serializers.ModelSerializer): class Meta: model = Expert fields = \"__all__\" class ParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = \"__all__\" class ParticipantSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = \"__all__\" class RingParticipationSerializer(serializers.ModelSerializer): '''\u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0445\u043e\u0437\u044f\u0438\u043d \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u043e\u0431\u0430\u043a\u043e\u0439?''' class Meta: model = Participation fields = [\"rings\"] class ParticipantBreedsSerializer(serializers.ModelSerializer): '''\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435?''' class Meta: model = Participant fields = [\"breed\"] class ClubBreedsSerializer(serializers.ModelSerializer): '''\u041a\u0430\u043a\u0438\u043c\u0438 \u043f\u043e\u0440\u043e\u0434\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0443\u0431?''' members = ParticipantBreedsSerializer(many=True) class Meta: model = Club fields = [\"name\", \"members\"] class RingSerializer(serializers.ModelSerializer): class Meta: model = Ring fields = \"__all__\" class DismissedCountSerializer(serializers.ModelSerializer): '''\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u0431\u044b\u043b\u0438 \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435?''' dismissed_count = serializers.SerializerMethodField() class Meta: model = Participation fields = ['dismissed_count'] def get_dismissed_count(self, obj): return Participation.objects.filter(dismissed=True).count() class BreedExpertsSerializer(serializers.ModelSerializer): '''\u041a\u0430\u043a\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0440\u043e\u0434\u0443?''' experts = ExpertSerializer(many=True) class Meta: model = Ring fields = [\"breed\", \"experts\"] view.py from rest_framework import generics from rest_framework.views import APIView, Response from .serializers import * from .models import * from django.db.models.aggregates import Count, Sum class ExpertAPIView(generics.RetrieveUpdateDestroyAPIView): serializer_class = ExpertSerializer queryset = Expert.objects.all() class ParticipationAPIList(generics.ListCreateAPIView): serializer_class = ParticipationSerializer queryset = Participation.objects.all() class ParticipantAPIList(generics.ListCreateAPIView): serializer_class = ParticipantSerializer queryset = Participant.objects.all() class RingParticipationAPIView(generics.RetrieveAPIView): serializer_class = RingParticipationSerializer queryset = Participation.objects.all() class ClubBreedsRetrieveAPIView(generics.RetrieveAPIView): serializer_class = ClubBreedsSerializer queryset = Club.objects.all() class DismissedCountAPIView(generics.RetrieveAPIView): serializer_class = DismissedCountSerializer queryset = Participation.objects.all() # leave name class BreedExpertsAPIView(generics.ListAPIView): serializer_class = BreedExpertsSerializer queryset = Ring.objects.all() class BreedCountAPIView(APIView): def get(self, request): # breed_count = Participant.objects.filter(breed=breed).count() breed_count = Participant.objects \\ .values('breed').annotate(count=Count('breed')) content = {'breed_count': breed_count} return Response(content) class BreedCountAPIView(APIView): def get(self, request): breed_count = Ring.objects \\ .values('breed').annotate(count=Count('breed')) content = {'breed_count': breed_count} return Response(content) class ReportAPIView(APIView): def get(self, request, year): participants = Show.objects.get(year=year).participants participant_count = participants.count() breed_count = participants.values('breed').annotate(count=Count('breed')) best_grades = Participation.objects.filter(rings__show__year=year)\\ .values('participant')\\ .annotate(ex_sum=Sum('final_grade'))\\ .order_by() medals = Participation.objects.values('rings__breed')\\ .annotate(medals_count=Count('medal')) content = {'participant_count': participant_count, 'breeds': breed_count, 'best_grades': best_grades, 'medals': medals} return Response(content) urls.py from django.urls import path from .views import * app_name = \"dogsapp\" urlpatterns = [ path('experts/<int:pk>', ExpertAPIView.as_view()), path('participation/', ParticipationAPIList.as_view()), path('participants/', ParticipantAPIList.as_view()), path('participant_ring/<int:pk>', RingParticipationAPIView.as_view()), path('club_breeds/<int:pk>', ClubBreedsRetrieveAPIView.as_view()), path('dismissed_count/<int:pk>', DismissedCountAPIView.as_view()), path('breed_experts/', BreedExpertsAPIView.as_view()), path('breeds_count/', BreedCountAPIView.as_view()), path('report/<int:year>', ReportAPIView.as_view()), ]","title":"Home"},{"location":"#_1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0432\u0430 \u0444\u0430\u0439\u043b\u0430 - \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"#clientpy","text":"\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0435\u0442, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0435\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. import socket #\u0438\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 conn = socket.socket(socket.SOCK_DGRAM) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 UDP conn.connect((socket.gethostname(), 1234)) #\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0445\u043e\u0441\u0442\u0443 (IP-\u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442) msg = 'Hello, server' #\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 conn.send(msg.encode(\"utf-8\")) # data = b\"\" #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0439 \u0431\u0430\u0439\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 tmp = conn.recv(16384) #\u043e\u0442\u0441\u044e\u0434\u0430 \u0432\u0441\u0435 \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e while tmp: data += tmp tmp = conn.recv(16384) print(data.decode(\"utf-8\")) conn.close()","title":"client.py"},{"location":"#serverpy","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. import socket #\u0438\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sock = socket.socket(socket.SOCK_DGRAM) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 UDP # \u0414\u043b\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f bind \u0441\u043e\u043a\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430: \u0445\u043e\u0441\u0442 \u0438 \u043f\u043e\u0440\u0442. sock.bind((socket.gethostname(), 1234)) sock.listen(1) #\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 while True: try: #\u043f\u043e\u043a\u0430 \u0432\u0435\u0440\u043d\u043e, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0431\u043b\u043e\u043a \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0438\u0446\u0439 #\u0424-\u0446\u0438\u044f \u0436\u0434\u0451\u0442 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043d\u0438\u043c \u0441\u043e\u043a\u0435\u0442 \u0438 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f. #\u0410\u0434\u0440\u0435\u0441 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u043f\u043e\u0440\u0442\u0430. conn, addr = sock.accept() data = conn.recv(16384) #\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b-\u043c \u0431\u0430\u0439\u0442 udata = data.decode(\"utf-8\") #\u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 bytes \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 print(udata) msg = \"Hello, client\" #\u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 conn.send(msg.encode(\"utf-8\")) #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435, \u0442.\u043a. \u0444-\u0446\u0438\u044f send \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u0438\u043f bytes conn.close() #\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 except KeyboardInterrupt: #\u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0431\u043b\u043e\u043a \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0438\u0446\u0439 sock.close() #\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 break","title":"server.py"},{"location":"#commands","text":"py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Hello, server - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Hello, client - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435.","title":"Commands"},{"location":"#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: a. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"#clientpy_1","text":"\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0435\u0442, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0435\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((socket.gethostname(), 1234)) while True: data = sock.recv(1024) print(f\"server: {data.decode()}\") msg = input(\"Client: \") sock.send(str.encode(msg))","title":"client.py"},{"location":"#serverpy_1","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 (\u043a\u0430\u0442\u0435\u0442\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430), \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 (\u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430) \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. import socket def pifagor(a, b): #\u0444\u0443\u043d\u043a\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443 return a**2 + b**2 sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 TCP sock.bind((socket.gethostname(), 1234)) # \u0414\u043b\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f bind \u0441\u043e\u043a\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430: \u0445\u043e\u0441\u0442 \u0438 \u043f\u043e\u0440\u0442. sock.listen(1) #\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 #\u0424-\u0446\u0438\u044f \u0436\u0434\u0451\u0442 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043d\u0438\u043c \u0441\u043e\u043a\u0435\u0442 \u0438 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f. #\u0410\u0434\u0440\u0435\u0441 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u043f\u043e\u0440\u0442\u0430. conn, addr = sock.accept() #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435, \u0442.\u043a. \u0444-\u0446\u0438\u044f send \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u0438\u043f bytes conn.send(str.encode(f\"Hello, client\\n\" f\"I solve Pythagorean theorem\\n\" f\"Enter A as a number\\n\")) a = \"\" #\u043a\u0430\u0442\u0435\u0442 b = \"\" #\u043a\u0430\u0442\u0435\u0442 c = \"\" #\u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430 while not c: while not a: #\u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u0430\u0442\u0435\u0442 data = conn.recv(1024).decode() #\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b-\u043c \u0431\u0430\u0439\u0442 if data.isdigit(): #\u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 a = int(data) #\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 integer conn.send(b\"Enter B as a number\\n\") #\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 else: conn.send(b\"Not a number\\n\" b\"Enter A as a number\\n\") #\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435, \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 while not b: #\u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0442\u0435\u0442 data = conn.recv(1024).decode() if data.isdigit(): b = int(data) else: conn.send(b\"Not a number\\n\" b\"Enter B as a number\\n\") c = pifagor(a, b) #\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0432\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 \u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443 conn.send(str.encode(f\"\u041e\u0442\u0432\u0435\u0442: {c}\")) #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 conn.close() #\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430","title":"server.py"},{"location":"#commands_1","text":"py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>server: Hello, client >>I solve Pythagorean theorem >>Enter A as a number 2 >>Client: 2 >>server: Enter B as a number 3 >>server: \u041e\u0442\u0432\u0435\u0442: 13 - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435.","title":"Commands"},{"location":"#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"#clientpy_2","text":"\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0435\u0442, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0435\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\u0439. import socket with socket.socket() as sock: sock.connect((socket.gethostname(), 1234)) sock.settimeout(5) sock.send(b\"GET / HTTP/1.1\\n\") data = sock.recv(16384) udata = data.decode('utf-8') print(udata)","title":"client.py"},{"location":"#serverpy_2","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. import socket with socket.socket() as sock: sock.bind((socket.gethostname(), 1234)) sock.listen(1) conn, addr = sock.accept() with conn: with open('C:/Users/work11pro1/.virtualenvs/ITMO_ICT_WebDevelopment_2022-2023/students/k33421/laboratory_works/Bobrova_Maria/laboratory_work_1/task_3/index.html') as f: msg = f.read() print(conn.recv(16348).decode('utf-8')) response = 'HTTP/1.0 200 OK\\n\\n' + msg conn.sendall(response.encode('utf-8'))","title":"server.py"},{"location":"#indexhtml","text":"\u0418\u0437 \u044d\u0442\u043e\u0433\u043e html \u0444\u0430\u0439\u043b\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>CandyShop</title> </head> <body> <center> <h1>CandyShop</h1> </center> <p>Hi there! Please, buy candies</p> </body> </html>","title":"index.html"},{"location":"#commands_2","text":"py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>GET / HTTP/1.1 - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>HTTP/1.0 200 OK - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >> - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435: <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>CandyShop</title> </head> <body> <center> <h1>CandyShop</h1> </center> <p>Hi there! Please, buy candies</p> </body> </html>","title":"Commands"},{"location":"#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"#clientpy_3","text":"Thread \u2014 \u044d\u0442\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0432 \u0432\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u0432\u0435 \u0438 \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u041d\u043e \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0442\u043e\u043a\u0438 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e: \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043a\u0430\u0436\u0435\u0442\u0441\u044f. \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0435\u0442, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u043e\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0435\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. \u0412 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u044e\u0437\u0435\u0440\u044b, \u043e\u0442 \u043a\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0445\u043e\u0434\u044f\u0442. import socket, threading # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) while True: name = input('\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u0438\u0447\u043d\u044b\u0439 \u043d\u0438\u043a, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430: ') if 1 < len(name) < 10: break # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client.connect((socket.gethostname(), 1234)) print('-' * 5 + '\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443' + '-' * 5) print('-' * 5 + 'Enter, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c' + '-' * 5) def outdatas(): while True: # \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 outdata = input('') print() if outdata == 'enter': break # \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 client.send(f'{name}:{outdata}'.encode('utf-8')) print('%s:%s' % (name, outdata)) def indatas(): while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 indata = client.recv(1024) # \u0417\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e print(indata.decode('utf-8')) # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t1 = threading.Thread(target=indatas, name='input') # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t2 = threading.Thread(target=outdatas, name='out') # \u041d\u0430\u0447\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c t1.start() t2.start() # \u0417\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0442\u043e\u043a, \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c\u0441\u044f, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430. # t1.join() t2.join() # \u0417\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 print('-' * 5 + '\u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d' + '-' * 5) client.close()","title":"client.py"},{"location":"#serverpy_3","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. import socket, threading # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u043a\u0435\u0442\u0430 server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0423\u043a\u0430\u0436\u0438\u0442\u0435 IP \u0438 \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server.bind((socket.gethostname(), 1234)) # \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 server.listen(5) print('Enter Enter \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430') # \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 clients = list() # \u0425\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u043f\u043e\u0442\u043e\u043a\u0438 end = list() # \u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u0430\u0434\u0440\u0435\u0441\u0430 \u043a\u043e\u0441\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 def accept(): while True: client, addr = server.accept() clients.append(client) print(\"\\ r\" + '-' * 5 + f'\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0447\u0435\u0440\u0435\u0437 {addr}: \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- {len (clients)}' + '-' * 5, end = '') #\u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043b\u044e\u0434\u044c\u043c\u0438 def recv_data(client): while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 try: indata = client.recv(1024) except Exception as e: clients.remove(client) end.remove(client) print(\"\\ r\" + '-' * 5 + f'\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d: \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- {len (clients)}' + '-' * 5, end = '') break print(indata.decode('utf-8')) for clien in clients: # \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0435\u0435 \u0434\u0440\u0443\u0433\u0438\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c if clien != client: clien.send(indata) def outdatas(): while True: # \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 print('') outdata = input('') print() if outdata == 'enter': break print('\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432\u0441\u0435\u043c:% s' % outdata) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 for client in clients: client.send(f\"\u0421\u0435\u0440\u0432\u0435\u0440: {outdata}\".encode('utf-8')) def indatas(): while True: # \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0446\u0438\u043a\u043b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043f\u043e\u0442\u043e\u043a for clien in clients: # \u0415\u0441\u043b\u0438 \u043f\u043e\u0442\u043e\u043a \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c if clien in end: continue index = threading.Thread(target=recv_data, args=(clien,)) index.start() end.append(clien) # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t1 = threading.Thread(target=indatas, name='input') t1.start() # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t2 = threading.Thread(target=outdatas, name='out') t2.start() # \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t3 = threading.Thread(target=accept(), name='accept') t3.start() # \u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u043a\u0440\u0443\u0433, \u043f\u043e\u043a\u0430 \u043f\u043e\u0434\u043f\u043e\u0442\u043e\u043a \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d, \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u044c\u0441\u044f # t1.join() t2.join() # \u0412\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432\u0441\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u044b for client in clients: client.close() print('-' * 5 + '\u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d' + '-' * 5)","title":"server.py"},{"location":"#commands_3","text":"py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. Enter Enter \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u0438\u0447\u043d\u044b\u0439 \u043d\u0438\u043a, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430: - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Maria - \u0412\u0432\u043e\u0434\u0438\u043c \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. -----\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443----- -----Enter, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c----- - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 >>Hi! - \u0412\u0432\u043e\u0434\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. Maria:Hi! - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \\ r-----\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0447\u0435\u0440\u0435\u0437 ('192.168.56.1', 49653): \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- 1-----Maria:Hi! - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u0438\u0447\u043d\u044b\u0439 \u043d\u0438\u043a, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430: - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Sofia - \u0412\u0432\u043e\u0434\u0438\u043c \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. -----\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443----- -----Enter, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c----- - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 >>Hello, Mary) - \u0412\u0432\u043e\u0434\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. Sofia:Hello, Mary) - \u0412\u044b\u0432\u043e\u0434 \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0438 \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445. \\ r-----\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0447\u0435\u0440\u0435\u0437 ('192.168.56.1', 49766): \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- 2-----Sofia:Hello, Mary) - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u0418 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435.","title":"Commands"},{"location":"#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"#serverpy_4","text":"\u0421\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. import socket class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u043a\u0435\u0442\u0430 self.points = {\"Maths\": [\"4\"]} def serve_forever(self): try: self.server.bind((self.host, self.port)) # \u0423\u043a\u0430\u0436\u0438\u0442\u0435 IP \u0438 \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 self.server.listen() # \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 while True: client, address = self.server.accept() #\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 Socket \u0434\u043b\u044f \u0437\u0430\u043d\u043e\u0432\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. self.serve_client(client) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 > {self.host}:{self.port}\") except KeyboardInterrupt: #\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0435\u0435 \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043a\u043b\u0430\u0432\u0438\u0448\u0438 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 self.server.close() def serve_client(self, client): try: data = client.recv(1024).decode() req = self.parse_request(data) res = self.handle_request(req) self.send_response(client, res) print(f'\u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f') except Exception: print(f'\u041a\u043b\u0438\u0435\u043d\u0442 \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f') client.close() #\u0427\u0442\u0435\u043d\u0438\u0435 \u0438 \u0440\u0430\u0437\u0431\u043e\u0440 (\u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0435) HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 def parse_request(self, data): #\u0438\u0437 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443, \u0442.\u0435. \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0431\u0430\u0439\u0442, \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0449\u0443\u044e\u0441\u044f \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0435\u0439 \\r\\n req = data.rstrip('\\r\\n') text = req[:data.index(\"\\n\")].split() if len(text) != 3: raise Exception('Malformed request line') method, target, version = text if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') req = {'data': {}, 'method': method} if '?' in target: req['method'] = 'POST' data = target.split('?')[1].split('&') for value in data: index, info = value.split('=') req['data'][index] = info return req # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_post(self, req): course = req[\"data\"][\"course\"] points = req[\"data\"][\"points\"] if course not in self.points: self.points[course] = [] if int(points) < 1 or int(points) > 5: raise Exception(f\"\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438\") self.points[course].append(points) return self.handle_get() def handle_get(self): type = \"text/html; charset=utf-8\" first_settings = \"<html><head><style></style></head><body>\" course = \"<form><label>Subject: </label><input name='course' /><br><br>\" points = \"<label>Grade: </label><input name='points' /><br><br>\" button = \"<input type='submit'></form>\" body = first_settings + course + points + button for course_name in self.points: body += f\"<div><span>{course_name}: {self.points[course_name]}</span></div>\" second_settings = \"</body></html>\" body += second_settings body = body.encode(\"utf-8\") headers = [(\"Content-Type\", type), (\"Content-Length\", len(body))] return Response(200, \"OK\", headers, body) #\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 def send_response(self, client, res): #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 file = client.makefile('wb') status_line = f\"HTTP/1.1 {res.status} {res.reason}\\r\\n\" status_line = status_line.encode(\"utf-8\") file.write(status_line) if res.headers: for (index, info) in res.headers: header_line = f\"{index}: {info}\\r\\n\" file.write(header_line.encode(\"utf-8\")) file.write(b\"\\r\\n\") if res.body: file.write(res.body) file.flush() file.close() #\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0430 \u043b\u044e\u0431\u043e\u043c \u0438\u0437 \u044d\u0442\u0430\u043f\u043e\u0432, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435 def get_error(self, code, text): return Response(code, \"OK\", \"Content-Type: text/html; charset=utf-8\", text) if __name__ == \"__main__\": MyHTTPServer(\"localhost\", 9095, \"example.com\").serve_forever()","title":"server.py"},{"location":"#commands_4","text":"py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. 'localhost:9095' - \u0412\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u043f\u043e\u0438\u0441\u043a\u043e\u0432\u0438\u043a","title":"Commands"},{"location":"#no2_1","text":"\u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"#_2","text":"","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b"},{"location":"#modelspy","text":"from django.db import models from django.contrib.auth.models import AbstractUser class User(AbstractUser): is_student = models.BooleanField(default=False) is_teacher = models.BooleanField(default=False) with_additional_info = models.BooleanField(default=False) CHARACTERS = [ ('K', 'K') ] NUMBERS = [ (1, '3241'), (2, '3242') ] SUBJECTS = [ (\"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430\", \"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430\"), (\"\u0418\u0441\u0442\u043e\u0440\u0438\u044f\", \"\u0418\u0441\u0442\u043e\u0440\u0438\u044f\"), (\"\u041a\u0418\u0413\", \"\u041a\u0418\u0413\"), (\"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\", \"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\"), (\"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\", \"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\") ] class StudentGroup(models.Model): character = models.CharField(max_length=1, choices=CHARACTERS, default=\"K\", verbose_name=\"\u041b\u0438\u0442\u0435\u0440\u0430\") number = models.IntegerField(choices=NUMBERS, default=1, verbose_name=\"\u041d\u043e\u043c\u0435\u0440\") def __str__(self): return f\"{self.character}{self.number}\" class Student(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True) student_group = models.ForeignKey(StudentGroup, on_delete=models.CASCADE, null=True) def __str__(self): return f\"{self.user.first_name} {self.user.last_name}\" class Teacher(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True) subject = models.CharField(max_length=30, choices=SUBJECTS, verbose_name=\"\u041f\u0440\u0435\u0434\u043c\u0435\u0442\") def __str__(self): return f\"{self.user.first_name} {self.user.last_name}\" class Homework(models.Model): student_group = models.ForeignKey(StudentGroup, on_delete=models.CASCADE, null=True) teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, null=True) subject = models.CharField(max_length=30, choices=SUBJECTS, verbose_name=\"\u041f\u0440\u0435\u0434\u043c\u0435\u0442\") start_date = models.DateTimeField(verbose_name=\"\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438\") end_date = models.DateTimeField(verbose_name=\"\u0421\u0434\u0430\u0442\u044c \u0434\u043e\") task_description = models.TextField(verbose_name=\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\") fine_info = models.CharField(max_length=150, verbose_name=\"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445\") max_points = models.IntegerField(verbose_name=\"\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432\") class HomeworkAnswer(models.Model): homework = models.ForeignKey(Homework, on_delete=models.CASCADE) student = models.ForeignKey(Student, on_delete=models.CASCADE) date = models.DateTimeField(auto_now=True, blank=True) answer = models.TextField(null=True, blank=True, verbose_name=\"\u041e\u0442\u0432\u0435\u0442\") class TeacherAnswerOnHomework(models.Model): homework_answer = models.OneToOneField(HomeworkAnswer, on_delete=models.CASCADE, primary_key=True) points = models.IntegerField(default=0, verbose_name=\"\u0411\u0430\u043b\u043b\u044b\") message = models.TextField(null=True, blank=True, verbose_name=\"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\") teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True) date = models.DateTimeField(auto_now=True, blank=True)","title":"models.py"},{"location":"#formspy","text":"from django.contrib.auth.forms import UserCreationForm from django import forms from .models import Teacher, Student, User, Homework, StudentGroup, HomeworkAnswer, TeacherAnswerOnHomework ROLES = [ ('teacher', 'Teacher'), ('student', 'Student'), ] groups = [(group.pk, group) for group in StudentGroup.objects.all()] class RegisterForm(UserCreationForm): role = forms.ChoiceField( required=True, choices=ROLES ) class Meta: model = User fields = (\"username\", \"first_name\", \"last_name\", \"password1\", \"password2\") def save(self, commit=True): user = super(RegisterForm, self).save(commit=False) print(\"ROLE\", self.cleaned_data[\"role\"]) if self.cleaned_data[\"role\"] == \"teacher\": user.is_teacher = True if self.cleaned_data[\"role\"] == \"student\": user.is_student = True if commit: user.save() return user class TeacherForm(forms.ModelForm): def __init__(self, *args, **kwargs): self.user = kwargs.pop('user', None) super(TeacherForm, self).__init__(*args, **kwargs) class Meta: model = Teacher fields = [\"subject\"] def save(self, commit=True): teacher = super(TeacherForm, self).save(commit=False) teacher.user = self.user teacher.user.with_additional_info = True if commit: teacher.user.save() teacher.save() return teacher class StudentForm(forms.Form): def __init__(self, *args, **kwargs): self.user = kwargs.pop('user', None) super(StudentForm, self).__init__(*args, **kwargs) student_group = forms.ChoiceField(required=True, choices=groups) def save(self, commit=True): student = Student() student.user = self.user student.user.with_additional_info = True student.student_group = StudentGroup.objects.get(pk=self.cleaned_data[\"student_group\"]) if commit: student.user.save() student.save() return student class TeacherAnswerOnHomeworkForm(forms.ModelForm): class Meta: model = TeacherAnswerOnHomework fields = [\"points\", \"message\"] def __init__(self, *args, **kwargs): self.homework_answer = kwargs.pop('homework_answer', None) self.user = kwargs.pop('user', None) super(TeacherAnswerOnHomeworkForm, self).__init__(*args, **kwargs) def save(self, commit=True): teacher_homework_answer = super(TeacherAnswerOnHomeworkForm, self).save(commit=False) teacher_homework_answer.homework_answer = self.homework_answer teacher_homework_answer.teacher = self.user.teacher if commit: teacher_homework_answer.save() return teacher_homework_answer class HomeworkAnswerForm(forms.ModelForm): def __init__(self, *args, **kwargs): self.homework = kwargs.pop('homework', None) self.student = kwargs.pop('student', None) super(HomeworkAnswerForm, self).__init__(*args, **kwargs) class Meta: model = HomeworkAnswer fields = [\"answer\"] answer = forms.CharField(label='message', max_length=180) def save(self, commit=True): homework_answer = super(HomeworkAnswerForm, self).save(commit=False) homework_answer.homework = self.homework homework_answer.student = self.student if commit: homework_answer.save() return homework_answer class HomeworkForm(forms.ModelForm): def __init__(self, *args, **kwargs): self.user = kwargs.pop('user', None) super(HomeworkForm, self).__init__(*args, **kwargs) class Meta: model = Homework fields = [\"task_description\", \"start_date\", \"end_date\", \"max_points\", \"fine_info\"] widgets = { \"start_date\": forms.DateInput(format='%d/%m/%Y', attrs={'type': 'date'}), \"end_date\": forms.DateInput(format='%d/%m/%Y', attrs={'type': 'date'}) } student_group = forms.ChoiceField(required=True, choices=groups) def save(self, commit=True): homework = super(HomeworkForm, self).save(commit=False) homework.student_group = StudentGroup.objects.get(pk=self.cleaned_data[\"student_group\"]) homework.teacher = Teacher.objects.get(user=self.user) homework.subject = homework.teacher.subject if commit: homework.save() return homework","title":"forms.py"},{"location":"#viewspy","text":"from django.shortcuts import render # Create your views here. import django.db import django.db from django.http import HttpResponse from django.shortcuts import render, redirect from django.contrib.auth.decorators import login_required from .decorators import student_required, teacher_required, additional_info_check from django.contrib.auth import authenticate, login, logout from .forms import RegisterForm, TeacherForm, StudentForm, HomeworkAnswerForm, HomeworkForm, \\ TeacherAnswerOnHomeworkForm from .models import Homework, Teacher, Student, HomeworkAnswer, TeacherAnswerOnHomework def registerPage(requset): form = RegisterForm if requset.method == \"POST\": form = RegisterForm(requset.POST) if form.is_valid(): form.save() return redirect('login') context = {'form': form} return render(requset, 'pages/register.html', context) def loginPage(request): if request.method == \"POST\": username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('home') context = {} return render(request, 'pages/login.html', context) @login_required(login_url='login') def add_info(request): if request.user.is_teacher: if request.method == \"POST\": form = TeacherForm(request.POST, user=request.user) if form.is_valid(): form.save() return redirect('home') else: form = TeacherForm(user=request.user) context = {\"form\": form} return render(request, \"pages/add_info.html\", context) if request.user.is_student: if request.method == \"POST\": form = StudentForm(request.POST, user=request.user) if form.is_valid(): form.save() return redirect('home') else: form = StudentForm(user=request.user) context = {\"form\": form} return render(request, \"pages/add_info.html\", context) return HttpResponse(\"You are not teacher or student\") @login_required(login_url='login') @additional_info_check() def home(request): if request.user.is_teacher: return redirect(\"teacher_home\") if request.user.is_student: return redirect(\"student_home\") return HttpResponse(\"You are not teacher or student\") def get_checked_and_unchecked_homeworks(homeworks): checked_homeworks = [] unchecked_homeworks = [] for homework in homeworks: try: t = homework.teacheransweronhomework if t: checked_homeworks.append(homework) except TeacherAnswerOnHomework.DoesNotExist: unchecked_homeworks.append(homework) return {\"checked_homeworks\": checked_homeworks, \"unchecked_homeworks\": unchecked_homeworks} @login_required(login_url='login') @teacher_required() def teacher_marks_page(request): homeworks = Homework.objects.filter(teacher=request.user.teacher) homework_answers = [] for homework in homeworks: try: homework_answers.append(HomeworkAnswer.objects.get(homework=homework)) except HomeworkAnswer.DoesNotExist: continue filtered_homeworks = get_checked_and_unchecked_homeworks(homework_answers) context = {\"homework_answers\": homework_answers, \"checked_homeworks\": filtered_homeworks[\"checked_homeworks\"], \"unchecked_homeworks\": filtered_homeworks[\"unchecked_homeworks\"]} return render(request, 'pages/marks.html', context) @login_required(login_url='login') @student_required() def student_marks_page(request): student = Student.objects.get(user=request.user) homeworks = Homework.objects.filter(student_group=student.student_group) homework_answers = [] for homework in homeworks: try: homework_answers.append(HomeworkAnswer.objects.get(homework=homework)) except HomeworkAnswer.DoesNotExist: continue filtered_homeworks = get_checked_and_unchecked_homeworks(homework_answers) context = {\"homework_answers\": homework_answers, \"checked_homeworks\": filtered_homeworks[\"checked_homeworks\"], \"unchecked_homeworks\": filtered_homeworks[\"unchecked_homeworks\"]} return render(request, 'pages/marks.html', context) @login_required(login_url='login') @teacher_required() def delete_homework(request, work_id): homework = Homework.objects.get(pk=work_id) homework.delete() return redirect(\"home\") @login_required(login_url='login') @teacher_required() def change_homework(request, work_id): homework = Homework.objects.get_or_create(pk=work_id)[0] if request.method == \"POST\": form = HomeworkForm(request.POST, instance=homework, user=request.user) if form.is_valid(): form.save() return redirect(\"home\") form = HomeworkForm(instance=homework, user=request.user) context = {\"word_id\": work_id, \"form\": form, \"homework\": homework} return render(request, 'pages/create_homework.html', context) @login_required(login_url='login') @teacher_required() def create_homework(request): if request.method == \"POST\": form = HomeworkForm(request.POST, user=request.user) if form.is_valid(): form.save() return redirect(\"home\") form = HomeworkForm(user=request.user) context = {\"form\": form} return render(request, 'pages/create_homework.html', context) @login_required(login_url='login') @teacher_required() def teacher_home_page(request): teacher = Teacher.objects.get(user=request.user) homeworks = Homework.objects.filter(teacher=teacher) context = {\"homeworks\": homeworks} return render(request, \"pages/home.html\", context) @login_required(login_url='login') @student_required() def student_home_page(request): student = Student.objects.get(user=request.user) completed_words = HomeworkAnswer.objects.all() completed_words = [work.homework for work in completed_words] homeworks = Homework.objects.filter(student_group=student.student_group) homeworks = [homework for homework in homeworks if homework not in completed_words] context = {\"homeworks\": homeworks} return render(request, \"pages/home.html\", context) @login_required(login_url='login') @login_required() def marks(request): if request.user.is_teacher: return redirect('teacher_marks') if request.user.is_student: return redirect('student_marks') @login_required(login_url='login') @teacher_required() def rate_homework(request, work_id): try: homework_answer = HomeworkAnswer.objects.get(pk=work_id) except HomeworkAnswer.DoesNotExist: return HttpResponse(\"Homework answer does not exist\") try: if request.method == \"POST\": form = TeacherAnswerOnHomeworkForm(request.POST, instance=homework_answer.teacheransweronhomework, homework_answer=homework_answer, user=request.user) if form.is_valid(): form.save() return redirect(\"marks\") form = TeacherAnswerOnHomeworkForm(instance=homework_answer.teacheransweronhomework, homework_answer=homework_answer, user=request.user) context = {\"form\": form, \"homework_answer\": homework_answer} return render(request, 'pages/rate_homework.html', context) except TeacherAnswerOnHomework.DoesNotExist: if request.method == \"POST\": form = TeacherAnswerOnHomeworkForm(request.POST, homework_answer=homework_answer, user=request.user) if form.is_valid(): form.save() return redirect(\"marks\") form = TeacherAnswerOnHomeworkForm(homework_answer=homework_answer, user=request.user) context = {\"form\": form, \"homework_answer\": homework_answer} return render(request, 'pages/rate_homework.html', context) @login_required(login_url='login') @student_required() def make_homework(request, work_id): student = Student.objects.get(user=request.user) try: homework = Homework.objects.get(pk=work_id) except Homework.DoesNotExist: return HttpResponse(\"Homework answer does not exist\") if request.method == \"POST\": form = HomeworkAnswerForm(request.POST, homework=homework, student=student) if form.is_valid(): form.save() return redirect(\"marks\") form = HomeworkAnswerForm(homework=homework, student=student) context = {\"form\": form, \"homework\": homework} return render(request, 'pages/make_homework.html', context) @login_required(login_url='login') def logoutUser(request): logout(request) return redirect('login')","title":"views.py"},{"location":"#urlspy","text":"from django.contrib import admin from django.urls import path import table.views urlpatterns = [ path('admin/', admin.site.urls), path('register/', table.views.registerPage, name=\"register\"), path('login/', table.views.loginPage, name=\"login\"), path(\"\", table.views.home, name=\"home\"), path(\"add_info/\", table.views.add_info, name=\"add_info\"), path(\"logout/\", table.views.logoutUser, name=\"logout\"), path(\"marks/\", table.views.marks, name=\"marks\"), path(\"teacher_marks/\", table.views.teacher_marks_page, name=\"teacher_marks\"), path(\"student_marks/\", table.views.student_marks_page, name=\"student_marks\"), path(\"make_homework/<int:work_id>/\", table.views.make_homework, name=\"make_homework\"), path(\"change_homework/<int:work_id>/\", table.views.change_homework, name=\"change_homework\"), path(\"create_homework/\", table.views.create_homework, name=\"create_homework\"), path(\"teacher_home/\", table.views.teacher_home_page, name=\"teacher_home\"), path(\"student_home/\", table.views.student_home_page, name=\"student_home\"), path(\"delete_homework/<int:work_id>/\", table.views.delete_homework, name=\"delete_homework\"), path(\"rate_homework/<int:work_id>/\", table.views.rate_homework, name=\"rate_homework\") ]","title":"urls.py"},{"location":"#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"#311","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"#modelspy_1","text":"from django.db import models from django.contrib.auth.models import AbstractUser # Create your models here. class Car_owner(models.Model): id_owner = models.IntegerField(primary_key = True) last_name = models.CharField(max_length = 30, null = False) first_name = models.CharField(max_length = 30, null = False) birth_day = models.DateField(null = True) passport = models.IntegerField(null=True) address = models.CharField(max_length=50, null=True, blank=True) nationality = models.CharField(max_length=20, null=True, blank=True) class Car(models.Model): id_car = models.IntegerField(primary_key = True) state_number = models.CharField(max_length = 15, null = False) mark_car = models.CharField(max_length = 20, null = False) model_car = models.CharField(max_length = 20, null = False) color = models.CharField(max_length = 30, null = True) class Ownerdhip(models.Model): id_owner_car = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Car_owner, on_delete = models.CASCADE) id_car = models.ForeignKey(Car, on_delete = models.CASCADE) start_date = models.DateField() end_date = models.DateField(null = True) class Driver_license(models.Model): id_license = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Car_owner, on_delete = models.CASCADE) license_number = models.CharField(max_length = 10, null = False) type = models.CharField(max_length = 10, null = False) date_of_license= models.DateField()","title":"models.py"},{"location":"#_3","text":"Car_owner(1, 'LN1', 'FN1', '1990-01-1').save() Car_owner(2, 'LN2', 'FN2', '1991-01-1').save() Car_owner(3, 'LN3', 'FN3', '1992-01-1').save() Car_owner(4, 'LN4', 'FN4', '1993-01-1').save() Car_owner(5, 'LN5', 'FN5', '1994-01-1').save() Car_owner(6, 'LN6', 'FN6', '1995-01-1').save() for i in Car_owner.objects.all(): ...: print(i) ...: Car_owner object (1) Car_owner object (2) Car_owner object (3) Car_owner object (4) Car_owner object (5) Car_owner object (6) for i in Car_owner.objects.all(): ...: print(i.id_owner) ...: 1 2 3 4 5 6","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432:"},{"location":"#_4","text":"Car(1, 'A1A1', 'BMW', 'Model1', 'white').save() Car(2, 'A2A2', 'BMW', 'Model2', 'black').save() Car(3, 'A3A3', 'Toyota', 'Model3', 'blue').save() Car(4, 'A4A4', 'Toyota', 'Model4', 'white').save() Car(5, 'A5A5', 'Audi', 'Model5', 'red').save() Car(6, 'A6A6', 'Audi', 'Model6', 'balck').save()","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439"},{"location":"#_5","text":"Driver_license(1, 1, '1234567', 'B', '2010-01-01').save() Driver_license(2, 2, '4567890', 'B', '2011-01-01').save() Driver_license(3, 3, '6527810', 'B', '2012-01-01').save() Driver_license(4, 4, '65228340', 'B', '2013-01-01').save() Driver_license(5, 5, '15228143', 'B', '2014-01-01').save() Driver_license(6, 6, '13298123', 'B', '2015-01-01').save()","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432"},{"location":"#_6","text":"Ownerdhip(1, 1, 1, '2011-01-01', '2012-01-01').save() Ownerdhip(2, 2, 2, '2012-01-01', '2013-01-01').save() Ownerdhip(3, 3, 3, '2013-01-01', '2014-01-01').save() Ownerdhip(4, 4, 4, '2014-01-01', '2015-01-01').save() Ownerdhip(5, 5, 5, '2015-01-01', '2016-01-01').save() Ownerdhip(6, 6, 6, '2016-01-01', '2017-01-01').save()","title":"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439"},{"location":"#312","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e:","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2"},{"location":"#1","text":"\u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): In [45]: Car.objects.filter(mark_car=\"Toyota\") Out[45]: <QuerySet [<Car: Car object (3)>, <Car: Car object (4)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 1"},{"location":"#2","text":"\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): In [46]: Car_owner.objects.filter(first_name=\"FN3\") Out[46]: <QuerySet [<Car_owner: Car_owner object (3)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 2"},{"location":"#3","text":"\u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): In [48]: take_id = Car_owner.objects.all()[1].id_owner In [49]: Driver_license.objects.get(id_owner=take_id) Out[49]: <Driver_license: Driver_license object (2)>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 3"},{"location":"#4","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): In [2]: Car_owner.objects.filter(ownership__id_car__color = 'red') Out[2]: <QuerySet [<Car_owner: Car_owner object (5)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 4"},{"location":"#5","text":"\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): In [3]: Car_owner.objects.filter(ownership__start_date__gte=\"2013-01-01\") Out[3]: <QuerySet [<Car_owner: Car_owner object (3)>, <Car_owner: Car_owner object (4)>, <Car_owner: Car_owner object (5)>, <Car_owner: Car_owner object (6)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 5"},{"location":"#313","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b:","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3"},{"location":"#1_1","text":"\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: In [59]: from django.db.models import Min, Max In [60]: Driver_license.objects.aggregate(date_of_license=Min(\"date_of_license\")) Out[60]: {'date_of_license': datetime.date(2010, 1, 1)}","title":"\u0417\u0430\u043f\u0440\u043e\u0441 1"},{"location":"#2_1","text":"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: In [62]: Ownerdhip.objects.aggregate(start_date=Max(\"start_date\")) Out[62]: {'start_date': datetime.date(2016, 1, 1)}","title":"\u0417\u0430\u043f\u0440\u043e\u0441 2"},{"location":"#3_1","text":"\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: In [64]: from django.db.models import Count In [65]: Ownerdhip.objects.values(\"id_owner\").annotate(Count(\"id_car\")) Out[65]: <QuerySet [{'id_owner': 1, 'id_car__count': 1}, {'id_owner': 2, 'id_car__count': 1}, {'id_owner': 3, 'id_car__count': 1}, {'id_owner': 4, 'id_car__count': 1}, {'id_owner': 5, 'id _car__count': 1}, {'id_owner': 6, 'id_car__count': 1}]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 3"},{"location":"#4_1","text":"\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: In [66]: Car.objects.values(\"mark_car\").annotate(Count(\"id_car\")) Out[66]: <QuerySet [{'mark_car': 'Audi', 'id_car__count': 2}, {'mark_car': 'BMW', 'id_car__count': 2}, {'mark_car': 'Toyota', 'id_car__count': 2}]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 4"},{"location":"#5_1","text":"\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: In [79]: Car_owner.objects.order_by(\"driver_license__date_of_license\") Out[79]: <QuerySet [<Car_owner: Car_owner object (1)>, <Car_owner: Car_owner object (2)>, <Car_owner: Car_owner object (3)>, <Car_owner: Car_owner object (4)>, <Car_owner: Car_owner objec t (5)>, <Car_owner: Car_owner object (6)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 5"},{"location":"#3_2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"#modelspy_2","text":"from django.db import models from django.contrib.auth.models import AbstractUser class Organizer(AbstractUser): tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Participant(models.Model): name = models.CharField(max_length=100) breed_types = ( ('h', 'haski'), ('t', 'terrier'), ('b', 'bulldog'), ) breed = models.CharField(max_length=1, choices=breed_types) age = models.IntegerField() family = models.CharField(max_length=1000) owner_data = models.CharField(max_length=1000) club = models.ForeignKey('Club', on_delete=models.CASCADE, null=True, blank=True ) def __str__(self): return self.name class Show(models.Model): year = models.IntegerField(primary_key=True) show_types = ( ('mono', 'mono-breed'), ('poly', 'poly-breed') ) type = models.CharField(max_length=4, choices=show_types) participants = models.ManyToManyField('Participant', # through='Participation', related_name='show_participants' ) def __str__(self): return str(self.year) class Participation(models.Model): participant = models.ForeignKey('Participant', on_delete=models.CASCADE) medal_types = ( ('g', 'gold'), ('s', 'silver'), ('b', 'bronze'), ) medal = models.CharField(max_length=1, choices=medal_types, null=True) rings = models.ManyToManyField('Ring', null=True, blank=True) vaccinated = models.DateField() dismissed = models.BooleanField() final_grade = models.IntegerField(blank=True, null=True) def __str__(self): return f'{self.participant}' class Expert(models.Model): name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) club = models.CharField(max_length=100) def __str__(self): return f'{self.name} {self.last_name}' class Club(models.Model): name = models.CharField(max_length=100) members = models.ManyToManyField('Participant', related_name='club_members' ) def __str__(self): return self.name class Ring(models.Model): show = models.ForeignKey('Show', on_delete=models.CASCADE) experts = models.ManyToManyField('Expert', # through='Grade' related_name='ring_experts', null=True, blank=True ) breed_types = ( ('h', 'haski'), ('t', 'terrier'), ('b', 'bulldog'), ) breed = models.CharField(max_length=1, choices=breed_types) def __str__(self): return f'{self.show} {self.breed}'","title":"models.py"},{"location":"#serializerspy","text":"from rest_framework import serializers from .models import * '''\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f; \uf0b7 \u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0445\u043e\u0437\u044f\u0438\u043d \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u043e\u0431\u0430\u043a\u043e\u0439? ! \uf0b7 \u041a\u0430\u043a\u0438\u043c\u0438 \u043f\u043e\u0440\u043e\u0434\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0443\u0431? ! \uf0b7 \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u0431\u044b\u043b\u0438 \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435? ! \uf0b7 \u041a\u0430\u043a\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0440\u043e\u0434\u0443? ! \uf0b7 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435?''' class ExpertSerializer(serializers.ModelSerializer): class Meta: model = Expert fields = \"__all__\" class ParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = \"__all__\" class ParticipantSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = \"__all__\" class RingParticipationSerializer(serializers.ModelSerializer): '''\u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0445\u043e\u0437\u044f\u0438\u043d \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u043e\u0431\u0430\u043a\u043e\u0439?''' class Meta: model = Participation fields = [\"rings\"] class ParticipantBreedsSerializer(serializers.ModelSerializer): '''\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435?''' class Meta: model = Participant fields = [\"breed\"] class ClubBreedsSerializer(serializers.ModelSerializer): '''\u041a\u0430\u043a\u0438\u043c\u0438 \u043f\u043e\u0440\u043e\u0434\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0443\u0431?''' members = ParticipantBreedsSerializer(many=True) class Meta: model = Club fields = [\"name\", \"members\"] class RingSerializer(serializers.ModelSerializer): class Meta: model = Ring fields = \"__all__\" class DismissedCountSerializer(serializers.ModelSerializer): '''\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u0431\u044b\u043b\u0438 \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435?''' dismissed_count = serializers.SerializerMethodField() class Meta: model = Participation fields = ['dismissed_count'] def get_dismissed_count(self, obj): return Participation.objects.filter(dismissed=True).count() class BreedExpertsSerializer(serializers.ModelSerializer): '''\u041a\u0430\u043a\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0440\u043e\u0434\u0443?''' experts = ExpertSerializer(many=True) class Meta: model = Ring fields = [\"breed\", \"experts\"]","title":"serializers.py"},{"location":"#viewpy","text":"from rest_framework import generics from rest_framework.views import APIView, Response from .serializers import * from .models import * from django.db.models.aggregates import Count, Sum class ExpertAPIView(generics.RetrieveUpdateDestroyAPIView): serializer_class = ExpertSerializer queryset = Expert.objects.all() class ParticipationAPIList(generics.ListCreateAPIView): serializer_class = ParticipationSerializer queryset = Participation.objects.all() class ParticipantAPIList(generics.ListCreateAPIView): serializer_class = ParticipantSerializer queryset = Participant.objects.all() class RingParticipationAPIView(generics.RetrieveAPIView): serializer_class = RingParticipationSerializer queryset = Participation.objects.all() class ClubBreedsRetrieveAPIView(generics.RetrieveAPIView): serializer_class = ClubBreedsSerializer queryset = Club.objects.all() class DismissedCountAPIView(generics.RetrieveAPIView): serializer_class = DismissedCountSerializer queryset = Participation.objects.all() # leave name class BreedExpertsAPIView(generics.ListAPIView): serializer_class = BreedExpertsSerializer queryset = Ring.objects.all() class BreedCountAPIView(APIView): def get(self, request): # breed_count = Participant.objects.filter(breed=breed).count() breed_count = Participant.objects \\ .values('breed').annotate(count=Count('breed')) content = {'breed_count': breed_count} return Response(content) class BreedCountAPIView(APIView): def get(self, request): breed_count = Ring.objects \\ .values('breed').annotate(count=Count('breed')) content = {'breed_count': breed_count} return Response(content) class ReportAPIView(APIView): def get(self, request, year): participants = Show.objects.get(year=year).participants participant_count = participants.count() breed_count = participants.values('breed').annotate(count=Count('breed')) best_grades = Participation.objects.filter(rings__show__year=year)\\ .values('participant')\\ .annotate(ex_sum=Sum('final_grade'))\\ .order_by() medals = Participation.objects.values('rings__breed')\\ .annotate(medals_count=Count('medal')) content = {'participant_count': participant_count, 'breeds': breed_count, 'best_grades': best_grades, 'medals': medals} return Response(content)","title":"view.py"},{"location":"#urlspy_1","text":"from django.urls import path from .views import * app_name = \"dogsapp\" urlpatterns = [ path('experts/<int:pk>', ExpertAPIView.as_view()), path('participation/', ParticipationAPIList.as_view()), path('participants/', ParticipantAPIList.as_view()), path('participant_ring/<int:pk>', RingParticipationAPIView.as_view()), path('club_breeds/<int:pk>', ClubBreedsRetrieveAPIView.as_view()), path('dismissed_count/<int:pk>', DismissedCountAPIView.as_view()), path('breed_experts/', BreedExpertsAPIView.as_view()), path('breeds_count/', BreedCountAPIView.as_view()), path('report/<int:year>', ReportAPIView.as_view()), ]","title":"urls.py"}]}