{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 client.py import socket #\u0438\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 conn = socket.socket(socket.SOCK_DGRAM) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 UDP conn.connect((socket.gethostname(), 1234)) #\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0445\u043e\u0441\u0442\u0443 (IP-\u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442) msg = 'Hello, server' #\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 conn.send(msg.encode(\"utf-8\")) # data = b\"\" #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0439 \u0431\u0430\u0439\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 tmp = conn.recv(16384) #\u043e\u0442\u0441\u044e\u0434\u0430 \u0432\u0441\u0435 \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e while tmp: data += tmp tmp = conn.recv(16384) print(data.decode(\"utf-8\")) conn.close() server.py import socket #\u0438\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sock = socket.socket(socket.SOCK_DGRAM) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 UDP # \u0414\u043b\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f bind \u0441\u043e\u043a\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430: \u0445\u043e\u0441\u0442 \u0438 \u043f\u043e\u0440\u0442. sock.bind((socket.gethostname(), 1234)) sock.listen(1) #\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 while True: try: #\u043f\u043e\u043a\u0430 \u0432\u0435\u0440\u043d\u043e, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0431\u043b\u043e\u043a \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0438\u0446\u0439 #\u0424-\u0446\u0438\u044f \u0436\u0434\u0451\u0442 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043d\u0438\u043c \u0441\u043e\u043a\u0435\u0442 \u0438 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f. #\u0410\u0434\u0440\u0435\u0441 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u043f\u043e\u0440\u0442\u0430. conn, addr = sock.accept() data = conn.recv(16384) #\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b-\u043c \u0431\u0430\u0439\u0442 udata = data.decode(\"utf-8\") #\u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 bytes \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 print(udata) msg = \"Hello, client\" #\u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 conn.send(msg.encode(\"utf-8\")) #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435, \u0442.\u043a. \u0444-\u0446\u0438\u044f send \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u0438\u043f bytes conn.close() #\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 except KeyboardInterrupt: #\u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0431\u043b\u043e\u043a \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0438\u0446\u0439 sock.close() #\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 break Commands py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Hello, server - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Hello, client - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((socket.gethostname(), 1234)) while True: data = sock.recv(1024) print(f\"server: {data.decode()}\") msg = input(\"Client: \") sock.send(str.encode(msg)) server.py import socket def pifagor(a, b): #\u0444\u0443\u043d\u043a\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443 return a**2 + b**2 sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 TCP sock.bind((socket.gethostname(), 1234)) # \u0414\u043b\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f bind \u0441\u043e\u043a\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430: \u0445\u043e\u0441\u0442 \u0438 \u043f\u043e\u0440\u0442. sock.listen(1) #\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 #\u0424-\u0446\u0438\u044f \u0436\u0434\u0451\u0442 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043d\u0438\u043c \u0441\u043e\u043a\u0435\u0442 \u0438 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f. #\u0410\u0434\u0440\u0435\u0441 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u043f\u043e\u0440\u0442\u0430. conn, addr = sock.accept() #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435, \u0442.\u043a. \u0444-\u0446\u0438\u044f send \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u0438\u043f bytes conn.send(str.encode(f\"Hello, client\\n\" f\"I solve Pythagorean theorem\\n\" f\"Enter A as a number\\n\")) a = \"\" #\u043a\u0430\u0442\u0435\u0442 b = \"\" #\u043a\u0430\u0442\u0435\u0442 c = \"\" #\u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430 while not c: while not a: #\u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u0430\u0442\u0435\u0442 data = conn.recv(1024).decode() #\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b-\u043c \u0431\u0430\u0439\u0442 if data.isdigit(): #\u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 a = int(data) #\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 integer conn.send(b\"Enter B as a number\\n\") #\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 else: conn.send(b\"Not a number\\n\" b\"Enter A as a number\\n\") #\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435, \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 while not b: #\u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0442\u0435\u0442 data = conn.recv(1024).decode() if data.isdigit(): b = int(data) else: conn.send(b\"Not a number\\n\" b\"Enter B as a number\\n\") c = pifagor(a, b) #\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0432\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 \u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443 conn.send(str.encode(f\"\u041e\u0442\u0432\u0435\u0442: {c}\")) #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 conn.close() #\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 Commands py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>server: Hello, client >>I solve Pythagorean theorem >>Enter A as a number 2 >>Client: 2 >>server: Enter B as a number 3 >>server: \u041e\u0442\u0432\u0435\u0442: 13 - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 client.py import socket with socket.socket() as sock: sock.connect((socket.gethostname(), 1234)) sock.settimeout(5) sock.send(b\"GET / HTTP/1.1\\n\") data = sock.recv(16384) udata = data.decode('utf-8') print(udata) server.py import socket with socket.socket() as sock: sock.bind((socket.gethostname(), 1234)) sock.listen(1) conn, addr = sock.accept() with conn: with open('C:/Users/work11pro1/.virtualenvs/ITMO_ICT_WebDevelopment_2022-2023/students/k33421/laboratory_works/Bobrova_Maria/laboratory_work_1/task_3/index.html') as f: msg = f.read() print(conn.recv(16348).decode('utf-8')) response = 'HTTP/1.0 200 OK\\n\\n' + msg conn.sendall(response.encode('utf-8')) index.html <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>CandyShop</title> </head> <body> <center> <h1>CandyShop</h1> </center> <p>Hi there! Please, buy candies</p> </body> </html> Commands py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>GET / HTTP/1.1 - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>HTTP/1.0 200 OK - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >> - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435: <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>CandyShop</title> </head> <body> <center> <h1>CandyShop</h1> </center> <p>Hi there! Please, buy candies</p> </body> </html> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 client.py import socket, threading # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) while True: name = input('\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u0438\u0447\u043d\u044b\u0439 \u043d\u0438\u043a, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430: ') if 1 < len(name) < 10: break # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client.connect((socket.gethostname(), 1234)) print('-' * 5 + '\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443' + '-' * 5) print('-' * 5 + 'Enter, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c' + '-' * 5) def outdatas(): while True: # \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 outdata = input('') print() if outdata == 'enter': break # \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 client.send(f'{name}:{outdata}'.encode('utf-8')) print('%s:%s' % (name, outdata)) def indatas(): while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 indata = client.recv(1024) # \u0417\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e print(indata.decode('utf-8')) # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t1 = threading.Thread(target=indatas, name='input') # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t2 = threading.Thread(target=outdatas, name='out') # \u041d\u0430\u0447\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c t1.start() t2.start() # \u0417\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0442\u043e\u043a, \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c\u0441\u044f, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430. # t1.join() t2.join() # \u0417\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 print('-' * 5 + '\u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d' + '-' * 5) client.close() server.py import socket, threading # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u043a\u0435\u0442\u0430 server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0423\u043a\u0430\u0436\u0438\u0442\u0435 IP \u0438 \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server.bind((socket.gethostname(), 1234)) # \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 server.listen(5) print('Enter Enter \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430') # \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 clients = list() # \u0425\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u043f\u043e\u0442\u043e\u043a\u0438 end = list() # \u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u0430\u0434\u0440\u0435\u0441\u0430 \u043a\u043e\u0441\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 def accept(): while True: client, addr = server.accept() clients.append(client) print(\"\\ r\" + '-' * 5 + f'\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0447\u0435\u0440\u0435\u0437 {addr}: \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- {len (clients)}' + '-' * 5, end = '') #\u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043b\u044e\u0434\u044c\u043c\u0438 def recv_data(client): while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 try: indata = client.recv(1024) except Exception as e: clients.remove(client) end.remove(client) print(\"\\ r\" + '-' * 5 + f'\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d: \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- {len (clients)}' + '-' * 5, end = '') break print(indata.decode('utf-8')) for clien in clients: # \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0435\u0435 \u0434\u0440\u0443\u0433\u0438\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c if clien != client: clien.send(indata) def outdatas(): while True: # \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 print('') outdata = input('') print() if outdata == 'enter': break print('\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432\u0441\u0435\u043c:% s' % outdata) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 for client in clients: client.send(f\"\u0421\u0435\u0440\u0432\u0435\u0440: {outdata}\".encode('utf-8')) def indatas(): while True: # \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0446\u0438\u043a\u043b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043f\u043e\u0442\u043e\u043a for clien in clients: # \u0415\u0441\u043b\u0438 \u043f\u043e\u0442\u043e\u043a \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c if clien in end: continue index = threading.Thread(target=recv_data, args=(clien,)) index.start() end.append(clien) # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t1 = threading.Thread(target=indatas, name='input') t1.start() # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t2 = threading.Thread(target=outdatas, name='out') t2.start() # \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t3 = threading.Thread(target=accept(), name='accept') t3.start() # \u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u043a\u0440\u0443\u0433, \u043f\u043e\u043a\u0430 \u043f\u043e\u0434\u043f\u043e\u0442\u043e\u043a \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d, \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u044c\u0441\u044f # t1.join() t2.join() # \u0412\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432\u0441\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u044b for client in clients: client.close() print('-' * 5 + '\u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d' + '-' * 5) Commands py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. Enter Enter \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u0438\u0447\u043d\u044b\u0439 \u043d\u0438\u043a, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430: - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Maria - \u0412\u0432\u043e\u0434\u0438\u043c \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. -----\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443----- -----Enter, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c----- - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 >>Hi! - \u0412\u0432\u043e\u0434\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. Maria:Hi! - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \\ r-----\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0447\u0435\u0440\u0435\u0437 ('192.168.56.1', 49653): \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- 1-----Maria:Hi! - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u0438\u0447\u043d\u044b\u0439 \u043d\u0438\u043a, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430: - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Sofia - \u0412\u0432\u043e\u0434\u0438\u043c \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. -----\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443----- -----Enter, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c----- - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 >>Hello, Mary) - \u0412\u0432\u043e\u0434\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. Sofia:Hello, Mary) - \u0412\u044b\u0432\u043e\u0434 \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0438 \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445. \\ r-----\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0447\u0435\u0440\u0435\u0437 ('192.168.56.1', 49766): \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- 2-----Sofia:Hello, Mary) - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u0418 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 server.py import socket from urllib.parse import parse_qs, urlparse #from request import Request #from response import Response #from subject import Subject class Request: def __init__(self, method, target, headers, version, data): self.method = method self.target = target self.version = version self.url = urlparse(self.target) self.query = parse_qs(self.url.query) self.path = self.url.path self.headers = headers self.data = data class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class Subject: def __init__(self, name, marks): self.name = name self.marks = marks def add_mark(self, mark): self.marks.append(mark) class MyHTTPServer: def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.subjects = [Subject(\"Test Subject\", [5, 4, 3])] def serve_forever(self): try: self.server.bind((self.host, self.port)) self.server.listen() while True: client, address = self.server.accept() self.serve_client(client) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 > {self.host}:{self.port}\") except KeyboardInterrupt: self.server.close() def serve_client(self, client): try: data = client.recv(1024).decode() req = self.parse_request(data) res = self.handle_request(req) self.send_response(client, res) print(f'\u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f') except Exception: print(f'\u041a\u043b\u0438\u0435\u043d\u0442 \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f') client.close() def parse_request(self, data): req = data.split(\"\\r\\n\") method, target, ver = req[0].split(\" \") headers = self.parse_headers(req) return Request( method=method, target=target, version=ver, headers=headers, data=data ) def parse_headers(self, req): headers = [h for h in req[1 : req[1:].index(\"\") + 1]] header_dict = {} for header in headers: key, value = header.split(\":\", 1) header_dict[key] = value return header_dict def handle_request(self, req): try: if req.method == \"GET\" and req.path == \"/\": return self.handle_root() elif req.method == \"POST\" and req.path.startswith(\"/api\"): name = str(req.query[\"name\"][0]) value = int(req.query[\"mark\"][0]) for subject in self.subjects: if subject.name == name: subject.add_mark(value) return self.handle_root() self.subjects.append(Subject(name, [value])) return self.handle_root() return self.get_error(404, \"Error 404: Not Found\") except Exception as e: print(f\"ERROR: {e}\") return self.get_error(500, e) def send_response(self, client, res): client.sendall( f\"HTTP/1.1 {res.status} OK\\r\\n{res.headers}\\r\\n\\r\\n{res.body}\".encode() ) def handle_root(self): body = \"\"\"<!DOCTYPE html><html lang=\"en\"><head>\"\"\" body += ( \"\"\"<meta charset=\"UTF-8\"><title>Super Cool Page</title></head><body><table>\"\"\" ) body += f\"<thead><tr><th>Subject</th><th>Marks</th></tr></thead><tbody>\" for subject in self.subjects: body += f\"<tr><td>{subject.name}</td><td>{', '.join(str(x) for x in subject.marks)}</td></tr>\" body += \"\"\"</tbody></table>\"\"\" body += \"\"\"</body></html>\"\"\" return Response(200, \"OK\", \"Content-Type: text/html; charset=utf-8\", body) def get_error(self, code, text): return Response(code, \"OK\", \"Content-Type: text/html; charset=utf-8\", text) if __name__ == \"__main__\": MyHTTPServer(\"localhost\", 9095, \"example.com\").serve_forever()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"#no1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"#clientpy","text":"import socket #\u0438\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 conn = socket.socket(socket.SOCK_DGRAM) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 UDP conn.connect((socket.gethostname(), 1234)) #\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0445\u043e\u0441\u0442\u0443 (IP-\u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442) msg = 'Hello, server' #\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 conn.send(msg.encode(\"utf-8\")) # data = b\"\" #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0439 \u0431\u0430\u0439\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 tmp = conn.recv(16384) #\u043e\u0442\u0441\u044e\u0434\u0430 \u0432\u0441\u0435 \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e while tmp: data += tmp tmp = conn.recv(16384) print(data.decode(\"utf-8\")) conn.close()","title":"client.py"},{"location":"#serverpy","text":"import socket #\u0438\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 sock = socket.socket(socket.SOCK_DGRAM) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 UDP # \u0414\u043b\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f bind \u0441\u043e\u043a\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430: \u0445\u043e\u0441\u0442 \u0438 \u043f\u043e\u0440\u0442. sock.bind((socket.gethostname(), 1234)) sock.listen(1) #\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 while True: try: #\u043f\u043e\u043a\u0430 \u0432\u0435\u0440\u043d\u043e, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0431\u043b\u043e\u043a \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0438\u0446\u0439 #\u0424-\u0446\u0438\u044f \u0436\u0434\u0451\u0442 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043d\u0438\u043c \u0441\u043e\u043a\u0435\u0442 \u0438 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f. #\u0410\u0434\u0440\u0435\u0441 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u043f\u043e\u0440\u0442\u0430. conn, addr = sock.accept() data = conn.recv(16384) #\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b-\u043c \u0431\u0430\u0439\u0442 udata = data.decode(\"utf-8\") #\u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 bytes \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 print(udata) msg = \"Hello, client\" #\u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 conn.send(msg.encode(\"utf-8\")) #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435, \u0442.\u043a. \u0444-\u0446\u0438\u044f send \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u0438\u043f bytes conn.close() #\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 except KeyboardInterrupt: #\u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0431\u043b\u043e\u043a \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0438\u0446\u0439 sock.close() #\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 break","title":"server.py"},{"location":"#commands","text":"py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Hello, server - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Hello, client - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435.","title":"Commands"},{"location":"#no2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"#clientpy_1","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((socket.gethostname(), 1234)) while True: data = sock.recv(1024) print(f\"server: {data.decode()}\") msg = input(\"Client: \") sock.send(str.encode(msg))","title":"client.py"},{"location":"#serverpy_1","text":"import socket def pifagor(a, b): #\u0444\u0443\u043d\u043a\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443 return a**2 + b**2 sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 TCP sock.bind((socket.gethostname(), 1234)) # \u0414\u043b\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f bind \u0441\u043e\u043a\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430: \u0445\u043e\u0441\u0442 \u0438 \u043f\u043e\u0440\u0442. sock.listen(1) #\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 #\u0424-\u0446\u0438\u044f \u0436\u0434\u0451\u0442 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043d\u0438\u043c \u0441\u043e\u043a\u0435\u0442 \u0438 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432\u0448\u0435\u0433\u043e\u0441\u044f. #\u0410\u0434\u0440\u0435\u0441 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 IP-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u043f\u043e\u0440\u0442\u0430. conn, addr = sock.accept() #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435, \u0442.\u043a. \u0444-\u0446\u0438\u044f send \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u0438\u043f bytes conn.send(str.encode(f\"Hello, client\\n\" f\"I solve Pythagorean theorem\\n\" f\"Enter A as a number\\n\")) a = \"\" #\u043a\u0430\u0442\u0435\u0442 b = \"\" #\u043a\u0430\u0442\u0435\u0442 c = \"\" #\u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430 while not c: while not a: #\u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u0430\u0442\u0435\u0442 data = conn.recv(1024).decode() #\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b-\u043c \u0431\u0430\u0439\u0442 if data.isdigit(): #\u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 a = int(data) #\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 integer conn.send(b\"Enter B as a number\\n\") #\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 else: conn.send(b\"Not a number\\n\" b\"Enter A as a number\\n\") #\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435, \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 while not b: #\u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0442\u0435\u0442 data = conn.recv(1024).decode() if data.isdigit(): b = int(data) else: conn.send(b\"Not a number\\n\" b\"Enter B as a number\\n\") c = pifagor(a, b) #\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0432\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 \u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443 conn.send(str.encode(f\"\u041e\u0442\u0432\u0435\u0442: {c}\")) #\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 conn.close() #\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430","title":"server.py"},{"location":"#commands_1","text":"py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>server: Hello, client >>I solve Pythagorean theorem >>Enter A as a number 2 >>Client: 2 >>server: Enter B as a number 3 >>server: \u041e\u0442\u0432\u0435\u0442: 13 - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435.","title":"Commands"},{"location":"#no3","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"#clientpy_2","text":"import socket with socket.socket() as sock: sock.connect((socket.gethostname(), 1234)) sock.settimeout(5) sock.send(b\"GET / HTTP/1.1\\n\") data = sock.recv(16384) udata = data.decode('utf-8') print(udata)","title":"client.py"},{"location":"#serverpy_2","text":"import socket with socket.socket() as sock: sock.bind((socket.gethostname(), 1234)) sock.listen(1) conn, addr = sock.accept() with conn: with open('C:/Users/work11pro1/.virtualenvs/ITMO_ICT_WebDevelopment_2022-2023/students/k33421/laboratory_works/Bobrova_Maria/laboratory_work_1/task_3/index.html') as f: msg = f.read() print(conn.recv(16348).decode('utf-8')) response = 'HTTP/1.0 200 OK\\n\\n' + msg conn.sendall(response.encode('utf-8'))","title":"server.py"},{"location":"#indexhtml","text":"<!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>CandyShop</title> </head> <body> <center> <h1>CandyShop</h1> </center> <p>Hi there! Please, buy candies</p> </body> </html>","title":"index.html"},{"location":"#commands_2","text":"py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>GET / HTTP/1.1 - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>HTTP/1.0 200 OK - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >> - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435: <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\"> <title>CandyShop</title> </head> <body> <center> <h1>CandyShop</h1> </center> <p>Hi there! Please, buy candies</p> </body> </html>","title":"Commands"},{"location":"#no4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"#clientpy_3","text":"import socket, threading # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) while True: name = input('\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u0438\u0447\u043d\u044b\u0439 \u043d\u0438\u043a, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430: ') if 1 < len(name) < 10: break # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client.connect((socket.gethostname(), 1234)) print('-' * 5 + '\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443' + '-' * 5) print('-' * 5 + 'Enter, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c' + '-' * 5) def outdatas(): while True: # \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 outdata = input('') print() if outdata == 'enter': break # \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 client.send(f'{name}:{outdata}'.encode('utf-8')) print('%s:%s' % (name, outdata)) def indatas(): while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 indata = client.recv(1024) # \u0417\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e print(indata.decode('utf-8')) # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t1 = threading.Thread(target=indatas, name='input') # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t2 = threading.Thread(target=outdatas, name='out') # \u041d\u0430\u0447\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c t1.start() t2.start() # \u0417\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0442\u043e\u043a, \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c\u0441\u044f, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430. # t1.join() t2.join() # \u0417\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 print('-' * 5 + '\u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d' + '-' * 5) client.close()","title":"client.py"},{"location":"#serverpy_3","text":"import socket, threading # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u043a\u0435\u0442\u0430 server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0423\u043a\u0430\u0436\u0438\u0442\u0435 IP \u0438 \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server.bind((socket.gethostname(), 1234)) # \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 server.listen(5) print('Enter Enter \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430') # \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 clients = list() # \u0425\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u043f\u043e\u0442\u043e\u043a\u0438 end = list() # \u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u0430\u0434\u0440\u0435\u0441\u0430 \u043a\u043e\u0441\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 def accept(): while True: client, addr = server.accept() clients.append(client) print(\"\\ r\" + '-' * 5 + f'\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0447\u0435\u0440\u0435\u0437 {addr}: \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- {len (clients)}' + '-' * 5, end = '') #\u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043b\u044e\u0434\u044c\u043c\u0438 def recv_data(client): while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 try: indata = client.recv(1024) except Exception as e: clients.remove(client) end.remove(client) print(\"\\ r\" + '-' * 5 + f'\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d: \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- {len (clients)}' + '-' * 5, end = '') break print(indata.decode('utf-8')) for clien in clients: # \u041f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0435\u0435 \u0434\u0440\u0443\u0433\u0438\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c if clien != client: clien.send(indata) def outdatas(): while True: # \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 print('') outdata = input('') print() if outdata == 'enter': break print('\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432\u0441\u0435\u043c:% s' % outdata) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 for client in clients: client.send(f\"\u0421\u0435\u0440\u0432\u0435\u0440: {outdata}\".encode('utf-8')) def indatas(): while True: # \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0446\u0438\u043a\u043b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043f\u043e\u0442\u043e\u043a for clien in clients: # \u0415\u0441\u043b\u0438 \u043f\u043e\u0442\u043e\u043a \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c if clien in end: continue index = threading.Thread(target=recv_data, args=(clien,)) index.start() end.append(clien) # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t1 = threading.Thread(target=indatas, name='input') t1.start() # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t2 = threading.Thread(target=outdatas, name='out') t2.start() # \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u0442\u043e\u043a\u0430 t3 = threading.Thread(target=accept(), name='accept') t3.start() # \u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u043a\u0440\u0443\u0433, \u043f\u043e\u043a\u0430 \u043f\u043e\u0434\u043f\u043e\u0442\u043e\u043a \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d, \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u044c\u0441\u044f # t1.join() t2.join() # \u0412\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432\u0441\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u044b for client in clients: client.close() print('-' * 5 + '\u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d' + '-' * 5)","title":"server.py"},{"location":"#commands_3","text":"py -3.8 server.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. Enter Enter \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u0438\u0447\u043d\u044b\u0439 \u043d\u0438\u043a, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430: - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Maria - \u0412\u0432\u043e\u0434\u0438\u043c \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. -----\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443----- -----Enter, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c----- - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 >>Hi! - \u0412\u0432\u043e\u0434\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. Maria:Hi! - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \\ r-----\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0447\u0435\u0440\u0435\u0437 ('192.168.56.1', 49653): \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- 1-----Maria:Hi! - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. py -3.8 client.py - \u0417\u0430\u043f\u0443\u0441\u043a \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u0438\u0447\u043d\u044b\u0439 \u043d\u0438\u043a, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0441\u044f\u0442\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430: - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. >>Sofia - \u0412\u0432\u043e\u0434\u0438\u043c \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. -----\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443----- -----Enter, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c----- - \u0412\u044b\u0432\u043e\u0434 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 >>Hello, Mary) - \u0412\u0432\u043e\u0434\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. Sofia:Hello, Mary) - \u0412\u044b\u0432\u043e\u0434 \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0438 \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445. \\ r-----\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0447\u0435\u0440\u0435\u0437 ('192.168.56.1', 49766): \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: ----- 2-----Sofia:Hello, Mary) - \u0412\u044b\u0432\u043e\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435. \u0418 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435.","title":"Commands"},{"location":"#no5","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"#serverpy_4","text":"import socket from urllib.parse import parse_qs, urlparse #from request import Request #from response import Response #from subject import Subject class Request: def __init__(self, method, target, headers, version, data): self.method = method self.target = target self.version = version self.url = urlparse(self.target) self.query = parse_qs(self.url.query) self.path = self.url.path self.headers = headers self.data = data class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class Subject: def __init__(self, name, marks): self.name = name self.marks = marks def add_mark(self, mark): self.marks.append(mark) class MyHTTPServer: def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.subjects = [Subject(\"Test Subject\", [5, 4, 3])] def serve_forever(self): try: self.server.bind((self.host, self.port)) self.server.listen() while True: client, address = self.server.accept() self.serve_client(client) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 > {self.host}:{self.port}\") except KeyboardInterrupt: self.server.close() def serve_client(self, client): try: data = client.recv(1024).decode() req = self.parse_request(data) res = self.handle_request(req) self.send_response(client, res) print(f'\u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f') except Exception: print(f'\u041a\u043b\u0438\u0435\u043d\u0442 \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f') client.close() def parse_request(self, data): req = data.split(\"\\r\\n\") method, target, ver = req[0].split(\" \") headers = self.parse_headers(req) return Request( method=method, target=target, version=ver, headers=headers, data=data ) def parse_headers(self, req): headers = [h for h in req[1 : req[1:].index(\"\") + 1]] header_dict = {} for header in headers: key, value = header.split(\":\", 1) header_dict[key] = value return header_dict def handle_request(self, req): try: if req.method == \"GET\" and req.path == \"/\": return self.handle_root() elif req.method == \"POST\" and req.path.startswith(\"/api\"): name = str(req.query[\"name\"][0]) value = int(req.query[\"mark\"][0]) for subject in self.subjects: if subject.name == name: subject.add_mark(value) return self.handle_root() self.subjects.append(Subject(name, [value])) return self.handle_root() return self.get_error(404, \"Error 404: Not Found\") except Exception as e: print(f\"ERROR: {e}\") return self.get_error(500, e) def send_response(self, client, res): client.sendall( f\"HTTP/1.1 {res.status} OK\\r\\n{res.headers}\\r\\n\\r\\n{res.body}\".encode() ) def handle_root(self): body = \"\"\"<!DOCTYPE html><html lang=\"en\"><head>\"\"\" body += ( \"\"\"<meta charset=\"UTF-8\"><title>Super Cool Page</title></head><body><table>\"\"\" ) body += f\"<thead><tr><th>Subject</th><th>Marks</th></tr></thead><tbody>\" for subject in self.subjects: body += f\"<tr><td>{subject.name}</td><td>{', '.join(str(x) for x in subject.marks)}</td></tr>\" body += \"\"\"</tbody></table>\"\"\" body += \"\"\"</body></html>\"\"\" return Response(200, \"OK\", \"Content-Type: text/html; charset=utf-8\", body) def get_error(self, code, text): return Response(code, \"OK\", \"Content-Type: text/html; charset=utf-8\", text) if __name__ == \"__main__\": MyHTTPServer(\"localhost\", 9095, \"example.com\").serve_forever()","title":"server.py"}]}