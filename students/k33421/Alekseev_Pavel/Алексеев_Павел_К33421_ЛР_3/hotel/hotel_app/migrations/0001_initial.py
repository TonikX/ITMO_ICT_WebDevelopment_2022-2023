# Generated by Django 4.1.4 on 2022-12-12 16:23

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Client",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "passport",
                    models.CharField(
                        max_length=11,
                        primary_key=True,
                        serialize=False,
                        verbose_name="pasport",
                    ),
                ),
                ("last_name", models.CharField(max_length=50, verbose_name="Отчество")),
                ("first_name", models.CharField(max_length=50, verbose_name="Имя")),
                (
                    "patronymic",
                    models.CharField(max_length=50, verbose_name="Отчество"),
                ),
                ("email", models.CharField(max_length=50, verbose_name="эл.почта")),
                ("phone", models.CharField(max_length=50, verbose_name="Телефон")),
                (
                    "address",
                    models.CharField(max_length=500, verbose_name="Адрес проживания"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="Employee",
            fields=[
                (
                    "passport",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="id_worker"
                    ),
                ),
                ("last_name", models.CharField(max_length=50, verbose_name="Отчество")),
                ("first_name", models.CharField(max_length=50, verbose_name="Имя")),
                (
                    "patronymic",
                    models.CharField(max_length=50, verbose_name="Отчество"),
                ),
                ("phone", models.CharField(max_length=50, verbose_name="Телефон")),
                (
                    "address",
                    models.CharField(max_length=500, verbose_name="Адрес проживания"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TypeRoom",
            fields=[
                (
                    "id_type",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="id_type"
                    ),
                ),
                (
                    "type_people",
                    models.CharField(
                        choices=[
                            ("1", "Одноместный"),
                            ("2", "Двухместный"),
                            ("3", "Трехместный"),
                        ],
                        default="1",
                        max_length=6,
                        verbose_name="Тип комнаты к-в людей",
                    ),
                ),
                (
                    "type_room",
                    models.CharField(
                        choices=[("1", "Стандарт"), ("2", "Полу-люкс"), ("3", "Люкс")],
                        default="1",
                        max_length=6,
                        verbose_name="Тип номера",
                    ),
                ),
                ("comfort", models.TextField(verbose_name="Удобства")),
                ("price", models.IntegerField(verbose_name="Цена")),
            ],
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "id_room",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="id_room"
                    ),
                ),
                (
                    "number",
                    models.IntegerField(unique=True, verbose_name="Тип комнаты"),
                ),
                ("room_number", models.IntegerField(verbose_name="Номер комнаты")),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="hotel_app.typeroom",
                        verbose_name="Тип комнаты",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "number_booking",
                    models.CharField(
                        max_length=100,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id_booking",
                    ),
                ),
                ("check_in", models.DateField(verbose_name="Дата заезда")),
                ("check_out", models.DateField(verbose_name="Дата выезда")),
                (
                    "status_book",
                    models.CharField(
                        choices=[("0", "Свободен"), ("1", "Занят")],
                        max_length=20,
                        verbose_name="Статус бронирования",
                    ),
                ),
                (
                    "status_payment",
                    models.CharField(
                        choices=[("1", "Не оплачено"), ("1", "Оплачено")],
                        max_length=20,
                        verbose_name="Статус оплаты",
                    ),
                ),
                (
                    "id_worker",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="hotel_app.employee",
                    ),
                ),
                (
                    "passport_client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="hotel_app.room"
                    ),
                ),
            ],
        ),
    ]
