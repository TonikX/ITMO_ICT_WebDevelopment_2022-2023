{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0410\u043b\u0435\u043a\u0441\u0435\u0435\u0432\u0430 \u041f\u0430\u0432\u043b\u0430 K33421","title":"\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#k33421","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0410\u043b\u0435\u043a\u0441\u0435\u0435\u0432\u0430 \u041f\u0430\u0432\u043b\u0430 K33421"},{"location":"lr1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '' , 8888 )) sock . listen ( 100 ) sock , addr = sock . accept () client_to_server = sock . recv ( 2048 ) print ( \"Data from client: \" + client_to_server . decode ( \"utf-8\" )) server_to_client = b \"Hello, client!\" sock . send ( server_to_client ) sock . close () client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '' , 8888 )) client_to_server = b \"Hello, server!\" sock . send ( client_to_server ) server_to_client = sock . recv ( 2048 ) print ( \"Data from server: \" + server_to_client . decode ( \"utf-8\" )) sock . close () \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket import math sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '' , 8001 )) sock . listen ( 10 ) sock , addr = sock . accept () data_from_client = sock . recv ( 5096 ) cat = data_from_client . decode ( \"utf-8\" ) r = cat . split () a = float ( r [ 0 ]) b = float ( r [ 1 ]) gep = round ( math . sqrt ( a ** 2 + b ** 2 ), 3 ) ms_to_cl = str ( gep ) sock . send ( ms_to_cl . encode ( \"utf-8\" )) sock . close () client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '' , 8001 )) mess = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 2 \u043a\u0430\u0442\u0435\u0442\u043e\u0432 (\u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b) \u0434\u043b\u044f \u0440\u0430\u0441\u0441\u0447\u0435\u0442\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b : \" ) . encode ( 'utf-8' ) sock . send ( mess ) data = sock . recv ( 4096 ) res = data . decode ( 'utf-8' ) print ( f '\u0414\u043b\u0438\u043d\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b: ' + res ) sock . close () \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( \"127.0.0.1\" , 7171 )) sock . listen ( 10 ) sock , addr = sock . accept () file = open ( 'index.html' , 'r' ) ht = 'HTTP/1.0 200 OK \\n ' + file . read () sock . sendall ( ht . encode ( \"utf-8\" )) file . close () sock . close () * client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( 'localhost' , 7171 )) data = sock . recv ( 4096 ) print ( data . decode ( 'utf-8' )) sock . close () * index.html <!DOCTYPE html> < html lang = \"ru\" > < head > < meta charset = \"UTF-8\" > < title > Test page </ title > </ head > < body > Test page! DONE! </ body > </ html > \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server.py import socket , threading sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '127.0.0.1' , 8080 )) sock . listen () clients = [] users = [] def broadcast ( sms , client ): for each in clients : if each != client : each . send ( sms ) def handle ( client ): while True : sms = client . recv ( 2000 ) broadcast ( sms , client ) def receive (): while True : client , addr = sock . accept () client . send ( 'username' . encode ()) user = client . recv ( 2000 ) . decode () clients . append ( client ) users . append ( user ) client . send ( '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432 \u0447\u0430\u0442\u0435' . encode ()) thread = threading . Thread ( target = handle , args = ( client ,)) thread . start () receive () client.py import socket import threading sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server = '127.0.0.1' , 8080 sock . connect ( server ) name = input ( '\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c: ' ) def sms_write (): while True : sms = name + ' \u043d\u0430\u043f\u0438\u0441\u0430\u043b: {} ' . format ( input ( '' )) sock . send ( sms . encode ()) def sms_recive (): while True : sms = sock . recv ( 2000 ) . decode () if sms == 'username' : sock . send ( name . encode ()) else : print ( sms ) recive_thr = threading . Thread ( target = sms_recive ) write_thr = threading . Thread ( target = sms_write ) recive_thr . start () write_thr . start () \u0417\u0430\u0434\u0430\u0447\u0430 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket class MyHTTPServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . marks = [] def serve_forever ( self ): serve_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) serve_socket . bind (( self . host , self . port )) serve_socket . listen ( 10 ) print ( 'good' ) while True : client_socket , address = serve_socket . accept () self . serve_client ( client_socket ) def serve_client ( self , sock ): data = sock . recv ( 4096 ) . decode ( \"utf-8\" ) request = self . parse_request ( data ) response = self . handle_request ( request ) sock . send ( response . encode ()) def parse_request ( self , data ): request_line = data . split ( ' \\r\\n ' )[ 0 ] words = request_line . split () if len ( words ) == 3 : try : par = data . split ( ' \\r\\n ' )[ - 1 ] param = {} for p in par . split ( \"&\" ): param [ p [: p . index ( '=' )]] = p [ p . index ( '=' ) + 1 :] req = { \"method\" : words [ 0 ], \"url\" : words [ 1 ], \"version\" : words [ 2 ], \"parametrs\" : param } except : req = { \"method\" : words [ 0 ], \"url\" : words [ 1 ], \"version\" : words [ 2 ], \"parametrs\" : {}} else : raise Exception ( 'Malformed request line' ) print ( req ) return req def parse_headers ( self , data ): lines = data . split ( ' \\r\\n ' )[ 1 :] headers = {} for line in lines : parts = line . split ( ': ' ) headers [ parts [ 0 ]] = parts [ 1 ] return headers def handle_request ( self , request ): response = f \" { request [ 'version' ] } 200 OK \\n\\n \" if request [ 'method' ] == 'GET' and request [ 'url' ] == \"/\" : with open ( 'insert.html' ) as page : response += page . read () elif request [ 'method' ] == 'GET' and request [ 'url' ] == \"/view\" : body = '<!DOCTYPE html>' \\ '<html lang=\"ru\">' \\ '<head>' \\ '<meta charset=\"UTF-8\">' \\ '<title>\u041e\u0446\u0435\u043d\u043a\u0438</title>' \\ '</head>' \\ '<body>' \\ '<table align=\"center\" width=\"20%\" border=\"1\">' for subject , mark in self . marks : body += f \"<tr><td> { subject } </td><td> { mark } </td></tr>\" body += '</table></body></html>' response += body elif request [ 'method' ] == 'POST' : self . marks . append (( request [ 'parametrs' ][ 'subject' ], request [ 'parametrs' ][ 'mark' ])) return response if __name__ == '__main__' : host = 'localhost' port = 5011 name = 'aaaa.ru' serv = MyHTTPServer ( host , port , name ) try : serv . serve_forever () except KeyboardInterrupt : pass insert.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Journal </ title > </ head > < body > < form action = \"/\" method = \"post\" > < div > < label for = \"name\" > Subject: </ label > < input type = \"text\" id = \"name\" name = \"subject\" /> </ div > < div > < label for = \"mail\" > Mark: </ label > < input type = \"number\" id = \"mail\" name = \"mark\" /> </ div > < div > < input type = \"submit\" > </ div > </ body > </ html >","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '' , 8888 )) sock . listen ( 100 ) sock , addr = sock . accept () client_to_server = sock . recv ( 2048 ) print ( \"Data from client: \" + client_to_server . decode ( \"utf-8\" )) server_to_client = b \"Hello, client!\" sock . send ( server_to_client ) sock . close () client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '' , 8888 )) client_to_server = b \"Hello, server!\" sock . send ( client_to_server ) server_to_client = sock . recv ( 2048 ) print ( \"Data from server: \" + server_to_client . decode ( \"utf-8\" )) sock . close ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lr1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket import math sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '' , 8001 )) sock . listen ( 10 ) sock , addr = sock . accept () data_from_client = sock . recv ( 5096 ) cat = data_from_client . decode ( \"utf-8\" ) r = cat . split () a = float ( r [ 0 ]) b = float ( r [ 1 ]) gep = round ( math . sqrt ( a ** 2 + b ** 2 ), 3 ) ms_to_cl = str ( gep ) sock . send ( ms_to_cl . encode ( \"utf-8\" )) sock . close () client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '' , 8001 )) mess = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 2 \u043a\u0430\u0442\u0435\u0442\u043e\u0432 (\u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b) \u0434\u043b\u044f \u0440\u0430\u0441\u0441\u0447\u0435\u0442\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b : \" ) . encode ( 'utf-8' ) sock . send ( mess ) data = sock . recv ( 4096 ) res = data . decode ( 'utf-8' ) print ( f '\u0414\u043b\u0438\u043d\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b: ' + res ) sock . close ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lr1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( \"127.0.0.1\" , 7171 )) sock . listen ( 10 ) sock , addr = sock . accept () file = open ( 'index.html' , 'r' ) ht = 'HTTP/1.0 200 OK \\n ' + file . read () sock . sendall ( ht . encode ( \"utf-8\" )) file . close () sock . close () * client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( 'localhost' , 7171 )) data = sock . recv ( 4096 ) print ( data . decode ( 'utf-8' )) sock . close () * index.html <!DOCTYPE html> < html lang = \"ru\" > < head > < meta charset = \"UTF-8\" > < title > Test page </ title > </ head > < body > Test page! DONE! </ body > </ html >","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"lr1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server.py import socket , threading sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '127.0.0.1' , 8080 )) sock . listen () clients = [] users = [] def broadcast ( sms , client ): for each in clients : if each != client : each . send ( sms ) def handle ( client ): while True : sms = client . recv ( 2000 ) broadcast ( sms , client ) def receive (): while True : client , addr = sock . accept () client . send ( 'username' . encode ()) user = client . recv ( 2000 ) . decode () clients . append ( client ) users . append ( user ) client . send ( '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432 \u0447\u0430\u0442\u0435' . encode ()) thread = threading . Thread ( target = handle , args = ( client ,)) thread . start () receive () client.py import socket import threading sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) server = '127.0.0.1' , 8080 sock . connect ( server ) name = input ( '\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0441\u0435\u0432\u0434\u043e\u043d\u0438\u043c: ' ) def sms_write (): while True : sms = name + ' \u043d\u0430\u043f\u0438\u0441\u0430\u043b: {} ' . format ( input ( '' )) sock . send ( sms . encode ()) def sms_recive (): while True : sms = sock . recv ( 2000 ) . decode () if sms == 'username' : sock . send ( name . encode ()) else : print ( sms ) recive_thr = threading . Thread ( target = sms_recive ) write_thr = threading . Thread ( target = sms_write ) recive_thr . start () write_thr . start ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"lr1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket class MyHTTPServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . marks = [] def serve_forever ( self ): serve_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) serve_socket . bind (( self . host , self . port )) serve_socket . listen ( 10 ) print ( 'good' ) while True : client_socket , address = serve_socket . accept () self . serve_client ( client_socket ) def serve_client ( self , sock ): data = sock . recv ( 4096 ) . decode ( \"utf-8\" ) request = self . parse_request ( data ) response = self . handle_request ( request ) sock . send ( response . encode ()) def parse_request ( self , data ): request_line = data . split ( ' \\r\\n ' )[ 0 ] words = request_line . split () if len ( words ) == 3 : try : par = data . split ( ' \\r\\n ' )[ - 1 ] param = {} for p in par . split ( \"&\" ): param [ p [: p . index ( '=' )]] = p [ p . index ( '=' ) + 1 :] req = { \"method\" : words [ 0 ], \"url\" : words [ 1 ], \"version\" : words [ 2 ], \"parametrs\" : param } except : req = { \"method\" : words [ 0 ], \"url\" : words [ 1 ], \"version\" : words [ 2 ], \"parametrs\" : {}} else : raise Exception ( 'Malformed request line' ) print ( req ) return req def parse_headers ( self , data ): lines = data . split ( ' \\r\\n ' )[ 1 :] headers = {} for line in lines : parts = line . split ( ': ' ) headers [ parts [ 0 ]] = parts [ 1 ] return headers def handle_request ( self , request ): response = f \" { request [ 'version' ] } 200 OK \\n\\n \" if request [ 'method' ] == 'GET' and request [ 'url' ] == \"/\" : with open ( 'insert.html' ) as page : response += page . read () elif request [ 'method' ] == 'GET' and request [ 'url' ] == \"/view\" : body = '<!DOCTYPE html>' \\ '<html lang=\"ru\">' \\ '<head>' \\ '<meta charset=\"UTF-8\">' \\ '<title>\u041e\u0446\u0435\u043d\u043a\u0438</title>' \\ '</head>' \\ '<body>' \\ '<table align=\"center\" width=\"20%\" border=\"1\">' for subject , mark in self . marks : body += f \"<tr><td> { subject } </td><td> { mark } </td></tr>\" body += '</table></body></html>' response += body elif request [ 'method' ] == 'POST' : self . marks . append (( request [ 'parametrs' ][ 'subject' ], request [ 'parametrs' ][ 'mark' ])) return response if __name__ == '__main__' : host = 'localhost' port = 5011 name = 'aaaa.ru' serv = MyHTTPServer ( host , port , name ) try : serv . serve_forever () except KeyboardInterrupt : pass insert.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Journal </ title > </ head > < body > < form action = \"/\" method = \"post\" > < div > < label for = \"name\" > Subject: </ label > < input type = \"text\" id = \"name\" name = \"subject\" /> </ div > < div > < label for = \"mail\" > Mark: </ label > < input type = \"number\" id = \"mail\" name = \"mark\" /> </ div > < div > < input type = \"submit\" > </ div > </ body > </ html >","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21165"},{"location":"lr2/","text":"Laboratory work 2 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django \u0412\u0430\u0440\u0438\u0430\u043d\u04421: \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.contrib.auth import get_user_model class Guest ( AbstractUser ): last_name = models . CharField ( max_length = 30 ) first_name = models . CharField ( max_length = 30 ) birth_date = models . DateField ( null = True ) passport = models . CharField ( max_length = 30 , null = True ) def __str__ ( self ): return self . last_name + \" \" + self . first_name class Hotel ( models . Model ): name = models . CharField ( max_length = 30 ) owner = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 40 , null = True ) description = models . CharField ( max_length = 100 , null = True ) def __str__ ( self ): return self . name class Room ( models . Model ): Guest = get_user_model () number = models . IntegerField () type = models . CharField ( max_length = 30 , null = True ) price = models . IntegerField ( null = True ) capacity = models . IntegerField ( null = True ) amenities = models . CharField ( max_length = 30 , null = True ) hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , null = True ) guest = models . ManyToManyField ( Guest , through = 'Accommodation' ) def __str__ ( self ): return f \" { self . number } | { self . hotel } \" class Accommodation ( models . Model ): Guest = get_user_model () check_in_date = models . DateField () check_out_date = models . DateField () guest = models . ForeignKey ( Guest , on_delete = models . CASCADE , null = True ) room = models . ForeignKey ( Room , on_delete = models . CASCADE , null = True ) def __str__ ( self ): return f \" { self . guest } | { self . check_in_date } | { self . check_out_date } \" class Comment ( models . Model ): Guest = get_user_model () hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , null = True ) comment = models . CharField ( max_length = 200 ) rating = models . IntegerField ( null = True ) guest = models . ForeignKey ( Guest , on_delete = models . CASCADE , null = True ) accommodation = models . ForeignKey ( Accommodation , on_delete = models . CASCADE , null = True ) def __str__ ( self ): return f \" { self . guest } | { self . rating } \" urls.py from django.urls import path from .views import * urlpatterns = [ path ( \"guest/list/\" , guest_list ), path ( \"guest/create/\" , guest_create ), path ( \"room/list/\" , room_list ), path ( \"book/\" , book ), path ( \"book/list/\" , book_list ), path ( \"month/\" , last_month ), path ( \"accom/list/\" , accommodation_list ), path ( \"accom/<int:pk>/update/\" , AccomUpdate . as_view ()), path ( \"accom/<int:pk>/delete/\" , AccomDelete . as_view ()), path ( \"home/\" , home ), path ( 'hotel/list/' , HotelList . as_view ()), path ( 'hotel/<str:pk>' , hotel_view ), path ( 'hotel/review/<str:pk>' , comment ) ] views.py from django.shortcuts import render , get_object_or_404 from django.http import Http404 from .models import Guest , Room , Accommodation , Hotel , Comment from .forms import GuestForm , AccommodationForm , CommentForm from django.views.generic import UpdateView , DeleteView from django.views.generic.list import ListView import datetime def guest_list ( request ): data = { \"guests\" : Guest . objects . all ()} return render ( request , \"guest_list.html\" , data ) def guest_create ( request ): data = {} form = GuestForm ( request . POST or None ) if form . is_valid (): form . save () data [ \"form\" ] = form return render ( request , \"guest_create.html\" , data ) def room_list ( request ): data = { \"rooms\" : Room . objects . all ()} return render ( request , \"room_list.html\" , data ) def book ( request ): data = {} form = AccommodationForm ( request . POST or None ) if form . is_valid (): form . save () data [ \"form\" ] = form return render ( request , \"book.html\" , data ) def book_list ( request ): data = { \"accoms\" : Accommodation . objects . all ()} return render ( request , \"accom_list.html\" , data ) def last_month ( request ): data = {} try : month = datetime . date . today () - datetime . timedelta ( days = 31 ) data [ \"accoms\" ] = Accommodation . objects . all () . filter ( check_in_date__gte = str ( month ), check_out_date__lte = str ( datetime . date . today ())) print ( data ) except Accommodation . DoesNotExist : raise Http404 ( \"No guests this month yet :(\" ) return render ( request , \"accom_list.html\" , data ) def accommodation_list ( request ): data = { \"accoms\" : Accommodation . objects . all ()} return render ( request , \"accom_list.html\" , data ) def home ( request ): return render ( request , \"home.html\" ) class AccomUpdate ( UpdateView ): model = Accommodation template_name = \"accom_update.html\" fields = [ \"check_in_date\" , \"check_out_date\" , \"guest\" , \"room\" ] success_url = \"/accom/list/\" class AccomDelete ( DeleteView ): model = Accommodation template_name = \"accom_delete.html\" success_url = \"/accom/list/\" class HotelList ( ListView ): model = Hotel template_name = 'hotel.html' all_hotels = Hotel . objects def hotel_view ( request , pk ): hotel = Hotel . objects . get ( id = pk ) comments = Comment . objects . filter ( hotel = hotel ) return render ( request , 'hotel_detail.html' , { 'hotel' : hotel , 'comments' : comments }) def comment ( request , pk ): obj = get_object_or_404 ( Hotel , id = pk ) author = request . user if request . method == 'POST' : form = CommentForm ( request . POST ) if form [ 'comment' ] . value (): if form [ 'rating' ] . value (): if form . is_valid (): com = form . save ( commit = False ) com . author = author com . hotel = obj com . save () else : form = CommentForm () return render ( request , 'review.html' , { 'form' : form })","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#laboratory-work-2","text":"","title":"Laboratory work 2"},{"location":"lr2/#django","text":"\u0412\u0430\u0440\u0438\u0430\u043d\u04421: \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.contrib.auth import get_user_model class Guest ( AbstractUser ): last_name = models . CharField ( max_length = 30 ) first_name = models . CharField ( max_length = 30 ) birth_date = models . DateField ( null = True ) passport = models . CharField ( max_length = 30 , null = True ) def __str__ ( self ): return self . last_name + \" \" + self . first_name class Hotel ( models . Model ): name = models . CharField ( max_length = 30 ) owner = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 40 , null = True ) description = models . CharField ( max_length = 100 , null = True ) def __str__ ( self ): return self . name class Room ( models . Model ): Guest = get_user_model () number = models . IntegerField () type = models . CharField ( max_length = 30 , null = True ) price = models . IntegerField ( null = True ) capacity = models . IntegerField ( null = True ) amenities = models . CharField ( max_length = 30 , null = True ) hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , null = True ) guest = models . ManyToManyField ( Guest , through = 'Accommodation' ) def __str__ ( self ): return f \" { self . number } | { self . hotel } \" class Accommodation ( models . Model ): Guest = get_user_model () check_in_date = models . DateField () check_out_date = models . DateField () guest = models . ForeignKey ( Guest , on_delete = models . CASCADE , null = True ) room = models . ForeignKey ( Room , on_delete = models . CASCADE , null = True ) def __str__ ( self ): return f \" { self . guest } | { self . check_in_date } | { self . check_out_date } \" class Comment ( models . Model ): Guest = get_user_model () hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , null = True ) comment = models . CharField ( max_length = 200 ) rating = models . IntegerField ( null = True ) guest = models . ForeignKey ( Guest , on_delete = models . CASCADE , null = True ) accommodation = models . ForeignKey ( Accommodation , on_delete = models . CASCADE , null = True ) def __str__ ( self ): return f \" { self . guest } | { self . rating } \" urls.py from django.urls import path from .views import * urlpatterns = [ path ( \"guest/list/\" , guest_list ), path ( \"guest/create/\" , guest_create ), path ( \"room/list/\" , room_list ), path ( \"book/\" , book ), path ( \"book/list/\" , book_list ), path ( \"month/\" , last_month ), path ( \"accom/list/\" , accommodation_list ), path ( \"accom/<int:pk>/update/\" , AccomUpdate . as_view ()), path ( \"accom/<int:pk>/delete/\" , AccomDelete . as_view ()), path ( \"home/\" , home ), path ( 'hotel/list/' , HotelList . as_view ()), path ( 'hotel/<str:pk>' , hotel_view ), path ( 'hotel/review/<str:pk>' , comment ) ] views.py from django.shortcuts import render , get_object_or_404 from django.http import Http404 from .models import Guest , Room , Accommodation , Hotel , Comment from .forms import GuestForm , AccommodationForm , CommentForm from django.views.generic import UpdateView , DeleteView from django.views.generic.list import ListView import datetime def guest_list ( request ): data = { \"guests\" : Guest . objects . all ()} return render ( request , \"guest_list.html\" , data ) def guest_create ( request ): data = {} form = GuestForm ( request . POST or None ) if form . is_valid (): form . save () data [ \"form\" ] = form return render ( request , \"guest_create.html\" , data ) def room_list ( request ): data = { \"rooms\" : Room . objects . all ()} return render ( request , \"room_list.html\" , data ) def book ( request ): data = {} form = AccommodationForm ( request . POST or None ) if form . is_valid (): form . save () data [ \"form\" ] = form return render ( request , \"book.html\" , data ) def book_list ( request ): data = { \"accoms\" : Accommodation . objects . all ()} return render ( request , \"accom_list.html\" , data ) def last_month ( request ): data = {} try : month = datetime . date . today () - datetime . timedelta ( days = 31 ) data [ \"accoms\" ] = Accommodation . objects . all () . filter ( check_in_date__gte = str ( month ), check_out_date__lte = str ( datetime . date . today ())) print ( data ) except Accommodation . DoesNotExist : raise Http404 ( \"No guests this month yet :(\" ) return render ( request , \"accom_list.html\" , data ) def accommodation_list ( request ): data = { \"accoms\" : Accommodation . objects . all ()} return render ( request , \"accom_list.html\" , data ) def home ( request ): return render ( request , \"home.html\" ) class AccomUpdate ( UpdateView ): model = Accommodation template_name = \"accom_update.html\" fields = [ \"check_in_date\" , \"check_out_date\" , \"guest\" , \"room\" ] success_url = \"/accom/list/\" class AccomDelete ( DeleteView ): model = Accommodation template_name = \"accom_delete.html\" success_url = \"/accom/list/\" class HotelList ( ListView ): model = Hotel template_name = 'hotel.html' all_hotels = Hotel . objects def hotel_view ( request , pk ): hotel = Hotel . objects . get ( id = pk ) comments = Comment . objects . filter ( hotel = hotel ) return render ( request , 'hotel_detail.html' , { 'hotel' : hotel , 'comments' : comments }) def comment ( request , pk ): obj = get_object_or_404 ( Hotel , id = pk ) author = request . user if request . method == 'POST' : form = CommentForm ( request . POST ) if form [ 'comment' ] . value (): if form [ 'rating' ] . value (): if form . is_valid (): com = form . save ( commit = False ) com . author = author com . hotel = obj com . save () else : form = CommentForm () return render ( request , 'review.html' , { 'form' : form })","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django"},{"location":"lr3/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 3 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b model.py from django.db import models from django.contrib.auth.models import AbstractUser class Room ( models . Model ): id_room = models . AutoField ( \"id_room\" , primary_key = True ) type = models . ForeignKey ( \"TypeRoom\" , on_delete = models . CASCADE , verbose_name = \"\u0422\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b\" ) room_number = models . IntegerField ( verbose_name = \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\" , null = False ) class TypeRoom ( models . Model ): id_type = models . AutoField ( \"id_type\" , primary_key = True ) TYPE_PEOPLE = [( \"1\" , \"\u041e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439\" ), ( \"2\" , \"\u0414\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439\" ), ( \"3\" , \"\u0422\u0440\u0435\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439\" )] TYPE_ROOM = [( \"1\" , \"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\" ), ( \"2\" , \"\u041f\u043e\u043b\u0443-\u043b\u044e\u043a\u0441\" ), ( \"3\" , \"\u041b\u044e\u043a\u0441\" )] type_people = models . CharField ( max_length = 6 , default = '1' , choices = TYPE_PEOPLE , verbose_name = '\u0422\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u043a-\u0432 \u043b\u044e\u0434\u0435\u0439' ) type_room = models . CharField ( max_length = 6 , default = '1' , choices = TYPE_ROOM , verbose_name = '\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430' ) comfort = models . TextField ( verbose_name = '\u0423\u0434\u043e\u0431\u0441\u0442\u0432\u0430' ) price = models . IntegerField ( verbose_name = \"\u0426\u0435\u043d\u0430\" , null = False ) class Client ( AbstractUser ): passport = models . CharField ( max_length = 11 , verbose_name = 'pasport' , primary_key = True ) last_name = models . CharField ( max_length = 50 , verbose_name = '\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e' , null = False ) first_name = models . CharField ( max_length = 50 , verbose_name = '\u0418\u043c\u044f' , null = False ) patronymic = models . CharField ( max_length = 50 , verbose_name = '\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e' , null = False ) email = models . CharField ( max_length = 50 , verbose_name = '\u044d\u043b.\u043f\u043e\u0447\u0442\u0430' , null = False ) phone = models . CharField ( max_length = 50 , verbose_name = '\u0422\u0435\u043b\u0435\u0444\u043e\u043d' , null = False ) address = models . CharField ( max_length = 500 , verbose_name = '\u0410\u0434\u0440\u0435\u0441 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f' , null = False ) class Employee ( models . Model ): id_emp = models . AutoField ( \"id_worker\" , primary_key = True ) last_name = models . CharField ( max_length = 50 , verbose_name = '\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e' , null = False ) first_name = models . CharField ( max_length = 50 , verbose_name = '\u0418\u043c\u044f' , null = False ) patronymic = models . CharField ( max_length = 50 , verbose_name = '\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e' , null = False ) phone = models . CharField ( max_length = 50 , verbose_name = '\u0422\u0435\u043b\u0435\u0444\u043e\u043d' , null = False ) address = models . CharField ( max_length = 500 , verbose_name = '\u0410\u0434\u0440\u0435\u0441 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f' , null = False ) class Booking ( models . Model ): number_booking = models . AutoField ( 'id_booking' , max_length = 100 , primary_key = True ) room = models . ForeignKey ( \"Room\" , on_delete = models . CASCADE ) id_worker = models . ForeignKey ( \"Employee\" , on_delete = models . CASCADE ) passport_client = models . ForeignKey ( \"Client\" , on_delete = models . CASCADE ) check_in = models . DateField ( verbose_name = \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430\" , null = False ) check_out = models . DateField ( verbose_name = \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430\" , null = False ) STATUS_BOOK = [( \"0\" , \"\u0421\u0432\u043e\u0431\u043e\u0434\u0435\u043d\" ), ( \"1\" , \"\u0417\u0430\u043d\u044f\u0442\" )] status_book = models . CharField ( verbose_name = \"\u0421\u0442\u0430\u0442\u0443\u0441 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" , choices = STATUS_BOOK , null = False , max_length = 20 ) STATUS_PAYMENT = [( \"0\" , \"\u041d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043e\" ), ( \"1\" , \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d\u043e\" )] status_payment = models . CharField ( verbose_name = \"\u0421\u0442\u0430\u0442\u0443\u0441 \u043e\u043f\u043b\u0430\u0442\u044b\" , choices = STATUS_PAYMENT , null = False , max_length = 20 ) Views views.py from django.shortcuts import render # Create your views here. from rest_framework.views import APIView from .models import TypeRoom , Client , Room , Employee , Booking from rest_framework import serializers , generics , status from rest_framework.response import Response from .serializers import * from datetime import datetime from rest_framework.permissions import IsAuthenticated from rest_framework.authentication import TokenAuthentication from django.db.models import Count class AllClients ( generics . ListAPIView ): queryset = Client . objects . all () serializer_class = ClientSerializer permission_classes = [ IsAuthenticated ] class CreateClient ( generics . CreateAPIView , generics . ListAPIView ): queryset = Client . objects . all () serializer_class = ClientSerializer class UpdateClient ( generics . RetrieveUpdateAPIView ): serializer_class = ClientSerializer queryset = Client . objects . all () class DeleteClient ( generics . RetrieveDestroyAPIView ): serializer_class = ClientSerializer queryset = Client . objects . all () ### class AllWorkers ( generics . ListAPIView ): queryset = Employee . objects . all () serializer_class = WorkersSerializer permission_classes = [ IsAuthenticated ] class CreateWorker ( generics . CreateAPIView , generics . ListAPIView ): queryset = Employee . objects . all () serializer_class = WorkersSerializer class EmployeeUpdate ( generics . RetrieveUpdateAPIView ): serializer_class = WorkersSerializer queryset = Employee . objects . all () class EmployeeDestroy ( generics . RetrieveDestroyAPIView ): serializer_class = WorkersSerializer queryset = Employee . objects . all () ### class AllRooms ( generics . ListAPIView ): queryset = Room . objects . all () serializer_class = RoomSerializer permission_classes = [ IsAuthenticated ] class CreateRoom ( generics . CreateAPIView , generics . ListAPIView ): queryset = Room . objects . all () serializer_class = RoomSerializer class RoomUpdate ( generics . RetrieveUpdateAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () class RoomDelete ( generics . RetrieveDestroyAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () ### class AllBook ( generics . ListAPIView ): queryset = Booking . objects . all () serializer_class = BookSerializer permission_classes = [ IsAuthenticated ] class CreateBook ( generics . CreateAPIView ): serializer_class = BookSerializer permission_classes = [ IsAuthenticated ] class UpdateBook ( generics . RetrieveUpdateAPIView ): serializer_class = BookSerializer queryset = Booking . objects . all () class DeleteBook ( generics . RetrieveDestroyAPIView ): serializer_class = BookSerializer queryset = Booking . objects . all () ### class AllBookWithInfo ( generics . ListAPIView ): queryset = Booking . objects . all () serializer_class = BookSerializerWithInfoAboutRoomAndTypeRoom class RoomCount ( generics . ListAPIView ): serializer_class = RoomCountSerializer def get_queryset ( self ): c = Room . objects . annotate ( num_rooms = Count ( 'id_room' )) . count () return [{ 'count' : c }] class ClientCount ( generics . ListAPIView ): serializer_class = ClientCountSerializer def get_queryset ( self ): c = Client . objects . annotate ( num_clients = Count ( 'passport' )) . count () queryset = [{ 'count' : c }] return queryset Urls urls.py from django.urls import path , include , re_path from .views import * app_name = \"hotel_app\" urlpatterns = [ path ( 'all_clients/' , AllClients . as_view ()), path ( 'create_client/' , CreateClient . as_view ()), path ( 'client/<int:pk>/update' , UpdateClient . as_view ()), path ( 'client/<int:pk>/delete' , DeleteClient . as_view ()), ### path ( 'all_workers/' , AllWorkers . as_view ()), path ( 'create_worker/' , CreateWorker . as_view ()), path ( 'worker/<int:pk>/update' , EmployeeUpdate . as_view ()), path ( 'worker/<int:pk>/delete' , EmployeeDestroy . as_view ()), ### path ( 'room/' , AllRooms . as_view ()), path ( 'create_room/' , CreateRoom . as_view ()), path ( 'room/<int:pk>/update' , RoomUpdate . as_view ()), path ( 'room/<int:pk>/delete' , RoomUpdate . as_view ()), ### path ( 'all_book/' , AllBook . as_view ()), path ( 'create_book/' , CreateBook . as_view ()), path ( 'book/<int:pk>/update' , UpdateBook . as_view ()), path ( 'book/<int:pk>/delete' , DeleteBook . as_view ()), ### path ( 'all_books_with_room/' , AllBookWithInfo . as_view ()), path ( 'count_of_room/' , RoomCount . as_view ()), path ( 'count_of_client/' , ClientCount . as_view ()), ] Serializers serializers.py from rest_framework import serializers from .models import TypeRoom , Client , Room , Employee , Booking class ClientSerializer ( serializers . ModelSerializer ): class Meta : model = Client fields = \"__all__\" class BookSerializer ( serializers . ModelSerializer ): class Meta : model = Booking fields = \"__all__\" class WorkersSerializer ( serializers . ModelSerializer ): class Meta : model = Employee fields = \"__all__\" class TypeRoomSerializer ( serializers . ModelSerializer ): class Meta : model = TypeRoom fields = \"__all__\" class RoomSerializer ( serializers . ModelSerializer ): class Meta : model = Room fields = \"__all__\" class BookSerializerWithInfoAboutRoomAndTypeRoom ( serializers . ModelSerializer ): room = RoomSerializer () class Meta : model = Booking fields = \"__all__\" class RoomCountSerializer ( serializers . ModelSerializer ): count = serializers . SerializerMethodField () class Meta : model = Room fields = [ 'count' ] def get_count ( self , obj ): return obj [ \"count\" ] class ClientCountSerializer ( serializers . ModelSerializer ): count = serializers . SerializerMethodField () class Meta : model = Client fields = [ 'count' ] def get_count ( self , obj ): return obj [ \"count\" ] API Method | HTTP method | Description -----------|:-----------:| -------------| AllClients | GET | \u0412\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 CreateClient | POST | \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 UpdateClient | PATCH | \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 DeleteClient | DELETE | \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 ALlWorkers | GET | \u0412\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 CreateWorker | POST | \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u0430 EmployeeUpdate | PATCH | \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u0430 EmployeeDelete | DELETE | \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u0430 Allrooms | GET | \u0412\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043d\u0430\u0442 CreateRoom | POST | \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b RoomUpdate | PATCH | \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443 RoomDelete | DELETE | \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443 AllBook | GET | \u0412\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 CreateBook | POST | \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f UpdateBook | UPDATE | \u0420\u0435\u0434\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 DeleteBook | DELETE | \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 AllBookWithInfo | GET | \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u0445 \u0441 \u0438\u0445 \u0442\u0438\u043f\u043e\u043c RoomCount | GET | \u041a\u043e\u043b-\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u043e\u0442\u0435\u043b\u0435 ClientCount | GET | \u041a\u043e\u043b-\u0432\u043e \u043f\u043e\u0441\u0438\u0442\u0442\u0438\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lr3/#3","text":"model.py from django.db import models from django.contrib.auth.models import AbstractUser class Room ( models . Model ): id_room = models . AutoField ( \"id_room\" , primary_key = True ) type = models . ForeignKey ( \"TypeRoom\" , on_delete = models . CASCADE , verbose_name = \"\u0422\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b\" ) room_number = models . IntegerField ( verbose_name = \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\" , null = False ) class TypeRoom ( models . Model ): id_type = models . AutoField ( \"id_type\" , primary_key = True ) TYPE_PEOPLE = [( \"1\" , \"\u041e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439\" ), ( \"2\" , \"\u0414\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439\" ), ( \"3\" , \"\u0422\u0440\u0435\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439\" )] TYPE_ROOM = [( \"1\" , \"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\" ), ( \"2\" , \"\u041f\u043e\u043b\u0443-\u043b\u044e\u043a\u0441\" ), ( \"3\" , \"\u041b\u044e\u043a\u0441\" )] type_people = models . CharField ( max_length = 6 , default = '1' , choices = TYPE_PEOPLE , verbose_name = '\u0422\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u043a-\u0432 \u043b\u044e\u0434\u0435\u0439' ) type_room = models . CharField ( max_length = 6 , default = '1' , choices = TYPE_ROOM , verbose_name = '\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430' ) comfort = models . TextField ( verbose_name = '\u0423\u0434\u043e\u0431\u0441\u0442\u0432\u0430' ) price = models . IntegerField ( verbose_name = \"\u0426\u0435\u043d\u0430\" , null = False ) class Client ( AbstractUser ): passport = models . CharField ( max_length = 11 , verbose_name = 'pasport' , primary_key = True ) last_name = models . CharField ( max_length = 50 , verbose_name = '\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e' , null = False ) first_name = models . CharField ( max_length = 50 , verbose_name = '\u0418\u043c\u044f' , null = False ) patronymic = models . CharField ( max_length = 50 , verbose_name = '\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e' , null = False ) email = models . CharField ( max_length = 50 , verbose_name = '\u044d\u043b.\u043f\u043e\u0447\u0442\u0430' , null = False ) phone = models . CharField ( max_length = 50 , verbose_name = '\u0422\u0435\u043b\u0435\u0444\u043e\u043d' , null = False ) address = models . CharField ( max_length = 500 , verbose_name = '\u0410\u0434\u0440\u0435\u0441 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f' , null = False ) class Employee ( models . Model ): id_emp = models . AutoField ( \"id_worker\" , primary_key = True ) last_name = models . CharField ( max_length = 50 , verbose_name = '\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e' , null = False ) first_name = models . CharField ( max_length = 50 , verbose_name = '\u0418\u043c\u044f' , null = False ) patronymic = models . CharField ( max_length = 50 , verbose_name = '\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e' , null = False ) phone = models . CharField ( max_length = 50 , verbose_name = '\u0422\u0435\u043b\u0435\u0444\u043e\u043d' , null = False ) address = models . CharField ( max_length = 500 , verbose_name = '\u0410\u0434\u0440\u0435\u0441 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f' , null = False ) class Booking ( models . Model ): number_booking = models . AutoField ( 'id_booking' , max_length = 100 , primary_key = True ) room = models . ForeignKey ( \"Room\" , on_delete = models . CASCADE ) id_worker = models . ForeignKey ( \"Employee\" , on_delete = models . CASCADE ) passport_client = models . ForeignKey ( \"Client\" , on_delete = models . CASCADE ) check_in = models . DateField ( verbose_name = \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430\" , null = False ) check_out = models . DateField ( verbose_name = \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430\" , null = False ) STATUS_BOOK = [( \"0\" , \"\u0421\u0432\u043e\u0431\u043e\u0434\u0435\u043d\" ), ( \"1\" , \"\u0417\u0430\u043d\u044f\u0442\" )] status_book = models . CharField ( verbose_name = \"\u0421\u0442\u0430\u0442\u0443\u0441 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" , choices = STATUS_BOOK , null = False , max_length = 20 ) STATUS_PAYMENT = [( \"0\" , \"\u041d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043e\" ), ( \"1\" , \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d\u043e\" )] status_payment = models . CharField ( verbose_name = \"\u0421\u0442\u0430\u0442\u0443\u0441 \u043e\u043f\u043b\u0430\u0442\u044b\" , choices = STATUS_PAYMENT , null = False , max_length = 20 )","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 3 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lr3/#views","text":"views.py from django.shortcuts import render # Create your views here. from rest_framework.views import APIView from .models import TypeRoom , Client , Room , Employee , Booking from rest_framework import serializers , generics , status from rest_framework.response import Response from .serializers import * from datetime import datetime from rest_framework.permissions import IsAuthenticated from rest_framework.authentication import TokenAuthentication from django.db.models import Count class AllClients ( generics . ListAPIView ): queryset = Client . objects . all () serializer_class = ClientSerializer permission_classes = [ IsAuthenticated ] class CreateClient ( generics . CreateAPIView , generics . ListAPIView ): queryset = Client . objects . all () serializer_class = ClientSerializer class UpdateClient ( generics . RetrieveUpdateAPIView ): serializer_class = ClientSerializer queryset = Client . objects . all () class DeleteClient ( generics . RetrieveDestroyAPIView ): serializer_class = ClientSerializer queryset = Client . objects . all () ### class AllWorkers ( generics . ListAPIView ): queryset = Employee . objects . all () serializer_class = WorkersSerializer permission_classes = [ IsAuthenticated ] class CreateWorker ( generics . CreateAPIView , generics . ListAPIView ): queryset = Employee . objects . all () serializer_class = WorkersSerializer class EmployeeUpdate ( generics . RetrieveUpdateAPIView ): serializer_class = WorkersSerializer queryset = Employee . objects . all () class EmployeeDestroy ( generics . RetrieveDestroyAPIView ): serializer_class = WorkersSerializer queryset = Employee . objects . all () ### class AllRooms ( generics . ListAPIView ): queryset = Room . objects . all () serializer_class = RoomSerializer permission_classes = [ IsAuthenticated ] class CreateRoom ( generics . CreateAPIView , generics . ListAPIView ): queryset = Room . objects . all () serializer_class = RoomSerializer class RoomUpdate ( generics . RetrieveUpdateAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () class RoomDelete ( generics . RetrieveDestroyAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () ### class AllBook ( generics . ListAPIView ): queryset = Booking . objects . all () serializer_class = BookSerializer permission_classes = [ IsAuthenticated ] class CreateBook ( generics . CreateAPIView ): serializer_class = BookSerializer permission_classes = [ IsAuthenticated ] class UpdateBook ( generics . RetrieveUpdateAPIView ): serializer_class = BookSerializer queryset = Booking . objects . all () class DeleteBook ( generics . RetrieveDestroyAPIView ): serializer_class = BookSerializer queryset = Booking . objects . all () ### class AllBookWithInfo ( generics . ListAPIView ): queryset = Booking . objects . all () serializer_class = BookSerializerWithInfoAboutRoomAndTypeRoom class RoomCount ( generics . ListAPIView ): serializer_class = RoomCountSerializer def get_queryset ( self ): c = Room . objects . annotate ( num_rooms = Count ( 'id_room' )) . count () return [{ 'count' : c }] class ClientCount ( generics . ListAPIView ): serializer_class = ClientCountSerializer def get_queryset ( self ): c = Client . objects . annotate ( num_clients = Count ( 'passport' )) . count () queryset = [{ 'count' : c }] return queryset","title":"Views"},{"location":"lr3/#urls","text":"urls.py from django.urls import path , include , re_path from .views import * app_name = \"hotel_app\" urlpatterns = [ path ( 'all_clients/' , AllClients . as_view ()), path ( 'create_client/' , CreateClient . as_view ()), path ( 'client/<int:pk>/update' , UpdateClient . as_view ()), path ( 'client/<int:pk>/delete' , DeleteClient . as_view ()), ### path ( 'all_workers/' , AllWorkers . as_view ()), path ( 'create_worker/' , CreateWorker . as_view ()), path ( 'worker/<int:pk>/update' , EmployeeUpdate . as_view ()), path ( 'worker/<int:pk>/delete' , EmployeeDestroy . as_view ()), ### path ( 'room/' , AllRooms . as_view ()), path ( 'create_room/' , CreateRoom . as_view ()), path ( 'room/<int:pk>/update' , RoomUpdate . as_view ()), path ( 'room/<int:pk>/delete' , RoomUpdate . as_view ()), ### path ( 'all_book/' , AllBook . as_view ()), path ( 'create_book/' , CreateBook . as_view ()), path ( 'book/<int:pk>/update' , UpdateBook . as_view ()), path ( 'book/<int:pk>/delete' , DeleteBook . as_view ()), ### path ( 'all_books_with_room/' , AllBookWithInfo . as_view ()), path ( 'count_of_room/' , RoomCount . as_view ()), path ( 'count_of_client/' , ClientCount . as_view ()), ]","title":"Urls"},{"location":"lr3/#serializers","text":"serializers.py from rest_framework import serializers from .models import TypeRoom , Client , Room , Employee , Booking class ClientSerializer ( serializers . ModelSerializer ): class Meta : model = Client fields = \"__all__\" class BookSerializer ( serializers . ModelSerializer ): class Meta : model = Booking fields = \"__all__\" class WorkersSerializer ( serializers . ModelSerializer ): class Meta : model = Employee fields = \"__all__\" class TypeRoomSerializer ( serializers . ModelSerializer ): class Meta : model = TypeRoom fields = \"__all__\" class RoomSerializer ( serializers . ModelSerializer ): class Meta : model = Room fields = \"__all__\" class BookSerializerWithInfoAboutRoomAndTypeRoom ( serializers . ModelSerializer ): room = RoomSerializer () class Meta : model = Booking fields = \"__all__\" class RoomCountSerializer ( serializers . ModelSerializer ): count = serializers . SerializerMethodField () class Meta : model = Room fields = [ 'count' ] def get_count ( self , obj ): return obj [ \"count\" ] class ClientCountSerializer ( serializers . ModelSerializer ): count = serializers . SerializerMethodField () class Meta : model = Client fields = [ 'count' ] def get_count ( self , obj ): return obj [ \"count\" ]","title":"Serializers"},{"location":"lr3/#api","text":"Method | HTTP method | Description -----------|:-----------:| -------------| AllClients | GET | \u0412\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 CreateClient | POST | \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 UpdateClient | PATCH | \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 DeleteClient | DELETE | \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 ALlWorkers | GET | \u0412\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 CreateWorker | POST | \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u0430 EmployeeUpdate | PATCH | \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u0430 EmployeeDelete | DELETE | \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u0430 Allrooms | GET | \u0412\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043d\u0430\u0442 CreateRoom | POST | \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b RoomUpdate | PATCH | \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443 RoomDelete | DELETE | \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u0443 AllBook | GET | \u0412\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 CreateBook | POST | \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f UpdateBook | UPDATE | \u0420\u0435\u0434\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 DeleteBook | DELETE | \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 AllBookWithInfo | GET | \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u0445 \u0441 \u0438\u0445 \u0442\u0438\u043f\u043e\u043c RoomCount | GET | \u041a\u043e\u043b-\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0432 \u043e\u0442\u0435\u043b\u0435 ClientCount | GET | \u041a\u043e\u043b-\u0432\u043e \u043f\u043e\u0441\u0438\u0442\u0442\u0438\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442","title":"API"},{"location":"lr4/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 4 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b App.vue < template > < v-app > < div > < v-toolbar dense dark color = \"blue\" > < v-toolbar-title @ click = \"goToHome\" style = \"cursor: pointer\" > Hotel by Paul Alekseev </ v-toolbar-title > < v-spacer ></ v-spacer > < v-toolbar-items class = \"hidden-sm-and-down\" > < v-btn color = \"white\" plain @ click = \"goToRooms\" > Rooms </ v-btn > < v-btn color = \"white\" plain @ click = \"goToGuests\" > Guests </ v-btn > < v-btn color = \"white\" plain @ click = \"goToRegistration\" > Register </ v-btn > </ v-toolbar-items > < v-btn color = \"white\" plain @ click = \"logout\" > Exit </ v-btn > </ v-toolbar > </ div > < v-main > < v-container fluid > < router-view ></ router-view > </ v-container > </ v-main > </ v-app > </ template > < script > export default { name : 'App' , data : () => ({}), methods : { logout () { localStorage . removeItem ( 'auth_token' ) this . $router . push ({ name : 'Login' }) }, goToGuests () { this . $router . push ({ name : 'Guests' }) }, goToRooms () { this . $router . push ({ name : 'Rooms' }) }, goToRegistration () { this . $router . push ({ name : 'Registration' }) }, goToHome () { this . $router . push ({ name : 'Home' }) } } } </ script > index.js import Vue from 'vue' import VueRouter from 'vue-router' import Home from '@/views/Home.vue' import Login from '@/views/Login' import Registration from '@/views/Registration' import Guests from '@/views/Guests' import Rooms from '@/views/Rooms' Vue . use ( VueRouter ) const routes = [ { path : '/' , name : 'Home' , component : Home , alias : '/home' , meta : { requiresAuth : true } }, { path : '/guests' , name : 'Guests' , component : Guests , meta : { requiresAuth : true } }, { path : '/rooms' , name : 'Rooms' , component : Rooms , meta : { requiresAuth : true } }, { path : '/login' , name : 'Login' , component : Login }, { path : '/register' , name : 'Registration' , component : Registration } ] const router = new VueRouter ({ mode : 'history' , base : process . env . BASE_URL , routes }) router . beforeEach (( to , from , next ) => { if ( to . matched . some ( record => record . meta . requiresAuth )) { if ( ! localStorage . getItem ( 'auth_token' )) { next ({ name : 'Login' }) } else { next () } } else { next () } }) export default router ### class AllBook ( generics . ListAPIView ): queryset = Booking . objects . all () serializer_class = BookSerializer permission_classes = [ IsAuthenticated ] class CreateBook ( generics . CreateAPIView ): serializer_class = BookSerializer permission_classes = [ IsAuthenticated ] class UpdateBook ( generics . RetrieveUpdateAPIView ): serializer_class = BookSerializer queryset = Booking . objects . all () class DeleteBook ( generics . RetrieveDestroyAPIView ): serializer_class = BookSerializer queryset = Booking . objects . all () ### class AllBookWithInfo ( generics . ListAPIView ): queryset = Booking . objects . all () serializer_class = BookSerializerWithInfoAboutRoomAndTypeRoom class RoomCount ( generics . ListAPIView ): serializer_class = RoomCountSerializer def get_queryset ( self ): c = Room . objects . annotate ( num_rooms = Count ( 'id_room' )) . count () return [{ 'count' : c }] class ClientCount ( generics . ListAPIView ): serializer_class = ClientCountSerializer def get_queryset ( self ): c = Client . objects . annotate ( num_clients = Count ( 'passport' )) . count () queryset = [{ 'count' : c }] return queryset Views Home.vue < template > < div class = \"home\" > < h1 > \u0412\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c! </ h1 > < h2 > \u0421\u043f\u0430\u0441\u0438\u0431\u043e, \u0447\u0442\u043e \u0432\u044b \u0441 \u043d\u0430\u043c\u0438! </ h2 > </ div > </ template > < script > export default { name : 'Home' , components : { } } </ script > Rooms.vue < template > < div > < h1 > \u0421\u043f\u0438\u0441\u043e\u043a < span v-if = \"filter\" > \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 </ span > \u043a\u043e\u043c\u043d\u0430\u0442 </ h1 > < ul class = \"greeting-list\" > < li v-for = \"room in filteredRooms\" :key = \"room.number\" > {{ room.number }} - {{room.type}} beds </ li > </ ul > < v-btn color = \"blue\" dark @ click = \"dialog = true\" > Edit </ v-btn > < v-btn color = \"blue\" dark v-if = \"!filter\" @ click = \"filter = true\" class = \"mx-2\" > Show empty rooms </ v-btn > < v-btn color = \"blue\" dark v-if = \"filter\" @ click = \"filter = false\" class = \"mx-2\" > Show all rooms </ v-btn > < v-row > < v-dialog v-model = \"dialog\" persistent max-width = \"600px\" > < v-card > < v-card-title > < span class = \"headline\" > Room info </ span > < v-spacer ></ v-spacer > < v-btn icon @ click = \"dialog = false\" > < v-icon > mdi-close </ v-icon > </ v-btn > </ v-card-title > < v-card-text > < v-container > < v-row > < v-col cols = \"12\" sm = \"6\" md = \"4\" > < v-text-field v-model = \"roomNumber\" label = \"Room number\" required ></ v-text-field > </ v-col > < v-col cols = \"12\" sm = \"6\" md = \"4\" > < v-select v-model = \"roomType\" :items = \"['1', '2', '3']\" label = \"Type\" ></ v-select > </ v-col > < v-col cols = \"12\" sm = \"6\" md = \"4\" > < v-text-field label = \"Price\" persistent-hint required v-model = \"roomPrice\" ></ v-text-field > </ v-col > < v-col cols = \"12\" sm = \"6\" md = \"4\" > < v-text-field label = \"Floor\" required v-model = \"roomFloor\" ></ v-text-field > </ v-col > </ v-row > </ v-container > </ v-card-text > < v-card-actions > < v-spacer ></ v-spacer > < v-btn icon @ click = \"search\" > < v-icon > mdi-magnify </ v-icon > </ v-btn > < v-btn color = \"cancel\" text @ click = \"doDelete\" > Delete </ v-btn > < v-btn color = \"info\" text @ click = \"update\" > Update </ v-btn > < v-btn color = \"success\" text @ click = \"add\" > Add </ v-btn > </ v-card-actions > </ v-card > </ v-dialog > </ v-row > </ div > </ template > < script > export default { name : 'Rooms' , data : () => ({ rooms : [], busyRooms : [], filter : false , dialog : false , roomType : '' , roomPrice : '' , roomNumber : '' , roomFloor : '' }), methods : { search () { console . log ( this . rooms ) const room = this . rooms . filter ( room => room . number === Number . parseInt ( this . roomNumber ))[ 0 ] if ( room ) { this . roomType = room . type this . roomPrice = room . price this . roomFloor = room . floor } else { this . roomType = '' this . roomPrice = '' this . roomFloor = '' } }, async add () { const body = { number : this . roomNumber , type : this . roomType , price : this . roomPrice , floor : this . roomFloor } const response = await this . axios . post ( this . $hostname + 'hotel/rooms/' , body , { headers : { Authorization : 'Token ' + localStorage . getItem ( 'auth_token' ) } } ) console . log ( response ) this . dialog = false if ( response . status === 201 ) { this . rooms . push ( body ) } }, async update () { const body = { type : this . roomType , price : this . roomPrice , floor : this . roomFloor } const response = await this . axios . patch ( this . $hostname + 'hotel/rooms/' + this . roomNumber + '/' , body , { headers : { Authorization : 'Token ' + localStorage . getItem ( 'auth_token' ) } } ) console . log ( response ) this . rooms = this . rooms . filter ( room => room . number !== Number . parseInt ( this . roomNumber )) if ( response . status === 200 ) { body . number = this . roomNumber this . rooms . push ( body ) } this . dialog = false }, doDelete () { this . axios . delete ( this . $hostname + 'hotel/rooms/' + this . roomNumber + '/' , { headers : { Authorization : 'Token ' + localStorage . getItem ( 'auth_token' ) } }) . then ( response => { console . log ( response ) }) . catch ( error => { console . log ( error ) }) this . rooms = this . rooms . filter ( room => room . number !== Number . parseInt ( this . roomNumber )) this . dialog = false } }, computed : { filteredRooms () { if ( this . filter ) { return this . rooms . filter ( room => ! this . busyRooms . includes ( room . number )) } return this . rooms } }, created () { this . axios . get ( this . $hostname + 'hotel/rooms/' , { headers : { Authorization : 'Token ' + localStorage . getItem ( 'auth_token' ) } }) . then ( response => { this . rooms = response . data }) . catch ( error => { console . log ( error ) }) this . axios . get ( this . $hostname + 'hotel/guests/' , { headers : { Authorization : 'Token ' + localStorage . getItem ( 'auth_token' ) } }) . then ( response => { this . busyRooms = response . data . map ( guest => guest . room ) console . log ( this . busyRooms ) }) . catch ( error => { console . log ( error ) }) } } </ script > < style scoped > </ style > - Registration.vue < template > < v-layout column justify-center align-center > < v-form v-model = \"valid\" > < v-text-field v-model = \"username\" label = \"Username\" :rules = \"[v => !!v || 'Username is required']\" required ></ v-text-field > < v-text-field v-model = \"password\" label = \"Password\" type = \"Password\" :rules = \"[v => !!v || 'Password is required']\" required ></ v-text-field > < v-text-field v-model = \"email\" label = \"Email\" type = \"email\" :rules = \"emailRules\" required ></ v-text-field > < v-btn color = \"blue\" @ click = \"submit\" :disabled = \"!valid\" > Login </ v-btn > </ v-form > </ v-layout > </ template > < script > export default { name : 'Registration' , data : () => ({ username : '' , password : '' , email : '' , emailRules : [ v => /^ \\ w + ([. - ] ? \\ w + ) * @\\ w + ([. - ] ? \\ w + ) * ( \\ . \\ w { 2 , 3 }) + $ / . test ( v ) || 'E-mail must be valid' ] }), methods : { async submit () { const body = { valid : false , username : this . username , password : this . password , email : this . email } const response = await this . axios . post ( this . $hostname + 'auth/users/' , body ) if ( response . status === 201 ) { this . $router . push ({ name : 'Login' }) } else { alert ( 'Something went wrong' ) } } } } </ script > < style scoped > </ style > Login.vue < template > < v-layout column justify-center align-center > < v-form > < v-text-field v-model = \"username\" label = \"Username\" required ></ v-text-field > < v-text-field v-model = \"password\" label = \"Password\" type = \"Password\" required ></ v-text-field > < v-btn color = \"success\" @ click = \"submit\" > Login </ v-btn > </ v-form > </ v-layout > </ template > < script > export default { name : 'Login' , data : () => ({ username : '' , password : '' }), methods : { async submit () { const body = { username : this . username , password : this . password } const response = await this . axios . post ( this . $hostname + 'auth/token/login/' , body ) if ( response . status === 200 ) { localStorage . setItem ( 'auth_token' , response . data . auth_token ) this . $router . push ({ name : 'Home' }) } else { if ( response . status === 400 ) { alert ( 'Wrong username or password' ) } else { alert ( 'Unknown error' ) } } } } } </ script > < style scoped > </ style >","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"lr4/#4","text":"App.vue < template > < v-app > < div > < v-toolbar dense dark color = \"blue\" > < v-toolbar-title @ click = \"goToHome\" style = \"cursor: pointer\" > Hotel by Paul Alekseev </ v-toolbar-title > < v-spacer ></ v-spacer > < v-toolbar-items class = \"hidden-sm-and-down\" > < v-btn color = \"white\" plain @ click = \"goToRooms\" > Rooms </ v-btn > < v-btn color = \"white\" plain @ click = \"goToGuests\" > Guests </ v-btn > < v-btn color = \"white\" plain @ click = \"goToRegistration\" > Register </ v-btn > </ v-toolbar-items > < v-btn color = \"white\" plain @ click = \"logout\" > Exit </ v-btn > </ v-toolbar > </ div > < v-main > < v-container fluid > < router-view ></ router-view > </ v-container > </ v-main > </ v-app > </ template > < script > export default { name : 'App' , data : () => ({}), methods : { logout () { localStorage . removeItem ( 'auth_token' ) this . $router . push ({ name : 'Login' }) }, goToGuests () { this . $router . push ({ name : 'Guests' }) }, goToRooms () { this . $router . push ({ name : 'Rooms' }) }, goToRegistration () { this . $router . push ({ name : 'Registration' }) }, goToHome () { this . $router . push ({ name : 'Home' }) } } } </ script > index.js import Vue from 'vue' import VueRouter from 'vue-router' import Home from '@/views/Home.vue' import Login from '@/views/Login' import Registration from '@/views/Registration' import Guests from '@/views/Guests' import Rooms from '@/views/Rooms' Vue . use ( VueRouter ) const routes = [ { path : '/' , name : 'Home' , component : Home , alias : '/home' , meta : { requiresAuth : true } }, { path : '/guests' , name : 'Guests' , component : Guests , meta : { requiresAuth : true } }, { path : '/rooms' , name : 'Rooms' , component : Rooms , meta : { requiresAuth : true } }, { path : '/login' , name : 'Login' , component : Login }, { path : '/register' , name : 'Registration' , component : Registration } ] const router = new VueRouter ({ mode : 'history' , base : process . env . BASE_URL , routes }) router . beforeEach (( to , from , next ) => { if ( to . matched . some ( record => record . meta . requiresAuth )) { if ( ! localStorage . getItem ( 'auth_token' )) { next ({ name : 'Login' }) } else { next () } } else { next () } }) export default router ### class AllBook ( generics . ListAPIView ): queryset = Booking . objects . all () serializer_class = BookSerializer permission_classes = [ IsAuthenticated ] class CreateBook ( generics . CreateAPIView ): serializer_class = BookSerializer permission_classes = [ IsAuthenticated ] class UpdateBook ( generics . RetrieveUpdateAPIView ): serializer_class = BookSerializer queryset = Booking . objects . all () class DeleteBook ( generics . RetrieveDestroyAPIView ): serializer_class = BookSerializer queryset = Booking . objects . all () ### class AllBookWithInfo ( generics . ListAPIView ): queryset = Booking . objects . all () serializer_class = BookSerializerWithInfoAboutRoomAndTypeRoom class RoomCount ( generics . ListAPIView ): serializer_class = RoomCountSerializer def get_queryset ( self ): c = Room . objects . annotate ( num_rooms = Count ( 'id_room' )) . count () return [{ 'count' : c }] class ClientCount ( generics . ListAPIView ): serializer_class = ClientCountSerializer def get_queryset ( self ): c = Client . objects . annotate ( num_clients = Count ( 'passport' )) . count () queryset = [{ 'count' : c }] return queryset","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 4 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lr4/#views","text":"Home.vue < template > < div class = \"home\" > < h1 > \u0412\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c! </ h1 > < h2 > \u0421\u043f\u0430\u0441\u0438\u0431\u043e, \u0447\u0442\u043e \u0432\u044b \u0441 \u043d\u0430\u043c\u0438! </ h2 > </ div > </ template > < script > export default { name : 'Home' , components : { } } </ script > Rooms.vue < template > < div > < h1 > \u0421\u043f\u0438\u0441\u043e\u043a < span v-if = \"filter\" > \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 </ span > \u043a\u043e\u043c\u043d\u0430\u0442 </ h1 > < ul class = \"greeting-list\" > < li v-for = \"room in filteredRooms\" :key = \"room.number\" > {{ room.number }} - {{room.type}} beds </ li > </ ul > < v-btn color = \"blue\" dark @ click = \"dialog = true\" > Edit </ v-btn > < v-btn color = \"blue\" dark v-if = \"!filter\" @ click = \"filter = true\" class = \"mx-2\" > Show empty rooms </ v-btn > < v-btn color = \"blue\" dark v-if = \"filter\" @ click = \"filter = false\" class = \"mx-2\" > Show all rooms </ v-btn > < v-row > < v-dialog v-model = \"dialog\" persistent max-width = \"600px\" > < v-card > < v-card-title > < span class = \"headline\" > Room info </ span > < v-spacer ></ v-spacer > < v-btn icon @ click = \"dialog = false\" > < v-icon > mdi-close </ v-icon > </ v-btn > </ v-card-title > < v-card-text > < v-container > < v-row > < v-col cols = \"12\" sm = \"6\" md = \"4\" > < v-text-field v-model = \"roomNumber\" label = \"Room number\" required ></ v-text-field > </ v-col > < v-col cols = \"12\" sm = \"6\" md = \"4\" > < v-select v-model = \"roomType\" :items = \"['1', '2', '3']\" label = \"Type\" ></ v-select > </ v-col > < v-col cols = \"12\" sm = \"6\" md = \"4\" > < v-text-field label = \"Price\" persistent-hint required v-model = \"roomPrice\" ></ v-text-field > </ v-col > < v-col cols = \"12\" sm = \"6\" md = \"4\" > < v-text-field label = \"Floor\" required v-model = \"roomFloor\" ></ v-text-field > </ v-col > </ v-row > </ v-container > </ v-card-text > < v-card-actions > < v-spacer ></ v-spacer > < v-btn icon @ click = \"search\" > < v-icon > mdi-magnify </ v-icon > </ v-btn > < v-btn color = \"cancel\" text @ click = \"doDelete\" > Delete </ v-btn > < v-btn color = \"info\" text @ click = \"update\" > Update </ v-btn > < v-btn color = \"success\" text @ click = \"add\" > Add </ v-btn > </ v-card-actions > </ v-card > </ v-dialog > </ v-row > </ div > </ template > < script > export default { name : 'Rooms' , data : () => ({ rooms : [], busyRooms : [], filter : false , dialog : false , roomType : '' , roomPrice : '' , roomNumber : '' , roomFloor : '' }), methods : { search () { console . log ( this . rooms ) const room = this . rooms . filter ( room => room . number === Number . parseInt ( this . roomNumber ))[ 0 ] if ( room ) { this . roomType = room . type this . roomPrice = room . price this . roomFloor = room . floor } else { this . roomType = '' this . roomPrice = '' this . roomFloor = '' } }, async add () { const body = { number : this . roomNumber , type : this . roomType , price : this . roomPrice , floor : this . roomFloor } const response = await this . axios . post ( this . $hostname + 'hotel/rooms/' , body , { headers : { Authorization : 'Token ' + localStorage . getItem ( 'auth_token' ) } } ) console . log ( response ) this . dialog = false if ( response . status === 201 ) { this . rooms . push ( body ) } }, async update () { const body = { type : this . roomType , price : this . roomPrice , floor : this . roomFloor } const response = await this . axios . patch ( this . $hostname + 'hotel/rooms/' + this . roomNumber + '/' , body , { headers : { Authorization : 'Token ' + localStorage . getItem ( 'auth_token' ) } } ) console . log ( response ) this . rooms = this . rooms . filter ( room => room . number !== Number . parseInt ( this . roomNumber )) if ( response . status === 200 ) { body . number = this . roomNumber this . rooms . push ( body ) } this . dialog = false }, doDelete () { this . axios . delete ( this . $hostname + 'hotel/rooms/' + this . roomNumber + '/' , { headers : { Authorization : 'Token ' + localStorage . getItem ( 'auth_token' ) } }) . then ( response => { console . log ( response ) }) . catch ( error => { console . log ( error ) }) this . rooms = this . rooms . filter ( room => room . number !== Number . parseInt ( this . roomNumber )) this . dialog = false } }, computed : { filteredRooms () { if ( this . filter ) { return this . rooms . filter ( room => ! this . busyRooms . includes ( room . number )) } return this . rooms } }, created () { this . axios . get ( this . $hostname + 'hotel/rooms/' , { headers : { Authorization : 'Token ' + localStorage . getItem ( 'auth_token' ) } }) . then ( response => { this . rooms = response . data }) . catch ( error => { console . log ( error ) }) this . axios . get ( this . $hostname + 'hotel/guests/' , { headers : { Authorization : 'Token ' + localStorage . getItem ( 'auth_token' ) } }) . then ( response => { this . busyRooms = response . data . map ( guest => guest . room ) console . log ( this . busyRooms ) }) . catch ( error => { console . log ( error ) }) } } </ script > < style scoped > </ style > - Registration.vue < template > < v-layout column justify-center align-center > < v-form v-model = \"valid\" > < v-text-field v-model = \"username\" label = \"Username\" :rules = \"[v => !!v || 'Username is required']\" required ></ v-text-field > < v-text-field v-model = \"password\" label = \"Password\" type = \"Password\" :rules = \"[v => !!v || 'Password is required']\" required ></ v-text-field > < v-text-field v-model = \"email\" label = \"Email\" type = \"email\" :rules = \"emailRules\" required ></ v-text-field > < v-btn color = \"blue\" @ click = \"submit\" :disabled = \"!valid\" > Login </ v-btn > </ v-form > </ v-layout > </ template > < script > export default { name : 'Registration' , data : () => ({ username : '' , password : '' , email : '' , emailRules : [ v => /^ \\ w + ([. - ] ? \\ w + ) * @\\ w + ([. - ] ? \\ w + ) * ( \\ . \\ w { 2 , 3 }) + $ / . test ( v ) || 'E-mail must be valid' ] }), methods : { async submit () { const body = { valid : false , username : this . username , password : this . password , email : this . email } const response = await this . axios . post ( this . $hostname + 'auth/users/' , body ) if ( response . status === 201 ) { this . $router . push ({ name : 'Login' }) } else { alert ( 'Something went wrong' ) } } } } </ script > < style scoped > </ style > Login.vue < template > < v-layout column justify-center align-center > < v-form > < v-text-field v-model = \"username\" label = \"Username\" required ></ v-text-field > < v-text-field v-model = \"password\" label = \"Password\" type = \"Password\" required ></ v-text-field > < v-btn color = \"success\" @ click = \"submit\" > Login </ v-btn > </ v-form > </ v-layout > </ template > < script > export default { name : 'Login' , data : () => ({ username : '' , password : '' }), methods : { async submit () { const body = { username : this . username , password : this . password } const response = await this . axios . post ( this . $hostname + 'auth/token/login/' , body ) if ( response . status === 200 ) { localStorage . setItem ( 'auth_token' , response . data . auth_token ) this . $router . push ({ name : 'Home' }) } else { if ( response . status === 400 ) { alert ( 'Wrong username or password' ) } else { alert ( 'Unknown error' ) } } } } } </ script > < style scoped > </ style >","title":"Views"},{"location":"pr3/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 3.1 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b Django \u0437\u0430\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. models.py from django.db import models class Transport_owner ( models . Model ): id_owner = models . IntegerField ( primary_key = True ) last_name = models . CharField ( max_length = 30 , null = False ) first_name = models . CharField ( max_length = 30 , null = False ) date_birthday = models . DateField () class Transport ( models . Model ): id_car = models . IntegerField ( primary_key = True ) gov_number = models . CharField ( max_length = 15 , null = False ) marka = models . CharField ( max_length = 20 , null = False ) model_car = models . CharField ( max_length = 20 , null = False ) color = models . CharField ( max_length = 30 , null = True ) class Ownership ( models . Model ): id_owner_car = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( Transport_owner , on_delete = models . CASCADE ) id_car = models . ForeignKey ( Transport , on_delete = models . CASCADE ) date_start = models . DateField () sate_end = models . DateField ( null = True ) class Driver_doc ( models . Model ): id_doc = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( Transport_owner , on_delete = models . CASCADE , related_name = \"docs\" ) number_doc = models . CharField ( max_length = 10 , null = False ) type_doc = models . CharField ( max_length = 10 , null = False ) date_start_doc = models . DateField () \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 Transport_owner ( 1 , 'Alekseev' , 'Paul' , '2002-09-27' ) . save () Transport_owner ( 2 , 'Knyezeva' , 'Alisa' , '2002-06-07' ) . save () Transport_owner ( 3 , 'Alekseev' , 'Aleksey' , '1972-12-08' ) . save () Transport_owner ( 4 , 'Alekseeva' , 'Ekaterina' , '1980-01-14' ) . save () Transport_owner ( 5 , 'Svyatko' , 'Paul' , '2002-07-08' ) . save () Transport_owner ( 6 , 'Kirichenko' , 'Vladislav' , '2003-11-18' ) . save () for i in Transport_owner . objects . all (): print ( i ) Transport_owner object ( 1 ) Transport_owner object ( 2 ) Transport_owner object ( 3 ) Transport_owner object ( 4 ) Transport_owner object ( 5 ) Transport_owner object ( 6 ) \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Transport ( 0 , 'A001' , 'MERSEDES-BENZ' , 'GLE' , 'BLACK' ) . save () Transport ( 1 , 'B002' , 'MERSEDES-BENZ' , 'GLS' , 'BLACK' ) . save () Transport ( 2 , 'C003' , 'MERSEDES-BENZ' , 'Model2' , 'BLACK' ) . save () Transport ( 3 , 'D004' , 'MERSEDES-BENZ' , 'Model3' , 'BLACK' ) . save () Transport ( 4 , 'E005' , 'PORSHE' , 'PANAMERA' , 'GREY' ) . save () Transport ( 5 , 'F006' , 'TAYOTA' , 'LAND CRUSER PRADA' , 'BLACK' ) . save () Transport ( 6 , 'G007' , 'LEXSUS' , 'LX60' , 'BLACK' ) . save () \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 Driver_doc ( '1' , '1' , '001' , 'B' , '2020-08-07' ) . save () Driver_doc ( '2' , '2' , '002' , 'B' , '2021-09-20' ) . save () Driver_doc ( '3' , '3' , '003' , 'B' , '1980-09-21' ) . save () Driver_doc ( '4' , '4' , '004' , 'B' , '1999-10-01' ) . save () Driver_doc ( '5' , '5' , '005' , 'B' , '2018-08-10' ) . save () Driver_doc ( '6' , '6' , '006' , 'B' , '2017-10-11' ) . save () \u041f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 Ownership ( '1' , '1' , '1' , '2000-01-01' , '2200-01-01' ) . save () Ownership ( '2' , '2' , '2' , '2000-01-01' , '2200-01-01' ) . save () Ownership ( '3' , '3' , '3' , '2000-01-01' , '2200-01-01' ) . save () Ownership ( '4' , '4' , '4' , '2000-01-01' , '2200-01-01' ) . save () Ownership ( '5' , '5' , '5' , '2000-01-01' , '2200-01-01' ) . save () Ownership ( '6' , '6' , '6' , '2000-01-01' , '2200-01-01' ) . save () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): Transport . objects . filter ( marka = \"MERSEDES-BENZ\" ) < QuerySet [ < Transport : Transport object ( 0 ) > , < Transport : Transport object ( 1 ) > , < Transport : Transport object ( 2 ) > , < Transport : Transport object ( 3 ) > ] > \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): Transport_owner . objects . filter ( first_name = \"Paul\" ) < QuerySet [ < Transport_owner : Transport_owner object ( 1 ) > , < Transport_owner : Transport_owner object ( 5 ) > ] > \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): needed_id = Transport_owner . objects . all ()[ 2 ] . id_owner Driver_doc . objects . get ( id_owner = needed_id ) < Driver_doc : Driver_doc object ( 3 ) > \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): for i in range ( len ( Transport . objects . filter ( color = \"BLACK\" ))): ... print ( Transport . objects . filter ( color = \"BLACK\" )[ i ]) ... Transport object ( 3 ) Transport object ( 4 ) Transport object ( 6 ) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): Ownership . objects . filter ( date_start__gte = \"1936-01-01\" ) < QuerySet [ < Ownership : Ownership object ( 1 ) > , < Ownership : Ownership object ( 2 ) > , < Ownership : Ownership object ( 3 ) > , < Ownership : Ownership object ( 4 ) > , < Ownership : Ownership object ( 5 ) > , < Ownership : Ownership object ( 6 ) > ] > \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: Driver_doc . objects . aggregate ( date_start_doc = Min ( \"date_start_doc\" )) { 'date_start_doc' : datetime . date ( 1933 , 5 , 1 )} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: Ownership . objects . aggregate ( date_start = Max ( \"date_start\" )) { 'date_start' : datetime . date ( 1936 , 9 , 16 )} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: Ownership . objects . values ( \"id_owner\" ) . annotate ( Count ( \"id_car\" )) < QuerySet [{ 'id_owner' : 1 , 'id_car__count' : 1 }, { 'id_owner' : 2 , 'id_car__count' : 1 }, { 'id_owner' : 3 , 'id_car__count' : 1 }, { 'id_owner' : 4 , 'id_car__count' : 1 }, { 'id_owner' : 5 , 'id_car__count' : 1 }, { 'id_owner' : 6 , 'id_car__count' : 1 }] > \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: Transport . objects . values ( \"marka\" ) . annotate ( Count ( \"id_car\" )) < QuerySet [{ 'marka' : 'LEXSUS' , 'id_car__count' : 1 }, { 'marka' : 'MERSEDES-BENZ' , 'id_car__count' : 4 }, { 'marka' : 'PORSHE' , 'id_car__count' : 1 }, { 'marka' : 'TAYOTA' , 'id_car__count' : 1 }] > \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: sort_by_date = Driver_doc . objects . all () . order_by ( \"date_start_doc\" ) for i in sort_by_date : ... needed_id = i . id_owner . id_owner ... print ( Ownership . objects . filter ( id_owner__id_owner = needed_id ) ) < QuerySet [ < Ownership : Ownership object ( 4 ) > ] > < QuerySet [ < Ownership : Ownership object ( 1 ) > ] > < QuerySet [ < Ownership : Ownership object ( 2 ) > ] > < QuerySet [ < Ownership : Ownership object ( 3 ) > ] > < QuerySet [ < Ownership : Ownership object ( 5 ) > ] > < QuerySet [ < Ownership : Ownership object ( 6 ) > ] >","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1"},{"location":"pr3/#31","text":"Django \u0437\u0430\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 3.1 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"pr3/#311","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. models.py from django.db import models class Transport_owner ( models . Model ): id_owner = models . IntegerField ( primary_key = True ) last_name = models . CharField ( max_length = 30 , null = False ) first_name = models . CharField ( max_length = 30 , null = False ) date_birthday = models . DateField () class Transport ( models . Model ): id_car = models . IntegerField ( primary_key = True ) gov_number = models . CharField ( max_length = 15 , null = False ) marka = models . CharField ( max_length = 20 , null = False ) model_car = models . CharField ( max_length = 20 , null = False ) color = models . CharField ( max_length = 30 , null = True ) class Ownership ( models . Model ): id_owner_car = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( Transport_owner , on_delete = models . CASCADE ) id_car = models . ForeignKey ( Transport , on_delete = models . CASCADE ) date_start = models . DateField () sate_end = models . DateField ( null = True ) class Driver_doc ( models . Model ): id_doc = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( Transport_owner , on_delete = models . CASCADE , related_name = \"docs\" ) number_doc = models . CharField ( max_length = 10 , null = False ) type_doc = models . CharField ( max_length = 10 , null = False ) date_start_doc = models . DateField () \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 Transport_owner ( 1 , 'Alekseev' , 'Paul' , '2002-09-27' ) . save () Transport_owner ( 2 , 'Knyezeva' , 'Alisa' , '2002-06-07' ) . save () Transport_owner ( 3 , 'Alekseev' , 'Aleksey' , '1972-12-08' ) . save () Transport_owner ( 4 , 'Alekseeva' , 'Ekaterina' , '1980-01-14' ) . save () Transport_owner ( 5 , 'Svyatko' , 'Paul' , '2002-07-08' ) . save () Transport_owner ( 6 , 'Kirichenko' , 'Vladislav' , '2003-11-18' ) . save () for i in Transport_owner . objects . all (): print ( i ) Transport_owner object ( 1 ) Transport_owner object ( 2 ) Transport_owner object ( 3 ) Transport_owner object ( 4 ) Transport_owner object ( 5 ) Transport_owner object ( 6 ) \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Transport ( 0 , 'A001' , 'MERSEDES-BENZ' , 'GLE' , 'BLACK' ) . save () Transport ( 1 , 'B002' , 'MERSEDES-BENZ' , 'GLS' , 'BLACK' ) . save () Transport ( 2 , 'C003' , 'MERSEDES-BENZ' , 'Model2' , 'BLACK' ) . save () Transport ( 3 , 'D004' , 'MERSEDES-BENZ' , 'Model3' , 'BLACK' ) . save () Transport ( 4 , 'E005' , 'PORSHE' , 'PANAMERA' , 'GREY' ) . save () Transport ( 5 , 'F006' , 'TAYOTA' , 'LAND CRUSER PRADA' , 'BLACK' ) . save () Transport ( 6 , 'G007' , 'LEXSUS' , 'LX60' , 'BLACK' ) . save () \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 Driver_doc ( '1' , '1' , '001' , 'B' , '2020-08-07' ) . save () Driver_doc ( '2' , '2' , '002' , 'B' , '2021-09-20' ) . save () Driver_doc ( '3' , '3' , '003' , 'B' , '1980-09-21' ) . save () Driver_doc ( '4' , '4' , '004' , 'B' , '1999-10-01' ) . save () Driver_doc ( '5' , '5' , '005' , 'B' , '2018-08-10' ) . save () Driver_doc ( '6' , '6' , '006' , 'B' , '2017-10-11' ) . save () \u041f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 Ownership ( '1' , '1' , '1' , '2000-01-01' , '2200-01-01' ) . save () Ownership ( '2' , '2' , '2' , '2000-01-01' , '2200-01-01' ) . save () Ownership ( '3' , '3' , '3' , '2000-01-01' , '2200-01-01' ) . save () Ownership ( '4' , '4' , '4' , '2000-01-01' , '2200-01-01' ) . save () Ownership ( '5' , '5' , '5' , '2000-01-01' , '2200-01-01' ) . save () Ownership ( '6' , '6' , '6' , '2000-01-01' , '2200-01-01' ) . save ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"pr3/#312","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): Transport . objects . filter ( marka = \"MERSEDES-BENZ\" ) < QuerySet [ < Transport : Transport object ( 0 ) > , < Transport : Transport object ( 1 ) > , < Transport : Transport object ( 2 ) > , < Transport : Transport object ( 3 ) > ] > \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): Transport_owner . objects . filter ( first_name = \"Paul\" ) < QuerySet [ < Transport_owner : Transport_owner object ( 1 ) > , < Transport_owner : Transport_owner object ( 5 ) > ] > \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): needed_id = Transport_owner . objects . all ()[ 2 ] . id_owner Driver_doc . objects . get ( id_owner = needed_id ) < Driver_doc : Driver_doc object ( 3 ) > \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): for i in range ( len ( Transport . objects . filter ( color = \"BLACK\" ))): ... print ( Transport . objects . filter ( color = \"BLACK\" )[ i ]) ... Transport object ( 3 ) Transport object ( 4 ) Transport object ( 6 ) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): Ownership . objects . filter ( date_start__gte = \"1936-01-01\" ) < QuerySet [ < Ownership : Ownership object ( 1 ) > , < Ownership : Ownership object ( 2 ) > , < Ownership : Ownership object ( 3 ) > , < Ownership : Ownership object ( 4 ) > , < Ownership : Ownership object ( 5 ) > , < Ownership : Ownership object ( 6 ) > ] >","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2"},{"location":"pr3/#313","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: Driver_doc . objects . aggregate ( date_start_doc = Min ( \"date_start_doc\" )) { 'date_start_doc' : datetime . date ( 1933 , 5 , 1 )} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: Ownership . objects . aggregate ( date_start = Max ( \"date_start\" )) { 'date_start' : datetime . date ( 1936 , 9 , 16 )} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: Ownership . objects . values ( \"id_owner\" ) . annotate ( Count ( \"id_car\" )) < QuerySet [{ 'id_owner' : 1 , 'id_car__count' : 1 }, { 'id_owner' : 2 , 'id_car__count' : 1 }, { 'id_owner' : 3 , 'id_car__count' : 1 }, { 'id_owner' : 4 , 'id_car__count' : 1 }, { 'id_owner' : 5 , 'id_car__count' : 1 }, { 'id_owner' : 6 , 'id_car__count' : 1 }] > \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: Transport . objects . values ( \"marka\" ) . annotate ( Count ( \"id_car\" )) < QuerySet [{ 'marka' : 'LEXSUS' , 'id_car__count' : 1 }, { 'marka' : 'MERSEDES-BENZ' , 'id_car__count' : 4 }, { 'marka' : 'PORSHE' , 'id_car__count' : 1 }, { 'marka' : 'TAYOTA' , 'id_car__count' : 1 }] > \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: sort_by_date = Driver_doc . objects . all () . order_by ( \"date_start_doc\" ) for i in sort_by_date : ... needed_id = i . id_owner . id_owner ... print ( Ownership . objects . filter ( id_owner__id_owner = needed_id ) ) < QuerySet [ < Ownership : Ownership object ( 4 ) > ] > < QuerySet [ < Ownership : Ownership object ( 1 ) > ] > < QuerySet [ < Ownership : Ownership object ( 2 ) > ] > < QuerySet [ < Ownership : Ownership object ( 3 ) > ] > < QuerySet [ < Ownership : Ownership object ( 5 ) > ] > < QuerySet [ < Ownership : Ownership object ( 6 ) > ] >","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3"}]}