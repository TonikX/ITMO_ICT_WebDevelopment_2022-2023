{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023 \u0428\u0438\u043a\u0430\u043b\u043e\u0432\u0430 \u0421\u043e\u0444\u044c\u044f \u041a33421","title":"\u041f\u0440\u0435\u0432\u044c\u044e"},{"location":"#web-2022-2023","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023"},{"location":"#33421","text":"","title":"\u0428\u0438\u043a\u0430\u043b\u043e\u0432\u0430 \u0421\u043e\u0444\u044c\u044f \u041a33421"},{"location":"lr2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 (6 \u0432\u0430\u0440\u0438\u0430\u043d\u0442) \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0422\u0430\u0431\u043b\u043e \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0422\u0430\u0431\u043b\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a: \u0424\u0418\u041e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043e\u043f\u044b\u0442 \u0438 \u043a\u043b\u0430\u0441\u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438. models.py from django.db import models from datetime import datetime from django.contrib.auth.models import AbstractUser from django.core.validators import MinValueValidator, MaxValueValidator # Create your models here. class UserRacer(AbstractUser): first_name = models.CharField(\"First name\", max_length=30) last_name = models.CharField(\"Last name\", max_length=30) patronymic = models.CharField(\"Patronymic\", null=True, max_length=30) team = models.CharField(\"Team\", null=True, max_length=30) member_descr = models.TextField(\"Team member description\", null=True) car_descr = models.TextField(\"Car description\", null=True) experience_years = models.IntegerField(\"Experience in years\", null=True) CLASSES = [ ('C', 'Non-pro'), ('B', 'Experienced'), ('A', 'Professional'), ('L', 'Another')] user_class = models.CharField(\"User's class\", max_length=30, choices=CLASSES, default='L') username = models.CharField(\"Username\", primary_key=True, max_length=50) REQUIRED_FIELDS = ['first_name', 'last_name'] def __str__(self): return f\"{self.last_name} {self.first_name}\" class Race(models.Model): num_race = models.AutoField(\"Race number\", primary_key=True) name_race = models.CharField(\"Race name\", max_length=50) date_race = models.DateTimeField(\"Race date\", unique=True) place_race = models.CharField(\"Race place\", max_length=50) first_place = models.ForeignKey(\"UserRacer\", on_delete=models.CASCADE, null=True, blank=True) second_place = models.ForeignKey(\"UserRacer\", on_delete=models.CASCADE, null=True, blank=True, related_name='sec_place') third_place = models.ForeignKey(\"UserRacer\", on_delete=models.CASCADE, null=True, blank=True, related_name='th_pace') def __str__(self): return f\"Race: {self.num_race}, {self.name_race}\" class Registration(models.Model): num_reg = models.AutoField(\"Registration number\", primary_key=True) num_race_reg = models.ForeignKey(Race, on_delete=models.CASCADE) num_user_reg = models.ForeignKey(UserRacer, on_delete=models.CASCADE) def __str__(self): return (f\"{self.num_reg}, user: {self.num_user_reg}\") class Comment(models.Model): id_review = models.AutoField(primary_key=True) num_race = models.ForeignKey(Race, on_delete=models.CASCADE) time_race = models.DateTimeField(\"Race date and time\") comment_time = models.DateTimeField(default=datetime.now(), blank=True) COMMENT_TYPES = [('RACE_Q', 'Question about race'), ('COLLAB_Q', 'Question about collaboration'), ('OTHER', 'Other')] rate = models.IntegerField(\"Rating\", default=10, validators=[MaxValueValidator(10), MinValueValidator(1)], null=True, blank=True) username = models.ForeignKey(UserRacer, on_delete=models.CASCADE) comment_type = models.CharField(\"Comment type\", max_length=30, choices=COMMENT_TYPES) text = models.TextField(\"Comment\") def save(self, *args, **kwargs): self.time_race = self.num_race.date_race super(Comment, self).save(*args, **kwargs) views.py from django.http import Http404 from django.shortcuts import render, redirect from django.urls import reverse from django.views.generic import ListView, UpdateView, CreateView, DeleteView from django.contrib.auth import authenticate, login, logout from django.contrib.auth.decorators import login_required from django.contrib.auth.mixins import LoginRequiredMixin from django.db import IntegrityError from .forms import MakeComment from .models import * def home_page(request): return render(request, 'home.html') def register(request): if request.method == \"POST\": username = request.POST[\"username\"] password = request.POST[\"password\"] email = request.POST[\"email\"] first_name = request.POST.get(\"first_name\", 'NaN') team = request.POST.get(\"team\", 'NaN') patronymic = request.POST.get(\"patronymic\", 'NaN') experience_years = request.POST.get(\"experience_years\", 'NaN') last_name = request.POST.get(\"last_name\", 'NaN') confirmation = request.POST[\"confirmation\"] if password != confirmation: return render(request, \"reg_django.html\", { \"message\": \"passwords do not match\" }) try: if experience_years=='': experience_years=0 racer = UserRacer.objects.create_user(username, email, password, patronymic=patronymic, team=team, experience_years=experience_years) racer.first_name = first_name racer.last_name = last_name racer.save() except IntegrityError: return render(request, \"reg_django.html\", { \"message\": \"username is taken\" }) login(request, racer) return redirect(reverse(\"races\")) else: return render(request, \"reg_django.html\") def reg_list_view(request): context = { 'reg_races': Registration.objects.filter(num_user_reg=request.user) } print(request.user) print(context) return render(request, 'reg_list.html', context) def log_in(request): if request.method == \"POST\": username = request.POST['username'] password = request.POST['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect(reverse('races')) else: error_text = 'invalid credentials' return render(request, 'login.html', locals()) class RegisterUser(CreateView): model = UserRacer fields = ['username', 'first_name', 'last_name', 'fathername', 'team_name', 'user_descr', 'car_descr', 'experience', 'type_user'] success_url = '/user_list/' template_name = \"user_reg.html\" class RegList(ListView): model = Registration template_name = 'reg_list.html' class UserList(ListView): model = UserRacer template_name = 'user_list.html' class RaceList(ListView): model = Race template_name = 'race_list.html' def get_race(request, id_race: int): try: race = Race.objects.get(pk=id_race) except Race.DoesNotExist: raise Http404(\"Race does not exist.\") return render(request, 'race.html', {'race': race}) class RegRaceList(ListView): model = Registration template_name = 'reg_list.html' class RegRaceCreate(CreateView): model = Registration template_name = 'reg_form.html' fields = ['num_race_reg', 'num_user_reg'] success_url = '/reg_list/' class RegRaceDelete(DeleteView): model = Registration template_name = 'reg_delete.html' success_url = '/reg_list/' class RegRaceUpdate(UpdateView): model = Registration fields = ['num_race_reg', 'num_user_reg'] template_name = 'reg_update.html' success_url = '/reg_list/' def comment(request): data = {} form = MakeComment(request.POST or None) if form.is_valid(): form.save() data['form'] = form return render(request, 'comment.html', data) def all_comments(request): list_comments = {\"object_list\": Comment.objects.all()} return render(request, 'comments_list.html', list_comments) race_winners_app/urls.py from django.urls import path from .views import * from django.contrib.auth import views as auth_views urlpatterns = [ path('home/', home_page, name='home'), path('registration/', register, name='reg'), path('user_list/', UserList.as_view()), path('race/list/', RaceList.as_view(), name='races'), path('race/<int:id_race>', get_race), path('reg_list/', RegList.as_view()), path('reg_race/', login_required(RegRaceCreate.as_view()), name='reg-race'), path('reg_race/<int:pk>/update/', RegRaceUpdate.as_view()), path('reg_race/<int:pk>/delete/', RegRaceDelete.as_view()), path('comments/create/', comment, name='comment-create'), path('comments/list/', all_comments), path('login/', log_in, name='login'), path('logout/', auth_views.LogoutView.as_view(template_name='logout.html'), name='logout') ]","title":"\u041b\u0430\u0431\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#no2-6","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 (6 \u0432\u0430\u0440\u0438\u0430\u043d\u0442)"},{"location":"lr2/#_1","text":"\u0422\u0430\u0431\u043b\u043e \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0422\u0430\u0431\u043b\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a: \u0424\u0418\u041e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043e\u043f\u044b\u0442 \u0438 \u043a\u043b\u0430\u0441\u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lr2/#modelspy","text":"from django.db import models from datetime import datetime from django.contrib.auth.models import AbstractUser from django.core.validators import MinValueValidator, MaxValueValidator # Create your models here. class UserRacer(AbstractUser): first_name = models.CharField(\"First name\", max_length=30) last_name = models.CharField(\"Last name\", max_length=30) patronymic = models.CharField(\"Patronymic\", null=True, max_length=30) team = models.CharField(\"Team\", null=True, max_length=30) member_descr = models.TextField(\"Team member description\", null=True) car_descr = models.TextField(\"Car description\", null=True) experience_years = models.IntegerField(\"Experience in years\", null=True) CLASSES = [ ('C', 'Non-pro'), ('B', 'Experienced'), ('A', 'Professional'), ('L', 'Another')] user_class = models.CharField(\"User's class\", max_length=30, choices=CLASSES, default='L') username = models.CharField(\"Username\", primary_key=True, max_length=50) REQUIRED_FIELDS = ['first_name', 'last_name'] def __str__(self): return f\"{self.last_name} {self.first_name}\" class Race(models.Model): num_race = models.AutoField(\"Race number\", primary_key=True) name_race = models.CharField(\"Race name\", max_length=50) date_race = models.DateTimeField(\"Race date\", unique=True) place_race = models.CharField(\"Race place\", max_length=50) first_place = models.ForeignKey(\"UserRacer\", on_delete=models.CASCADE, null=True, blank=True) second_place = models.ForeignKey(\"UserRacer\", on_delete=models.CASCADE, null=True, blank=True, related_name='sec_place') third_place = models.ForeignKey(\"UserRacer\", on_delete=models.CASCADE, null=True, blank=True, related_name='th_pace') def __str__(self): return f\"Race: {self.num_race}, {self.name_race}\" class Registration(models.Model): num_reg = models.AutoField(\"Registration number\", primary_key=True) num_race_reg = models.ForeignKey(Race, on_delete=models.CASCADE) num_user_reg = models.ForeignKey(UserRacer, on_delete=models.CASCADE) def __str__(self): return (f\"{self.num_reg}, user: {self.num_user_reg}\") class Comment(models.Model): id_review = models.AutoField(primary_key=True) num_race = models.ForeignKey(Race, on_delete=models.CASCADE) time_race = models.DateTimeField(\"Race date and time\") comment_time = models.DateTimeField(default=datetime.now(), blank=True) COMMENT_TYPES = [('RACE_Q', 'Question about race'), ('COLLAB_Q', 'Question about collaboration'), ('OTHER', 'Other')] rate = models.IntegerField(\"Rating\", default=10, validators=[MaxValueValidator(10), MinValueValidator(1)], null=True, blank=True) username = models.ForeignKey(UserRacer, on_delete=models.CASCADE) comment_type = models.CharField(\"Comment type\", max_length=30, choices=COMMENT_TYPES) text = models.TextField(\"Comment\") def save(self, *args, **kwargs): self.time_race = self.num_race.date_race super(Comment, self).save(*args, **kwargs)","title":"models.py"},{"location":"lr2/#viewspy","text":"from django.http import Http404 from django.shortcuts import render, redirect from django.urls import reverse from django.views.generic import ListView, UpdateView, CreateView, DeleteView from django.contrib.auth import authenticate, login, logout from django.contrib.auth.decorators import login_required from django.contrib.auth.mixins import LoginRequiredMixin from django.db import IntegrityError from .forms import MakeComment from .models import * def home_page(request): return render(request, 'home.html') def register(request): if request.method == \"POST\": username = request.POST[\"username\"] password = request.POST[\"password\"] email = request.POST[\"email\"] first_name = request.POST.get(\"first_name\", 'NaN') team = request.POST.get(\"team\", 'NaN') patronymic = request.POST.get(\"patronymic\", 'NaN') experience_years = request.POST.get(\"experience_years\", 'NaN') last_name = request.POST.get(\"last_name\", 'NaN') confirmation = request.POST[\"confirmation\"] if password != confirmation: return render(request, \"reg_django.html\", { \"message\": \"passwords do not match\" }) try: if experience_years=='': experience_years=0 racer = UserRacer.objects.create_user(username, email, password, patronymic=patronymic, team=team, experience_years=experience_years) racer.first_name = first_name racer.last_name = last_name racer.save() except IntegrityError: return render(request, \"reg_django.html\", { \"message\": \"username is taken\" }) login(request, racer) return redirect(reverse(\"races\")) else: return render(request, \"reg_django.html\") def reg_list_view(request): context = { 'reg_races': Registration.objects.filter(num_user_reg=request.user) } print(request.user) print(context) return render(request, 'reg_list.html', context) def log_in(request): if request.method == \"POST\": username = request.POST['username'] password = request.POST['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect(reverse('races')) else: error_text = 'invalid credentials' return render(request, 'login.html', locals()) class RegisterUser(CreateView): model = UserRacer fields = ['username', 'first_name', 'last_name', 'fathername', 'team_name', 'user_descr', 'car_descr', 'experience', 'type_user'] success_url = '/user_list/' template_name = \"user_reg.html\" class RegList(ListView): model = Registration template_name = 'reg_list.html' class UserList(ListView): model = UserRacer template_name = 'user_list.html' class RaceList(ListView): model = Race template_name = 'race_list.html' def get_race(request, id_race: int): try: race = Race.objects.get(pk=id_race) except Race.DoesNotExist: raise Http404(\"Race does not exist.\") return render(request, 'race.html', {'race': race}) class RegRaceList(ListView): model = Registration template_name = 'reg_list.html' class RegRaceCreate(CreateView): model = Registration template_name = 'reg_form.html' fields = ['num_race_reg', 'num_user_reg'] success_url = '/reg_list/' class RegRaceDelete(DeleteView): model = Registration template_name = 'reg_delete.html' success_url = '/reg_list/' class RegRaceUpdate(UpdateView): model = Registration fields = ['num_race_reg', 'num_user_reg'] template_name = 'reg_update.html' success_url = '/reg_list/' def comment(request): data = {} form = MakeComment(request.POST or None) if form.is_valid(): form.save() data['form'] = form return render(request, 'comment.html', data) def all_comments(request): list_comments = {\"object_list\": Comment.objects.all()} return render(request, 'comments_list.html', list_comments)","title":"views.py"},{"location":"lr2/#race_winners_appurlspy","text":"from django.urls import path from .views import * from django.contrib.auth import views as auth_views urlpatterns = [ path('home/', home_page, name='home'), path('registration/', register, name='reg'), path('user_list/', UserList.as_view()), path('race/list/', RaceList.as_view(), name='races'), path('race/<int:id_race>', get_race), path('reg_list/', RegList.as_view()), path('reg_race/', login_required(RegRaceCreate.as_view()), name='reg-race'), path('reg_race/<int:pk>/update/', RegRaceUpdate.as_view()), path('reg_race/<int:pk>/delete/', RegRaceDelete.as_view()), path('comments/create/', comment, name='comment-create'), path('comments/list/', all_comments), path('login/', log_in, name='login'), path('logout/', auth_views.LogoutView.as_view(template_name='logout.html'), name='logout') ]","title":"race_winners_app/urls.py"},{"location":"lr3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430 \u0441\u043e\u0431\u0430\u043a \u0417\u0430\u043f\u0440\u043e\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c: - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 DjangoORM (\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438). - \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438, \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django ORM. - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438). models.py from django.db import models from django.contrib.auth.models import AbstractUser class Organizer(AbstractUser): tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Participant(models.Model): name = models.CharField(max_length=100) breed_types = ( ('h', 'haski'), ('t', 'terrier'), ('b', 'bulldog'), ) breed = models.CharField(max_length=1, choices=breed_types) age = models.IntegerField() family = models.CharField(max_length=1000) owner_data = models.CharField(max_length=1000) club = models.ForeignKey('Club', on_delete=models.CASCADE, null=True, blank=True ) def str(self): return self.name class Show(models.Model): year = models.IntegerField(primary_key=True) show_types = ( ('mono', 'mono-breed'), ('poly', 'poly-breed') ) type = models.CharField(max_length=4, choices=show_types) participants = models.ManyToManyField('Participant', # through='Participation', related_name='show_participants' ) def str(self): return str(self.year) class Participation(models.Model): participant = models.ForeignKey('Participant', on_delete=models.CASCADE) medal_types = ( ('g', 'gold'), ('s', 'silver'), ('b', 'bronze'), ) medal = models.CharField(max_length=1, choices=medal_types, null=True, blank=True) rings = models.ManyToManyField('Ring', null=True, blank=True) vaccinated = models.DateField() dismissed = models.BooleanField() final_grade = models.IntegerField(blank=True, null=True) def str(self): return f'{self.participant}' class Expert(models.Model): name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) club = models.CharField(max_length=100) def str(self): return f'{self.name} {self.last_name}' class Club(models.Model): name = models.CharField(max_length=100) members = models.ManyToManyField('Participant', related_name='club_members' ) def str(self): return self.name class Ring(models.Model): show = models.ForeignKey('Show', on_delete=models.CASCADE) experts = models.ManyToManyField('Expert', # through='Grade' related_name='ring_experts', null=True, blank=True ) breed_types = ( ('h', 'haski'), ('t', 'terrier'), ('b', 'bulldog'), ) breed = models.CharField(max_length=1, choices=breed_types) def str(self): return f'{self.show} {self.breed}' views.py from rest_framework import generics from rest_framework.views import APIView, Response from rest_framework.permissions import IsAuthenticated from .serializers import * from .models import * from django.db.models.aggregates import Count, Sum class ExpertAPIView(generics.RetrieveUpdateDestroyAPIView): serializer_class = ExpertSerializer queryset = Expert.objects.all() class ParticipationAPIList(generics.ListCreateAPIView): serializer_class = ParticipationSerializer queryset = Participation.objects.all() # permission_classes = [IsAuthenticated] class ParticipantAPIList(generics.ListCreateAPIView): serializer_class = ParticipantSerializer queryset = Participant.objects.all() class RingParticipationRetrieveAPIView(generics.RetrieveAPIView): serializer_class = RingParticipationSerializer queryset = Participation.objects.all() class ClubBreedsRetrieveAPIView(generics.RetrieveAPIView): serializer_class = ClubBreedsSerializer queryset = Club.objects.all() class DismissedCountAPIView(generics.RetrieveAPIView): serializer_class = DismissedCountSerializer queryset = Participation.objects.all() # leave name class BreedExpertsAPIView(generics.ListAPIView): serializer_class = BreedExpertsSerializer queryset = Ring.objects.all() class BreedCountAPIView(APIView): def get(self, request): # breed_count = Participant.objects.filter(breed=breed).count() breed_count = Participant.objects \\ .values('breed').annotate(count=Count('breed')) content = {'breed_count': breed_count} return Response(content) class BreedCountAPIView(APIView): def get(self, request): # breed_count = Participant.objects.filter(breed=breed).count() breed_count = Ring.objects \\ .values('breed').annotate(count=Count('breed')) content = {'breed_count': breed_count} return Response(content) class ReportAPIView(APIView): def get(self, request, year): participants = Show.objects.get(year=year).participants participant_count = participants.count() breed_count = participants.values('breed').annotate(count=Count('breed')) best_grades = Participation.objects.filter(rings__show__year=year)\\ .values('participant')\\ .annotate(ex_sum=Sum('final_grade'))\\ .order_by() medals = Participation.objects.values('rings__breed')\\ .annotate(medals_count=Count('medal')) content = {'participant_count': participant_count, 'breeds': breed_count, 'best_grades': best_grades, 'medals': medals} return Response(content) serializers.py from rest_framework import serializers from .models import * class ExpertSerializer(serializers.ModelSerializer): class Meta: model = Expert fields = \"__all__\" class ParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = \"__all__\" class ParticipantSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = \"__all__\" class RingParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = [\"rings\"] class ParticipantBreedsSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = [\"breed\"] class ClubBreedsSerializer(serializers.ModelSerializer): members = ParticipantBreedsSerializer(many=True) class Meta: model = Club fields = [\"name\", \"members\"] class RingSerializer(serializers.ModelSerializer): class Meta: model = Ring fields = \"__all__\" class DismissedCountSerializer(serializers.ModelSerializer): dismissed_count = serializers.SerializerMethodField() class Meta: model = Participation fields = [\"dismissed_count\"] def get_dismissed_count(self, obj): return Participation.objects.filter(dismissed=True).count() class BreedExpertsSerializer(serializers.ModelSerializer): experts = ExpertSerializer(many=True) class Meta: model = Ring fields = [\"breed\", \"experts\"] urls.py from django.urls import path from .views import * app_name = \"dogsapp\" urlpatterns = [ path('experts/<int:pk>', ExpertAPIView.as_view()), path('participation/', ParticipationAPIList.as_view()), path('participants/', ParticipantAPIList.as_view()), path('participant_ring/<int:pk>', RingParticipationRetrieveAPIView.as_view()), path('club_breeds/<int:pk>', ClubBreedsRetrieveAPIView.as_view()), path('dismissed_count/<int:pk>', DismissedCountAPIView.as_view()), path('breed_experts/', BreedExpertsAPIView.as_view()), path('breeds_count/', BreedCountAPIView.as_view()), path('report/<int:year>', ReportAPIView.as_view()), ]","title":"\u041b\u0430\u0431\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lr3/#no3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lr3/#_1","text":"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430 \u0441\u043e\u0431\u0430\u043a \u0417\u0430\u043f\u0440\u043e\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c: - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 DjangoORM (\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438). - \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438, \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django ORM. - \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438).","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lr3/#modelspy","text":"from django.db import models from django.contrib.auth.models import AbstractUser class Organizer(AbstractUser): tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Participant(models.Model): name = models.CharField(max_length=100) breed_types = ( ('h', 'haski'), ('t', 'terrier'), ('b', 'bulldog'), ) breed = models.CharField(max_length=1, choices=breed_types) age = models.IntegerField() family = models.CharField(max_length=1000) owner_data = models.CharField(max_length=1000) club = models.ForeignKey('Club', on_delete=models.CASCADE, null=True, blank=True ) def str(self): return self.name class Show(models.Model): year = models.IntegerField(primary_key=True) show_types = ( ('mono', 'mono-breed'), ('poly', 'poly-breed') ) type = models.CharField(max_length=4, choices=show_types) participants = models.ManyToManyField('Participant', # through='Participation', related_name='show_participants' ) def str(self): return str(self.year) class Participation(models.Model): participant = models.ForeignKey('Participant', on_delete=models.CASCADE) medal_types = ( ('g', 'gold'), ('s', 'silver'), ('b', 'bronze'), ) medal = models.CharField(max_length=1, choices=medal_types, null=True, blank=True) rings = models.ManyToManyField('Ring', null=True, blank=True) vaccinated = models.DateField() dismissed = models.BooleanField() final_grade = models.IntegerField(blank=True, null=True) def str(self): return f'{self.participant}' class Expert(models.Model): name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) club = models.CharField(max_length=100) def str(self): return f'{self.name} {self.last_name}' class Club(models.Model): name = models.CharField(max_length=100) members = models.ManyToManyField('Participant', related_name='club_members' ) def str(self): return self.name class Ring(models.Model): show = models.ForeignKey('Show', on_delete=models.CASCADE) experts = models.ManyToManyField('Expert', # through='Grade' related_name='ring_experts', null=True, blank=True ) breed_types = ( ('h', 'haski'), ('t', 'terrier'), ('b', 'bulldog'), ) breed = models.CharField(max_length=1, choices=breed_types) def str(self): return f'{self.show} {self.breed}'","title":"models.py"},{"location":"lr3/#viewspy","text":"from rest_framework import generics from rest_framework.views import APIView, Response from rest_framework.permissions import IsAuthenticated from .serializers import * from .models import * from django.db.models.aggregates import Count, Sum class ExpertAPIView(generics.RetrieveUpdateDestroyAPIView): serializer_class = ExpertSerializer queryset = Expert.objects.all() class ParticipationAPIList(generics.ListCreateAPIView): serializer_class = ParticipationSerializer queryset = Participation.objects.all() # permission_classes = [IsAuthenticated] class ParticipantAPIList(generics.ListCreateAPIView): serializer_class = ParticipantSerializer queryset = Participant.objects.all() class RingParticipationRetrieveAPIView(generics.RetrieveAPIView): serializer_class = RingParticipationSerializer queryset = Participation.objects.all() class ClubBreedsRetrieveAPIView(generics.RetrieveAPIView): serializer_class = ClubBreedsSerializer queryset = Club.objects.all() class DismissedCountAPIView(generics.RetrieveAPIView): serializer_class = DismissedCountSerializer queryset = Participation.objects.all() # leave name class BreedExpertsAPIView(generics.ListAPIView): serializer_class = BreedExpertsSerializer queryset = Ring.objects.all() class BreedCountAPIView(APIView): def get(self, request): # breed_count = Participant.objects.filter(breed=breed).count() breed_count = Participant.objects \\ .values('breed').annotate(count=Count('breed')) content = {'breed_count': breed_count} return Response(content) class BreedCountAPIView(APIView): def get(self, request): # breed_count = Participant.objects.filter(breed=breed).count() breed_count = Ring.objects \\ .values('breed').annotate(count=Count('breed')) content = {'breed_count': breed_count} return Response(content) class ReportAPIView(APIView): def get(self, request, year): participants = Show.objects.get(year=year).participants participant_count = participants.count() breed_count = participants.values('breed').annotate(count=Count('breed')) best_grades = Participation.objects.filter(rings__show__year=year)\\ .values('participant')\\ .annotate(ex_sum=Sum('final_grade'))\\ .order_by() medals = Participation.objects.values('rings__breed')\\ .annotate(medals_count=Count('medal')) content = {'participant_count': participant_count, 'breeds': breed_count, 'best_grades': best_grades, 'medals': medals} return Response(content)","title":"views.py"},{"location":"lr3/#serializerspy","text":"from rest_framework import serializers from .models import * class ExpertSerializer(serializers.ModelSerializer): class Meta: model = Expert fields = \"__all__\" class ParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = \"__all__\" class ParticipantSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = \"__all__\" class RingParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = [\"rings\"] class ParticipantBreedsSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = [\"breed\"] class ClubBreedsSerializer(serializers.ModelSerializer): members = ParticipantBreedsSerializer(many=True) class Meta: model = Club fields = [\"name\", \"members\"] class RingSerializer(serializers.ModelSerializer): class Meta: model = Ring fields = \"__all__\" class DismissedCountSerializer(serializers.ModelSerializer): dismissed_count = serializers.SerializerMethodField() class Meta: model = Participation fields = [\"dismissed_count\"] def get_dismissed_count(self, obj): return Participation.objects.filter(dismissed=True).count() class BreedExpertsSerializer(serializers.ModelSerializer): experts = ExpertSerializer(many=True) class Meta: model = Ring fields = [\"breed\", \"experts\"]","title":"serializers.py"},{"location":"lr3/#urlspy","text":"from django.urls import path from .views import * app_name = \"dogsapp\" urlpatterns = [ path('experts/<int:pk>', ExpertAPIView.as_view()), path('participation/', ParticipationAPIList.as_view()), path('participants/', ParticipantAPIList.as_view()), path('participant_ring/<int:pk>', RingParticipationRetrieveAPIView.as_view()), path('club_breeds/<int:pk>', ClubBreedsRetrieveAPIView.as_view()), path('dismissed_count/<int:pk>', DismissedCountAPIView.as_view()), path('breed_experts/', BreedExpertsAPIView.as_view()), path('breeds_count/', BreedCountAPIView.as_view()), path('report/<int:year>', ReportAPIView.as_view()), ]","title":"urls.py"},{"location":"pr3/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. models.py from django.contrib.auth.models import AbstractUser from django.contrib.auth import get_user_model from django.db import models class Owner(models.Model): id_owner = models.IntegerField(primary_key = True) last_name = models.CharField(max_length = 30, null = False) first_name = models.CharField(max_length = 30, null = False) birth_day = models.DateField(null = True) passport = models.IntegerField(null=True) address = models.CharField(max_length=50, null=True, blank=True) nationality = models.CharField(max_length=20, null=True, blank=True) def __str__(self): return f\"ID:{self.id_owner} ({self.first_name} {self.last_name})\" class Certificate(models.Model): #OwnerUser = get_user_model() id_owner = models.ForeignKey(Owner, on_delete = models.CASCADE) cert_number = models.CharField(max_length = 10, null = False) cert_type = models.CharField(max_length = 10, null = False) date_of_issue = models.DateField() def __str__(self): return self.number class Car(models.Model): #OwnerUser = get_user_model() id_car = models.IntegerField(primary_key = True) state_number = models.CharField(max_length = 15, null = False) brand = models.CharField(max_length = 20, null = False) model = models.CharField(max_length = 20, null = False) color = models.CharField(max_length = 30, null = True) owner = models.ManyToManyField(Owner, through='Ownership') def __str__(self): return self.state_number class Ownership(models.Model): id_ownership = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Owner, on_delete = models.CASCADE) id_car = models.ForeignKey(Car, on_delete = models.CASCADE) start_date = models.DateField() end_date = models.DateField(null = True) def __str__(self): return f\"{self.id_owner} | {self.id_car}\" \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u0443\u0436\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432: >>> for i in Owner.objects.all(): ... print(i) ... ID:0 (Sofia Shikalova) ID:1 (Igor Polyakov) ID:2 (Alisher Morgenshtern) ID:3 (Maria Bobrova) ID:4 (Sofia Bykova) ID:5 (Ekaterina Tretyakova) \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0435\u0449\u0451 6 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432: >>> Owner(6, 'Aniston', 'Jennifer').save() >>> Owner(7, 'Pitt', 'Brad').save() >>> Owner(8, 'DiCaprio', 'Leonardo').save() >>> Owner(9, 'Damon', 'Matt').save() >>> Owner(10, 'Bullok', 'Sandra').save() >>> Owner(11, 'Witherspoon', 'Reese').save() >>> >>> for i in Owner.objects.all(): ... print(i) ... ID:0 (Sofia Shikalova) ID:1 (Igor Polyakov) ID:2 (Alisher Morgenshtern) ID:3 (Maria Bobrova) ID:4 (Sofia Bykova) ID:5 (Ekaterina Tretyakova) ID:6 (Jennifer Aniston) ID:7 (Brad Pitt) ID:8 (Leonardo DiCaprio) ID:9 (Matt Damon) ID:10 (Sandra Bullok) ID:11 (Reese Witherspoon) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0443\u0436\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438: >>> for i in Car.objects.all(): ... print(i) ... ID:0 (Alfa Romeo Giulietta H534KH) ID:1 (Chrysler Crossfire O092EE) ID:2 (Jaguar F-Type Roadster B926OK) ID:3 (Bentley Continential GT C106AA) ID:4 (Bugatti Chiron K492OO) ID:5 (Rolls-Royce Phantom M333ME) ID:6 (Lamborghini Huracan T019CX) \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0435\u0449\u0451 5 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: >>> Car(7, 'O925HA', 'Tesla', 'Model S', 'violet').save() >>> Car(8, 'P6883BT', 'Cadillac', 'LYRIQ', 'gray').save() >>> Car(9, 'M305CC', 'Audi', 'Q6', 'white').save() >>> Car(10, 'X656AP', 'Ferrari', '488', 'red').save() >>> Car(11, 'T915TM', 'Maybach', 'Exelero', 'black').save() >>> >>> for i in Car.objects.all(): ... print(i) ... ID:0 (Alfa Romeo Giulietta H534KH) ID:1 (Chrysler Crossfire O092EE) ID:2 (Jaguar F-Type Roadster B926OK) ID:3 (Bentley Continential GT C106AA) ID:4 (Bugatti Chiron K492OO) ID:5 (Rolls-Royce Phantom M333ME) ID:6 (Lamborghini Huracan T019CX) ID:7 (Tesla Model S O925HA) ID:8 (Cadillac LYRIQ P6883BT) ID:9 (Audi Q6 M305CC) ID:10 (Ferrari 488 X656AP) ID:11 (Maybach Exelero T915TM) \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0430\u0432\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432: >>> Certificate(0, '0', 'B', '2020-05-17').save() >>> Certificate(1, '1', 'B', '2015-03-22').save() >>> Certificate(2, '2', 'B', '2019-11-02').save() >>> Certificate(3, '3', 'B', '2021-04-12').save() >>> Certificate(4, '4', 'B', '2021-02-27').save() >>> Certificate(5, '5', 'B', '2020-08-17').save() >>> Certificate(6, '6', 'B', '1992-08-08').save() >>> Certificate(7, '7', 'B', '1990-06-14').save() >>> Certificate(8, '8', 'B', '1989-12-15').save() >>> Certificate(9, '9', 'B', '1989-07-07').save() >>> Certificate(10, '10', 'B', '1994-05-25').save() >>> Certificate(11, '11', 'B', '1997-09-10').save() >>> >>> from project_first_app.models import * >>> for i in Certificate.objects.all(): ... print(i) ... Owner ID:ID:0 (Sofia Shikalova) (0) Owner ID:ID:1 (Igor Polyakov) (1) Owner ID:ID:2 (Alisher Morgenshtern) (2) Owner ID:ID:3 (Maria Bobrova) (3) Owner ID:ID:4 (Sofia Bykova) (4) Owner ID:ID:5 (Ekaterina Tretyakova) (5) Owner ID:ID:6 (Jennifer Aniston) (6) Owner ID:ID:7 (Brad Pitt) (7) Owner ID:ID:8 (Leonardo DiCaprio) (8) Owner ID:ID:9 (Matt Damon) (9) Owner ID:ID:10 (Sandra Bullok) (10) Owner ID:ID:11 (Reese Witherspoon) (11) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043e \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0438: >>> for i in Ownership.objects.all(): ... print(i) ... Owner:ID:0 (Sofia Shikalova) | Car:ID:0 (Alfa Romeo Giulietta H534KH) Owner:ID:0 (Sofia Shikalova) | Car:ID:1 (Chrysler Crossfire O092EE) Owner:ID:0 (Sofia Shikalova) | Car:ID:2 (Jaguar F-Type Roadster B926OK) Owner:ID:1 (Igor Polyakov) | Car:ID:1 (Chrysler Crossfire O092EE) Owner:ID:1 (Igor Polyakov) | Car:ID:2 (Jaguar F-Type Roadster B926OK) Owner:ID:1 (Igor Polyakov) | Car:ID:3 (Bentley Continential GT C106AA) \u041d\u0430\u0437\u043d\u0430\u0447\u0438\u043c \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438: >>> Ownership(6, 5, 5, '2023-01-13').save() >>> Ownership(7, 6, 6, '2023-01-13').save() >>> Ownership(8, 7, 7, '2023-01-13').save() >>> Ownership(9, 8, 8, '2023-01-13').save() >>> Ownership(10, 9, 9, '2023-01-13').save() >>> Ownership(11, 10, 10, '2023-01-13').save() >>> Ownership(12, 11, 11, '2023-01-13').save() >>> >>> for i in Ownership.objects.all(): ... print(i) ... Owner:ID:0 (Sofia Shikalova) | Car:ID:0 (Alfa Romeo Giulietta H534KH) Owner:ID:0 (Sofia Shikalova) | Car:ID:1 (Chrysler Crossfire O092EE) Owner:ID:0 (Sofia Shikalova) | Car:ID:2 (Jaguar F-Type Roadster B926OK) Owner:ID:1 (Igor Polyakov) | Car:ID:1 (Chrysler Crossfire O092EE) Owner:ID:1 (Igor Polyakov) | Car:ID:2 (Jaguar F-Type Roadster B926OK) Owner:ID:1 (Igor Polyakov) | Car:ID:3 (Bentley Continential GT C106AA) Owner:ID:5 (Ekaterina Tretyakova) | Car:ID:5 (Rolls-Royce Phantom M333ME) Owner:ID:6 (Jennifer Aniston) | Car:ID:6 (Lamborghini Huracan T019CX) Owner:ID:7 (Brad Pitt) | Car:ID:7 (Tesla Model S O925HA) Owner:ID:8 (Leonardo DiCaprio) | Car:ID:8 (Cadillac LYRIQ P6883BT) Owner:ID:9 (Matt Damon) | Car:ID:9 (Audi Q6 M305CC) Owner:ID:10 (Sandra Bullok) | Car:ID:10 (Ferrari 488 X656AP) Owner:ID:11 (Reese Witherspoon) | Car:ID:11 (Maybach Exelero T915TM) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): >>> Car.objects.filter(brand=\"Jaguar\") <QuerySet [<Car: ID:2 (Jaguar F-Type Roadster B926OK)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): >>> Owner.objects.filter(first_name=\"Sofia\") <QuerySet [<Owner: ID:0 (Sofia Shikalova)>, <Owner: ID:4 (Sofia Bykova)>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): >>> target_id = Owner.objects.all()[9].id_owner >>> Certificate.objects.get(id_owner=target_id) <Certificate: Owner ID:ID:9 (Matt Damon) (9)> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e\u0431\u0430\u0432\u0438\u043c 'related_name' \u0432 \u043c\u043e\u0434\u0435\u043b\u044c Ownership \u0434\u043b\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430: class Ownership(models.Model): id_ownership = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Owner, on_delete = models.CASCADE, related_name=\"owner_ownership\") id_car = models.ForeignKey(Car, on_delete = models.CASCADE) start_date = models.DateField() end_date = models.DateField(null = True) def __str__(self): return f\"Owner:{self.id_owner} | Car:{self.id_car}\" >>> Owner.objects.filter(owner_ownership__id_car__color=\"red\") <QuerySet [<Owner: ID:10 (Sandra Bullok)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): >>> Owner.objects.filter(owner_ownership__start_date__gte=\"2023-01-01\") <QuerySet [<Owner: ID:5 (Ekaterina Tretyakova)>, <Owner: ID:6 (Jennifer Aniston)>, <Owner: ID:7 (Brad Pitt)>, <Owner: ID:8 (Leonardo DiCaprio)>, <Owner: ID:9 (Matt Damon)>, <Owner: ID:10 (Sandra Bullok)>, <Owner: ID:11 (Reese Witherspoon)>]> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> from django.db.models import Min >>> Certificate.objects.aggregate(start_date=Min(\"date_of_issue\")) {'start_date': datetime.date(1989, 7, 7)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: from django.db.models import Max >>> Ownership.objects.aggregate(start_date=Max(\"start_date\")) {'start_date': datetime.date(2023, 1, 13)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: >>> from django.db.models import Count >>> Ownership.objects.values(\"id_owner\").annotate(Count(\"id_car\")) <QuerySet [{'id_owner': 0, 'id_car__count': 3}, {'id_owner': 1, 'id_car__count': 3}, {'id_owner': 5, 'id_car__count': 1}, {'id_owner': 6, 'id_car__count': 1}, {'id_owner': 7, 'id_car__count': 1}, {'id_owner': 8, 'id_car__count': 1}, {'id_owner': 9, 'id_car__count': 1}, {'id_owner': 10, 'id_car__count': 1}, {'id_owner': 11, 'id_car__count': 1}]> \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: >>> Car.objects.values(\"brand\").annotate(Count(\"id_car\")) <QuerySet [{'brand': 'Alfa Romeo', 'id_car__count': 1}, {'brand': 'Audi', 'id_car__count': 1}, {'brand': 'Bentley', 'id_car__count': 1}, {'brand': 'Bugatti', 'id_car__count': 1}, {'brand': 'Cadillac', 'id_car__count': 1}, {'brand': 'Chrysler', 'id_car__count': 1}, {'brand': 'Ferrari', 'id_car__count': 1}, {'brand': 'Jaguar', 'id_car__count': 1}, {'brand': 'Lamborghini', 'id_car__count': 1}, {'brand': 'Maybach', 'id_car__count': 1}, {'brand': 'Rolls-Royce', 'id_car__count': 1}, {'brand': 'Tesla', 'id_car__count': 1}]> \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> sort_by_date = Certificate.objects.all().order_by(\"date_of_issue\") >>> for i in sort_by_date: ... target_id = i.id_owner.id_owner ... print(Ownership.objects.filter(id_owner__id_owner=target_id)) ... <QuerySet [<Ownership: Owner:ID:9 (Matt Damon) | Car:ID:9 (Audi Q6 M305CC)>]> <QuerySet [<Ownership: Owner:ID:8 (Leonardo DiCaprio) | Car:ID:8 (Cadillac LYRIQ P6883BT)>]> <QuerySet [<Ownership: Owner:ID:7 (Brad Pitt) | Car:ID:7 (Tesla Model S O925HA)>]> <QuerySet [<Ownership: Owner:ID:6 (Jennifer Aniston) | Car:ID:6 (Lamborghini Huracan T019CX)>]> <QuerySet [<Ownership: Owner:ID:10 (Sandra Bullok) | Car:ID:10 (Ferrari 488 X656AP)>]> <QuerySet [<Ownership: Owner:ID:11 (Reese Witherspoon) | Car:ID:11 (Maybach Exelero T915TM)>]> <QuerySet [<Ownership: Owner:ID:1 (Igor Polyakov) | Car:ID:1 (Chrysler Crossfire O092EE)>, <Ownership: Owner:ID:1 (Igor Polyakov) | Car:ID:2 (Jaguar F-Type Roadster B926OK)>, <Ownership: Owner:ID:1 (Igor Polyakov) | Car:ID:3 (Bentley Continential GT C106AA)>]> <QuerySet []> <QuerySet [<Ownership: Owner:ID:0 (Sofia Shikalova) | Car:ID:0 (Alfa Romeo Giulietta H534KH)>, <Ownership: Owner:ID:0 (Sofia Shikalova) | Car:ID:1 (Chrysler Crossfire O092EE)>, <Ownership: Owner:ID:0 (Sofia Shikalova) | Car:ID:2 (Jaguar F-Type Roadster B926OK)>]> <QuerySet [<Ownership: Owner:ID:5 (Ekaterina Tretyakova) | Car:ID:5 (Rolls-Royce Phantom M333ME)>]>","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1"},{"location":"pr3/#no3","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"pr3/#311","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. models.py from django.contrib.auth.models import AbstractUser from django.contrib.auth import get_user_model from django.db import models class Owner(models.Model): id_owner = models.IntegerField(primary_key = True) last_name = models.CharField(max_length = 30, null = False) first_name = models.CharField(max_length = 30, null = False) birth_day = models.DateField(null = True) passport = models.IntegerField(null=True) address = models.CharField(max_length=50, null=True, blank=True) nationality = models.CharField(max_length=20, null=True, blank=True) def __str__(self): return f\"ID:{self.id_owner} ({self.first_name} {self.last_name})\" class Certificate(models.Model): #OwnerUser = get_user_model() id_owner = models.ForeignKey(Owner, on_delete = models.CASCADE) cert_number = models.CharField(max_length = 10, null = False) cert_type = models.CharField(max_length = 10, null = False) date_of_issue = models.DateField() def __str__(self): return self.number class Car(models.Model): #OwnerUser = get_user_model() id_car = models.IntegerField(primary_key = True) state_number = models.CharField(max_length = 15, null = False) brand = models.CharField(max_length = 20, null = False) model = models.CharField(max_length = 20, null = False) color = models.CharField(max_length = 30, null = True) owner = models.ManyToManyField(Owner, through='Ownership') def __str__(self): return self.state_number class Ownership(models.Model): id_ownership = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Owner, on_delete = models.CASCADE) id_car = models.ForeignKey(Car, on_delete = models.CASCADE) start_date = models.DateField() end_date = models.DateField(null = True) def __str__(self): return f\"{self.id_owner} | {self.id_car}\" \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u0443\u0436\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432: >>> for i in Owner.objects.all(): ... print(i) ... ID:0 (Sofia Shikalova) ID:1 (Igor Polyakov) ID:2 (Alisher Morgenshtern) ID:3 (Maria Bobrova) ID:4 (Sofia Bykova) ID:5 (Ekaterina Tretyakova) \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0435\u0449\u0451 6 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432: >>> Owner(6, 'Aniston', 'Jennifer').save() >>> Owner(7, 'Pitt', 'Brad').save() >>> Owner(8, 'DiCaprio', 'Leonardo').save() >>> Owner(9, 'Damon', 'Matt').save() >>> Owner(10, 'Bullok', 'Sandra').save() >>> Owner(11, 'Witherspoon', 'Reese').save() >>> >>> for i in Owner.objects.all(): ... print(i) ... ID:0 (Sofia Shikalova) ID:1 (Igor Polyakov) ID:2 (Alisher Morgenshtern) ID:3 (Maria Bobrova) ID:4 (Sofia Bykova) ID:5 (Ekaterina Tretyakova) ID:6 (Jennifer Aniston) ID:7 (Brad Pitt) ID:8 (Leonardo DiCaprio) ID:9 (Matt Damon) ID:10 (Sandra Bullok) ID:11 (Reese Witherspoon) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0443\u0436\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438: >>> for i in Car.objects.all(): ... print(i) ... ID:0 (Alfa Romeo Giulietta H534KH) ID:1 (Chrysler Crossfire O092EE) ID:2 (Jaguar F-Type Roadster B926OK) ID:3 (Bentley Continential GT C106AA) ID:4 (Bugatti Chiron K492OO) ID:5 (Rolls-Royce Phantom M333ME) ID:6 (Lamborghini Huracan T019CX) \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0435\u0449\u0451 5 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: >>> Car(7, 'O925HA', 'Tesla', 'Model S', 'violet').save() >>> Car(8, 'P6883BT', 'Cadillac', 'LYRIQ', 'gray').save() >>> Car(9, 'M305CC', 'Audi', 'Q6', 'white').save() >>> Car(10, 'X656AP', 'Ferrari', '488', 'red').save() >>> Car(11, 'T915TM', 'Maybach', 'Exelero', 'black').save() >>> >>> for i in Car.objects.all(): ... print(i) ... ID:0 (Alfa Romeo Giulietta H534KH) ID:1 (Chrysler Crossfire O092EE) ID:2 (Jaguar F-Type Roadster B926OK) ID:3 (Bentley Continential GT C106AA) ID:4 (Bugatti Chiron K492OO) ID:5 (Rolls-Royce Phantom M333ME) ID:6 (Lamborghini Huracan T019CX) ID:7 (Tesla Model S O925HA) ID:8 (Cadillac LYRIQ P6883BT) ID:9 (Audi Q6 M305CC) ID:10 (Ferrari 488 X656AP) ID:11 (Maybach Exelero T915TM) \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0430\u0432\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432: >>> Certificate(0, '0', 'B', '2020-05-17').save() >>> Certificate(1, '1', 'B', '2015-03-22').save() >>> Certificate(2, '2', 'B', '2019-11-02').save() >>> Certificate(3, '3', 'B', '2021-04-12').save() >>> Certificate(4, '4', 'B', '2021-02-27').save() >>> Certificate(5, '5', 'B', '2020-08-17').save() >>> Certificate(6, '6', 'B', '1992-08-08').save() >>> Certificate(7, '7', 'B', '1990-06-14').save() >>> Certificate(8, '8', 'B', '1989-12-15').save() >>> Certificate(9, '9', 'B', '1989-07-07').save() >>> Certificate(10, '10', 'B', '1994-05-25').save() >>> Certificate(11, '11', 'B', '1997-09-10').save() >>> >>> from project_first_app.models import * >>> for i in Certificate.objects.all(): ... print(i) ... Owner ID:ID:0 (Sofia Shikalova) (0) Owner ID:ID:1 (Igor Polyakov) (1) Owner ID:ID:2 (Alisher Morgenshtern) (2) Owner ID:ID:3 (Maria Bobrova) (3) Owner ID:ID:4 (Sofia Bykova) (4) Owner ID:ID:5 (Ekaterina Tretyakova) (5) Owner ID:ID:6 (Jennifer Aniston) (6) Owner ID:ID:7 (Brad Pitt) (7) Owner ID:ID:8 (Leonardo DiCaprio) (8) Owner ID:ID:9 (Matt Damon) (9) Owner ID:ID:10 (Sandra Bullok) (10) Owner ID:ID:11 (Reese Witherspoon) (11) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043e \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0438: >>> for i in Ownership.objects.all(): ... print(i) ... Owner:ID:0 (Sofia Shikalova) | Car:ID:0 (Alfa Romeo Giulietta H534KH) Owner:ID:0 (Sofia Shikalova) | Car:ID:1 (Chrysler Crossfire O092EE) Owner:ID:0 (Sofia Shikalova) | Car:ID:2 (Jaguar F-Type Roadster B926OK) Owner:ID:1 (Igor Polyakov) | Car:ID:1 (Chrysler Crossfire O092EE) Owner:ID:1 (Igor Polyakov) | Car:ID:2 (Jaguar F-Type Roadster B926OK) Owner:ID:1 (Igor Polyakov) | Car:ID:3 (Bentley Continential GT C106AA) \u041d\u0430\u0437\u043d\u0430\u0447\u0438\u043c \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438: >>> Ownership(6, 5, 5, '2023-01-13').save() >>> Ownership(7, 6, 6, '2023-01-13').save() >>> Ownership(8, 7, 7, '2023-01-13').save() >>> Ownership(9, 8, 8, '2023-01-13').save() >>> Ownership(10, 9, 9, '2023-01-13').save() >>> Ownership(11, 10, 10, '2023-01-13').save() >>> Ownership(12, 11, 11, '2023-01-13').save() >>> >>> for i in Ownership.objects.all(): ... print(i) ... Owner:ID:0 (Sofia Shikalova) | Car:ID:0 (Alfa Romeo Giulietta H534KH) Owner:ID:0 (Sofia Shikalova) | Car:ID:1 (Chrysler Crossfire O092EE) Owner:ID:0 (Sofia Shikalova) | Car:ID:2 (Jaguar F-Type Roadster B926OK) Owner:ID:1 (Igor Polyakov) | Car:ID:1 (Chrysler Crossfire O092EE) Owner:ID:1 (Igor Polyakov) | Car:ID:2 (Jaguar F-Type Roadster B926OK) Owner:ID:1 (Igor Polyakov) | Car:ID:3 (Bentley Continential GT C106AA) Owner:ID:5 (Ekaterina Tretyakova) | Car:ID:5 (Rolls-Royce Phantom M333ME) Owner:ID:6 (Jennifer Aniston) | Car:ID:6 (Lamborghini Huracan T019CX) Owner:ID:7 (Brad Pitt) | Car:ID:7 (Tesla Model S O925HA) Owner:ID:8 (Leonardo DiCaprio) | Car:ID:8 (Cadillac LYRIQ P6883BT) Owner:ID:9 (Matt Damon) | Car:ID:9 (Audi Q6 M305CC) Owner:ID:10 (Sandra Bullok) | Car:ID:10 (Ferrari 488 X656AP) Owner:ID:11 (Reese Witherspoon) | Car:ID:11 (Maybach Exelero T915TM)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"pr3/#311_1","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): >>> Car.objects.filter(brand=\"Jaguar\") <QuerySet [<Car: ID:2 (Jaguar F-Type Roadster B926OK)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): >>> Owner.objects.filter(first_name=\"Sofia\") <QuerySet [<Owner: ID:0 (Sofia Shikalova)>, <Owner: ID:4 (Sofia Bykova)>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): >>> target_id = Owner.objects.all()[9].id_owner >>> Certificate.objects.get(id_owner=target_id) <Certificate: Owner ID:ID:9 (Matt Damon) (9)> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e\u0431\u0430\u0432\u0438\u043c 'related_name' \u0432 \u043c\u043e\u0434\u0435\u043b\u044c Ownership \u0434\u043b\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430: class Ownership(models.Model): id_ownership = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Owner, on_delete = models.CASCADE, related_name=\"owner_ownership\") id_car = models.ForeignKey(Car, on_delete = models.CASCADE) start_date = models.DateField() end_date = models.DateField(null = True) def __str__(self): return f\"Owner:{self.id_owner} | Car:{self.id_car}\" >>> Owner.objects.filter(owner_ownership__id_car__color=\"red\") <QuerySet [<Owner: ID:10 (Sandra Bullok)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): >>> Owner.objects.filter(owner_ownership__start_date__gte=\"2023-01-01\") <QuerySet [<Owner: ID:5 (Ekaterina Tretyakova)>, <Owner: ID:6 (Jennifer Aniston)>, <Owner: ID:7 (Brad Pitt)>, <Owner: ID:8 (Leonardo DiCaprio)>, <Owner: ID:9 (Matt Damon)>, <Owner: ID:10 (Sandra Bullok)>, <Owner: ID:11 (Reese Witherspoon)>]>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"pr3/#313","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> from django.db.models import Min >>> Certificate.objects.aggregate(start_date=Min(\"date_of_issue\")) {'start_date': datetime.date(1989, 7, 7)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: from django.db.models import Max >>> Ownership.objects.aggregate(start_date=Max(\"start_date\")) {'start_date': datetime.date(2023, 1, 13)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: >>> from django.db.models import Count >>> Ownership.objects.values(\"id_owner\").annotate(Count(\"id_car\")) <QuerySet [{'id_owner': 0, 'id_car__count': 3}, {'id_owner': 1, 'id_car__count': 3}, {'id_owner': 5, 'id_car__count': 1}, {'id_owner': 6, 'id_car__count': 1}, {'id_owner': 7, 'id_car__count': 1}, {'id_owner': 8, 'id_car__count': 1}, {'id_owner': 9, 'id_car__count': 1}, {'id_owner': 10, 'id_car__count': 1}, {'id_owner': 11, 'id_car__count': 1}]> \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: >>> Car.objects.values(\"brand\").annotate(Count(\"id_car\")) <QuerySet [{'brand': 'Alfa Romeo', 'id_car__count': 1}, {'brand': 'Audi', 'id_car__count': 1}, {'brand': 'Bentley', 'id_car__count': 1}, {'brand': 'Bugatti', 'id_car__count': 1}, {'brand': 'Cadillac', 'id_car__count': 1}, {'brand': 'Chrysler', 'id_car__count': 1}, {'brand': 'Ferrari', 'id_car__count': 1}, {'brand': 'Jaguar', 'id_car__count': 1}, {'brand': 'Lamborghini', 'id_car__count': 1}, {'brand': 'Maybach', 'id_car__count': 1}, {'brand': 'Rolls-Royce', 'id_car__count': 1}, {'brand': 'Tesla', 'id_car__count': 1}]> \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> sort_by_date = Certificate.objects.all().order_by(\"date_of_issue\") >>> for i in sort_by_date: ... target_id = i.id_owner.id_owner ... print(Ownership.objects.filter(id_owner__id_owner=target_id)) ... <QuerySet [<Ownership: Owner:ID:9 (Matt Damon) | Car:ID:9 (Audi Q6 M305CC)>]> <QuerySet [<Ownership: Owner:ID:8 (Leonardo DiCaprio) | Car:ID:8 (Cadillac LYRIQ P6883BT)>]> <QuerySet [<Ownership: Owner:ID:7 (Brad Pitt) | Car:ID:7 (Tesla Model S O925HA)>]> <QuerySet [<Ownership: Owner:ID:6 (Jennifer Aniston) | Car:ID:6 (Lamborghini Huracan T019CX)>]> <QuerySet [<Ownership: Owner:ID:10 (Sandra Bullok) | Car:ID:10 (Ferrari 488 X656AP)>]> <QuerySet [<Ownership: Owner:ID:11 (Reese Witherspoon) | Car:ID:11 (Maybach Exelero T915TM)>]> <QuerySet [<Ownership: Owner:ID:1 (Igor Polyakov) | Car:ID:1 (Chrysler Crossfire O092EE)>, <Ownership: Owner:ID:1 (Igor Polyakov) | Car:ID:2 (Jaguar F-Type Roadster B926OK)>, <Ownership: Owner:ID:1 (Igor Polyakov) | Car:ID:3 (Bentley Continential GT C106AA)>]> <QuerySet []> <QuerySet [<Ownership: Owner:ID:0 (Sofia Shikalova) | Car:ID:0 (Alfa Romeo Giulietta H534KH)>, <Ownership: Owner:ID:0 (Sofia Shikalova) | Car:ID:1 (Chrysler Crossfire O092EE)>, <Ownership: Owner:ID:0 (Sofia Shikalova) | Car:ID:2 (Jaguar F-Type Roadster B926OK)>]> <QuerySet [<Ownership: Owner:ID:5 (Ekaterina Tretyakova) | Car:ID:5 (Rolls-Royce Phantom M333ME)>]>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3"}]}