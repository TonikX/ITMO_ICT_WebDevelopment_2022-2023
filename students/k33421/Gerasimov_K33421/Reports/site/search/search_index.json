{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023 \u0413\u0435\u0440\u0430\u0441\u0438\u043c\u043e\u0432 \u041c\u0430\u043a\u0441\u0438\u043c, \u0433\u0440\u0443\u043f\u043f\u0430 K33421","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023"},{"location":"#web-2022-2023","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-2023"},{"location":"#k33421","text":"","title":"\u0413\u0435\u0440\u0430\u0441\u0438\u043c\u043e\u0432 \u041c\u0430\u043a\u0441\u0438\u043c, \u0433\u0440\u0443\u043f\u043f\u0430 K33421"},{"location":"lab_work1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((\"127.0.0.1\", 9090)) sock.listen(1) while True: try: con, addr = sock.accept() data = con.recv(9111989) dec_data = data.decode(\"utf-8\") print(dec_data) con.send(b\"Hello, client\") finally: sock.close() break \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((\"127.0.0.1\", 9090)) sock.send(b\"Hello, server \\n\") text=sock.recv(9111989) dec_data=text.decode(\"utf-8\") print(dec_data) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412 \u043c\u043e\u0451\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0447\u0451\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket import math sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((\"127.0.0.1\", 9090)) sock.listen(1) while True: try: con, addr = sock.accept() s = con.recv(9111989) s = s.decode(\"utf8\") s = s.split() a = int(s[0]) b = int(s[1]) h = int(s[2]) con.send(b\"S = \" + str(0.5*h*(a+b)).encode(\"utf-8\")) finally: sock.close() break \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) a = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043c\u0430\u043b\u043e\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438:\") b = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438:\") h = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u044b\u0441\u043e\u0442\u0443 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438:\") s = a + \" \" + b + \" \" + h sock.connect((\"127.0.0.1\", 9090)) sock.send(s.encode(\"utf-8\")) text=sock.recv(9111989) udata=text.decode(\"utf-8\") print(udata) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0424\u0430\u0439\u043b index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Ryan Gosling</title> </head> <body> <h1>Hello world!</h1> <article> Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </article> </body> </html> \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 9090)) s.listen(1) while True: conn, addr = s.accept() html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\n' + html_content conn.sendall(html_response.encode('utf-8')) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 9090)) data = s.recv(9111989) print(data.decode('utf-8')) s.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading . \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041c\u043d\u043e\u044e \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d TCP \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket import threading host = \"localhost\" port = 9090 server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((host, port)) server.listen() print(\"The chat has been started!\") clients = [] users = [] def broadcast(message, client): for i in clients: if i != client: i.send(message) def handle(client): while True: message = client.recv(8192) if message.decode(\"utf-8\") == \"leave\": i = clients.index(client) clients.remove(client) client.close() user = users[i] users.remove(user) message = \"{} left the chat.\".format(user).encode(\"utf-8\") broadcast(message, client) break broadcast(message, client) def receive(): while True: connection, address = server.accept() message = \"What's your username?\" connection.sendto(message.encode(\"utf-8\"), address) user = connection.recv(8192) user = user.decode(\"utf-8\") users.append(user) clients.append(connection) message = \"You have entered the chat! Welcome!\" connection.sendto(message.encode(\"utf-8\"), address) message = \"Type word 'leave' to leave this chat\" connection.sendto(message.encode(\"utf-8\"), address) message = \"{} has entered this chat.\".format(user) broadcast(message.encode(\"utf-8\"), connection) thread = threading.Thread(target=handle, args=(connection, )) thread.start() receive() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b\u044b client1.py, client2.py import socket import threading host = \"localhost\" port = 9090 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((host, port)) user = input(\"What's your username? Enter it here, please: \") def receiving_message(): while True: message = client.recv(8192) message = message.decode(\"utf-8\") if message == \"What's your username?\": client.sendto(user.encode(\"utf-8\"), (host, port)) else: print(message) def sending_message(): while True: text = input(\"\") if text == \"leave\": client.sendto(text.encode(\"utf-8\"), (host, port)) print(\"You left this chat!\") client.close() break else: message = \"{}: {}\".format(user, text) client.sendto(message.encode(\"utf-8\"), (host, port)) receive_thread = threading.Thread(target=receiving_message) sending_thread = threading.Thread(target=sending_message) receive_thread.start() sending_thread.start() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket . \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043c\u0435\u0442\u044c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0424\u0430\u0439\u043b response.py \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c Response class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket from response import Response class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.points = {\"Russian\": [\"100\", \"100\", \"99\"], \"Maths\": [\"100\", \"98\", \"99\", \"4\"], \"English\": [\"89\", \"90\", \"91\", \"92\", \"93\"]} def serve_forever(self): server = socket.socket(socket.AF_INET,socket.SOCK_STREAM) address = (self.host, self.port) try: server.bind(address) server.listen() while True: connection, address = server.accept() self.serve_client(connection) except KeyboardInterrupt: server.close() def serve_client(self, connection): try: data = connection.recv(4096) data = data.decode(\"utf-8\") request = self.parse_request(data) result = self.handle_request(request) self.send_response(connection, result) except Exception as exception_text: print(\"Client connection failed: \", exception_text) connection.close() def parse_request(self, data): request = data.rstrip('\\r\\n') text = request[:data.index(\"\\n\")].split() if len(text) != 3: raise Exception('Malformed request line') method, target, version = text if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' data = target.split('?')[1].split('&') for value in data: index, info = value.split('=') request['data'][index] = info return request def handle_request(self, request): if request['method'] == 'POST': return self.handle_post(request) else: return self.handle_get() def handle_get(self): type = \"text/html; charset=utf-8\" first_settings = \"<html><head><style></style></head><body>\" course = \"<form><label>Name of discipline: </label><input name='course' /><br><br>\" points = \"<label>Number of points: </label><input name='points' /><br><br>\" button = \"<input type='submit'></form>\" body = first_settings + course + points + button for course_name in self.points: body += f\"<div><span>{course_name}: {self.points[course_name]}</span></div>\" second_settings = \"</body></html>\" body += second_settings body = body.encode(\"utf-8\") headers = [(\"Content-Type\", type), (\"Content-Length\", len(body))] return Response(200, \"OK\", headers, body) def handle_post(self, request): course = request[\"data\"][\"course\"] points = request[\"data\"][\"points\"] if course not in self.points: self.points[course] = [] if int(points) < 0 or int(points) > 103: raise Exception(\"Wrong number of points! Please, enter a number between 0 and 103.\") self.points[course].append(points) return self.handle_get() def send_response(self, connection, response): file = connection.makefile('wb') status_line = f\"HTTP/1.1 {response.status} {response.reason}\\r\\n\" status_line = status_line.encode(\"utf-8\") file.write(status_line) if response.headers: for (index, info) in response.headers: header_line = f\"{index}: {info}\\r\\n\" file.write(header_line.encode(\"utf-8\")) file.write(b\"\\r\\n\") if response.body: file.write(response.body) file.flush() file.close() def get_error(self, code, text): return Response(code, \"OK\", \"Content-Type: text/html; charset=utf-8\", text) if __name__ == '__main__': host = 'localhost' port = 9090 server = MyHTTPServer(host, port) try: server.serve_forever() except KeyboardInterrupt: pass","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab_work1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab_work1/#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((\"127.0.0.1\", 9090)) sock.listen(1) while True: try: con, addr = sock.accept() data = con.recv(9111989) dec_data = data.decode(\"utf-8\") print(dec_data) con.send(b\"Hello, client\") finally: sock.close() break \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((\"127.0.0.1\", 9090)) sock.send(b\"Hello, server \\n\") text=sock.recv(9111989) dec_data=text.decode(\"utf-8\") print(dec_data)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"lab_work1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412 \u043c\u043e\u0451\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u0447\u0451\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket import math sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((\"127.0.0.1\", 9090)) sock.listen(1) while True: try: con, addr = sock.accept() s = con.recv(9111989) s = s.decode(\"utf8\") s = s.split() a = int(s[0]) b = int(s[1]) h = int(s[2]) con.send(b\"S = \" + str(0.5*h*(a+b)).encode(\"utf-8\")) finally: sock.close() break \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) a = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043c\u0430\u043b\u043e\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438:\") b = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438:\") h = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u044b\u0441\u043e\u0442\u0443 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438:\") s = a + \" \" + b + \" \" + h sock.connect((\"127.0.0.1\", 9090)) sock.send(s.encode(\"utf-8\")) text=sock.recv(9111989) udata=text.decode(\"utf-8\") print(udata)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"lab_work1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0424\u0430\u0439\u043b index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Ryan Gosling</title> </head> <body> <h1>Hello world!</h1> <article> Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </article> </body> </html> \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 9090)) s.listen(1) while True: conn, addr = s.accept() html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\n' + html_content conn.sendall(html_response.encode('utf-8')) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 9090)) data = s.recv(9111989) print(data.decode('utf-8')) s.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"lab_work1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading . \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041c\u043d\u043e\u044e \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d TCP \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket import threading host = \"localhost\" port = 9090 server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((host, port)) server.listen() print(\"The chat has been started!\") clients = [] users = [] def broadcast(message, client): for i in clients: if i != client: i.send(message) def handle(client): while True: message = client.recv(8192) if message.decode(\"utf-8\") == \"leave\": i = clients.index(client) clients.remove(client) client.close() user = users[i] users.remove(user) message = \"{} left the chat.\".format(user).encode(\"utf-8\") broadcast(message, client) break broadcast(message, client) def receive(): while True: connection, address = server.accept() message = \"What's your username?\" connection.sendto(message.encode(\"utf-8\"), address) user = connection.recv(8192) user = user.decode(\"utf-8\") users.append(user) clients.append(connection) message = \"You have entered the chat! Welcome!\" connection.sendto(message.encode(\"utf-8\"), address) message = \"Type word 'leave' to leave this chat\" connection.sendto(message.encode(\"utf-8\"), address) message = \"{} has entered this chat.\".format(user) broadcast(message.encode(\"utf-8\"), connection) thread = threading.Thread(target=handle, args=(connection, )) thread.start() receive() \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b\u044b client1.py, client2.py import socket import threading host = \"localhost\" port = 9090 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((host, port)) user = input(\"What's your username? Enter it here, please: \") def receiving_message(): while True: message = client.recv(8192) message = message.decode(\"utf-8\") if message == \"What's your username?\": client.sendto(user.encode(\"utf-8\"), (host, port)) else: print(message) def sending_message(): while True: text = input(\"\") if text == \"leave\": client.sendto(text.encode(\"utf-8\"), (host, port)) print(\"You left this chat!\") client.close() break else: message = \"{}: {}\".format(user, text) client.sendto(message.encode(\"utf-8\"), (host, port)) receive_thread = threading.Thread(target=receiving_message) sending_thread = threading.Thread(target=sending_message) receive_thread.start() sending_thread.start()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"lab_work1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket . \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043c\u0435\u0442\u044c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0424\u0430\u0439\u043b response.py \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c Response class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c, \u0444\u0430\u0439\u043b server.py import socket from response import Response class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.points = {\"Russian\": [\"100\", \"100\", \"99\"], \"Maths\": [\"100\", \"98\", \"99\", \"4\"], \"English\": [\"89\", \"90\", \"91\", \"92\", \"93\"]} def serve_forever(self): server = socket.socket(socket.AF_INET,socket.SOCK_STREAM) address = (self.host, self.port) try: server.bind(address) server.listen() while True: connection, address = server.accept() self.serve_client(connection) except KeyboardInterrupt: server.close() def serve_client(self, connection): try: data = connection.recv(4096) data = data.decode(\"utf-8\") request = self.parse_request(data) result = self.handle_request(request) self.send_response(connection, result) except Exception as exception_text: print(\"Client connection failed: \", exception_text) connection.close() def parse_request(self, data): request = data.rstrip('\\r\\n') text = request[:data.index(\"\\n\")].split() if len(text) != 3: raise Exception('Malformed request line') method, target, version = text if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' data = target.split('?')[1].split('&') for value in data: index, info = value.split('=') request['data'][index] = info return request def handle_request(self, request): if request['method'] == 'POST': return self.handle_post(request) else: return self.handle_get() def handle_get(self): type = \"text/html; charset=utf-8\" first_settings = \"<html><head><style></style></head><body>\" course = \"<form><label>Name of discipline: </label><input name='course' /><br><br>\" points = \"<label>Number of points: </label><input name='points' /><br><br>\" button = \"<input type='submit'></form>\" body = first_settings + course + points + button for course_name in self.points: body += f\"<div><span>{course_name}: {self.points[course_name]}</span></div>\" second_settings = \"</body></html>\" body += second_settings body = body.encode(\"utf-8\") headers = [(\"Content-Type\", type), (\"Content-Length\", len(body))] return Response(200, \"OK\", headers, body) def handle_post(self, request): course = request[\"data\"][\"course\"] points = request[\"data\"][\"points\"] if course not in self.points: self.points[course] = [] if int(points) < 0 or int(points) > 103: raise Exception(\"Wrong number of points! Please, enter a number between 0 and 103.\") self.points[course].append(points) return self.handle_get() def send_response(self, connection, response): file = connection.makefile('wb') status_line = f\"HTTP/1.1 {response.status} {response.reason}\\r\\n\" status_line = status_line.encode(\"utf-8\") file.write(status_line) if response.headers: for (index, info) in response.headers: header_line = f\"{index}: {info}\\r\\n\" file.write(header_line.encode(\"utf-8\")) file.write(b\"\\r\\n\") if response.body: file.write(response.body) file.flush() file.close() def get_error(self, code, text): return Response(code, \"OK\", \"Content-Type: text/html; charset=utf-8\", text) if __name__ == '__main__': host = 'localhost' port = 9090 server = MyHTTPServer(host, port) try: server.serve_forever() except KeyboardInterrupt: pass","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"lab_work2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u0440\u0435\u0439\u0441\u0430, \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043e\u0442\u043b\u0435\u0442\u0435, \u043f\u0440\u0438\u043b\u0435\u0442\u0435, \u0442\u0438\u043f\u0435 (\u043f\u0440\u0438\u043b\u0435\u0442, \u043e\u0442\u043b\u0435\u0442), \u043d\u043e\u043c\u0435\u0440\u0435 \u0433\u0435\u0439\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0424\u0430\u0439\u043b urls.py from django.urls import path from . import views urlpatterns = [ path('', views.index, name='index'), path('register', views.register, name='register'), path('login', views.login, name='login'), path('logout', views.logout, name='logout'), path('rooms', views.rooms, name='rooms'), path('room/<str:pk>', views.room, name='room'), path('reservation/<str:pk>', views.reservation, name='reservation'), path('profile', views.profile, name='book_list'), path('delete_res/<str:pk>', views.delete_reservation, name='delete_reservation'), path('edit_res/<str:pk>', views.edit_reservation, name='edit_reservation'), path('comment/<str:pk>', views.add_comment, name='add_comment'), path('lastmonth', views.show_last_month, name='last_month'), path('search_rooms', views.search_rooms, name='search_rooms') ] \u0424\u0430\u0439\u043b views.py rom django.shortcuts import render, redirect from django.contrib.auth.models import User, auth from django.contrib import messages from django.shortcuts import get_object_or_404 from .models import * from .forms import * from datetime import datetime, timedelta from django.contrib.auth.decorators import login_required from django.core.paginator import Paginator, EmptyPage def index(request): return render(request, 'index.html') def register(request): if request.method == 'POST': username = request.POST['username'] email = request.POST['email'] password = request.POST['password'] password2 = request.POST['password2'] if password == password2: if User.objects.filter(email=email).exists(): messages.info(request, 'Email already used!') return redirect('register') elif User.objects.filter(username=username).exists(): messages.info(request, 'Username already used!') return redirect('register') else: user = User.objects.create_user(username=username, email=email, password=password) user.save() return redirect('login') else: messages.info(request, 'Passwords dont match') return redirect('register') else: return render(request, 'register.html') def login(request): if request.method == 'POST': username = request.POST['username'] password = request.POST['password'] user = auth.authenticate(username=username, password=password) if user is not None: auth.login(request, user) return redirect('/') else: messages.info(request, 'User doesnt exists') return redirect('login') else: return render(request, 'login.html') @login_required def logout(request): auth.logout(request) return redirect('/') def rooms(request): free_rooms = Room.objects.filter(is_reserved=False) p = Paginator(free_rooms, 1) page_num = request.GET.get('page', 1) try: page = p.page(page_num) except EmptyPage: page = p.page(1) return render(request, 'rooms.html', {'rooms': page}) def search_rooms(request): searched = request.POST['search_value'] obj = Room.objects.filter(number=searched, is_reserved=False) return render(request, 'search_rooms.html', {'room': obj}) def room(request, pk): room = Room.objects.get(id=pk) comments = Comment.objects.filter(room=room) return render(request, 'room.html', {'room': room, 'comments': comments}) @login_required def reservation(request, pk): obj = get_object_or_404(Room, id=pk) user = request.user if request.method == \"POST\": form = ReservationForm(request.POST) if form['arrival_date'].value() != form['departure_date'].value(): if form.is_valid(): res = form.save(commit=False) res.user = user obj.is_reserved = True res.room = obj obj.save() res.save() return redirect('/') else: messages.info(request, 'Arrival and departure date are equal') else: form = ReservationForm() return render(request, 'reservation.html', {'form': form, 'room': obj}) @login_required def profile(request): user = request.user reservations = Reservation.objects.all().order_by('-reserve_time') return render(request, 'profile.html', {'reservations': reservations, 'user': user}) @login_required def delete_reservation(request, pk): obj = get_object_or_404(Reservation, id=pk) room = obj.room room.is_reserved = False room.save() obj.delete() return redirect('/profile') @login_required def edit_reservation(request, pk): obj = get_object_or_404(Reservation, id=pk) room = obj.room form = ReservationForm(request.POST or None, instance=obj) if form['arrival_date'].value() != form['departure_date'].value(): if form.is_valid(): res = form.save(commit=False) res.reserve_time = datetime.now() res.save() return redirect('/profile') else: messages.info(request, 'Arrival and departure date are equal') return render(request, 'reservation.html', {'form': form, 'room': room}) @login_required def add_comment(request, pk): obj = get_object_or_404(Room, id=pk) user = request.user if request.method == 'POST': form = CommentForm(request.POST) if form['text'].value(): if form['rate'].value(): if form.is_valid(): com = form.save(commit=False) com.user = user com.room = obj com.save() return redirect('/rooms') else: messages.info(request, 'You must rate the room!') else: messages.info(request, 'You should type something!') else: form = CommentForm() return render(request, 'comment.html', {'form': form}) @login_required def show_last_month(request): obj = Reservation.objects.filter(departure_date__gt=datetime.now() - timedelta(days=30)) print(datetime.now() - timedelta(30)) return render(request, 'lastmonth.html', {'objects': obj}) \u0424\u0430\u0439\u043b models.py from django.db import models from django.contrib.auth.models import User from datetime import datetime from django.core.validators import MaxValueValidator, MinValueValidator class Room(models.Model): number = models.IntegerField() type = models.CharField(max_length=100) max_occupancy = models.IntegerField() is_reserved = models.FloatField(default=False) class Reservation(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) room = models.ForeignKey(Room, on_delete=models.CASCADE) reserve_time = models.DateTimeField(default=datetime.now, blank=True) arrival_date = models.DateTimeField(default=datetime.now, blank=True, null=True) departure_date = models.DateTimeField(default=datetime.now, blank=True, null=True) class Comment(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) room = models.ForeignKey(Room, on_delete=models.CASCADE) create_time = models.DateTimeField(default=datetime.now, blank=True) text = models.CharField(max_length=100000, blank=True) rate = models.IntegerField(default=1, validators=[ MaxValueValidator(10), MinValueValidator(1) ]) \u0424\u0430\u0439\u043b views.py from django import forms from .models import * class ReservationForm(forms.ModelForm): class Meta: model = Reservation fields = ['arrival_date', 'departure_date'] exclude = ['user', 'room', 'reserve_time', 'comment'] class CommentForm(forms.ModelForm): class Meta: model = Comment widgets = { 'text': forms.Textarea(attrs={'rows': 30, 'cols': 100, 'placeholder': 'Type your comment...'}), } fields = ['text', 'rate'] exclude = ['user', 'create_time']","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_work2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_work2/#_1","text":"\u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u0440\u0435\u0439\u0441\u0430, \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043e\u0442\u043b\u0435\u0442\u0435, \u043f\u0440\u0438\u043b\u0435\u0442\u0435, \u0442\u0438\u043f\u0435 (\u043f\u0440\u0438\u043b\u0435\u0442, \u043e\u0442\u043b\u0435\u0442), \u043d\u043e\u043c\u0435\u0440\u0435 \u0433\u0435\u0439\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0424\u0430\u0439\u043b urls.py from django.urls import path from . import views urlpatterns = [ path('', views.index, name='index'), path('register', views.register, name='register'), path('login', views.login, name='login'), path('logout', views.logout, name='logout'), path('rooms', views.rooms, name='rooms'), path('room/<str:pk>', views.room, name='room'), path('reservation/<str:pk>', views.reservation, name='reservation'), path('profile', views.profile, name='book_list'), path('delete_res/<str:pk>', views.delete_reservation, name='delete_reservation'), path('edit_res/<str:pk>', views.edit_reservation, name='edit_reservation'), path('comment/<str:pk>', views.add_comment, name='add_comment'), path('lastmonth', views.show_last_month, name='last_month'), path('search_rooms', views.search_rooms, name='search_rooms') ] \u0424\u0430\u0439\u043b views.py rom django.shortcuts import render, redirect from django.contrib.auth.models import User, auth from django.contrib import messages from django.shortcuts import get_object_or_404 from .models import * from .forms import * from datetime import datetime, timedelta from django.contrib.auth.decorators import login_required from django.core.paginator import Paginator, EmptyPage def index(request): return render(request, 'index.html') def register(request): if request.method == 'POST': username = request.POST['username'] email = request.POST['email'] password = request.POST['password'] password2 = request.POST['password2'] if password == password2: if User.objects.filter(email=email).exists(): messages.info(request, 'Email already used!') return redirect('register') elif User.objects.filter(username=username).exists(): messages.info(request, 'Username already used!') return redirect('register') else: user = User.objects.create_user(username=username, email=email, password=password) user.save() return redirect('login') else: messages.info(request, 'Passwords dont match') return redirect('register') else: return render(request, 'register.html') def login(request): if request.method == 'POST': username = request.POST['username'] password = request.POST['password'] user = auth.authenticate(username=username, password=password) if user is not None: auth.login(request, user) return redirect('/') else: messages.info(request, 'User doesnt exists') return redirect('login') else: return render(request, 'login.html') @login_required def logout(request): auth.logout(request) return redirect('/') def rooms(request): free_rooms = Room.objects.filter(is_reserved=False) p = Paginator(free_rooms, 1) page_num = request.GET.get('page', 1) try: page = p.page(page_num) except EmptyPage: page = p.page(1) return render(request, 'rooms.html', {'rooms': page}) def search_rooms(request): searched = request.POST['search_value'] obj = Room.objects.filter(number=searched, is_reserved=False) return render(request, 'search_rooms.html', {'room': obj}) def room(request, pk): room = Room.objects.get(id=pk) comments = Comment.objects.filter(room=room) return render(request, 'room.html', {'room': room, 'comments': comments}) @login_required def reservation(request, pk): obj = get_object_or_404(Room, id=pk) user = request.user if request.method == \"POST\": form = ReservationForm(request.POST) if form['arrival_date'].value() != form['departure_date'].value(): if form.is_valid(): res = form.save(commit=False) res.user = user obj.is_reserved = True res.room = obj obj.save() res.save() return redirect('/') else: messages.info(request, 'Arrival and departure date are equal') else: form = ReservationForm() return render(request, 'reservation.html', {'form': form, 'room': obj}) @login_required def profile(request): user = request.user reservations = Reservation.objects.all().order_by('-reserve_time') return render(request, 'profile.html', {'reservations': reservations, 'user': user}) @login_required def delete_reservation(request, pk): obj = get_object_or_404(Reservation, id=pk) room = obj.room room.is_reserved = False room.save() obj.delete() return redirect('/profile') @login_required def edit_reservation(request, pk): obj = get_object_or_404(Reservation, id=pk) room = obj.room form = ReservationForm(request.POST or None, instance=obj) if form['arrival_date'].value() != form['departure_date'].value(): if form.is_valid(): res = form.save(commit=False) res.reserve_time = datetime.now() res.save() return redirect('/profile') else: messages.info(request, 'Arrival and departure date are equal') return render(request, 'reservation.html', {'form': form, 'room': room}) @login_required def add_comment(request, pk): obj = get_object_or_404(Room, id=pk) user = request.user if request.method == 'POST': form = CommentForm(request.POST) if form['text'].value(): if form['rate'].value(): if form.is_valid(): com = form.save(commit=False) com.user = user com.room = obj com.save() return redirect('/rooms') else: messages.info(request, 'You must rate the room!') else: messages.info(request, 'You should type something!') else: form = CommentForm() return render(request, 'comment.html', {'form': form}) @login_required def show_last_month(request): obj = Reservation.objects.filter(departure_date__gt=datetime.now() - timedelta(days=30)) print(datetime.now() - timedelta(30)) return render(request, 'lastmonth.html', {'objects': obj}) \u0424\u0430\u0439\u043b models.py from django.db import models from django.contrib.auth.models import User from datetime import datetime from django.core.validators import MaxValueValidator, MinValueValidator class Room(models.Model): number = models.IntegerField() type = models.CharField(max_length=100) max_occupancy = models.IntegerField() is_reserved = models.FloatField(default=False) class Reservation(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) room = models.ForeignKey(Room, on_delete=models.CASCADE) reserve_time = models.DateTimeField(default=datetime.now, blank=True) arrival_date = models.DateTimeField(default=datetime.now, blank=True, null=True) departure_date = models.DateTimeField(default=datetime.now, blank=True, null=True) class Comment(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) room = models.ForeignKey(Room, on_delete=models.CASCADE) create_time = models.DateTimeField(default=datetime.now, blank=True) text = models.CharField(max_length=100000, blank=True) rate = models.IntegerField(default=1, validators=[ MaxValueValidator(10), MinValueValidator(1) ]) \u0424\u0430\u0439\u043b views.py from django import forms from .models import * class ReservationForm(forms.ModelForm): class Meta: model = Reservation fields = ['arrival_date', 'departure_date'] exclude = ['user', 'room', 'reserve_time', 'comment'] class CommentForm(forms.ModelForm): class Meta: model = Comment widgets = { 'text': forms.Textarea(attrs={'rows': 30, 'cols': 100, 'placeholder': 'Type your comment...'}), } fields = ['text', 'rate'] exclude = ['user', 'create_time']","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"pr_w_3/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. models.py from django.db import models from django.contrib.auth.models import AbstractUser # Create your models here. class Car_owner(models.Model): id_owner = models.IntegerField(primary_key = True) last_name = models.CharField(max_length = 30, null = False) first_name = models.CharField(max_length = 30, null = False) birth_day = models.DateField(null = True) passport = models.IntegerField(null=True) address = models.CharField(max_length=50, null=True, blank=True) nationality = models.CharField(max_length=20, null=True, blank=True) class Car(models.Model): id_car = models.IntegerField(primary_key = True) state_number = models.CharField(max_length = 15, null = False) mark_car = models.CharField(max_length = 20, null = False) model_car = models.CharField(max_length = 20, null = False) color = models.CharField(max_length = 30, null = True) class Ownerdhip(models.Model): id_owner_car = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Car_owner, on_delete = models.CASCADE) id_car = models.ForeignKey(Car, on_delete = models.CASCADE) start_date = models.DateField() end_date = models.DateField(null = True) class Driver_license(models.Model): id_license = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Car_owner, on_delete = models.CASCADE) license_number = models.CharField(max_length = 10, null = False) type = models.CharField(max_length = 10, null = False) date_of_license= models.DateField() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432: Car_owner(1, '\u0428\u043f\u0430\u0439\u0437\u043c\u0430\u043d\u043d', '\u0418\u0437\u044f\u0441\u043b\u0430\u0432', '1990-01-1').save() Car_owner(2, '\u0412\u0430\u0445\u0442\u0435\u043d\u0431\u0435\u0440\u0433', '\u041c\u0441\u0442\u0438\u0441\u043b\u0430\u0432', '1991-01-1').save() Car_owner(3, '\u041f\u0435\u0442\u0440\u0438\u0449\u0435\u0432', '\u0412\u043e\u0438\u0441\u043b\u0430\u0432', '1992-01-1').save() Car_owner(4, '\u0414\u0435\u0434\u0438\u0449\u0435\u0432', '\u041e\u0433\u043d\u0435\u0441\u043b\u0430\u0432', '1993-01-1').save() Car_owner(5, '\u0417\u0440\u0438\u0449\u0435\u0432', '\u042f\u0440\u043e\u043f\u043e\u043b\u043a', '1994-01-1').save() Car_owner(6, '\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0449\u0435\u0432', '\u0421\u0432\u044f\u0442\u043e\u0437\u0430\u0440', '1995-01-1').save() for i in Car_owner.objects.all(): ...: print(i) ...: Car_owner object (1) Car_owner object (2) Car_owner object (3) Car_owner object (4) Car_owner object (5) Car_owner object (6) for i in Car_owner.objects.all(): ...: print(i.id_owner) ...: 1 2 3 4 5 6 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Car(1, 'A1A1', 'BMW', 'Model1', 'white').save() Car(2, 'A2A2', 'BMW', 'Model2', 'black').save() Car(3, 'A3A3', 'Toyota', 'Model3', 'blue').save() Car(4, 'A4A4', 'Toyota', 'Model4', 'white').save() Car(5, 'A5A5', 'Audi', 'Model5', 'red').save() Car(6, 'A6A6', 'Audi', 'Model6', 'balck').save() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 Driver_license(1, 1, '1234567', 'B', '2010-01-01').save() Driver_license(2, 2, '4567890', 'B', '2011-01-01').save() Driver_license(3, 3, '6527810', 'B', '2012-01-01').save() Driver_license(4, 4, '65228340', 'B', '2013-01-01').save() Driver_license(5, 5, '15228143', 'B', '2014-01-01').save() Driver_license(6, 6, '13298123', 'B', '2015-01-01').save() \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Ownerdhip(1, 1, 1, '2011-01-01', '2012-01-01').save() Ownerdhip(2, 2, 2, '2012-01-01', '2013-01-01').save() Ownerdhip(3, 3, 3, '2013-01-01', '2014-01-01').save() Ownerdhip(4, 4, 4, '2014-01-01', '2015-01-01').save() Ownerdhip(5, 5, 5, '2015-01-01', '2016-01-01').save() Ownerdhip(6, 6, 6, '2016-01-01', '2017-01-01').save() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0417\u0430\u043f\u0440\u043e\u0441 1 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): In [45]: Car.objects.filter(mark_car=\"Toyota\") Out[45]: <QuerySet [<Car: Car object (3)>, <Car: Car object (4)>]> \u0417\u0430\u043f\u0440\u043e\u0441 2 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): In [46]: Car_owner.objects.filter(first_name=\"FN3\") Out[46]: <QuerySet [<Car_owner: Car_owner object (3)>]> \u0417\u0430\u043f\u0440\u043e\u0441 3 \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): In [48]: take_id = Car_owner.objects.all()[1].id_owner In [49]: Driver_license.objects.get(id_owner=take_id) Out[49]: <Driver_license: Driver_license object (2)> \u0417\u0430\u043f\u0440\u043e\u0441 4 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): In [2]: Car_owner.objects.filter(ownership__id_car__color = 'red') Out[2]: <QuerySet [<Car_owner: Car_owner object (5)>]> \u0417\u0430\u043f\u0440\u043e\u0441 5 \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): In [3]: Car_owner.objects.filter(ownership__start_date__gte>\"2010-01-01\") Out[3]: <QuerySet [<Car_owner: Car_owner object (3)>, <Car_owner: Car_owner object (4)>, <Car_owner: Car_owner object (5)>, <Car_owner: Car_owner object (6)>]> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0417\u0430\u043f\u0440\u043e\u0441 1 \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: In [59]: from django.db.models import Min, Max In [60]: Driver_license.objects.aggregate(date_of_license=Min(\"date_of_license\")) Out[60]: {'date_of_license': datetime.date(2010, 1, 1)} \u0417\u0430\u043f\u0440\u043e\u0441 2 \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: In [62]: Ownerdhip.objects.aggregate(start_date=Max(\"start_date\")) Out[62]: {'start_date': datetime.date(2016, 1, 1)} \u0417\u0430\u043f\u0440\u043e\u0441 3 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: In [64]: from django.db.models import Count In [65]: Ownerdhip.objects.values(\"id_owner\").annotate(Count(\"id_car\")) Out[65]: <QuerySet [{'id_owner': 1, 'id_car__count': 1}, {'id_owner': 2, 'id_car__count': 1}, {'id_owner': 3, 'id_car__count': 1}, {'id_owner': 4, 'id_car__count': 1}, {'id_owner': 5, 'id _car__count': 1}, {'id_owner': 6, 'id_car__count': 1}]> \u0417\u0430\u043f\u0440\u043e\u0441 4 \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: In [66]: Car.objects.values(\"mark_car\").annotate(Count(\"id_car\")) Out[66]: <QuerySet [{'mark_car': 'Audi', 'id_car__count': 2}, {'mark_car': 'BMW', 'id_car__count': 2}, {'mark_car': 'Toyota', 'id_car__count': 2}]> \u0417\u0430\u043f\u0440\u043e\u0441 5 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: In [79]: Car_owner.objects.order_by(\"driver_license__date_of_license\") Out[79]: <QuerySet [<Car_owner: Car_owner object (1)>, <Car_owner: Car_owner object (2)>, <Car_owner: Car_owner object (3)>, <Car_owner: Car_owner object (4)>, <Car_owner: Car_owner objec t (5)>, <Car_owner: Car_owner object (6)>]>","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"pr_w_3/#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"pr_w_3/#311","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"pr_w_3/#modelspy","text":"from django.db import models from django.contrib.auth.models import AbstractUser # Create your models here. class Car_owner(models.Model): id_owner = models.IntegerField(primary_key = True) last_name = models.CharField(max_length = 30, null = False) first_name = models.CharField(max_length = 30, null = False) birth_day = models.DateField(null = True) passport = models.IntegerField(null=True) address = models.CharField(max_length=50, null=True, blank=True) nationality = models.CharField(max_length=20, null=True, blank=True) class Car(models.Model): id_car = models.IntegerField(primary_key = True) state_number = models.CharField(max_length = 15, null = False) mark_car = models.CharField(max_length = 20, null = False) model_car = models.CharField(max_length = 20, null = False) color = models.CharField(max_length = 30, null = True) class Ownerdhip(models.Model): id_owner_car = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Car_owner, on_delete = models.CASCADE) id_car = models.ForeignKey(Car, on_delete = models.CASCADE) start_date = models.DateField() end_date = models.DateField(null = True) class Driver_license(models.Model): id_license = models.IntegerField(primary_key = True) id_owner = models.ForeignKey(Car_owner, on_delete = models.CASCADE) license_number = models.CharField(max_length = 10, null = False) type = models.CharField(max_length = 10, null = False) date_of_license= models.DateField()","title":"models.py"},{"location":"pr_w_3/#_1","text":"Car_owner(1, '\u0428\u043f\u0430\u0439\u0437\u043c\u0430\u043d\u043d', '\u0418\u0437\u044f\u0441\u043b\u0430\u0432', '1990-01-1').save() Car_owner(2, '\u0412\u0430\u0445\u0442\u0435\u043d\u0431\u0435\u0440\u0433', '\u041c\u0441\u0442\u0438\u0441\u043b\u0430\u0432', '1991-01-1').save() Car_owner(3, '\u041f\u0435\u0442\u0440\u0438\u0449\u0435\u0432', '\u0412\u043e\u0438\u0441\u043b\u0430\u0432', '1992-01-1').save() Car_owner(4, '\u0414\u0435\u0434\u0438\u0449\u0435\u0432', '\u041e\u0433\u043d\u0435\u0441\u043b\u0430\u0432', '1993-01-1').save() Car_owner(5, '\u0417\u0440\u0438\u0449\u0435\u0432', '\u042f\u0440\u043e\u043f\u043e\u043b\u043a', '1994-01-1').save() Car_owner(6, '\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0449\u0435\u0432', '\u0421\u0432\u044f\u0442\u043e\u0437\u0430\u0440', '1995-01-1').save() for i in Car_owner.objects.all(): ...: print(i) ...: Car_owner object (1) Car_owner object (2) Car_owner object (3) Car_owner object (4) Car_owner object (5) Car_owner object (6) for i in Car_owner.objects.all(): ...: print(i.id_owner) ...: 1 2 3 4 5 6","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432:"},{"location":"pr_w_3/#_2","text":"Car(1, 'A1A1', 'BMW', 'Model1', 'white').save() Car(2, 'A2A2', 'BMW', 'Model2', 'black').save() Car(3, 'A3A3', 'Toyota', 'Model3', 'blue').save() Car(4, 'A4A4', 'Toyota', 'Model4', 'white').save() Car(5, 'A5A5', 'Audi', 'Model5', 'red').save() Car(6, 'A6A6', 'Audi', 'Model6', 'balck').save()","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439"},{"location":"pr_w_3/#_3","text":"Driver_license(1, 1, '1234567', 'B', '2010-01-01').save() Driver_license(2, 2, '4567890', 'B', '2011-01-01').save() Driver_license(3, 3, '6527810', 'B', '2012-01-01').save() Driver_license(4, 4, '65228340', 'B', '2013-01-01').save() Driver_license(5, 5, '15228143', 'B', '2014-01-01').save() Driver_license(6, 6, '13298123', 'B', '2015-01-01').save()","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432"},{"location":"pr_w_3/#_4","text":"Ownerdhip(1, 1, 1, '2011-01-01', '2012-01-01').save() Ownerdhip(2, 2, 2, '2012-01-01', '2013-01-01').save() Ownerdhip(3, 3, 3, '2013-01-01', '2014-01-01').save() Ownerdhip(4, 4, 4, '2014-01-01', '2015-01-01').save() Ownerdhip(5, 5, 5, '2015-01-01', '2016-01-01').save() Ownerdhip(6, 6, 6, '2016-01-01', '2017-01-01').save()","title":"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439"},{"location":"pr_w_3/#312","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e:","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2"},{"location":"pr_w_3/#1","text":"\u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): In [45]: Car.objects.filter(mark_car=\"Toyota\") Out[45]: <QuerySet [<Car: Car object (3)>, <Car: Car object (4)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 1"},{"location":"pr_w_3/#2","text":"\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): In [46]: Car_owner.objects.filter(first_name=\"FN3\") Out[46]: <QuerySet [<Car_owner: Car_owner object (3)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 2"},{"location":"pr_w_3/#3","text":"\u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): In [48]: take_id = Car_owner.objects.all()[1].id_owner In [49]: Driver_license.objects.get(id_owner=take_id) Out[49]: <Driver_license: Driver_license object (2)>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 3"},{"location":"pr_w_3/#4","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): In [2]: Car_owner.objects.filter(ownership__id_car__color = 'red') Out[2]: <QuerySet [<Car_owner: Car_owner object (5)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 4"},{"location":"pr_w_3/#5","text":"\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): In [3]: Car_owner.objects.filter(ownership__start_date__gte>\"2010-01-01\") Out[3]: <QuerySet [<Car_owner: Car_owner object (3)>, <Car_owner: Car_owner object (4)>, <Car_owner: Car_owner object (5)>, <Car_owner: Car_owner object (6)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 5"},{"location":"pr_w_3/#313","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b:","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3"},{"location":"pr_w_3/#1_1","text":"\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: In [59]: from django.db.models import Min, Max In [60]: Driver_license.objects.aggregate(date_of_license=Min(\"date_of_license\")) Out[60]: {'date_of_license': datetime.date(2010, 1, 1)}","title":"\u0417\u0430\u043f\u0440\u043e\u0441 1"},{"location":"pr_w_3/#2_1","text":"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: In [62]: Ownerdhip.objects.aggregate(start_date=Max(\"start_date\")) Out[62]: {'start_date': datetime.date(2016, 1, 1)}","title":"\u0417\u0430\u043f\u0440\u043e\u0441 2"},{"location":"pr_w_3/#3_1","text":"\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: In [64]: from django.db.models import Count In [65]: Ownerdhip.objects.values(\"id_owner\").annotate(Count(\"id_car\")) Out[65]: <QuerySet [{'id_owner': 1, 'id_car__count': 1}, {'id_owner': 2, 'id_car__count': 1}, {'id_owner': 3, 'id_car__count': 1}, {'id_owner': 4, 'id_car__count': 1}, {'id_owner': 5, 'id _car__count': 1}, {'id_owner': 6, 'id_car__count': 1}]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 3"},{"location":"pr_w_3/#4_1","text":"\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: In [66]: Car.objects.values(\"mark_car\").annotate(Count(\"id_car\")) Out[66]: <QuerySet [{'mark_car': 'Audi', 'id_car__count': 2}, {'mark_car': 'BMW', 'id_car__count': 2}, {'mark_car': 'Toyota', 'id_car__count': 2}]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 4"},{"location":"pr_w_3/#5_1","text":"\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: In [79]: Car_owner.objects.order_by(\"driver_license__date_of_license\") Out[79]: <QuerySet [<Car_owner: Car_owner object (1)>, <Car_owner: Car_owner object (2)>, <Car_owner: Car_owner object (3)>, <Car_owner: Car_owner object (4)>, <Car_owner: Car_owner objec t (5)>, <Car_owner: Car_owner object (6)>]>","title":"\u0417\u0430\u043f\u0440\u043e\u0441 5"}]}