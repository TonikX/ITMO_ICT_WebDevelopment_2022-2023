# Generated by Django 4.1.5 on 2023-02-02 16:22

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_name', models.CharField(blank=True, max_length=100)),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100)),
                ('serial_number', models.CharField(max_length=20)),
                ('passport', models.CharField(blank=True, max_length=20)),
                ('address', models.CharField(blank=True, max_length=250)),
                ('education_level', models.CharField(blank=True, max_length=250)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region='RU')),
                ('academic_degree', models.CharField(blank=True, choices=[('', None), ('Associate Degree', 'Associate Degree'), ("Bachelor's Degree", "Bachelor's Degree"), ("Master's Degree", "Master's Degree"), ('Doctoral Degree', 'Doctoral Degree')], default=None, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('authors', models.CharField(blank=True, max_length=250)),
                ('publisher', models.CharField(blank=True, max_length=250)),
                ('pub_date', models.DateField(blank=True, null=True, verbose_name='Publication date')),
                ('series', models.CharField(blank=True, max_length=250)),
                ('total_amount', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0)])),
                ('isbn', models.CharField(blank=True, max_length=17)),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Libraries',
            },
        ),
        migrations.CreateModel(
            name='ReadingRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.library')),
            ],
        ),
        migrations.CreateModel(
            name='ReadingRoomBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(default=1)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.book')),
            ],
        ),
        migrations.CreateModel(
            name='ReadingRoomBookUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('borrow_date', models.DateField(default=datetime.date.today)),
                ('returned_date', models.DateField(blank=True, null=True)),
                ('reading_room_book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.readingroombook')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='readingroombook',
            name='borrowers',
            field=models.ManyToManyField(blank=True, through='main.ReadingRoomBookUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='readingroombook',
            name='reading_room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.readingroom'),
        ),
        migrations.AddField(
            model_name='book',
            name='reading_rooms',
            field=models.ManyToManyField(through='main.ReadingRoomBook', to='main.readingroom'),
        ),
        migrations.AddField(
            model_name='user',
            name='library',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.library'),
        ),
        migrations.AddField(
            model_name='user',
            name='reading_room',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.readingroom'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='readingroombookuser',
            constraint=models.CheckConstraint(check=models.Q(('returned_date__gt', models.F('borrow_date'))), name='date_check', violation_error_message='Borrow date must be earlier than returned date.'),
        ),
    ]
