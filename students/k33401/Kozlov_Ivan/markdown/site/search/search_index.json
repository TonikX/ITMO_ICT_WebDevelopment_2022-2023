{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0421\u0442\u0443\u0434\u0435\u043d\u0442: \u041a\u043e\u0437\u043b\u043e\u0432 \u0418\u0432\u0430\u043d \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447 \u0413\u0440\u0443\u043f\u043f\u0430: \u041a33401 \u041f\u0440\u0435\u0434\u043c\u0435\u0442: Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410\u043d\u0442\u043e\u043d \u0418\u0433\u043e\u0440\u0435\u0432\u0438\u0447 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442 \u0418\u0422\u041c\u041e \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2022","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"lr_1/","text":"Welcome to 1 LR client.py - \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py - \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c 1 task server.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind((\"127.0.0.1\", 8081)) conn.listen(10) conn, addr = conn.accept() data_from_client = conn.recv(16384) udata = data_from_client.decode(\"utf-8\") print(\"Data: \" + udata) message_to_client = b\"Hello, client! \\n\" conn.send(message_to_client) conn.close() client.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.connect((\"127.0.0.1\", 8081)) print(\"Connect to server\") message_to_server = b\"Hello, Server!\" conn.send(message_to_server) data_from_server = conn.recv(16384) print(data_from_server.decode(\"utf-8\")) conn.close() 2 task server.py import socket import math conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind((\"127.0.0.1\", 8081)) conn.listen(10) conn, addr = conn.accept() message_to_client = b\"Hello, client! \\nWrite three paramets a, b, c with space:\" conn.send(message_to_client) data_from_client = conn.recv(16384) parametrs = data_from_client.decode(\"utf-8\") a = float(parametrs[0]) b = float(parametrs[2]) c = float(parametrs[4]) discr = b ** 2 - 4 * a * c if discr > 0: x1 = (-b + math.sqrt(discr)) / (2 * a) x2 = (-b - math.sqrt(discr)) / (2 * a) message_to_client = \"x1 = %.2f \\nx2 = %.2f\" % (x1, x2) elif discr == 0: x = -b / (2 * a) message_to_client = \"x = %.2f\" % x else: message_to_client = \"No roots\" conn.send(message_to_client.encode(\"utf-8\")) conn.close() client.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.connect((\"127.0.0.1\", 8081)) data_from_server = conn.recv(16384) print(data_from_server.decode(\"utf-8\")) parametrs = input() conn.send(parametrs.encode(\"utf-8\")) data_from_server = conn.recv(16384) print(data_from_server.decode(\"utf-8\")) conn.close() 3 task server.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind((\"127.0.0.1\", 8081)) conn.listen(10) conn, addr = conn.accept() conn.recv(16384) response_type = \"HTTP/1.0 200 OK\\n\" headers = \"Content-Type: text/html\\n\\n\" f = open('index.html','r') body = f.read() resp = response_type + headers + body conn.send(resp.encode(\"utf-8\")) f.close() conn.close() index.html - \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c <!DOCTYPE html> <html> <head> <title>First page</title> </head> <body> <p>Help me, please!</p> </body> </html> 4 task server.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) conn.bind((\"127.0.0.1\", 8081)) clients = [] def send_message(): while True: data, addr = conn.recvfrom(1024) if addr not in clients: clients.append(addr) for i in clients: if i == addr: continue conn.sendto(data, i) send_message() client.py import socket import threading import datetime conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) conn.connect((\"127.0.0.1\", 8081)) def send_mes(): while True: message = input() conn.send(message.encode(\"utf-8\")) def get_m(): while True: message = conn.recv(16384).decode(\"utf-8\") print(str(datetime.datetime.now()) + \": \" + message) print(\"Hello! Write your message:\") thread_send = threading.Thread(target=send_mes, args=()) thread_get = threading.Thread(target=get_m, args=()) thread_send.start() thread_get.start() 5 task server.py import socket class MyHTTPServer: def __init__(self, host, port): self._host = host self._port = port self._database = [] def serve_forever(self): self._conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0) self._conn.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self._conn.bind((self._host, self._port)) self._conn.listen(10) while True: client, _ = self._conn.accept() self.serve_client(client) def serve_client(self, client): data = client.recv(4096).decode() if not data: return response = self.handle_request(data) client.send(response.encode()) def parse_request(self, data): data = data.replace(\"\\r\", \"\") try: req = data[:data.index(\"\\n\")] except ValueError: req = data return req, \"\", \"\" if \"\\n\\n\" in data: headers, body = data[data.index(\"\\n\") + 1:].split(\"\\n\\n\") else: headers, body = data[data.index(\"\\n\") + 1:], \"\" return req, headers, body def parse_headers(self, headers): headers_dict = {} for header in headers.split('\\n'): if header: name = header[:header.index(': ')] value = header[header.index(': ') + 1:] headers_dict[name] = value return headers_dict def parse_body(self, body): body_dict = {} for elem in body.split('&'): name = elem[:elem.index('=')] value = elem[elem.index('=') + 1:].replace('+', ' ') body_dict[name] = value return body_dict def handle_request(self, data): req, headers, body = self.parse_request(data) method, url, ver = req.split() headers = self.parse_headers(headers) response = f\"{ver} 200 OK\\n\\n\" error_response = f\"{ver} 400\\n\\nBad request\" if method == 'GET' and url == '/index': with open('index.html') as f: response += f.read() elif method == 'GET' and url == '/view': with open('view.html') as f: lines = f.readlines() table = [f\"<tr><td>{s}</td><td>{g}</td></tr>\" for s, g in self._database] response += '\\n'.join(lines[:8]) + '\\n'.join(table) + '\\n'.join(lines[8:]) elif method == 'POST' and url == '/send': parsed_body = self.parse_body(body) self._database.append((parsed_body['subject'], parsed_body['grade'])) return response else: return error_response return response def kill(self): self._conn.close() if __name__ == '__main__': host = \"127.0.0.1\" port = 8000 serv = MyHTTPServer(host, port) try: serv.serve_forever() except KeyboardInterrupt: serv.kill() raise KeyboardInterrupt index.html <!DOCTYPE html> <html lang=\"ru\"> <head> <meta charset=\"UTF-8\"> <title>Task 5</title> <script> function submitForm() { let http = new XMLHttpRequest(); http.open(\"POST\", \"http://127.0.0.1:8000/send\", true); http.setRequestHeader(\"Content\",\"text/html\"); let params = \"grade=\" + document.getElementById(\"grade\").value + \"&subject=\" + document.getElementById(\"subject\").value; http.send(params); } </script> </head> <body> <form method=\"post\" action=\"#\" onsubmit=\"submitForm();return false;\"> <label for=\"subject\">\u041f\u0440\u0435\u0434\u043c\u0435\u0442</label> <input type=\"text\" name=\"subject\" id=\"subject\"/> <label for=\"grade\">\u041e\u0446\u0435\u043d\u043a\u0430</label> <input type=\"number\" name=\"grade\" id=\"grade\"/> <input type=\"submit\"> </form> <a href=\"/view\">\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443</a> </body> </html> view.html <!DOCTYPE html> <html lang=\"ru\"> <head> <meta charset=\"UTF-8\"> <title>Task 5</title> </head> <body> <table align=\"center\" width=\"20%\" border=\"1\"> </table> <a href=\"/index\">\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443</a> </body> </html>","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21161"},{"location":"lr_1/#welcome-to-1-lr","text":"client.py - \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py - \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c","title":"Welcome to 1 LR"},{"location":"lr_1/#1-task","text":"server.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind((\"127.0.0.1\", 8081)) conn.listen(10) conn, addr = conn.accept() data_from_client = conn.recv(16384) udata = data_from_client.decode(\"utf-8\") print(\"Data: \" + udata) message_to_client = b\"Hello, client! \\n\" conn.send(message_to_client) conn.close() client.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.connect((\"127.0.0.1\", 8081)) print(\"Connect to server\") message_to_server = b\"Hello, Server!\" conn.send(message_to_server) data_from_server = conn.recv(16384) print(data_from_server.decode(\"utf-8\")) conn.close()","title":"1 task"},{"location":"lr_1/#2-task","text":"server.py import socket import math conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind((\"127.0.0.1\", 8081)) conn.listen(10) conn, addr = conn.accept() message_to_client = b\"Hello, client! \\nWrite three paramets a, b, c with space:\" conn.send(message_to_client) data_from_client = conn.recv(16384) parametrs = data_from_client.decode(\"utf-8\") a = float(parametrs[0]) b = float(parametrs[2]) c = float(parametrs[4]) discr = b ** 2 - 4 * a * c if discr > 0: x1 = (-b + math.sqrt(discr)) / (2 * a) x2 = (-b - math.sqrt(discr)) / (2 * a) message_to_client = \"x1 = %.2f \\nx2 = %.2f\" % (x1, x2) elif discr == 0: x = -b / (2 * a) message_to_client = \"x = %.2f\" % x else: message_to_client = \"No roots\" conn.send(message_to_client.encode(\"utf-8\")) conn.close() client.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.connect((\"127.0.0.1\", 8081)) data_from_server = conn.recv(16384) print(data_from_server.decode(\"utf-8\")) parametrs = input() conn.send(parametrs.encode(\"utf-8\")) data_from_server = conn.recv(16384) print(data_from_server.decode(\"utf-8\")) conn.close()","title":"2 task"},{"location":"lr_1/#3-task","text":"server.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind((\"127.0.0.1\", 8081)) conn.listen(10) conn, addr = conn.accept() conn.recv(16384) response_type = \"HTTP/1.0 200 OK\\n\" headers = \"Content-Type: text/html\\n\\n\" f = open('index.html','r') body = f.read() resp = response_type + headers + body conn.send(resp.encode(\"utf-8\")) f.close() conn.close() index.html - \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c <!DOCTYPE html> <html> <head> <title>First page</title> </head> <body> <p>Help me, please!</p> </body> </html>","title":"3 task"},{"location":"lr_1/#4-task","text":"server.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) conn.bind((\"127.0.0.1\", 8081)) clients = [] def send_message(): while True: data, addr = conn.recvfrom(1024) if addr not in clients: clients.append(addr) for i in clients: if i == addr: continue conn.sendto(data, i) send_message() client.py import socket import threading import datetime conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) conn.connect((\"127.0.0.1\", 8081)) def send_mes(): while True: message = input() conn.send(message.encode(\"utf-8\")) def get_m(): while True: message = conn.recv(16384).decode(\"utf-8\") print(str(datetime.datetime.now()) + \": \" + message) print(\"Hello! Write your message:\") thread_send = threading.Thread(target=send_mes, args=()) thread_get = threading.Thread(target=get_m, args=()) thread_send.start() thread_get.start()","title":"4 task"},{"location":"lr_1/#5-task","text":"server.py import socket class MyHTTPServer: def __init__(self, host, port): self._host = host self._port = port self._database = [] def serve_forever(self): self._conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0) self._conn.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self._conn.bind((self._host, self._port)) self._conn.listen(10) while True: client, _ = self._conn.accept() self.serve_client(client) def serve_client(self, client): data = client.recv(4096).decode() if not data: return response = self.handle_request(data) client.send(response.encode()) def parse_request(self, data): data = data.replace(\"\\r\", \"\") try: req = data[:data.index(\"\\n\")] except ValueError: req = data return req, \"\", \"\" if \"\\n\\n\" in data: headers, body = data[data.index(\"\\n\") + 1:].split(\"\\n\\n\") else: headers, body = data[data.index(\"\\n\") + 1:], \"\" return req, headers, body def parse_headers(self, headers): headers_dict = {} for header in headers.split('\\n'): if header: name = header[:header.index(': ')] value = header[header.index(': ') + 1:] headers_dict[name] = value return headers_dict def parse_body(self, body): body_dict = {} for elem in body.split('&'): name = elem[:elem.index('=')] value = elem[elem.index('=') + 1:].replace('+', ' ') body_dict[name] = value return body_dict def handle_request(self, data): req, headers, body = self.parse_request(data) method, url, ver = req.split() headers = self.parse_headers(headers) response = f\"{ver} 200 OK\\n\\n\" error_response = f\"{ver} 400\\n\\nBad request\" if method == 'GET' and url == '/index': with open('index.html') as f: response += f.read() elif method == 'GET' and url == '/view': with open('view.html') as f: lines = f.readlines() table = [f\"<tr><td>{s}</td><td>{g}</td></tr>\" for s, g in self._database] response += '\\n'.join(lines[:8]) + '\\n'.join(table) + '\\n'.join(lines[8:]) elif method == 'POST' and url == '/send': parsed_body = self.parse_body(body) self._database.append((parsed_body['subject'], parsed_body['grade'])) return response else: return error_response return response def kill(self): self._conn.close() if __name__ == '__main__': host = \"127.0.0.1\" port = 8000 serv = MyHTTPServer(host, port) try: serv.serve_forever() except KeyboardInterrupt: serv.kill() raise KeyboardInterrupt index.html <!DOCTYPE html> <html lang=\"ru\"> <head> <meta charset=\"UTF-8\"> <title>Task 5</title> <script> function submitForm() { let http = new XMLHttpRequest(); http.open(\"POST\", \"http://127.0.0.1:8000/send\", true); http.setRequestHeader(\"Content\",\"text/html\"); let params = \"grade=\" + document.getElementById(\"grade\").value + \"&subject=\" + document.getElementById(\"subject\").value; http.send(params); } </script> </head> <body> <form method=\"post\" action=\"#\" onsubmit=\"submitForm();return false;\"> <label for=\"subject\">\u041f\u0440\u0435\u0434\u043c\u0435\u0442</label> <input type=\"text\" name=\"subject\" id=\"subject\"/> <label for=\"grade\">\u041e\u0446\u0435\u043d\u043a\u0430</label> <input type=\"number\" name=\"grade\" id=\"grade\"/> <input type=\"submit\"> </form> <a href=\"/view\">\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443</a> </body> </html> view.html <!DOCTYPE html> <html lang=\"ru\"> <head> <meta charset=\"UTF-8\"> <title>Task 5</title> </head> <body> <table align=\"center\" width=\"20%\" border=\"1\"> </table> <a href=\"/index\">\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443</a> </body> </html>","title":"5 task"},{"location":"lr_2/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 2 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. Models \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 model.py from django.db import models r = () # \u043f\u0443\u0441\u0442\u043e\u0439 \u043a\u0430\u0440\u0442\u0435\u0436 class Registration_user(models.Model): first_name = models.CharField(\"\u0418\u043c\u044f\", max_length=30, null=False) last_name = models.CharField(\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", max_length=30, null=False) passport_number = models.CharField(\"\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\", primary_key=True, max_length=30) def __str__(self): return self.passport_number class Flight(models.Model): number_flight = models.CharField(\"\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430\", primary_key=True, max_length=30) date = models.DateField(\"\u0414\u0430\u0442\u0430 \u0432\u044b\u043b\u0435\u0442\u0430\", null=False, unique=True) def __str__(self) -> str: return self.number_flight class Ticket(models.Model): LIST_OF_PLASEC_IN_PLANE = [r + (f\"{i}\", f\"{i}\") for i in range(1, 31)] place_in_plane = models.CharField( \"\u041c\u0435\u0441\u0442\u043e\", primary_key=True, max_length=2, choices=LIST_OF_PLASEC_IN_PLANE, default=\"-1\" ) passport_number = models.ForeignKey(Registration_user, on_delete=models.CASCADE) number_flight = models.ForeignKey(Flight, on_delete=models.CASCADE) class Review(models.Model): id = models.AutoField(primary_key=True) number_flight = models.ForeignKey( Flight, on_delete=models.CASCADE, to_field=\"number_flight\", related_name=\"number_flight_2\" ) comment = models.TextField(\"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\", null=False) RATE_NUMBER = [ (\"1\", \"1\"), (\"2\", \"2\"), (\"3\", \"3\"), (\"4\", \"4\"), (\"5\", \"5\"), (\"6\", \"6\"), (\"7\", \"7\"), (\"8\", \"8\"), (\"9\", \"9\"), (\"10\", \"10\"), ] rate = models.CharField(\"\u041e\u0446\u0435\u043d\u043a\u0430\", max_length=2, choices=RATE_NUMBER) sing_author = models.CharField(\"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0430\u0448 \u043d\u0438\u043a\", max_length=30) Views \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043a\u0430\u043a \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0442\u0430\u043a \u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 views.py from django.shortcuts import redirect, render from django.views.generic.edit import CreateView, DeleteView, UpdateView from django.views.generic.list import ListView from .models import Flight, Registration_user, Review, Ticket def get_main_title(request): return render(request, \"templates/index.html\") class Reg_user(CreateView): model = Registration_user fields = [ \"first_name\", \"last_name\", \"passport_number\", ] template_name = \"reg_users.html\" success_url = \"/\" class Book(CreateView): model = Ticket fields = [ \"place_in_plane\", \"passport_number\", \"number_flight\", ] template_name = \"book.html\" success_url = \"/trip/\" class Trip(ListView): model = Flight template_name = \"trip.html\" def get_current_book(request, passport_user): current_book = Ticket.objects.filter(passport_number=passport_user) current_book = {\"object_list\": current_book} return render(request, \"templates/current_book.html\", current_book) def my_book(request): if \"id_passport\" in request.POST: passport = int(request.POST[\"id_passport\"]) return redirect(f\"/current_book/{passport}/\") else: return render(request, \"templates/choose_passport_for_book.html\") class Update_ticket(UpdateView): model = Ticket fields = [ \"place_in_plane\", \"passport_number\", \"number_flight\", ] template_name = \"up_ticket.html\" success_url = \"/choose_passport_for_book/\" def all_passengers(request, flight_num): needed_passports = Ticket.objects.filter(number_flight=flight_num).values_list( \"passport_number\" ) passengers = Registration_user.objects.filter(passport_number__in=needed_passports) context = { \"object_list\": passengers, \"object_list_flight\": flight_num, } return render(request, \"all_passengers.html\", context) class Delete_ticket(DeleteView): model = Ticket fields = [ \"place_in_plane\", \"passport_number\", \"number_flight\", ] template_name = \"del_ticket.html\" success_url = \"/choose_passport_for_book/\" class Create_review(CreateView): model = Review fields = [ \"number_flight\", \"comment\", \"rate\", \"sing_author\", ] template_name = \"create_review.html\" success_url = \"/review/\" class All_reviews(ListView): model = Review template_name = \"all_reviews.html\" URLs urls.py from django.contrib import admin from django.urls import path from . import views urlpatterns = [ path(\"registration/\", views.Reg_user.as_view(), name=\"reg_users\"), path(\"\", views.get_main_title, name=\"index\"), path(\"admin/\", admin.site.urls), path(\"book/\", views.Book.as_view(), name=\"book\"), path(\"trip/\", views.Trip.as_view(), name=\"trip\"), path(\"current_book/<int:passport_user>/\", views.get_current_book, name=\"current_book\"), path(\"choose_passport_for_book/\", views.my_book, name=\"choose_passport_for_book\"), path(\"up_ticket/<int:pk>\", views.Update_ticket.as_view(), name=\"update_ticket\"), path(\"del_ticket/<int:pk>\", views.Delete_ticket.as_view(), name=\"delete_ticket\"), path(\"all_passangers/<int:flight_num>\", views.all_passengers, name=\"all_passangers\"), path(\"create_review/\", views.Create_review.as_view(), name=\"create_review\"), path(\"review/\", views.All_reviews.as_view(), name=\"reviews\"), ] \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 registration/ - URL \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445 \u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 choose_passport_for_book/ - URL \u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u043c\u043e\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0432\u043e\u0439 \u043f\u0430\u0441\u043f\u043e\u0440\u0442, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0435\u0433\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u2193 \u2193 current_book/123/ - URL, \u0433\u0434\u0435 123 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043f\u0430\u0441\u043f\u043e\u0440\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u0432 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u0441\u044e\u0434\u0430: up_ticket/17 - URL, \u0433\u0434\u0435 17 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430 \u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u0432 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u0441\u044e\u0434\u0430: del_ticket/17 - URL, \u0433\u0434\u0435 17 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430 \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0440\u0435\u0433\u0435\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 Django-admin \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430 \u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u0420\u0435\u0439\u0441\u044b \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432, \u043e\u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0441\u0430 trip/ - URL \u2193 all_passangers/333 - URL, \u0433\u0434\u0435 333 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430 \u041e\u0442\u0437\u044b\u0432\u044b \u043a \u0440\u0435\u0439\u0441\u0430\u043c \u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041e\u0442\u0437\u044b\u0432\u044b \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0432\u0441\u0435 \u043e\u0442\u0437\u044b\u0432\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 review/ - URL \u0415\u0441\u043b\u0438 \u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0442\u0437\u044b\u0432 , \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043c: create_review/ - URL","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21162"},{"location":"lr_2/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 2 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lr_2/#models","text":"\u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 model.py from django.db import models r = () # \u043f\u0443\u0441\u0442\u043e\u0439 \u043a\u0430\u0440\u0442\u0435\u0436 class Registration_user(models.Model): first_name = models.CharField(\"\u0418\u043c\u044f\", max_length=30, null=False) last_name = models.CharField(\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", max_length=30, null=False) passport_number = models.CharField(\"\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\", primary_key=True, max_length=30) def __str__(self): return self.passport_number class Flight(models.Model): number_flight = models.CharField(\"\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430\", primary_key=True, max_length=30) date = models.DateField(\"\u0414\u0430\u0442\u0430 \u0432\u044b\u043b\u0435\u0442\u0430\", null=False, unique=True) def __str__(self) -> str: return self.number_flight class Ticket(models.Model): LIST_OF_PLASEC_IN_PLANE = [r + (f\"{i}\", f\"{i}\") for i in range(1, 31)] place_in_plane = models.CharField( \"\u041c\u0435\u0441\u0442\u043e\", primary_key=True, max_length=2, choices=LIST_OF_PLASEC_IN_PLANE, default=\"-1\" ) passport_number = models.ForeignKey(Registration_user, on_delete=models.CASCADE) number_flight = models.ForeignKey(Flight, on_delete=models.CASCADE) class Review(models.Model): id = models.AutoField(primary_key=True) number_flight = models.ForeignKey( Flight, on_delete=models.CASCADE, to_field=\"number_flight\", related_name=\"number_flight_2\" ) comment = models.TextField(\"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\", null=False) RATE_NUMBER = [ (\"1\", \"1\"), (\"2\", \"2\"), (\"3\", \"3\"), (\"4\", \"4\"), (\"5\", \"5\"), (\"6\", \"6\"), (\"7\", \"7\"), (\"8\", \"8\"), (\"9\", \"9\"), (\"10\", \"10\"), ] rate = models.CharField(\"\u041e\u0446\u0435\u043d\u043a\u0430\", max_length=2, choices=RATE_NUMBER) sing_author = models.CharField(\"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0430\u0448 \u043d\u0438\u043a\", max_length=30)","title":"Models"},{"location":"lr_2/#views","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043a\u0430\u043a \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0442\u0430\u043a \u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 views.py from django.shortcuts import redirect, render from django.views.generic.edit import CreateView, DeleteView, UpdateView from django.views.generic.list import ListView from .models import Flight, Registration_user, Review, Ticket def get_main_title(request): return render(request, \"templates/index.html\") class Reg_user(CreateView): model = Registration_user fields = [ \"first_name\", \"last_name\", \"passport_number\", ] template_name = \"reg_users.html\" success_url = \"/\" class Book(CreateView): model = Ticket fields = [ \"place_in_plane\", \"passport_number\", \"number_flight\", ] template_name = \"book.html\" success_url = \"/trip/\" class Trip(ListView): model = Flight template_name = \"trip.html\" def get_current_book(request, passport_user): current_book = Ticket.objects.filter(passport_number=passport_user) current_book = {\"object_list\": current_book} return render(request, \"templates/current_book.html\", current_book) def my_book(request): if \"id_passport\" in request.POST: passport = int(request.POST[\"id_passport\"]) return redirect(f\"/current_book/{passport}/\") else: return render(request, \"templates/choose_passport_for_book.html\") class Update_ticket(UpdateView): model = Ticket fields = [ \"place_in_plane\", \"passport_number\", \"number_flight\", ] template_name = \"up_ticket.html\" success_url = \"/choose_passport_for_book/\" def all_passengers(request, flight_num): needed_passports = Ticket.objects.filter(number_flight=flight_num).values_list( \"passport_number\" ) passengers = Registration_user.objects.filter(passport_number__in=needed_passports) context = { \"object_list\": passengers, \"object_list_flight\": flight_num, } return render(request, \"all_passengers.html\", context) class Delete_ticket(DeleteView): model = Ticket fields = [ \"place_in_plane\", \"passport_number\", \"number_flight\", ] template_name = \"del_ticket.html\" success_url = \"/choose_passport_for_book/\" class Create_review(CreateView): model = Review fields = [ \"number_flight\", \"comment\", \"rate\", \"sing_author\", ] template_name = \"create_review.html\" success_url = \"/review/\" class All_reviews(ListView): model = Review template_name = \"all_reviews.html\"","title":"Views"},{"location":"lr_2/#urls","text":"urls.py from django.contrib import admin from django.urls import path from . import views urlpatterns = [ path(\"registration/\", views.Reg_user.as_view(), name=\"reg_users\"), path(\"\", views.get_main_title, name=\"index\"), path(\"admin/\", admin.site.urls), path(\"book/\", views.Book.as_view(), name=\"book\"), path(\"trip/\", views.Trip.as_view(), name=\"trip\"), path(\"current_book/<int:passport_user>/\", views.get_current_book, name=\"current_book\"), path(\"choose_passport_for_book/\", views.my_book, name=\"choose_passport_for_book\"), path(\"up_ticket/<int:pk>\", views.Update_ticket.as_view(), name=\"update_ticket\"), path(\"del_ticket/<int:pk>\", views.Delete_ticket.as_view(), name=\"delete_ticket\"), path(\"all_passangers/<int:flight_num>\", views.all_passengers, name=\"all_passangers\"), path(\"create_review/\", views.Create_review.as_view(), name=\"create_review\"), path(\"review/\", views.All_reviews.as_view(), name=\"reviews\"), ]","title":"URLs"},{"location":"lr_2/#_1","text":"registration/ - URL","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"},{"location":"lr_2/#_2","text":"\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 choose_passport_for_book/ - URL \u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u043c\u043e\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0432\u043e\u0439 \u043f\u0430\u0441\u043f\u043e\u0440\u0442, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0435\u0433\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u2193 \u2193 current_book/123/ - URL, \u0433\u0434\u0435 123 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043f\u0430\u0441\u043f\u043e\u0440\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u0432 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u0441\u044e\u0434\u0430: up_ticket/17 - URL, \u0433\u0434\u0435 17 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430 \u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u0432 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u0441\u044e\u0434\u0430: del_ticket/17 - URL, \u0433\u0434\u0435 17 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445"},{"location":"lr_2/#django-admin","text":"","title":"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0440\u0435\u0433\u0435\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 Django-admin"},{"location":"lr_2/#_3","text":"\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u0420\u0435\u0439\u0441\u044b \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432, \u043e\u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0441\u0430 trip/ - URL \u2193 all_passangers/333 - URL, \u0433\u0434\u0435 333 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430"},{"location":"lr_2/#_4","text":"\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041e\u0442\u0437\u044b\u0432\u044b \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0432\u0441\u0435 \u043e\u0442\u0437\u044b\u0432\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 review/ - URL \u0415\u0441\u043b\u0438 \u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0442\u0437\u044b\u0432 , \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043c: create_review/ - URL","title":"\u041e\u0442\u0437\u044b\u0432\u044b \u043a \u0440\u0435\u0439\u0441\u0430\u043c"},{"location":"lr_3/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 3 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django \u0438 djangorestframework \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u0438\u0435\u043c \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 \u0440\u0430\u0431\u043e\u0442\u044b . \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b: 1. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b 3.1 \u0438 3.2 2. \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0441\u0432\u043e\u0439, \u0435\u0441\u0442\u044c 3 \u0441\u043f\u043e\u0441\u043e\u0431\u0430: 2.1. \u041f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. 2.3. \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043f\u043e \u043a\u0443\u0440\u0441\u0443 \u00ab\u041e\u0441\u043d\u043e\u0432\u044b \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\u00bb (https://drive.google.com/file/d/174gPjJ7AOHfzteYcobPY0x7sFBTkN1Xx/view?usp=sharing). 2.3. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \u0414\u0430\u0432\u0438\u0434\u0430 \u043f\u043e \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0442-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435. 2.4. \u0415\u0441\u043b\u0438 \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u043b\u044f \u043f\u043e\u0440\u0444\u0442\u043e\u043b\u0438\u043e \u0438 \u0437\u0430\u0434\u0435\u043f\u043b\u043e\u0438\u0442\u044c, \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c \u0441 \u0410\u043d\u0442\u043e\u043d\u043e\u043c \u0418\u0433\u043e\u0440\u0435\u0443\u0432\u0438\u0447\u0435\u043c \u0438 \u043e\u043d \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0436\u043d\u044b\u0445 \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u0442\u0435\u043c (\u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435 \u0448\u0430\u0433\u0438 \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0447\u0430\u0449\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438). \u041f\u043e \u043b\u044e\u0431\u043e\u043c\u0443 \u0438\u0437 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438\u043b\u0438 \u043c\u0435\u043d\u0442\u043e\u0440\u043e\u043c. \u0412 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21164 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0447\u0430\u0441\u0442\u044c(\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434) \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u0436\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443. 3. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 DjangoORM (\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438). \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438, \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django ORM \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Django ORM (\u0412\u0438\u0434\u0435\u043e) - 3.1 4. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438). \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: - \u041f\u0443\u043d\u043a\u0442\u044b 4, 5, 6 \u0432 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 3.1 - DJANGO API VIEWS, GENERICS, FILTER (\u0412\u0438\u0434\u0435\u043e) - JSON. \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440. \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u043c Django REST Framework Serializers (\u0412\u0438\u0434\u0435\u043e) - \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 Django ORM (\u0412\u0438\u0434\u0435\u043e) 5. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e / \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c / \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Djoser. \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: - Djoser ( DRF + Djoser \u0447\u0430\u0441\u0442\u044c 1. \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f ) (\u0412\u0438\u0434\u0435\u043e) 6. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 3.2 \u043f\u043e \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 (\u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438) 7. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u0441\u0435\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 endpoint-\u043e\u0432 \u0438\u0437 \u043f\u0443\u043d\u043a\u0442\u0430 3 \u0438 4 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Read the Docs \u0438\u043b\u0438 MkDocs. \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: - \u041f\u0443\u043d\u043a\u0442 3 \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u21163.2 \u0420\u0430\u0431\u043e\u0442\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u043e. \u041a\u043e\u0434 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043a\u0443\u0440\u0441\u0430, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c\u0438 \u0442\u0443\u0442. \u0420\u0430\u0431\u043e\u0442\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u044c \u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043f\u0440\u0438\u0441\u043b\u0430\u0442\u044c \u0432\u0438\u0434\u0435\u043e \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. ) \u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 pgAdmin - postgreSQL: Models model.py from django.db import models class TypeRoom(models.Model): id_type = models.AutoField(\"id\",primary_key=True) facilities = models.TextField(\"\u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430\") count_places_in_room = models.IntegerField(\"\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442 \u0432 \u043d\u043e\u043c\u0435\u0440\u0435\",null=False) name_type = models.CharField(\"\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0442\u0438\u043f\u0430\",max_length=400, null=False) class Room(models.Model): id_room = models.AutoField(primary_key=True) type = models.ForeignKey(\"TypeRoom\",on_delete=models.CASCADE, verbose_name=\"\u0442\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b\") room_number = models.IntegerField(\"\u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\", null=False) class PriceConstructor(models.Model): id_price = models.AutoField(primary_key=True) type = models.ForeignKey(\"TypeRoom\",on_delete=models.CASCADE, verbose_name=\"\u0442\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b\") data_start = models.DateField(\"\u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430\", null=False) data_end = models.DateField(\"\u0414\u0430\u0442\u0430 \u043a\u043e\u043d\u0446\u0430\", null=False) price = models.FloatField(\"\u0446\u0435\u043d\u0430\", null=False) class Workers(models.Model): table_number = models.IntegerField(\"\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440\", primary_key=True, null=False) fio = models.CharField(\"\u0424\u0418\u041e\", null=False, max_length=300) phone_worker = models.CharField(\"\u0442\u0435\u043b\u0435\u0444\u043e\u043d \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\", max_length=13, null=False, unique=True) class Client(models.Model): passport = models.CharField(\"\u043f\u0430\u0441\u043f\u043e\u0440\u0442\", max_length=20, primary_key=True) phone_client = models.CharField(\"\u0442\u0435\u043b\u0435\u0444\u043e\u043d \u043a\u043b\u0438\u0435\u043d\u0442\u0430\", max_length=13, null=False) email_client = models.CharField(\"\u043f\u043e\u0447\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\", max_length=300, null=False) name = models.CharField(\"\u0438\u043c\u044f\", max_length=20, null=False) last_name = models.CharField(\"\u0444\u0430\u043c\u0438\u043b\u0438\u044f\", max_length=20, null=False) father_name = models.CharField(\"\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e\", max_length=20, null=True) address = models.CharField(\"\u0430\u0434\u0440\u0435\u0441 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f\", max_length=300, null=True) class Book(models.Model): status_type = ( (\"C\", \"\u0421\u0432\u043e\u0431\u043e\u0434\u043d\u043e\"), (\"\u0417\", \"\u0417\u0430\u043d\u044f\u0442\u043e\"), ) status_payment= ( (\"\u041e\", \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d\u043e\"), (\"\u041d\", \"\u041d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043e\"), ) number_contract = models.CharField(\"\u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430\", max_length=400, primary_key=True) room = models.ForeignKey(\"Room\", on_delete=models.CASCADE, verbose_name=\"\u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\") identifier_worker = models.ForeignKey(\"Workers\", on_delete=models.CASCADE, verbose_name=\"\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\") passport_client = models.ForeignKey(\"Client\", on_delete=models.CASCADE, verbose_name=\"\u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\") data_start_living = models.DateField(\"\u0434\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430\", null=False) data_end_living = models.DateField(\"\u0434\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430\", null=False) status_book = models.CharField(\"\u0441\u0442\u0430\u0442\u0443\u0441 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\", choices=status_type, null=False, max_length=20) status_payment = models.CharField(\"\u0441\u0442\u0430\u0442\u0443\u0441 \u043e\u043f\u043b\u0430\u0442\u044b\", choices=status_payment, null=False, max_length=20) Views views.py from django.shortcuts import render from rest_framework.views import APIView from .models import TypeRoom, Client, PriceConstructor, Room, Workers, Book from rest_framework import serializers, generics, status from rest_framework.response import Response from .serializers import * from datetime import datetime from rest_framework.permissions import IsAuthenticated from rest_framework.authentication import TokenAuthentication class AllClients(generics.ListAPIView): queryset = Client.objects.all() serializer_class = ClientSerializer authentication_classes = (TokenAuthentication,) class AllBook(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer authentication_classes = (TokenAuthentication,) class AllWorkers(generics.ListAPIView): queryset = Workers.objects.all() serializer_class = WorkersSerializer authentication_classes = (TokenAuthentication,) class AllBookWithInfoAboutRoomAndTypeRoom(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializerWithInfoAboutRoomAndTypeRoom class CreateClient(generics.CreateAPIView, generics.ListAPIView): queryset = Client.objects.all() serializer_class = ClientCreateSerializer class GetCurrentWorker(APIView): def get(self, request, pk): worker = Workers.objects.filter(pk=pk) serializer = WorkersSerializer(worker, many=True) return Response({\"Workers\": serializer.data}) class CreateBook(generics.CreateAPIView): serializer_class = BookSerializer authentication_classes = (TokenAuthentication,) def get(self, request): today = datetime.date(datetime.now()) book = Book.objects.filter(data_end_living__lte=today) serializer = BookSerializerOnlyRoom(book, many=True) return Response({\"\u0421\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430 \u0441\u0435\u0433\u043e\u0434\u043d\u044f\": serializer.data}) def post(self, request): serializer = BookSerializer(data=request.data) needed_books = Book.objects.filter(data_end_living__lte=self.request.data[\"data_start_living\"]) all_rooms = Room.objects.all() current_room = request.data[\"room\"] if len(needed_books) == 0: return Response(\"\u043d\u0435\u0442 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0430\u0442\u0443\", status=status.HTTP_400_BAD_REQUEST) serializer.is_valid(raise_exception=True) serializer.save() return Response(\"\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043e\", status=status.HTTP_201_CREATED) class CreateWorker(generics.CreateAPIView, generics.ListAPIView): queryset = Workers.objects.all() serializer_class = WorkerCreateSerializer Urls urls.py from django.urls import path, include, re_path from .views import * app_name = \"site_hotel\" urlpatterns = [ path('all_clients/', AllClients.as_view()), path('all_book/', AllBook.as_view()), path('all_workers/', AllWorkers.as_view()), path('all_books_with_room/', AllBookWithInfoAboutRoomAndTypeRoom.as_view()), path('create_client/', CreateClient.as_view()), path('get_worker/<int:pk>', GetCurrentWorker.as_view()), path('create_book/', CreateBook.as_view()), path('create_worker/', CreateWorker.as_view()), path('auth/', include('djoser.urls')), ] Serializers serializers.py from rest_framework import serializers from .models import TypeRoom, Client, PriceConstructor, Room, Workers, Book class ClientSerializer(serializers.ModelSerializer): class Meta: model = Client fields = \"__all__\" class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = \"__all__\" class BookSerializerOnlyRoom(serializers.ModelSerializer): class Meta: model = Book fields = [\"room\"] class WorkersSerializer(serializers.ModelSerializer): class Meta: model = Workers fields = \"__all__\" class TypeRoomSerializer(serializers.ModelSerializer): class Meta: model = TypeRoom fields = \"__all__\" class RoomSerializer(serializers.ModelSerializer): type = TypeRoomSerializer() class Meta: model = Room fields = \"__all__\" class BookSerializerWithInfoAboutRoomAndTypeRoom(serializers.ModelSerializer): room = RoomSerializer() class Meta: model = Book fields = \"__all__\" class ClientCreateSerializer(serializers.ModelSerializer): class Meta: model = Client fields = \"__all__\" class WorkerCreateSerializer(serializers.ModelSerializer): class Meta: model = Workers fields = \"__all__\" API /api/all_book/ GET Description: Parameters Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer Responses Code Description Schema 200 object /api/all_books_with_room/ GET Description: Parameters Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer Responses Code Description Schema 200 object /api/all_clients/ GET Description: Parameters Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer Responses Code Description Schema 200 object /api/all_workers/ GET Description: Parameters Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer Responses Code Description Schema 200 object /api/auth/users/ GET Description: Parameters Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer Responses Code Description Schema 200 object POST Description: Parameters Name Located in Description Required Schema data body Yes UserCreate Responses Code Description Schema 201 UserCreate /api/auth/users/activation/ POST Description: Parameters Name Located in Description Required Schema data body Yes Activation Responses Code Description Schema 201 Activation /api/auth/users/me/ GET Description: Parameters Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer Responses Code Description Schema 200 object PUT Description: Parameters Name Located in Description Required Schema data body Yes User Responses Code Description Schema 200 User PATCH Description: Parameters Name Located in Description Required Schema data body Yes User Responses Code Description Schema 200 User DELETE Description: Parameters Name Located in Description Required Schema Responses Code Description 204 /api/auth/users/resend_activation/ POST Description: Parameters Name Located in Description Required Schema data body Yes SendEmailReset Responses Code Description Schema 201 SendEmailReset /api/auth/users/reset_password/ POST Description: Parameters Name Located in Description Required Schema data body Yes SendEmailReset Responses Code Description Schema 201 SendEmailReset /api/auth/users/reset_password_confirm/ POST Description: Parameters Name Located in Description Required Schema data body Yes PasswordResetConfirm Responses Code Description Schema 201 PasswordResetConfirm /api/auth/users/reset_username/ POST Description: Parameters Name Located in Description Required Schema data body Yes SendEmailReset Responses Code Description Schema 201 SendEmailReset /api/auth/users/reset_username_confirm/ POST Description: Parameters Name Located in Description Required Schema data body Yes UsernameResetConfirm Responses Code Description Schema 201 UsernameResetConfirm /api/auth/users/set_password/ POST Description: Parameters Name Located in Description Required Schema data body Yes SetPassword Responses Code Description Schema 201 SetPassword /api/auth/users/set_username/ POST Description: Parameters Name Located in Description Required Schema data body Yes SetUsername Responses Code Description Schema 201 SetUsername /api/auth/users/{id}/ GET Description: Parameters Name Located in Description Required Schema id path A unique integer value identifying this user. Yes integer Responses Code Description Schema 200 User PUT Description: Parameters Name Located in Description Required Schema id path A unique integer value identifying this user. Yes integer data body Yes User Responses Code Description Schema 200 User PATCH Description: Parameters Name Located in Description Required Schema id path A unique integer value identifying this user. Yes integer data body Yes User Responses Code Description Schema 200 User DELETE Description: Parameters Name Located in Description Required Schema id path A unique integer value identifying this user. Yes integer Responses Code Description 204 /api/create_book/ GET Description: Parameters Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer Responses Code Description Schema 200 object POST Description: Parameters Name Located in Description Required Schema data body Yes Book Responses Code Description Schema 201 Book /api/create_client/ GET Description: Parameters Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer Responses Code Description Schema 200 object POST Description: Parameters Name Located in Description Required Schema data body Yes ClientCreate Responses Code Description Schema 201 ClientCreate /api/create_worker/ GET Description: Parameters Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer Responses Code Description Schema 200 object POST Description: Parameters Name Located in Description Required Schema data body Yes WorkerCreate Responses Code Description Schema 201 WorkerCreate /api/get_worker/{id} GET Description: Parameters Name Located in Description Required Schema id path Yes string Responses Code Description 200 /auth/token/login/ POST Description: Use this endpoint to obtain user authentication token. Parameters Name Located in Description Required Schema data body Yes TokenCreate Responses Code Description Schema 201 TokenCreate /auth/token/logout/ POST Description: Use this endpoint to logout user (remove user authentication token). Parameters Name Located in Description Required Schema Responses Code Description 201","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21163"},{"location":"lr_3/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django \u0438 djangorestframework \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u0438\u0435\u043c \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 \u0440\u0430\u0431\u043e\u0442\u044b . \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b: 1. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b 3.1 \u0438 3.2 2. \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0441\u0432\u043e\u0439, \u0435\u0441\u0442\u044c 3 \u0441\u043f\u043e\u0441\u043e\u0431\u0430: 2.1. \u041f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. 2.3. \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043f\u043e \u043a\u0443\u0440\u0441\u0443 \u00ab\u041e\u0441\u043d\u043e\u0432\u044b \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\u00bb (https://drive.google.com/file/d/174gPjJ7AOHfzteYcobPY0x7sFBTkN1Xx/view?usp=sharing). 2.3. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \u0414\u0430\u0432\u0438\u0434\u0430 \u043f\u043e \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0442-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435. 2.4. \u0415\u0441\u043b\u0438 \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0434\u043b\u044f \u043f\u043e\u0440\u0444\u0442\u043e\u043b\u0438\u043e \u0438 \u0437\u0430\u0434\u0435\u043f\u043b\u043e\u0438\u0442\u044c, \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c \u0441 \u0410\u043d\u0442\u043e\u043d\u043e\u043c \u0418\u0433\u043e\u0440\u0435\u0443\u0432\u0438\u0447\u0435\u043c \u0438 \u043e\u043d \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0436\u043d\u044b\u0445 \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u0442\u0435\u043c (\u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435 \u0448\u0430\u0433\u0438 \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0447\u0430\u0449\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438). \u041f\u043e \u043b\u044e\u0431\u043e\u043c\u0443 \u0438\u0437 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438\u043b\u0438 \u043c\u0435\u043d\u0442\u043e\u0440\u043e\u043c. \u0412 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21164 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0447\u0430\u0441\u0442\u044c(\u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434) \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u0436\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443. 3. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 DjangoORM (\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438). \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438, \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django ORM \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Django ORM (\u0412\u0438\u0434\u0435\u043e) - 3.1 4. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438). \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: - \u041f\u0443\u043d\u043a\u0442\u044b 4, 5, 6 \u0432 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 3.1 - DJANGO API VIEWS, GENERICS, FILTER (\u0412\u0438\u0434\u0435\u043e) - JSON. \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440. \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u043c Django REST Framework Serializers (\u0412\u0438\u0434\u0435\u043e) - \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 Django ORM (\u0412\u0438\u0434\u0435\u043e) 5. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e / \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c / \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Djoser. \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: - Djoser ( DRF + Djoser \u0447\u0430\u0441\u0442\u044c 1. \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f ) (\u0412\u0438\u0434\u0435\u043e) 6. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 3.2 \u043f\u043e \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 (\u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438) 7. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u0441\u0435\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 endpoint-\u043e\u0432 \u0438\u0437 \u043f\u0443\u043d\u043a\u0442\u0430 3 \u0438 4 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Read the Docs \u0438\u043b\u0438 MkDocs. \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: - \u041f\u0443\u043d\u043a\u0442 3 \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u21163.2 \u0420\u0430\u0431\u043e\u0442\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u043e. \u041a\u043e\u0434 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043a\u0443\u0440\u0441\u0430, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c\u0438 \u0442\u0443\u0442. \u0420\u0430\u0431\u043e\u0442\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u044c \u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043f\u0440\u0438\u0441\u043b\u0430\u0442\u044c \u0432\u0438\u0434\u0435\u043e \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. )","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 3 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lr_3/#_1","text":"\u0432 pgAdmin - postgreSQL:","title":"\u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lr_3/#models","text":"model.py from django.db import models class TypeRoom(models.Model): id_type = models.AutoField(\"id\",primary_key=True) facilities = models.TextField(\"\u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430\") count_places_in_room = models.IntegerField(\"\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442 \u0432 \u043d\u043e\u043c\u0435\u0440\u0435\",null=False) name_type = models.CharField(\"\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0442\u0438\u043f\u0430\",max_length=400, null=False) class Room(models.Model): id_room = models.AutoField(primary_key=True) type = models.ForeignKey(\"TypeRoom\",on_delete=models.CASCADE, verbose_name=\"\u0442\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b\") room_number = models.IntegerField(\"\u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\", null=False) class PriceConstructor(models.Model): id_price = models.AutoField(primary_key=True) type = models.ForeignKey(\"TypeRoom\",on_delete=models.CASCADE, verbose_name=\"\u0442\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b\") data_start = models.DateField(\"\u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430\", null=False) data_end = models.DateField(\"\u0414\u0430\u0442\u0430 \u043a\u043e\u043d\u0446\u0430\", null=False) price = models.FloatField(\"\u0446\u0435\u043d\u0430\", null=False) class Workers(models.Model): table_number = models.IntegerField(\"\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440\", primary_key=True, null=False) fio = models.CharField(\"\u0424\u0418\u041e\", null=False, max_length=300) phone_worker = models.CharField(\"\u0442\u0435\u043b\u0435\u0444\u043e\u043d \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\", max_length=13, null=False, unique=True) class Client(models.Model): passport = models.CharField(\"\u043f\u0430\u0441\u043f\u043e\u0440\u0442\", max_length=20, primary_key=True) phone_client = models.CharField(\"\u0442\u0435\u043b\u0435\u0444\u043e\u043d \u043a\u043b\u0438\u0435\u043d\u0442\u0430\", max_length=13, null=False) email_client = models.CharField(\"\u043f\u043e\u0447\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\", max_length=300, null=False) name = models.CharField(\"\u0438\u043c\u044f\", max_length=20, null=False) last_name = models.CharField(\"\u0444\u0430\u043c\u0438\u043b\u0438\u044f\", max_length=20, null=False) father_name = models.CharField(\"\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e\", max_length=20, null=True) address = models.CharField(\"\u0430\u0434\u0440\u0435\u0441 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f\", max_length=300, null=True) class Book(models.Model): status_type = ( (\"C\", \"\u0421\u0432\u043e\u0431\u043e\u0434\u043d\u043e\"), (\"\u0417\", \"\u0417\u0430\u043d\u044f\u0442\u043e\"), ) status_payment= ( (\"\u041e\", \"\u041e\u043f\u043b\u0430\u0447\u0435\u043d\u043e\"), (\"\u041d\", \"\u041d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043e\"), ) number_contract = models.CharField(\"\u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430\", max_length=400, primary_key=True) room = models.ForeignKey(\"Room\", on_delete=models.CASCADE, verbose_name=\"\u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\") identifier_worker = models.ForeignKey(\"Workers\", on_delete=models.CASCADE, verbose_name=\"\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\") passport_client = models.ForeignKey(\"Client\", on_delete=models.CASCADE, verbose_name=\"\u043f\u0430\u0441\u0441\u043f\u043e\u0440\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\") data_start_living = models.DateField(\"\u0434\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430\", null=False) data_end_living = models.DateField(\"\u0434\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430\", null=False) status_book = models.CharField(\"\u0441\u0442\u0430\u0442\u0443\u0441 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\", choices=status_type, null=False, max_length=20) status_payment = models.CharField(\"\u0441\u0442\u0430\u0442\u0443\u0441 \u043e\u043f\u043b\u0430\u0442\u044b\", choices=status_payment, null=False, max_length=20)","title":"Models"},{"location":"lr_3/#views","text":"views.py from django.shortcuts import render from rest_framework.views import APIView from .models import TypeRoom, Client, PriceConstructor, Room, Workers, Book from rest_framework import serializers, generics, status from rest_framework.response import Response from .serializers import * from datetime import datetime from rest_framework.permissions import IsAuthenticated from rest_framework.authentication import TokenAuthentication class AllClients(generics.ListAPIView): queryset = Client.objects.all() serializer_class = ClientSerializer authentication_classes = (TokenAuthentication,) class AllBook(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer authentication_classes = (TokenAuthentication,) class AllWorkers(generics.ListAPIView): queryset = Workers.objects.all() serializer_class = WorkersSerializer authentication_classes = (TokenAuthentication,) class AllBookWithInfoAboutRoomAndTypeRoom(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializerWithInfoAboutRoomAndTypeRoom class CreateClient(generics.CreateAPIView, generics.ListAPIView): queryset = Client.objects.all() serializer_class = ClientCreateSerializer class GetCurrentWorker(APIView): def get(self, request, pk): worker = Workers.objects.filter(pk=pk) serializer = WorkersSerializer(worker, many=True) return Response({\"Workers\": serializer.data}) class CreateBook(generics.CreateAPIView): serializer_class = BookSerializer authentication_classes = (TokenAuthentication,) def get(self, request): today = datetime.date(datetime.now()) book = Book.objects.filter(data_end_living__lte=today) serializer = BookSerializerOnlyRoom(book, many=True) return Response({\"\u0421\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430 \u0441\u0435\u0433\u043e\u0434\u043d\u044f\": serializer.data}) def post(self, request): serializer = BookSerializer(data=request.data) needed_books = Book.objects.filter(data_end_living__lte=self.request.data[\"data_start_living\"]) all_rooms = Room.objects.all() current_room = request.data[\"room\"] if len(needed_books) == 0: return Response(\"\u043d\u0435\u0442 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0430\u0442\u0443\", status=status.HTTP_400_BAD_REQUEST) serializer.is_valid(raise_exception=True) serializer.save() return Response(\"\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043e\", status=status.HTTP_201_CREATED) class CreateWorker(generics.CreateAPIView, generics.ListAPIView): queryset = Workers.objects.all() serializer_class = WorkerCreateSerializer","title":"Views"},{"location":"lr_3/#urls","text":"urls.py from django.urls import path, include, re_path from .views import * app_name = \"site_hotel\" urlpatterns = [ path('all_clients/', AllClients.as_view()), path('all_book/', AllBook.as_view()), path('all_workers/', AllWorkers.as_view()), path('all_books_with_room/', AllBookWithInfoAboutRoomAndTypeRoom.as_view()), path('create_client/', CreateClient.as_view()), path('get_worker/<int:pk>', GetCurrentWorker.as_view()), path('create_book/', CreateBook.as_view()), path('create_worker/', CreateWorker.as_view()), path('auth/', include('djoser.urls')), ]","title":"Urls"},{"location":"lr_3/#serializers","text":"serializers.py from rest_framework import serializers from .models import TypeRoom, Client, PriceConstructor, Room, Workers, Book class ClientSerializer(serializers.ModelSerializer): class Meta: model = Client fields = \"__all__\" class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = \"__all__\" class BookSerializerOnlyRoom(serializers.ModelSerializer): class Meta: model = Book fields = [\"room\"] class WorkersSerializer(serializers.ModelSerializer): class Meta: model = Workers fields = \"__all__\" class TypeRoomSerializer(serializers.ModelSerializer): class Meta: model = TypeRoom fields = \"__all__\" class RoomSerializer(serializers.ModelSerializer): type = TypeRoomSerializer() class Meta: model = Room fields = \"__all__\" class BookSerializerWithInfoAboutRoomAndTypeRoom(serializers.ModelSerializer): room = RoomSerializer() class Meta: model = Book fields = \"__all__\" class ClientCreateSerializer(serializers.ModelSerializer): class Meta: model = Client fields = \"__all__\" class WorkerCreateSerializer(serializers.ModelSerializer): class Meta: model = Workers fields = \"__all__\"","title":"Serializers"},{"location":"lr_3/#api","text":"","title":"API"},{"location":"lr_3/#apiall_book","text":"","title":"/api/all_book/"},{"location":"lr_3/#get","text":"","title":"GET"},{"location":"lr_3/#description","text":"","title":"Description:"},{"location":"lr_3/#parameters","text":"Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer","title":"Parameters"},{"location":"lr_3/#responses","text":"Code Description Schema 200 object","title":"Responses"},{"location":"lr_3/#apiall_books_with_room","text":"","title":"/api/all_books_with_room/"},{"location":"lr_3/#get_1","text":"","title":"GET"},{"location":"lr_3/#description_1","text":"","title":"Description:"},{"location":"lr_3/#parameters_1","text":"Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer","title":"Parameters"},{"location":"lr_3/#responses_1","text":"Code Description Schema 200 object","title":"Responses"},{"location":"lr_3/#apiall_clients","text":"","title":"/api/all_clients/"},{"location":"lr_3/#get_2","text":"","title":"GET"},{"location":"lr_3/#description_2","text":"","title":"Description:"},{"location":"lr_3/#parameters_2","text":"Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer","title":"Parameters"},{"location":"lr_3/#responses_2","text":"Code Description Schema 200 object","title":"Responses"},{"location":"lr_3/#apiall_workers","text":"","title":"/api/all_workers/"},{"location":"lr_3/#get_3","text":"","title":"GET"},{"location":"lr_3/#description_3","text":"","title":"Description:"},{"location":"lr_3/#parameters_3","text":"Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer","title":"Parameters"},{"location":"lr_3/#responses_3","text":"Code Description Schema 200 object","title":"Responses"},{"location":"lr_3/#apiauthusers","text":"","title":"/api/auth/users/"},{"location":"lr_3/#get_4","text":"","title":"GET"},{"location":"lr_3/#description_4","text":"","title":"Description:"},{"location":"lr_3/#parameters_4","text":"Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer","title":"Parameters"},{"location":"lr_3/#responses_4","text":"Code Description Schema 200 object","title":"Responses"},{"location":"lr_3/#post","text":"","title":"POST"},{"location":"lr_3/#description_5","text":"","title":"Description:"},{"location":"lr_3/#parameters_5","text":"Name Located in Description Required Schema data body Yes UserCreate","title":"Parameters"},{"location":"lr_3/#responses_5","text":"Code Description Schema 201 UserCreate","title":"Responses"},{"location":"lr_3/#apiauthusersactivation","text":"","title":"/api/auth/users/activation/"},{"location":"lr_3/#post_1","text":"","title":"POST"},{"location":"lr_3/#description_6","text":"","title":"Description:"},{"location":"lr_3/#parameters_6","text":"Name Located in Description Required Schema data body Yes Activation","title":"Parameters"},{"location":"lr_3/#responses_6","text":"Code Description Schema 201 Activation","title":"Responses"},{"location":"lr_3/#apiauthusersme","text":"","title":"/api/auth/users/me/"},{"location":"lr_3/#get_5","text":"","title":"GET"},{"location":"lr_3/#description_7","text":"","title":"Description:"},{"location":"lr_3/#parameters_7","text":"Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer","title":"Parameters"},{"location":"lr_3/#responses_7","text":"Code Description Schema 200 object","title":"Responses"},{"location":"lr_3/#put","text":"","title":"PUT"},{"location":"lr_3/#description_8","text":"","title":"Description:"},{"location":"lr_3/#parameters_8","text":"Name Located in Description Required Schema data body Yes User","title":"Parameters"},{"location":"lr_3/#responses_8","text":"Code Description Schema 200 User","title":"Responses"},{"location":"lr_3/#patch","text":"","title":"PATCH"},{"location":"lr_3/#description_9","text":"","title":"Description:"},{"location":"lr_3/#parameters_9","text":"Name Located in Description Required Schema data body Yes User","title":"Parameters"},{"location":"lr_3/#responses_9","text":"Code Description Schema 200 User","title":"Responses"},{"location":"lr_3/#delete","text":"","title":"DELETE"},{"location":"lr_3/#description_10","text":"","title":"Description:"},{"location":"lr_3/#parameters_10","text":"Name Located in Description Required Schema","title":"Parameters"},{"location":"lr_3/#responses_10","text":"Code Description 204","title":"Responses"},{"location":"lr_3/#apiauthusersresend_activation","text":"","title":"/api/auth/users/resend_activation/"},{"location":"lr_3/#post_2","text":"","title":"POST"},{"location":"lr_3/#description_11","text":"","title":"Description:"},{"location":"lr_3/#parameters_11","text":"Name Located in Description Required Schema data body Yes SendEmailReset","title":"Parameters"},{"location":"lr_3/#responses_11","text":"Code Description Schema 201 SendEmailReset","title":"Responses"},{"location":"lr_3/#apiauthusersreset_password","text":"","title":"/api/auth/users/reset_password/"},{"location":"lr_3/#post_3","text":"","title":"POST"},{"location":"lr_3/#description_12","text":"","title":"Description:"},{"location":"lr_3/#parameters_12","text":"Name Located in Description Required Schema data body Yes SendEmailReset","title":"Parameters"},{"location":"lr_3/#responses_12","text":"Code Description Schema 201 SendEmailReset","title":"Responses"},{"location":"lr_3/#apiauthusersreset_password_confirm","text":"","title":"/api/auth/users/reset_password_confirm/"},{"location":"lr_3/#post_4","text":"","title":"POST"},{"location":"lr_3/#description_13","text":"","title":"Description:"},{"location":"lr_3/#parameters_13","text":"Name Located in Description Required Schema data body Yes PasswordResetConfirm","title":"Parameters"},{"location":"lr_3/#responses_13","text":"Code Description Schema 201 PasswordResetConfirm","title":"Responses"},{"location":"lr_3/#apiauthusersreset_username","text":"","title":"/api/auth/users/reset_username/"},{"location":"lr_3/#post_5","text":"","title":"POST"},{"location":"lr_3/#description_14","text":"","title":"Description:"},{"location":"lr_3/#parameters_14","text":"Name Located in Description Required Schema data body Yes SendEmailReset","title":"Parameters"},{"location":"lr_3/#responses_14","text":"Code Description Schema 201 SendEmailReset","title":"Responses"},{"location":"lr_3/#apiauthusersreset_username_confirm","text":"","title":"/api/auth/users/reset_username_confirm/"},{"location":"lr_3/#post_6","text":"","title":"POST"},{"location":"lr_3/#description_15","text":"","title":"Description:"},{"location":"lr_3/#parameters_15","text":"Name Located in Description Required Schema data body Yes UsernameResetConfirm","title":"Parameters"},{"location":"lr_3/#responses_15","text":"Code Description Schema 201 UsernameResetConfirm","title":"Responses"},{"location":"lr_3/#apiauthusersset_password","text":"","title":"/api/auth/users/set_password/"},{"location":"lr_3/#post_7","text":"","title":"POST"},{"location":"lr_3/#description_16","text":"","title":"Description:"},{"location":"lr_3/#parameters_16","text":"Name Located in Description Required Schema data body Yes SetPassword","title":"Parameters"},{"location":"lr_3/#responses_16","text":"Code Description Schema 201 SetPassword","title":"Responses"},{"location":"lr_3/#apiauthusersset_username","text":"","title":"/api/auth/users/set_username/"},{"location":"lr_3/#post_8","text":"","title":"POST"},{"location":"lr_3/#description_17","text":"","title":"Description:"},{"location":"lr_3/#parameters_17","text":"Name Located in Description Required Schema data body Yes SetUsername","title":"Parameters"},{"location":"lr_3/#responses_17","text":"Code Description Schema 201 SetUsername","title":"Responses"},{"location":"lr_3/#apiauthusersid","text":"","title":"/api/auth/users/{id}/"},{"location":"lr_3/#get_6","text":"","title":"GET"},{"location":"lr_3/#description_18","text":"","title":"Description:"},{"location":"lr_3/#parameters_18","text":"Name Located in Description Required Schema id path A unique integer value identifying this user. Yes integer","title":"Parameters"},{"location":"lr_3/#responses_18","text":"Code Description Schema 200 User","title":"Responses"},{"location":"lr_3/#put_1","text":"","title":"PUT"},{"location":"lr_3/#description_19","text":"","title":"Description:"},{"location":"lr_3/#parameters_19","text":"Name Located in Description Required Schema id path A unique integer value identifying this user. Yes integer data body Yes User","title":"Parameters"},{"location":"lr_3/#responses_19","text":"Code Description Schema 200 User","title":"Responses"},{"location":"lr_3/#patch_1","text":"","title":"PATCH"},{"location":"lr_3/#description_20","text":"","title":"Description:"},{"location":"lr_3/#parameters_20","text":"Name Located in Description Required Schema id path A unique integer value identifying this user. Yes integer data body Yes User","title":"Parameters"},{"location":"lr_3/#responses_20","text":"Code Description Schema 200 User","title":"Responses"},{"location":"lr_3/#delete_1","text":"","title":"DELETE"},{"location":"lr_3/#description_21","text":"","title":"Description:"},{"location":"lr_3/#parameters_21","text":"Name Located in Description Required Schema id path A unique integer value identifying this user. Yes integer","title":"Parameters"},{"location":"lr_3/#responses_21","text":"Code Description 204","title":"Responses"},{"location":"lr_3/#apicreate_book","text":"","title":"/api/create_book/"},{"location":"lr_3/#get_7","text":"","title":"GET"},{"location":"lr_3/#description_22","text":"","title":"Description:"},{"location":"lr_3/#parameters_22","text":"Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer","title":"Parameters"},{"location":"lr_3/#responses_22","text":"Code Description Schema 200 object","title":"Responses"},{"location":"lr_3/#post_9","text":"","title":"POST"},{"location":"lr_3/#description_23","text":"","title":"Description:"},{"location":"lr_3/#parameters_23","text":"Name Located in Description Required Schema data body Yes Book","title":"Parameters"},{"location":"lr_3/#responses_23","text":"Code Description Schema 201 Book","title":"Responses"},{"location":"lr_3/#apicreate_client","text":"","title":"/api/create_client/"},{"location":"lr_3/#get_8","text":"","title":"GET"},{"location":"lr_3/#description_24","text":"","title":"Description:"},{"location":"lr_3/#parameters_24","text":"Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer","title":"Parameters"},{"location":"lr_3/#responses_24","text":"Code Description Schema 200 object","title":"Responses"},{"location":"lr_3/#post_10","text":"","title":"POST"},{"location":"lr_3/#description_25","text":"","title":"Description:"},{"location":"lr_3/#parameters_25","text":"Name Located in Description Required Schema data body Yes ClientCreate","title":"Parameters"},{"location":"lr_3/#responses_25","text":"Code Description Schema 201 ClientCreate","title":"Responses"},{"location":"lr_3/#apicreate_worker","text":"","title":"/api/create_worker/"},{"location":"lr_3/#get_9","text":"","title":"GET"},{"location":"lr_3/#description_26","text":"","title":"Description:"},{"location":"lr_3/#parameters_26","text":"Name Located in Description Required Schema limit query Number of results to return per page. No integer offset query The initial index from which to return the results. No integer","title":"Parameters"},{"location":"lr_3/#responses_26","text":"Code Description Schema 200 object","title":"Responses"},{"location":"lr_3/#post_11","text":"","title":"POST"},{"location":"lr_3/#description_27","text":"","title":"Description:"},{"location":"lr_3/#parameters_27","text":"Name Located in Description Required Schema data body Yes WorkerCreate","title":"Parameters"},{"location":"lr_3/#responses_27","text":"Code Description Schema 201 WorkerCreate","title":"Responses"},{"location":"lr_3/#apiget_workerid","text":"","title":"/api/get_worker/{id}"},{"location":"lr_3/#get_10","text":"","title":"GET"},{"location":"lr_3/#description_28","text":"","title":"Description:"},{"location":"lr_3/#parameters_28","text":"Name Located in Description Required Schema id path Yes string","title":"Parameters"},{"location":"lr_3/#responses_28","text":"Code Description 200","title":"Responses"},{"location":"lr_3/#authtokenlogin","text":"","title":"/auth/token/login/"},{"location":"lr_3/#post_12","text":"","title":"POST"},{"location":"lr_3/#description_29","text":"Use this endpoint to obtain user authentication token.","title":"Description:"},{"location":"lr_3/#parameters_29","text":"Name Located in Description Required Schema data body Yes TokenCreate","title":"Parameters"},{"location":"lr_3/#responses_29","text":"Code Description Schema 201 TokenCreate","title":"Responses"},{"location":"lr_3/#authtokenlogout","text":"","title":"/auth/token/logout/"},{"location":"lr_3/#post_13","text":"","title":"POST"},{"location":"lr_3/#description_30","text":"Use this endpoint to logout user (remove user authentication token).","title":"Description:"},{"location":"lr_3/#parameters_30","text":"Name Located in Description Required Schema","title":"Parameters"},{"location":"lr_3/#responses_30","text":"Code Description 201","title":"Responses"},{"location":"pr_3/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 3.1 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b Django \u0437\u0430\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. model.py from django.db import models class Transport_owner(models.Model): id_owner = models.IntegerField(primary_key=True) last_name = models.CharField(max_length=30, null=False) first_name = models.CharField(max_length=30, null=False) date_birthday = models.DateField() class Transport(models.Model): id_car = models.IntegerField(primary_key=True) gov_number = models.CharField(max_length=15, null=False) marka = models.CharField(max_length=20, null=False) model_car = models.CharField(max_length=20, null=False) color = models.CharField(max_length=30, null=True) class Ownership(models.Model): id_owner_car = models.IntegerField(primary_key=True) id_owner = models.ForeignKey(Transport_owner, on_delete=models.CASCADE) id_car = models.ForeignKey(Transport, on_delete=models.CASCADE) date_start = models.DateField() sate_end = models.DateField(null=True) class Driver_doc(models.Model): id_doc = models.IntegerField(primary_key=True) id_owner = models.ForeignKey(Transport_owner, on_delete=models.CASCADE) number_doc = models.CharField(max_length=10, null=False) type_doc = models.CharField(max_length=10, null=False) date_start_doc = models.DateField() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 Transport_owner(1, 'Fam1', 'Name1', '1902-01-1').save() Transport_owner(2, 'Fam2', 'Name2', '1902-01-2').save() Transport_owner(3, 'Fam3', 'Name3', '1902-01-3').save() Transport_owner(4, 'Fam4', 'Name4', '1902-01-4').save() Transport_owner(5, 'Fam5', 'Name5', '1902-01-5').save() Transport_owner(6, 'Fam6', 'Name6', '1902-01-6').save() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Transport(0, 'AAA0', 'Mark0', 'Model0', 'color5').save() Transport(1, 'AAA1', 'Mark1', 'Model1', 'color5').save() Transport(2, 'AAA2', 'Mark2', 'Model2', 'color5').save() Transport(3, 'AAA3', 'Mark3', 'Model3', 'color5').save() Transport(4, 'AAA4', 'Mark4', 'Model4', 'color5').save() Transport(5, 'AAA5', 'Mark5', 'Model5', 'color5').save() Transport(6, 'AAA6', 'Mark6', 'Model6', 'color5').save() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 Driver_doc('1', '1', 'num1', 'type1', '1933-05-1').save() Driver_doc('2', '2', 'num2', 'type2', '1933-05-2').save() Driver_doc('3', '3', 'num3', 'type3', '1933-05-3').save() Driver_doc('4', '4', 'num4', 'type4', '1933-05-4').save() Driver_doc('5', '5', 'num5', 'type5', '1933-05-5').save() Driver_doc('6', '6', 'num6', 'type6', '1933-05-6').save() \u041f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 Ownership('1', '1', '1', '1936-09-11', '1940-09-11').save() Ownership('2', '2', '2', '1936-09-12', '1940-09-12').save() Ownership('3', '3', '3', '1936-09-13', '1940-09-13').save() Ownership('4', '4', '4', '1936-09-14', '1940-09-14').save() Ownership('5', '5', '5', '1936-09-15', '1940-09-15').save() Ownership('6', '6', '6', '1936-09-16', '1940-09-16').save() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): >>> Transport.objects.filter(marka=\"Mark3\") <QuerySet [<Transport: Transport object (3)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): >>> Transport_owner.objects.filter(first_name=\"Name5\") <QuerySet [<Transport_owner: Transport_owner object (5)>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): >>> needed_id = Transport_owner.objects.all()[2].id_owner >>> Driver_doc.objects.get(id_owner=needed_id) <Driver_doc: Driver_doc object (3)> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): >>> for i in range(len(Transport.objects.filter(color=\"green\"))): ... print(Transport.objects.filter(color=\"green\")[i]) ... Transport object (3) Transport object (4) Transport object (6) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): >>> Ownership.objects.filter(date_start__gte=\"1936-01-01\") <QuerySet [<Ownership: Ownership object (1)>, <Ownership: Ownership object (2)>, <Ownership: Ownership object (3)>, <Ownership: Ownership object (4)>, <Ownership: Ownership object (5)>, <Ownership: Ownership object (6)>]> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> Driver_doc.objects.aggregate(date_start_doc=Min(\"date_start_doc\")) {'date_start_doc': datetime.date(1933, 5, 1)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: >>> Ownership.objects.aggregate(date_start=Max(\"date_start\")) {'date_start': datetime.date(1936, 9, 16)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: >>> Ownership.objects.values(\"id_owner\").annotate(Count(\"id_car\")) <QuerySet [{'id_owner': 1, 'id_car__count': 1}, {'id_owner': 2, 'id_car__count': 1}, {'id_owner': 3, 'id_car__count': 1}, {'id_owner': 4, 'id_car__count': 1}, {'id_owner': 5, 'id_car__count': 1}, {'id_owner': 6, 'id_car__count': 1}] > \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: >>> Transport.objects.values(\"marka\").annotate(Count(\"id_car\")) <QuerySet [{'marka': 'Mark3', 'id_car__count': 1}, {'marka': 'Mark4', 'id_car__count': 3}, {'marka': 'Mark5', 'id_car__count': 1}, {'marka': 'Mark6', 'id_car__count': 1}] > \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> sort_by_date = Driver_doc.objects.all().order_by(\"date_start_doc\") >>> for i in sort_by_date: ... needed_id = i.id_owner.id_owner ... print( Ownership.objects.filter(id_owner__id_owner=needed_id) ) <QuerySet [<Ownership: Ownership object (4)>]> <QuerySet [<Ownership: Ownership object (1)>]> <QuerySet [<Ownership: Ownership object (2)>]> <QuerySet [<Ownership: Ownership object (3)>]> <QuerySet [<Ownership: Ownership object (5)>]> <QuerySet [<Ownership: Ownership object (6)>]>","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u21163.1"},{"location":"pr_3/#31","text":"Django \u0437\u0430\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 3.1 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"pr_3/#311","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. model.py from django.db import models class Transport_owner(models.Model): id_owner = models.IntegerField(primary_key=True) last_name = models.CharField(max_length=30, null=False) first_name = models.CharField(max_length=30, null=False) date_birthday = models.DateField() class Transport(models.Model): id_car = models.IntegerField(primary_key=True) gov_number = models.CharField(max_length=15, null=False) marka = models.CharField(max_length=20, null=False) model_car = models.CharField(max_length=20, null=False) color = models.CharField(max_length=30, null=True) class Ownership(models.Model): id_owner_car = models.IntegerField(primary_key=True) id_owner = models.ForeignKey(Transport_owner, on_delete=models.CASCADE) id_car = models.ForeignKey(Transport, on_delete=models.CASCADE) date_start = models.DateField() sate_end = models.DateField(null=True) class Driver_doc(models.Model): id_doc = models.IntegerField(primary_key=True) id_owner = models.ForeignKey(Transport_owner, on_delete=models.CASCADE) number_doc = models.CharField(max_length=10, null=False) type_doc = models.CharField(max_length=10, null=False) date_start_doc = models.DateField() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 Transport_owner(1, 'Fam1', 'Name1', '1902-01-1').save() Transport_owner(2, 'Fam2', 'Name2', '1902-01-2').save() Transport_owner(3, 'Fam3', 'Name3', '1902-01-3').save() Transport_owner(4, 'Fam4', 'Name4', '1902-01-4').save() Transport_owner(5, 'Fam5', 'Name5', '1902-01-5').save() Transport_owner(6, 'Fam6', 'Name6', '1902-01-6').save() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Transport(0, 'AAA0', 'Mark0', 'Model0', 'color5').save() Transport(1, 'AAA1', 'Mark1', 'Model1', 'color5').save() Transport(2, 'AAA2', 'Mark2', 'Model2', 'color5').save() Transport(3, 'AAA3', 'Mark3', 'Model3', 'color5').save() Transport(4, 'AAA4', 'Mark4', 'Model4', 'color5').save() Transport(5, 'AAA5', 'Mark5', 'Model5', 'color5').save() Transport(6, 'AAA6', 'Mark6', 'Model6', 'color5').save() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 Driver_doc('1', '1', 'num1', 'type1', '1933-05-1').save() Driver_doc('2', '2', 'num2', 'type2', '1933-05-2').save() Driver_doc('3', '3', 'num3', 'type3', '1933-05-3').save() Driver_doc('4', '4', 'num4', 'type4', '1933-05-4').save() Driver_doc('5', '5', 'num5', 'type5', '1933-05-5').save() Driver_doc('6', '6', 'num6', 'type6', '1933-05-6').save() \u041f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 Ownership('1', '1', '1', '1936-09-11', '1940-09-11').save() Ownership('2', '2', '2', '1936-09-12', '1940-09-12').save() Ownership('3', '3', '3', '1936-09-13', '1940-09-13').save() Ownership('4', '4', '4', '1936-09-14', '1940-09-14').save() Ownership('5', '5', '5', '1936-09-15', '1940-09-15').save() Ownership('6', '6', '6', '1936-09-16', '1940-09-16').save()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"pr_3/#312","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): >>> Transport.objects.filter(marka=\"Mark3\") <QuerySet [<Transport: Transport object (3)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): >>> Transport_owner.objects.filter(first_name=\"Name5\") <QuerySet [<Transport_owner: Transport_owner object (5)>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): >>> needed_id = Transport_owner.objects.all()[2].id_owner >>> Driver_doc.objects.get(id_owner=needed_id) <Driver_doc: Driver_doc object (3)> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): >>> for i in range(len(Transport.objects.filter(color=\"green\"))): ... print(Transport.objects.filter(color=\"green\")[i]) ... Transport object (3) Transport object (4) Transport object (6) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): >>> Ownership.objects.filter(date_start__gte=\"1936-01-01\") <QuerySet [<Ownership: Ownership object (1)>, <Ownership: Ownership object (2)>, <Ownership: Ownership object (3)>, <Ownership: Ownership object (4)>, <Ownership: Ownership object (5)>, <Ownership: Ownership object (6)>]>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2"},{"location":"pr_3/#313","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> Driver_doc.objects.aggregate(date_start_doc=Min(\"date_start_doc\")) {'date_start_doc': datetime.date(1933, 5, 1)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: >>> Ownership.objects.aggregate(date_start=Max(\"date_start\")) {'date_start': datetime.date(1936, 9, 16)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: >>> Ownership.objects.values(\"id_owner\").annotate(Count(\"id_car\")) <QuerySet [{'id_owner': 1, 'id_car__count': 1}, {'id_owner': 2, 'id_car__count': 1}, {'id_owner': 3, 'id_car__count': 1}, {'id_owner': 4, 'id_car__count': 1}, {'id_owner': 5, 'id_car__count': 1}, {'id_owner': 6, 'id_car__count': 1}] > \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: >>> Transport.objects.values(\"marka\").annotate(Count(\"id_car\")) <QuerySet [{'marka': 'Mark3', 'id_car__count': 1}, {'marka': 'Mark4', 'id_car__count': 3}, {'marka': 'Mark5', 'id_car__count': 1}, {'marka': 'Mark6', 'id_car__count': 1}] > \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> sort_by_date = Driver_doc.objects.all().order_by(\"date_start_doc\") >>> for i in sort_by_date: ... needed_id = i.id_owner.id_owner ... print( Ownership.objects.filter(id_owner__id_owner=needed_id) ) <QuerySet [<Ownership: Ownership object (4)>]> <QuerySet [<Ownership: Ownership object (1)>]> <QuerySet [<Ownership: Ownership object (2)>]> <QuerySet [<Ownership: Ownership object (3)>]> <QuerySet [<Ownership: Ownership object (5)>]> <QuerySet [<Ownership: Ownership object (6)>]>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3"}]}