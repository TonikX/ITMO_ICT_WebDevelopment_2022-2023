{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0432\u0430\u043b\u0435\u0432\u0430 \u0412\u0430\u043b\u0435\u0440\u0438\u044f K33401","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#k33401","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0432\u0430\u043b\u0435\u0432\u0430 \u0412\u0430\u043b\u0435\u0440\u0438\u044f K33401"},{"location":"lr1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u0417\u0430\u0434\u0430\u0447\u0430 1 server.py import socket def server (): sock = socket . socket () sock . bind (( '127.0.0.1' , 9090 )) sock . listen ( 1 ) conn , addr = sock . accept () print ( f \"Connected: { addr } \" ) while True : data = conn . recv ( 1024 ) if not data : break print ( f \" { data . decode ( 'utf-8' ) } from { addr [ 0 ] } : { addr [ 1 ] } \" ) conn . send ( str . encode ( f \"Hello, { addr [ 0 ] } : { addr [ 1 ] } \" )) conn . close () if __name__ == \"__main__\" : server () client.py import socket def client (): sock = socket . socket () sock . connect (( '127.0.0.1' , 9090 )) sock . send ( b 'Hello, server!' ) data = sock . recv ( 1024 ) sock . close () print ( data . decode ( \"utf-8\" )) if __name__ == \"__main__\" : client () \u0417\u0430\u0434\u0430\u0447\u0430 2 server.py import socket def pythagorean_theorem ( a , b ): return a * a + b * b def server (): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '127.0.0.1' , 9091 )) sock . listen () conn , addr = sock . accept () print ( f \"Connected: { addr } \" ) a = \"\" b = \"\" result = \"\" while not result : while not a : conn . send ( \"Side A\" . encode ()) data = conn . recv ( 1024 ) . decode () if data . isdigit (): a = float ( data ) while not b : conn . send ( \"Side B\" . encode ()) data = conn . recv ( 1024 ) . decode () if data . isdigit (): b = float ( data ) result = pythagorean_theorem ( a , b ) conn . send ( str . encode ( f \"Result is { result } \" )) conn . close () if __name__ == \"__main__\" : server () client.py import socket def client (): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '127.0.0.1' , 9091 )) print ( \"I solve Pythagorean theorem\" ) a = \"\" while not a . isdigit (): a = input ( \"Enter a side A: \" ) b = \"\" while not b . isdigit (): b = input ( \"Enter a side B: \" ) while True : data = sock . recv ( 1024 ) . decode () if data == \"Side A\" : sock . send ( a . encode ()) if data == \"Side B\" : sock . send ( b . encode ()) if data . startswith ( \"Result\" ): print ( data ) break if __name__ == \"__main__\" : client () \u0417\u0430\u0434\u0430\u0447\u0430 3 server.py import socket class MyHTTPServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) def serve_forever ( self ): try : self . server . bind (( self . host , self . port )) self . server . listen () while True : client , address = self . server . accept () self . serve_client ( client ) except KeyboardInterrupt : self . server . close () def serve_client ( self , client ): html = self . handle_request () self . send_response ( client , html ) client . close () def handle_request ( self ): with open ( \"index.html\" , \"r\" ) as file : body = file . read () return body def send_response ( self , client , html ): client . sendall ( f 'HTTP/1.1 200 OK \\r\\n Content-Type: text/html; charset=utf-8 \\r\\n\\r\\n { html } ' . encode ()) if __name__ == '__main__' : MyHTTPServer ( '127.0.0.1' , 2000 , 'example.com' ) . serve_forever () \u0417\u0430\u0434\u0430\u0447\u0430 4 server.py import socket , threading class MyChat : def __init__ ( self , ip , host ): self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . sock . bind (( ip , host )) self . sock . listen () self . clients = {} # {client:alias} def broadcast ( self , message , alias ): for client in self . clients . keys (): client . send ( f \" { alias } : { message } \" . encode ()) def handle_client ( self , client ): while True : try : message = client . recv ( 1024 ) . decode () self . broadcast ( message , self . clients [ client ]) except : client . close () self . broadcast ( f ' { self . clients [ client ] } has left the chat...' . encode ( 'utf-8' )) self . clients . pop ( client ) break def receive ( self ): print ( \"Server has started\" ) while True : client , address = self . sock . accept () print ( f \" { str ( address ) } connected!\" ) client . send ( b \"What is your alias?\" ) alias = client . recv ( 1024 ) . decode () self . clients [ client ] = alias self . broadcast ( f \" { alias } has connected to the chat\" , \"Server\" ) thread = threading . Thread ( target = self . handle_client , args = ( client ,)) thread . start () def run ( self ): self . receive () if __name__ == \"__main__\" : MyChat ( \"127.0.0.1\" , 9091 ) . run () client.py import socket import threading class MyClient : def __init__ ( self , ip , port ): self . alias = \"\" self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . sock . connect (( ip , port )) def receive ( self ): while True : try : message = self . sock . recv ( 1024 ) . decode () if message == \"What is your alias?\" : self . sock . send ( self . alias . encode ()) else : print ( message ) except : print ( \"Error!\" ) self . sock . close () break def send ( self ): while True : message = input () self . sock . send ( message . encode ()) def start ( self ): self . alias = input ( \"Enter your alias: \" ) receive_thread = threading . Thread ( target = self . receive ) receive_thread . start () send_thread = threading . Thread ( target = self . send ) send_thread . start () if __name__ == \"__main__\" : MyClient ( \"127.0.0.1\" , 9091 ) . start () \u0417\u0430\u0434\u0430\u0447\u0430 5 server.py import socket from Request import Request from Response import Response from urllib.parse import parse_qs class MyHTTPServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . marks = { \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\" : \"1\" , \"\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u0441\u0435\u0442\u0438\" : \"5\" , \"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\" : \"1\" , \"\u0418\u043d\u043e\u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u044f\u0437\u044b\u043a\" : \"1\" } def serve_forever ( self ): try : self . server . bind (( self . host , self . port )) self . server . listen () while True : client , address = self . server . accept () self . serve_client ( client ) except KeyboardInterrupt : self . server . close () def serve_client ( self , client ): try : data = client . recv ( 1024 ) . decode () req = self . parse_request ( data ) res = self . handle_request ( req ) self . send_response ( client , res ) except Exception as e : print ( e ) client . close () def parse_request ( self , data ): req = data . split ( \" \\r\\n \" ) method , target , ver = req [ 0 ] . split ( \" \" ) headers = self . parse_headers ( req ) return Request ( method = method , target = target , version = ver , headers = headers , data = data ) def parse_headers ( self , req ): headers = [ h for h in req [ 1 : req [ 1 :] . index ( \"\" ) + 1 ]] hdict = {} for h in headers : k , v = h . split ( ':' , 1 ) hdict [ k ] = v return hdict def handle_request ( self , req ): try : if req . method == \"GET\" and req . path == \"/\" : return self . handle_root () if req . method == \"POST\" and req . path . startswith ( \"/api\" ): _id = int ( req . query [ \"id\" ][ 0 ]) - 1 value = int ( req . query [ \"value\" ][ 0 ]) if value > 5 or value < 1 : raise Exception ( \"\u041d\u0435\u0432\u0435\u0440\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438\" ) self . marks [ list ( self . marks . keys ())[ _id ]] = value return self . handle_root () if req . method == \"POST\" and req . path . startswith ( \"/form-request\" ): q = parse_qs ( req . data [ - int ( req . headers [ \"Content-Length\" ]):]) _id = int ( q [ \"id\" ][ 0 ]) - 1 value = int ( q [ \"value\" ][ 0 ]) if value > 5 or value < 1 : raise Exception ( \"\u041d\u0435\u0432\u0435\u0440\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438\" ) self . marks [ list ( self . marks . keys ())[ _id ]] = value return self . handle_root () return self . get_error ( 404 , \"\u0422\u044b \u0434\u0430\u0436\u0435 \u043d\u0435 \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0438\u043d!\" ) except Exception as e : print ( f \"ERROR: { e } \" ) return self . get_error ( 500 , e ) def send_response ( self , client , res ): client . sendall ( f 'HTTP/1.1 { res . status } OK \\r\\n { res . headers } \\r\\n\\r\\n { res . body } ' . encode ()) def handle_root ( self ): body = \"\"\"<!DOCTYPE html><html lang=\"en\"><head>\"\"\" with open ( \"res/style.css\" , \"r\" ) as file : body += \"<style>\" body += file . read () body += \"</style>\" body += \"\"\"<meta charset=\"UTF-8\"><title>Start page</title></head><body><table>\"\"\" body += f \"<thead><tr><th>ID</t\u0440><th>\u041f\u0440\u0435\u0434\u043c\u0435\u0442</th><th>\u041e\u0446\u0435\u043d\u043a\u0430</th></tr></thead><tbody>\" for i , mark in enumerate ( self . marks . items ()): body += f \"<tr><td> { i + 1 } </td><td> { mark [ 0 ] } </td><td> { mark [ 1 ] } </td></tr>\" body += \"\"\"</tbody></table>\"\"\" with open ( \"res/form.html\" , \"r\" ) as file : body += file . read () body += \"\"\"</body></html>\"\"\" return Response ( 200 , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , body ) def get_error ( self , code , text ): return Response ( code , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , text ) if __name__ == '__main__' : MyHTTPServer ( '127.0.0.1' , 2001 , 'example.com' ) . serve_forever () Response.py class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body Request.py from urllib.parse import parse_qs , urlparse class Request : def __init__ ( self , method , target , headers , version , data ): self . method = method self . target = target self . version = version self . url = urlparse ( self . target ) self . query = parse_qs ( self . url . query ) self . path = self . url . path self . headers = headers self . data = data","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"lr1/#1_1","text":"server.py import socket def server (): sock = socket . socket () sock . bind (( '127.0.0.1' , 9090 )) sock . listen ( 1 ) conn , addr = sock . accept () print ( f \"Connected: { addr } \" ) while True : data = conn . recv ( 1024 ) if not data : break print ( f \" { data . decode ( 'utf-8' ) } from { addr [ 0 ] } : { addr [ 1 ] } \" ) conn . send ( str . encode ( f \"Hello, { addr [ 0 ] } : { addr [ 1 ] } \" )) conn . close () if __name__ == \"__main__\" : server () client.py import socket def client (): sock = socket . socket () sock . connect (( '127.0.0.1' , 9090 )) sock . send ( b 'Hello, server!' ) data = sock . recv ( 1024 ) sock . close () print ( data . decode ( \"utf-8\" )) if __name__ == \"__main__\" : client ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1"},{"location":"lr1/#2","text":"server.py import socket def pythagorean_theorem ( a , b ): return a * a + b * b def server (): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( '127.0.0.1' , 9091 )) sock . listen () conn , addr = sock . accept () print ( f \"Connected: { addr } \" ) a = \"\" b = \"\" result = \"\" while not result : while not a : conn . send ( \"Side A\" . encode ()) data = conn . recv ( 1024 ) . decode () if data . isdigit (): a = float ( data ) while not b : conn . send ( \"Side B\" . encode ()) data = conn . recv ( 1024 ) . decode () if data . isdigit (): b = float ( data ) result = pythagorean_theorem ( a , b ) conn . send ( str . encode ( f \"Result is { result } \" )) conn . close () if __name__ == \"__main__\" : server () client.py import socket def client (): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( '127.0.0.1' , 9091 )) print ( \"I solve Pythagorean theorem\" ) a = \"\" while not a . isdigit (): a = input ( \"Enter a side A: \" ) b = \"\" while not b . isdigit (): b = input ( \"Enter a side B: \" ) while True : data = sock . recv ( 1024 ) . decode () if data == \"Side A\" : sock . send ( a . encode ()) if data == \"Side B\" : sock . send ( b . encode ()) if data . startswith ( \"Result\" ): print ( data ) break if __name__ == \"__main__\" : client ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2"},{"location":"lr1/#3","text":"server.py import socket class MyHTTPServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) def serve_forever ( self ): try : self . server . bind (( self . host , self . port )) self . server . listen () while True : client , address = self . server . accept () self . serve_client ( client ) except KeyboardInterrupt : self . server . close () def serve_client ( self , client ): html = self . handle_request () self . send_response ( client , html ) client . close () def handle_request ( self ): with open ( \"index.html\" , \"r\" ) as file : body = file . read () return body def send_response ( self , client , html ): client . sendall ( f 'HTTP/1.1 200 OK \\r\\n Content-Type: text/html; charset=utf-8 \\r\\n\\r\\n { html } ' . encode ()) if __name__ == '__main__' : MyHTTPServer ( '127.0.0.1' , 2000 , 'example.com' ) . serve_forever ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 3"},{"location":"lr1/#4","text":"server.py import socket , threading class MyChat : def __init__ ( self , ip , host ): self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . sock . bind (( ip , host )) self . sock . listen () self . clients = {} # {client:alias} def broadcast ( self , message , alias ): for client in self . clients . keys (): client . send ( f \" { alias } : { message } \" . encode ()) def handle_client ( self , client ): while True : try : message = client . recv ( 1024 ) . decode () self . broadcast ( message , self . clients [ client ]) except : client . close () self . broadcast ( f ' { self . clients [ client ] } has left the chat...' . encode ( 'utf-8' )) self . clients . pop ( client ) break def receive ( self ): print ( \"Server has started\" ) while True : client , address = self . sock . accept () print ( f \" { str ( address ) } connected!\" ) client . send ( b \"What is your alias?\" ) alias = client . recv ( 1024 ) . decode () self . clients [ client ] = alias self . broadcast ( f \" { alias } has connected to the chat\" , \"Server\" ) thread = threading . Thread ( target = self . handle_client , args = ( client ,)) thread . start () def run ( self ): self . receive () if __name__ == \"__main__\" : MyChat ( \"127.0.0.1\" , 9091 ) . run () client.py import socket import threading class MyClient : def __init__ ( self , ip , port ): self . alias = \"\" self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . sock . connect (( ip , port )) def receive ( self ): while True : try : message = self . sock . recv ( 1024 ) . decode () if message == \"What is your alias?\" : self . sock . send ( self . alias . encode ()) else : print ( message ) except : print ( \"Error!\" ) self . sock . close () break def send ( self ): while True : message = input () self . sock . send ( message . encode ()) def start ( self ): self . alias = input ( \"Enter your alias: \" ) receive_thread = threading . Thread ( target = self . receive ) receive_thread . start () send_thread = threading . Thread ( target = self . send ) send_thread . start () if __name__ == \"__main__\" : MyClient ( \"127.0.0.1\" , 9091 ) . start ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 4"},{"location":"lr1/#5","text":"server.py import socket from Request import Request from Response import Response from urllib.parse import parse_qs class MyHTTPServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . marks = { \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\" : \"1\" , \"\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0435 \u0441\u0435\u0442\u0438\" : \"5\" , \"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\" : \"1\" , \"\u0418\u043d\u043e\u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u044f\u0437\u044b\u043a\" : \"1\" } def serve_forever ( self ): try : self . server . bind (( self . host , self . port )) self . server . listen () while True : client , address = self . server . accept () self . serve_client ( client ) except KeyboardInterrupt : self . server . close () def serve_client ( self , client ): try : data = client . recv ( 1024 ) . decode () req = self . parse_request ( data ) res = self . handle_request ( req ) self . send_response ( client , res ) except Exception as e : print ( e ) client . close () def parse_request ( self , data ): req = data . split ( \" \\r\\n \" ) method , target , ver = req [ 0 ] . split ( \" \" ) headers = self . parse_headers ( req ) return Request ( method = method , target = target , version = ver , headers = headers , data = data ) def parse_headers ( self , req ): headers = [ h for h in req [ 1 : req [ 1 :] . index ( \"\" ) + 1 ]] hdict = {} for h in headers : k , v = h . split ( ':' , 1 ) hdict [ k ] = v return hdict def handle_request ( self , req ): try : if req . method == \"GET\" and req . path == \"/\" : return self . handle_root () if req . method == \"POST\" and req . path . startswith ( \"/api\" ): _id = int ( req . query [ \"id\" ][ 0 ]) - 1 value = int ( req . query [ \"value\" ][ 0 ]) if value > 5 or value < 1 : raise Exception ( \"\u041d\u0435\u0432\u0435\u0440\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438\" ) self . marks [ list ( self . marks . keys ())[ _id ]] = value return self . handle_root () if req . method == \"POST\" and req . path . startswith ( \"/form-request\" ): q = parse_qs ( req . data [ - int ( req . headers [ \"Content-Length\" ]):]) _id = int ( q [ \"id\" ][ 0 ]) - 1 value = int ( q [ \"value\" ][ 0 ]) if value > 5 or value < 1 : raise Exception ( \"\u041d\u0435\u0432\u0435\u0440\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438\" ) self . marks [ list ( self . marks . keys ())[ _id ]] = value return self . handle_root () return self . get_error ( 404 , \"\u0422\u044b \u0434\u0430\u0436\u0435 \u043d\u0435 \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0438\u043d!\" ) except Exception as e : print ( f \"ERROR: { e } \" ) return self . get_error ( 500 , e ) def send_response ( self , client , res ): client . sendall ( f 'HTTP/1.1 { res . status } OK \\r\\n { res . headers } \\r\\n\\r\\n { res . body } ' . encode ()) def handle_root ( self ): body = \"\"\"<!DOCTYPE html><html lang=\"en\"><head>\"\"\" with open ( \"res/style.css\" , \"r\" ) as file : body += \"<style>\" body += file . read () body += \"</style>\" body += \"\"\"<meta charset=\"UTF-8\"><title>Start page</title></head><body><table>\"\"\" body += f \"<thead><tr><th>ID</t\u0440><th>\u041f\u0440\u0435\u0434\u043c\u0435\u0442</th><th>\u041e\u0446\u0435\u043d\u043a\u0430</th></tr></thead><tbody>\" for i , mark in enumerate ( self . marks . items ()): body += f \"<tr><td> { i + 1 } </td><td> { mark [ 0 ] } </td><td> { mark [ 1 ] } </td></tr>\" body += \"\"\"</tbody></table>\"\"\" with open ( \"res/form.html\" , \"r\" ) as file : body += file . read () body += \"\"\"</body></html>\"\"\" return Response ( 200 , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , body ) def get_error ( self , code , text ): return Response ( code , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , text ) if __name__ == '__main__' : MyHTTPServer ( '127.0.0.1' , 2001 , 'example.com' ) . serve_forever () Response.py class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body Request.py from urllib.parse import parse_qs , urlparse class Request : def __init__ ( self , method , target , headers , version , data ): self . method = method self . target = target self . version = version self . url = urlparse ( self . target ) self . query = parse_qs ( self . url . query ) self . path = self . url . path self . headers = headers self . data = data","title":"\u0417\u0430\u0434\u0430\u0447\u0430 5"},{"location":"lr2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). - \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u0412\u0438\u0434\u0435\u043e https://www.youtube.com/watch?v=Ta3NmCC-Hn4 \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 . \u251c\u2500\u2500 laboratory_work_2 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 asgi.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 components \u2502 \u2502 \u251c\u2500\u2500 header.html \u2502 \u2502 \u251c\u2500\u2500 homework.html \u2502 \u2502 \u251c\u2500\u2500 homework_answer.html \u2502 \u2502 \u251c\u2500\u2500 homework_answers_album.html \u2502 \u2502 \u2514\u2500\u2500 homeworks_album.html \u2502 \u251c\u2500\u2500 pages \u2502 \u2502 \u251c\u2500\u2500 add_info.html \u2502 \u2502 \u251c\u2500\u2500 create_homework.html \u2502 \u2502 \u251c\u2500\u2500 home.html \u2502 \u2502 \u251c\u2500\u2500 login.html \u2502 \u2502 \u251c\u2500\u2500 make_homework.html \u2502 \u2502 \u251c\u2500\u2500 marks.html \u2502 \u2502 \u251c\u2500\u2500 rate_homework.html \u2502 \u2502 \u251c\u2500\u2500 register.html \u2502 \u2502 \u2514\u2500\u2500 task_answer.html \u2502 \u2514\u2500\u2500 base.html \u251c\u2500\u2500 timetable \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 decorators.py \u2502 \u251c\u2500\u2500 forms.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py \u251c\u2500\u2500 db.sqlite3 \u2514\u2500\u2500 manage.py \u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438 model.py class User ( AbstractUser ): is_student = models . BooleanField ( default = False ) is_teacher = models . BooleanField ( default = False ) with_additional_info = models . BooleanField ( default = False ) CHARACTERS = [ ( 'A' , 'A' ), ( 'B' , 'B' ), ( 'C' , 'C' ) ] NUMBERS = [ ( 1 , '1' ), ( 2 , '2' ), ( 3 , '3' ) ] SUBJECTS = [ ( \"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430\" , \"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430\" ), ( \"\u0418\u0441\u0442\u043e\u0440\u0438\u044f\" , \"\u0418\u0441\u0442\u043e\u0440\u0438\u044f\" ), ( \"\u0418\u0417\u041e\" , \"\u0418\u0417\u041e\" ), ( \"\u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a\" , \"\u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a\" ), ( \"\u0413\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u044f\" , \"\u0413\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u044f\" ) ] class StudentGroup ( models . Model ): character = models . CharField ( max_length = 1 , choices = CHARACTERS , default = \"A\" , verbose_name = \"\u041b\u0438\u0442\u0435\u0440\u0430\" ) number = models . IntegerField ( choices = NUMBERS , default = 1 , verbose_name = \"\u041d\u043e\u043c\u0435\u0440\" ) def __str__ ( self ): return f \" { self . character }{ self . number } \" class Student ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE , primary_key = True ) student_group = models . ForeignKey ( StudentGroup , on_delete = models . CASCADE , null = True ) def __str__ ( self ): return f \" { self . user . first_name } { self . user . last_name } \" class Teacher ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE , primary_key = True ) subject = models . CharField ( max_length = 30 , choices = SUBJECTS , verbose_name = \"\u041f\u0440\u0435\u0434\u043c\u0435\u0442\" ) def __str__ ( self ): return f \" { self . user . first_name } { self . user . last_name } \" class Homework ( models . Model ): student_group = models . ForeignKey ( StudentGroup , on_delete = models . CASCADE , null = True ) teacher = models . ForeignKey ( Teacher , on_delete = models . CASCADE , null = True ) subject = models . CharField ( max_length = 30 , choices = SUBJECTS , verbose_name = \"\u041f\u0440\u0435\u0434\u043c\u0435\u0442\" ) start_date = models . DateTimeField ( verbose_name = \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438\" ) end_date = models . DateTimeField ( verbose_name = \"\u0421\u0434\u0430\u0442\u044c \u0434\u043e\" ) task_description = models . TextField ( verbose_name = \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\" ) fine_info = models . CharField ( max_length = 150 , verbose_name = \"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445\" ) max_points = models . IntegerField ( verbose_name = \"\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432\" ) class HomeworkAnswer ( models . Model ): homework = models . ForeignKey ( Homework , on_delete = models . CASCADE ) student = models . ForeignKey ( Student , on_delete = models . CASCADE ) date = models . DateTimeField ( auto_now = True , blank = True ) answer = models . TextField ( null = True , blank = True , verbose_name = \"\u041e\u0442\u0432\u0435\u0442\" ) class TeacherAnswerOnHomework ( models . Model ): homework_answer = models . OneToOneField ( HomeworkAnswer , on_delete = models . CASCADE , primary_key = True ) points = models . IntegerField ( default = 0 , verbose_name = \"\u0411\u0430\u043b\u043b\u044b\" ) message = models . TextField ( null = True , blank = True , verbose_name = \"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\" ) teacher = models . ForeignKey ( Teacher , on_delete = models . SET_NULL , null = True ) date = models . DateTimeField ( auto_now = True , blank = True ) decorators.py def student_required (): def decorator ( view_func ): def wrapper_func ( requset , * args , ** kwargs ): if requset . user . is_student : return view_func ( requset , * args , ** kwargs ) else : return HttpResponse ( 'You are not student' ) return wrapper_func return decorator def additional_info_check (): def decorator ( view_func ): def wrapper_func ( requset , * args , ** kwargs ): if requset . user . with_additional_info : return view_func ( requset , * args , ** kwargs ) else : return redirect ( \"add_info\" ) return wrapper_func return decorator def teacher_required (): def decorator ( view_func ): def wrapper_func ( requset , * args , ** kwargs ): if requset . user . is_teacher : return view_func ( requset , * args , ** kwargs ) else : return HttpResponse ( 'You are not teacher' ) return wrapper_func return decorator forms.py groups = [( group . pk , group ) for group in StudentGroup . objects . all ()] class RegisterForm ( UserCreationForm ): role = forms . ChoiceField ( required = True , choices = ROLES ) class Meta : model = User fields = ( \"username\" , \"first_name\" , \"last_name\" , \"password1\" , \"password2\" ) def save ( self , commit = True ): user = super ( RegisterForm , self ) . save ( commit = False ) print ( \"ROLE\" , self . cleaned_data [ \"role\" ]) if self . cleaned_data [ \"role\" ] == \"teacher\" : user . is_teacher = True if self . cleaned_data [ \"role\" ] == \"student\" : user . is_student = True if commit : user . save () return user class TeacherForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): self . user = kwargs . pop ( 'user' , None ) super ( TeacherForm , self ) . __init__ ( * args , ** kwargs ) class Meta : model = Teacher fields = [ \"subject\" ] def save ( self , commit = True ): teacher = super ( TeacherForm , self ) . save ( commit = False ) teacher . user = self . user teacher . user . with_additional_info = True if commit : teacher . user . save () teacher . save () return teacher class StudentForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): self . user = kwargs . pop ( 'user' , None ) super ( StudentForm , self ) . __init__ ( * args , ** kwargs ) student_group = forms . ChoiceField ( required = True , choices = groups ) class Meta : model = Student fields = [ \"student_group\" ] def save ( self , commit = True ): student = super ( StudentForm , self ) . save ( commit = False ) student . user = self . user student . user . with_additional_info = True student . student_group = StudentGroup . objects . get ( pk = self . cleaned_data [ \"student_group\" ]) if commit : student . user . save () student . save () return student class TeacherAnswerOnHomeworkForm ( forms . ModelForm ): class Meta : model = TeacherAnswerOnHomework fields = [ \"points\" , \"message\" ] def __init__ ( self , * args , ** kwargs ): self . homework_answer = kwargs . pop ( 'homework_answer' , None ) super ( TeacherAnswerOnHomeworkForm , self ) . __init__ ( * args , ** kwargs ) def save ( self , commit = True ): teacher_homework_answer = super ( TeacherAnswerOnHomeworkForm , self ) . save ( commit = False ) teacher_homework_answer . homework_answer = self . homework_answer if commit : teacher_homework_answer . save () return teacher_homework_answer class HomeworkAnswerForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): self . homework = kwargs . pop ( 'homework' , None ) self . student = kwargs . pop ( 'student' , None ) super ( HomeworkAnswerForm , self ) . __init__ ( * args , ** kwargs ) class Meta : model = HomeworkAnswer fields = [ \"answer\" ] answer = forms . CharField ( label = 'message' , max_length = 180 ) def save ( self , commit = True ): homework_answer = super ( HomeworkAnswerForm , self ) . save ( commit = False ) homework_answer . homework = self . homework homework_answer . student = self . student if commit : homework_answer . save () return homework_answer class HomeworkForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): self . user = kwargs . pop ( 'user' , None ) super ( HomeworkForm , self ) . __init__ ( * args , ** kwargs ) class Meta : model = Homework fields = [ \"task_description\" , \"start_date\" , \"end_date\" , \"max_points\" , \"fine_info\" ] widgets = { \"start_date\" : forms . DateInput ( format = ' %d /%m/%Y' , attrs = { 'type' : 'date' }), \"end_date\" : forms . DateInput ( format = ' %d /%m/%Y' , attrs = { 'type' : 'date' }) } student_group = forms . ChoiceField ( required = True , choices = groups ) def save ( self , commit = True ): homework = super ( HomeworkForm , self ) . save ( commit = False ) homework . student_group = StudentGroup . objects . get ( pk = self . cleaned_data [ \"student_group\" ]) homework . teacher = Teacher . objects . get ( user = self . user ) homework . subject = homework . teacher . subject if commit : homework . save () return homework views.py import django.db from django.http import HttpResponse from django.shortcuts import render , redirect from django.contrib.auth.decorators import login_required from .decorators import student_required , teacher_required , additional_info_check from django.contrib.auth import authenticate , login , logout from .forms import RegisterForm , TeacherForm , StudentForm , HomeworkAnswerForm , HomeworkForm , \\ TeacherAnswerOnHomeworkForm from .models import Homework , Teacher , Student , HomeworkAnswer , TeacherAnswerOnHomework def registerPage ( requset ): form = RegisterForm if requset . method == \"POST\" : form = RegisterForm ( requset . POST ) if form . is_valid (): form . save () return redirect ( 'login' ) context = { 'form' : form } return render ( requset , 'pages/register.html' , context ) def loginPage ( request ): if request . method == \"POST\" : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( 'home' ) context = {} return render ( request , 'pages/login.html' , context ) @login_required ( login_url = 'login' ) def add_info ( request ): if request . user . is_teacher : if request . method == \"POST\" : form = TeacherForm ( request . POST , user = request . user ) if form . is_valid (): form . save () return redirect ( 'home' ) else : form = TeacherForm ( user = request . user ) context = { \"form\" : form } return render ( request , \"pages/add_info.html\" , context ) if request . user . is_student : if request . method == \"POST\" : form = StudentForm ( request . POST , user = request . user ) if form . is_valid (): form . save () return redirect ( 'home' ) else : form = StudentForm ( user = request . user ) context = { \"form\" : form } return render ( request , \"pages/add_info.html\" , context ) return HttpResponse ( \"You are not teacher or student\" ) @login_required ( login_url = 'login' ) @additional_info_check () def home ( request ): if request . user . is_teacher : return redirect ( \"teacher_home\" ) if request . user . is_student : return redirect ( \"student_home\" ) return HttpResponse ( \"You are not teacher or student\" ) def get_checked_and_unchecked_homeworks ( homeworks ): checked_homeworks = [] unchecked_homeworks = [] for homework in homeworks : try : t = homework . teacheransweronhomework if t : checked_homeworks . append ( homework ) except TeacherAnswerOnHomework . DoesNotExist : unchecked_homeworks . append ( homework ) return { \"checked_homeworks\" : checked_homeworks , \"unchecked_homeworks\" : unchecked_homeworks } @login_required ( login_url = 'login' ) @teacher_required () def teacher_marks_page ( request ): homeworks = Homework . objects . filter ( teacher = request . user . teacher ) homework_answers = [] for homework in homeworks : try : homework_answers . append ( HomeworkAnswer . objects . get ( homework = homework )) except HomeworkAnswer . DoesNotExist : continue filtered_homeworks = get_checked_and_unchecked_homeworks ( homework_answers ) context = { \"homework_answers\" : homework_answers , \"checked_homeworks\" : filtered_homeworks [ \"checked_homeworks\" ], \"unchecked_homeworks\" : filtered_homeworks [ \"unchecked_homeworks\" ]} return render ( request , 'pages/marks.html' , context ) @login_required ( login_url = 'login' ) @student_required () def student_marks_page ( request ): student = Student . objects . get ( user = request . user ) homeworks = Homework . objects . filter ( student_group = student . student_group ) homework_answers = [] for homework in homeworks : try : homework_answers . append ( HomeworkAnswer . objects . get ( homework = homework )) except HomeworkAnswer . DoesNotExist : continue filtered_homeworks = get_checked_and_unchecked_homeworks ( homework_answers ) context = { \"homework_answers\" : homework_answers , \"checked_homeworks\" : filtered_homeworks [ \"checked_homeworks\" ], \"unchecked_homeworks\" : filtered_homeworks [ \"unchecked_homeworks\" ]} return render ( request , 'pages/marks.html' , context ) @login_required ( login_url = 'login' ) @teacher_required () def delete_homework ( request , work_id ): homework = Homework . objects . get ( pk = work_id ) homework . delete () return redirect ( \"home\" ) @login_required ( login_url = 'login' ) @teacher_required () def change_homework ( request , work_id ): homework = Homework . objects . get_or_create ( pk = work_id )[ 0 ] if request . method == \"POST\" : form = HomeworkForm ( request . POST , instance = homework , user = request . user ) if form . is_valid (): form . save () return redirect ( \"home\" ) form = HomeworkForm ( instance = homework , user = request . user ) context = { \"word_id\" : work_id , \"form\" : form , \"homework\" : homework } return render ( request , 'pages/create_homework.html' , context ) @login_required ( login_url = 'login' ) @teacher_required () def create_homework ( request ): if request . method == \"POST\" : form = HomeworkForm ( request . POST , user = request . user ) if form . is_valid (): form . save () return redirect ( \"home\" ) form = HomeworkForm ( user = request . user ) context = { \"form\" : form } return render ( request , 'pages/create_homework.html' , context ) @login_required ( login_url = 'login' ) @teacher_required () def teacher_home_page ( request ): teacher = Teacher . objects . get ( user = request . user ) homeworks = Homework . objects . filter ( teacher = teacher ) context = { \"homeworks\" : homeworks } return render ( request , \"pages/home.html\" , context ) @login_required ( login_url = 'login' ) @student_required () def student_home_page ( request ): student = Student . objects . get ( user = request . user ) completed_words = HomeworkAnswer . objects . all () completed_words = [ work . homework for work in completed_words ] homeworks = Homework . objects . filter ( student_group = student . student_group ) homeworks = [ homework for homework in homeworks if homework not in completed_words ] context = { \"homeworks\" : homeworks } return render ( request , \"pages/home.html\" , context ) @login_required ( login_url = 'login' ) @login_required () def marks ( request ): if request . user . is_teacher : return redirect ( 'teacher_marks' ) if request . user . is_student : return redirect ( 'student_marks' ) @login_required ( login_url = 'login' ) @teacher_required () def rate_homework ( request , work_id ): try : homework_answer = HomeworkAnswer . objects . get ( pk = work_id ) except HomeworkAnswer . DoesNotExist : return HttpResponse ( \"Homework answer does not exist\" ) try : if request . method == \"POST\" : form = TeacherAnswerOnHomeworkForm ( request . POST , instance = homework_answer . teacheransweronhomework , homework_answer = homework_answer ) if form . is_valid (): form . save () return redirect ( \"marks\" ) form = TeacherAnswerOnHomeworkForm ( instance = homework_answer . teacheransweronhomework , homework_answer = homework_answer ) context = { \"form\" : form , \"homework_answer\" : homework_answer } return render ( request , 'pages/rate_homework.html' , context ) except TeacherAnswerOnHomework . DoesNotExist : if request . method == \"POST\" : form = TeacherAnswerOnHomeworkForm ( request . POST , homework_answer = homework_answer ) if form . is_valid (): form . save () return redirect ( \"marks\" ) form = TeacherAnswerOnHomeworkForm ( homework_answer = homework_answer ) context = { \"form\" : form , \"homework_answer\" : homework_answer } return render ( request , 'pages/rate_homework.html' , context ) @login_required ( login_url = 'login' ) @student_required () def make_homework ( request , work_id ): student = Student . objects . get ( user = request . user ) try : homework = Homework . objects . get ( pk = work_id ) except Homework . DoesNotExist : return HttpResponse ( \"Homework answer does not exist\" ) if request . method == \"POST\" : form = HomeworkAnswerForm ( request . POST , homework = homework , student = student ) if form . is_valid (): form . save () return redirect ( \"marks\" ) form = HomeworkAnswerForm ( homework = homework , student = student ) context = { \"form\" : form , \"homework\" : homework } return render ( request , 'pages/make_homework.html' , context ) @login_required ( login_url = 'login' ) def logoutUser ( request ): logout ( request ) return redirect ( 'login' )","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"lr2/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"lr2/#_2","text":"\u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). - \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430.","title":"\u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439"},{"location":"lr2/#_3","text":"https://www.youtube.com/watch?v=Ta3NmCC-Hn4","title":"\u0412\u0438\u0434\u0435\u043e"},{"location":"lr2/#_4","text":". \u251c\u2500\u2500 laboratory_work_2 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 asgi.py \u2502 \u251c\u2500\u2500 settings.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 components \u2502 \u2502 \u251c\u2500\u2500 header.html \u2502 \u2502 \u251c\u2500\u2500 homework.html \u2502 \u2502 \u251c\u2500\u2500 homework_answer.html \u2502 \u2502 \u251c\u2500\u2500 homework_answers_album.html \u2502 \u2502 \u2514\u2500\u2500 homeworks_album.html \u2502 \u251c\u2500\u2500 pages \u2502 \u2502 \u251c\u2500\u2500 add_info.html \u2502 \u2502 \u251c\u2500\u2500 create_homework.html \u2502 \u2502 \u251c\u2500\u2500 home.html \u2502 \u2502 \u251c\u2500\u2500 login.html \u2502 \u2502 \u251c\u2500\u2500 make_homework.html \u2502 \u2502 \u251c\u2500\u2500 marks.html \u2502 \u2502 \u251c\u2500\u2500 rate_homework.html \u2502 \u2502 \u251c\u2500\u2500 register.html \u2502 \u2502 \u2514\u2500\u2500 task_answer.html \u2502 \u2514\u2500\u2500 base.html \u251c\u2500\u2500 timetable \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 apps.py \u2502 \u251c\u2500\u2500 decorators.py \u2502 \u251c\u2500\u2500 forms.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2514\u2500\u2500 views.py \u251c\u2500\u2500 db.sqlite3 \u2514\u2500\u2500 manage.py","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"lr2/#_5","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438"},{"location":"lr2/#modelpy","text":"class User ( AbstractUser ): is_student = models . BooleanField ( default = False ) is_teacher = models . BooleanField ( default = False ) with_additional_info = models . BooleanField ( default = False ) CHARACTERS = [ ( 'A' , 'A' ), ( 'B' , 'B' ), ( 'C' , 'C' ) ] NUMBERS = [ ( 1 , '1' ), ( 2 , '2' ), ( 3 , '3' ) ] SUBJECTS = [ ( \"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430\" , \"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430\" ), ( \"\u0418\u0441\u0442\u043e\u0440\u0438\u044f\" , \"\u0418\u0441\u0442\u043e\u0440\u0438\u044f\" ), ( \"\u0418\u0417\u041e\" , \"\u0418\u0417\u041e\" ), ( \"\u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a\" , \"\u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a\" ), ( \"\u0413\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u044f\" , \"\u0413\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u044f\" ) ] class StudentGroup ( models . Model ): character = models . CharField ( max_length = 1 , choices = CHARACTERS , default = \"A\" , verbose_name = \"\u041b\u0438\u0442\u0435\u0440\u0430\" ) number = models . IntegerField ( choices = NUMBERS , default = 1 , verbose_name = \"\u041d\u043e\u043c\u0435\u0440\" ) def __str__ ( self ): return f \" { self . character }{ self . number } \" class Student ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE , primary_key = True ) student_group = models . ForeignKey ( StudentGroup , on_delete = models . CASCADE , null = True ) def __str__ ( self ): return f \" { self . user . first_name } { self . user . last_name } \" class Teacher ( models . Model ): user = models . OneToOneField ( User , on_delete = models . CASCADE , primary_key = True ) subject = models . CharField ( max_length = 30 , choices = SUBJECTS , verbose_name = \"\u041f\u0440\u0435\u0434\u043c\u0435\u0442\" ) def __str__ ( self ): return f \" { self . user . first_name } { self . user . last_name } \" class Homework ( models . Model ): student_group = models . ForeignKey ( StudentGroup , on_delete = models . CASCADE , null = True ) teacher = models . ForeignKey ( Teacher , on_delete = models . CASCADE , null = True ) subject = models . CharField ( max_length = 30 , choices = SUBJECTS , verbose_name = \"\u041f\u0440\u0435\u0434\u043c\u0435\u0442\" ) start_date = models . DateTimeField ( verbose_name = \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438\" ) end_date = models . DateTimeField ( verbose_name = \"\u0421\u0434\u0430\u0442\u044c \u0434\u043e\" ) task_description = models . TextField ( verbose_name = \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\" ) fine_info = models . CharField ( max_length = 150 , verbose_name = \"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445\" ) max_points = models . IntegerField ( verbose_name = \"\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432\" ) class HomeworkAnswer ( models . Model ): homework = models . ForeignKey ( Homework , on_delete = models . CASCADE ) student = models . ForeignKey ( Student , on_delete = models . CASCADE ) date = models . DateTimeField ( auto_now = True , blank = True ) answer = models . TextField ( null = True , blank = True , verbose_name = \"\u041e\u0442\u0432\u0435\u0442\" ) class TeacherAnswerOnHomework ( models . Model ): homework_answer = models . OneToOneField ( HomeworkAnswer , on_delete = models . CASCADE , primary_key = True ) points = models . IntegerField ( default = 0 , verbose_name = \"\u0411\u0430\u043b\u043b\u044b\" ) message = models . TextField ( null = True , blank = True , verbose_name = \"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\" ) teacher = models . ForeignKey ( Teacher , on_delete = models . SET_NULL , null = True ) date = models . DateTimeField ( auto_now = True , blank = True )","title":"model.py"},{"location":"lr2/#decoratorspy","text":"def student_required (): def decorator ( view_func ): def wrapper_func ( requset , * args , ** kwargs ): if requset . user . is_student : return view_func ( requset , * args , ** kwargs ) else : return HttpResponse ( 'You are not student' ) return wrapper_func return decorator def additional_info_check (): def decorator ( view_func ): def wrapper_func ( requset , * args , ** kwargs ): if requset . user . with_additional_info : return view_func ( requset , * args , ** kwargs ) else : return redirect ( \"add_info\" ) return wrapper_func return decorator def teacher_required (): def decorator ( view_func ): def wrapper_func ( requset , * args , ** kwargs ): if requset . user . is_teacher : return view_func ( requset , * args , ** kwargs ) else : return HttpResponse ( 'You are not teacher' ) return wrapper_func return decorator","title":"decorators.py"},{"location":"lr2/#formspy","text":"groups = [( group . pk , group ) for group in StudentGroup . objects . all ()] class RegisterForm ( UserCreationForm ): role = forms . ChoiceField ( required = True , choices = ROLES ) class Meta : model = User fields = ( \"username\" , \"first_name\" , \"last_name\" , \"password1\" , \"password2\" ) def save ( self , commit = True ): user = super ( RegisterForm , self ) . save ( commit = False ) print ( \"ROLE\" , self . cleaned_data [ \"role\" ]) if self . cleaned_data [ \"role\" ] == \"teacher\" : user . is_teacher = True if self . cleaned_data [ \"role\" ] == \"student\" : user . is_student = True if commit : user . save () return user class TeacherForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): self . user = kwargs . pop ( 'user' , None ) super ( TeacherForm , self ) . __init__ ( * args , ** kwargs ) class Meta : model = Teacher fields = [ \"subject\" ] def save ( self , commit = True ): teacher = super ( TeacherForm , self ) . save ( commit = False ) teacher . user = self . user teacher . user . with_additional_info = True if commit : teacher . user . save () teacher . save () return teacher class StudentForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): self . user = kwargs . pop ( 'user' , None ) super ( StudentForm , self ) . __init__ ( * args , ** kwargs ) student_group = forms . ChoiceField ( required = True , choices = groups ) class Meta : model = Student fields = [ \"student_group\" ] def save ( self , commit = True ): student = super ( StudentForm , self ) . save ( commit = False ) student . user = self . user student . user . with_additional_info = True student . student_group = StudentGroup . objects . get ( pk = self . cleaned_data [ \"student_group\" ]) if commit : student . user . save () student . save () return student class TeacherAnswerOnHomeworkForm ( forms . ModelForm ): class Meta : model = TeacherAnswerOnHomework fields = [ \"points\" , \"message\" ] def __init__ ( self , * args , ** kwargs ): self . homework_answer = kwargs . pop ( 'homework_answer' , None ) super ( TeacherAnswerOnHomeworkForm , self ) . __init__ ( * args , ** kwargs ) def save ( self , commit = True ): teacher_homework_answer = super ( TeacherAnswerOnHomeworkForm , self ) . save ( commit = False ) teacher_homework_answer . homework_answer = self . homework_answer if commit : teacher_homework_answer . save () return teacher_homework_answer class HomeworkAnswerForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): self . homework = kwargs . pop ( 'homework' , None ) self . student = kwargs . pop ( 'student' , None ) super ( HomeworkAnswerForm , self ) . __init__ ( * args , ** kwargs ) class Meta : model = HomeworkAnswer fields = [ \"answer\" ] answer = forms . CharField ( label = 'message' , max_length = 180 ) def save ( self , commit = True ): homework_answer = super ( HomeworkAnswerForm , self ) . save ( commit = False ) homework_answer . homework = self . homework homework_answer . student = self . student if commit : homework_answer . save () return homework_answer class HomeworkForm ( forms . ModelForm ): def __init__ ( self , * args , ** kwargs ): self . user = kwargs . pop ( 'user' , None ) super ( HomeworkForm , self ) . __init__ ( * args , ** kwargs ) class Meta : model = Homework fields = [ \"task_description\" , \"start_date\" , \"end_date\" , \"max_points\" , \"fine_info\" ] widgets = { \"start_date\" : forms . DateInput ( format = ' %d /%m/%Y' , attrs = { 'type' : 'date' }), \"end_date\" : forms . DateInput ( format = ' %d /%m/%Y' , attrs = { 'type' : 'date' }) } student_group = forms . ChoiceField ( required = True , choices = groups ) def save ( self , commit = True ): homework = super ( HomeworkForm , self ) . save ( commit = False ) homework . student_group = StudentGroup . objects . get ( pk = self . cleaned_data [ \"student_group\" ]) homework . teacher = Teacher . objects . get ( user = self . user ) homework . subject = homework . teacher . subject if commit : homework . save () return homework","title":"forms.py"},{"location":"lr2/#viewspy","text":"import django.db from django.http import HttpResponse from django.shortcuts import render , redirect from django.contrib.auth.decorators import login_required from .decorators import student_required , teacher_required , additional_info_check from django.contrib.auth import authenticate , login , logout from .forms import RegisterForm , TeacherForm , StudentForm , HomeworkAnswerForm , HomeworkForm , \\ TeacherAnswerOnHomeworkForm from .models import Homework , Teacher , Student , HomeworkAnswer , TeacherAnswerOnHomework def registerPage ( requset ): form = RegisterForm if requset . method == \"POST\" : form = RegisterForm ( requset . POST ) if form . is_valid (): form . save () return redirect ( 'login' ) context = { 'form' : form } return render ( requset , 'pages/register.html' , context ) def loginPage ( request ): if request . method == \"POST\" : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( 'home' ) context = {} return render ( request , 'pages/login.html' , context ) @login_required ( login_url = 'login' ) def add_info ( request ): if request . user . is_teacher : if request . method == \"POST\" : form = TeacherForm ( request . POST , user = request . user ) if form . is_valid (): form . save () return redirect ( 'home' ) else : form = TeacherForm ( user = request . user ) context = { \"form\" : form } return render ( request , \"pages/add_info.html\" , context ) if request . user . is_student : if request . method == \"POST\" : form = StudentForm ( request . POST , user = request . user ) if form . is_valid (): form . save () return redirect ( 'home' ) else : form = StudentForm ( user = request . user ) context = { \"form\" : form } return render ( request , \"pages/add_info.html\" , context ) return HttpResponse ( \"You are not teacher or student\" ) @login_required ( login_url = 'login' ) @additional_info_check () def home ( request ): if request . user . is_teacher : return redirect ( \"teacher_home\" ) if request . user . is_student : return redirect ( \"student_home\" ) return HttpResponse ( \"You are not teacher or student\" ) def get_checked_and_unchecked_homeworks ( homeworks ): checked_homeworks = [] unchecked_homeworks = [] for homework in homeworks : try : t = homework . teacheransweronhomework if t : checked_homeworks . append ( homework ) except TeacherAnswerOnHomework . DoesNotExist : unchecked_homeworks . append ( homework ) return { \"checked_homeworks\" : checked_homeworks , \"unchecked_homeworks\" : unchecked_homeworks } @login_required ( login_url = 'login' ) @teacher_required () def teacher_marks_page ( request ): homeworks = Homework . objects . filter ( teacher = request . user . teacher ) homework_answers = [] for homework in homeworks : try : homework_answers . append ( HomeworkAnswer . objects . get ( homework = homework )) except HomeworkAnswer . DoesNotExist : continue filtered_homeworks = get_checked_and_unchecked_homeworks ( homework_answers ) context = { \"homework_answers\" : homework_answers , \"checked_homeworks\" : filtered_homeworks [ \"checked_homeworks\" ], \"unchecked_homeworks\" : filtered_homeworks [ \"unchecked_homeworks\" ]} return render ( request , 'pages/marks.html' , context ) @login_required ( login_url = 'login' ) @student_required () def student_marks_page ( request ): student = Student . objects . get ( user = request . user ) homeworks = Homework . objects . filter ( student_group = student . student_group ) homework_answers = [] for homework in homeworks : try : homework_answers . append ( HomeworkAnswer . objects . get ( homework = homework )) except HomeworkAnswer . DoesNotExist : continue filtered_homeworks = get_checked_and_unchecked_homeworks ( homework_answers ) context = { \"homework_answers\" : homework_answers , \"checked_homeworks\" : filtered_homeworks [ \"checked_homeworks\" ], \"unchecked_homeworks\" : filtered_homeworks [ \"unchecked_homeworks\" ]} return render ( request , 'pages/marks.html' , context ) @login_required ( login_url = 'login' ) @teacher_required () def delete_homework ( request , work_id ): homework = Homework . objects . get ( pk = work_id ) homework . delete () return redirect ( \"home\" ) @login_required ( login_url = 'login' ) @teacher_required () def change_homework ( request , work_id ): homework = Homework . objects . get_or_create ( pk = work_id )[ 0 ] if request . method == \"POST\" : form = HomeworkForm ( request . POST , instance = homework , user = request . user ) if form . is_valid (): form . save () return redirect ( \"home\" ) form = HomeworkForm ( instance = homework , user = request . user ) context = { \"word_id\" : work_id , \"form\" : form , \"homework\" : homework } return render ( request , 'pages/create_homework.html' , context ) @login_required ( login_url = 'login' ) @teacher_required () def create_homework ( request ): if request . method == \"POST\" : form = HomeworkForm ( request . POST , user = request . user ) if form . is_valid (): form . save () return redirect ( \"home\" ) form = HomeworkForm ( user = request . user ) context = { \"form\" : form } return render ( request , 'pages/create_homework.html' , context ) @login_required ( login_url = 'login' ) @teacher_required () def teacher_home_page ( request ): teacher = Teacher . objects . get ( user = request . user ) homeworks = Homework . objects . filter ( teacher = teacher ) context = { \"homeworks\" : homeworks } return render ( request , \"pages/home.html\" , context ) @login_required ( login_url = 'login' ) @student_required () def student_home_page ( request ): student = Student . objects . get ( user = request . user ) completed_words = HomeworkAnswer . objects . all () completed_words = [ work . homework for work in completed_words ] homeworks = Homework . objects . filter ( student_group = student . student_group ) homeworks = [ homework for homework in homeworks if homework not in completed_words ] context = { \"homeworks\" : homeworks } return render ( request , \"pages/home.html\" , context ) @login_required ( login_url = 'login' ) @login_required () def marks ( request ): if request . user . is_teacher : return redirect ( 'teacher_marks' ) if request . user . is_student : return redirect ( 'student_marks' ) @login_required ( login_url = 'login' ) @teacher_required () def rate_homework ( request , work_id ): try : homework_answer = HomeworkAnswer . objects . get ( pk = work_id ) except HomeworkAnswer . DoesNotExist : return HttpResponse ( \"Homework answer does not exist\" ) try : if request . method == \"POST\" : form = TeacherAnswerOnHomeworkForm ( request . POST , instance = homework_answer . teacheransweronhomework , homework_answer = homework_answer ) if form . is_valid (): form . save () return redirect ( \"marks\" ) form = TeacherAnswerOnHomeworkForm ( instance = homework_answer . teacheransweronhomework , homework_answer = homework_answer ) context = { \"form\" : form , \"homework_answer\" : homework_answer } return render ( request , 'pages/rate_homework.html' , context ) except TeacherAnswerOnHomework . DoesNotExist : if request . method == \"POST\" : form = TeacherAnswerOnHomeworkForm ( request . POST , homework_answer = homework_answer ) if form . is_valid (): form . save () return redirect ( \"marks\" ) form = TeacherAnswerOnHomeworkForm ( homework_answer = homework_answer ) context = { \"form\" : form , \"homework_answer\" : homework_answer } return render ( request , 'pages/rate_homework.html' , context ) @login_required ( login_url = 'login' ) @student_required () def make_homework ( request , work_id ): student = Student . objects . get ( user = request . user ) try : homework = Homework . objects . get ( pk = work_id ) except Homework . DoesNotExist : return HttpResponse ( \"Homework answer does not exist\" ) if request . method == \"POST\" : form = HomeworkAnswerForm ( request . POST , homework = homework , student = student ) if form . is_valid (): form . save () return redirect ( \"marks\" ) form = HomeworkAnswerForm ( homework = homework , student = student ) context = { \"form\" : form , \"homework\" : homework } return render ( request , 'pages/make_homework.html' , context ) @login_required ( login_url = 'login' ) def logoutUser ( request ): logout ( request ) return redirect ( 'login' )","title":"views.py"}]}