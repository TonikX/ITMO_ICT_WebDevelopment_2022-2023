# Generated by Django 4.1.2 on 2022-12-03 14:01

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_date', models.DateField(verbose_name='Дата заезда')),
                ('check_out_date', models.DateField(verbose_name='Дата выезда')),
            ],
        ),
        migrations.CreateModel(
            name='Cleaning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата уборки')),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=70, verbose_name='Фамилия')),
                ('last_name', models.CharField(max_length=70, verbose_name='Имя')),
                ('patronymic', models.CharField(max_length=70, verbose_name='Отчество')),
            ],
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=70, verbose_name='Фамилия')),
                ('last_name', models.CharField(max_length=70, verbose_name='Имя')),
                ('patronymic', models.CharField(max_length=70, verbose_name='Отчество')),
                ('passport', models.CharField(max_length=10, verbose_name='Номер пасспорта')),
                ('city', models.CharField(max_length=30, verbose_name='Город, из которого прибыли')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(verbose_name='Номер комнаты')),
                ('type', models.CharField(choices=[('1', '1 bed'), ('2', '2 beds'), ('3', '3 beds')], max_length=1, verbose_name='Тип комнаты')),
                ('price', models.IntegerField(verbose_name='Стоимость')),
                ('floor', models.IntegerField(verbose_name='Этаж')),
                ('state', models.CharField(choices=[('+', 'Available'), ('-', 'Occupied')], max_length=1, verbose_name='Статус')),
                ('employee', models.ManyToManyField(through='hotel_app.Cleaning', to='hotel_app.employee', verbose_name='Сотрудник')),
                ('guest', models.ManyToManyField(through='hotel_app.Booking', to='hotel_app.guest', verbose_name='Гость')),
            ],
        ),
        migrations.AddField(
            model_name='cleaning',
            name='employee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel_app.employee', verbose_name='Сотрудник'),
        ),
        migrations.AddField(
            model_name='cleaning',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel_app.room', verbose_name='Комната'),
        ),
        migrations.AddField(
            model_name='booking',
            name='guest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel_app.guest', verbose_name='Гость'),
        ),
        migrations.AddField(
            model_name='booking',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hotel_app.room', verbose_name='Комната'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('tel', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
