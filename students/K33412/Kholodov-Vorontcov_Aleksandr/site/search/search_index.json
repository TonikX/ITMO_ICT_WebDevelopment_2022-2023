{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-23 \u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0435\u043d\u044f \u0437\u043e\u0432\u0443\u0442 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u0425\u043e\u043b\u043e\u0434\u043e\u0432-\u0412\u043e\u0440\u043e\u043d\u0446\u043e\u0432. \u042f \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0433\u0440\u0443\u043f\u043f\u044b K33412 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u0430 \u0418\u041a\u0422 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0430 \u0418\u0422\u041c\u041e. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0430 \u044d\u0442\u043e\u043c \u0441\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043f\u043e Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0437\u0430 \u043e\u0441\u0435\u043d\u043d\u0438\u0439 \u0441\u0435\u043c\u0435\u0441\u0442\u0440. \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 mkdocs: mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e"},{"location":"#web-2022-23","text":"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0435\u043d\u044f \u0437\u043e\u0432\u0443\u0442 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u0425\u043e\u043b\u043e\u0434\u043e\u0432-\u0412\u043e\u0440\u043e\u043d\u0446\u043e\u0432. \u042f \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0433\u0440\u0443\u043f\u043f\u044b K33412 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u0430 \u0418\u041a\u0422 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0430 \u0418\u0422\u041c\u041e.","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-23"},{"location":"#_1","text":"\u041d\u0430 \u044d\u0442\u043e\u043c \u0441\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043f\u043e Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0437\u0430 \u043e\u0441\u0435\u043d\u043d\u0438\u0439 \u0441\u0435\u043c\u0435\u0441\u0442\u0440.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"#mkdocs","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 mkdocs:"},{"location":"labs/lab_1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 - \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0426\u0435\u043b\u044c \u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043a\u0435\u0442\u043e\u0432. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0435 \u041f\u041e Python 3.10, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python: sys, socket. \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. server.py import socket sock = socket . socket () sock . bind (( 'localhost' , 7777 )) sock . listen ( 1 ) clientSocket , addr = sock . accept () print ( 'connected:' , addr ) while True : data = clientSocket . recv ( 1024 ) data = data . decode ( 'utf-8' ) print ( data ) if not data : break clientSocket . send ( 'Hello, client' . encode ( 'utf-8' )) sock . close () client.py import socket sock = socket . socket () sock . connect (( 'localhost' , 7777 )) sock . send ( 'Hello, server' . encode ( 'utf-8' )) data = sock . recv ( 1024 ) sock . close () print ( data . decode ( 'utf-8' )) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. server.py import socket from math import sqrt def quadratic_equation ( a , b , c ): d = b ** 2 - 4 * a * c if d >= 0 : return f \" { ( - b + sqrt ( b ** 2 - 4 * a * c )) / 2 * a } \" , f \" { ( - b - sqrt ( b ** 2 - 4 * a * c )) / 2 * a } \" else : return \"No real roots\" def server (): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( 'localhost' , 7778 )) sock . listen () conn , addr = sock . accept () print ( f \"Connected: { addr } \" ) a = \"\" b = \"\" c = \"\" result = \"\" while not result : while not a : conn . send ( 'a' . encode ( 'utf-8' )) data = conn . recv ( 1024 ) . decode ( 'utf-8' ) if data . isdigit (): a = float ( data ) while not b : conn . send ( 'b' . encode ( 'utf-8' )) data = conn . recv ( 1024 ) . decode ( 'utf-8' ) if data . isdigit (): b = float ( data ) while not c : conn . send ( 'c' . encode ( 'utf-8' )) data = conn . recv ( 1024 ) . decode ( 'utf-8' ) if data . isdigit (): c = float ( data ) result = quadratic_equation ( a , b , c ) conn . send ( str . encode ( f \"Result is { result } \" )) conn . close () if __name__ == \"__main__\" : server () client.py import socket def client (): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( 'localhost' , 7778 )) print ( \"Quadratic equation solver\" ) a = \"\" while not a . isdigit (): a = input ( \"Insert 'a': \" ) b = \"\" while not b . isdigit (): b = input ( \"Insert 'b': \" ) c = \"\" while not c . isdigit (): c = input ( \"Insert 'c': \" ) while True : data = sock . recv ( 1024 ) . decode ( 'utf-8' ) if data == 'a' : sock . send ( a . encode ( 'utf-8' )) if data == 'b' : sock . send ( b . encode ( 'utf-8' )) if data == 'c' : sock . send ( c . encode ( 'utf-8' )) if data . startswith ( \"Result\" ): print ( data ) break if __name__ == \"__main__\" : client () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. server.py import socket class MyServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) def serve_forever ( self ): try : self . server . bind (( self . host , self . port )) self . server . listen () while True : client , address = self . server . accept () self . serve_client ( client ) except KeyboardInterrupt : self . server . close () def serve_client ( self , client ): html = self . handle_request () self . send_response ( client , html ) client . close () @staticmethod def handle_request (): with open ( \"index.html\" , \"r\" ) as file : body = file . read () return body def send_response ( self , client , html ): client . sendall ( f 'HTTP/1.1 200 OK \\r\\n Content-Type: text/html; charset=utf-8 \\r\\n\\r\\n { html } ' . encode ()) if __name__ == '__main__' : MyServer ( '127.0.0.1' , 7779 , 'sample.com' ) . serve_forever () index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Task 3 </ title > </ head > < body > < h1 > Hi, there! </ h1 > < article > This is a random text for task 3 of Lab 1 in Web-programming course 2022-2023. Actually got no idea if someone is ever going to read this but anyway have a good day! </ article > </ body > </ html > \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. server.py import socket import threading class MyChat : def __init__ ( self , ip , host ): self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . sock . bind (( ip , host )) self . sock . listen () self . clients = {} # {client:alias} def broadcast ( self , message , alias ): for client in self . clients . keys (): client . send ( f \" { alias } : { message } \" . encode ()) def handle_client ( self , client ): while True : try : message = client . recv ( 1024 ) . decode () self . broadcast ( message , self . clients [ client ]) except : client . close () self . broadcast ( f ' { self . clients [ client ] } has left the chat...' . encode ( 'utf-8' )) self . clients . pop ( client ) break def receive ( self ): print ( \"Server is running\" ) while True : client , address = self . sock . accept () print ( f \" { str ( address ) } connected!\" ) client . send ( b \"What is your alias?\" ) alias = client . recv ( 1024 ) . decode () self . clients [ client ] = alias self . broadcast ( f \" { alias } has connected to the chat\" , \"Server\" ) thread = threading . Thread ( target = self . handle_client , args = ( client ,)) thread . start () def run ( self ): self . receive () if __name__ == \"__main__\" : MyChat ( \"127.0.0.1\" , 7780 ) . run () client.py import socket import threading class MyClient : def __init__ ( self , ip , port ): self . alias = \"\" self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . sock . connect (( ip , port )) def receive ( self ): while True : try : message = self . sock . recv ( 1024 ) . decode () if message == \"What's your alias?\" : self . sock . send ( self . alias . encode ()) else : print ( message ) except : print ( \"Error...\" ) self . sock . close () break def send ( self ): while True : message = input () self . sock . send ( message . encode ()) def start ( self ): receive_thread = threading . Thread ( target = self . receive ) receive_thread . start () send_thread = threading . Thread ( target = self . send ) send_thread . start () if __name__ == \"__main__\" : MyClient ( \"127.0.0.1\" , 7780 ) . start () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 , \u043e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket grades = {} class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port def serve_forever ( self ): serv_sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) try : serv_sock . bind (( self . host , self . port )) serv_sock . listen () while True : conn , _ = serv_sock . accept () try : self . serve_client ( conn ) except Exception as e : print ( 'Fail' , e ) finally : serv_sock . close () def serve_client ( self , client ): try : req = self . parse_request ( client ) resp = self . handle_request ( req ) self . send_response ( client , resp ) except ConnectionResetError : client = None if client : client . close () def parse_request_line ( self , rfile ): line = rfile . readline () line = line . decode ( 'utf-8' ) return line . split () def parse_request ( self , conn ): rfile = conn . makefile ( 'rb' ) method , target , ver = self . parse_request_line ( rfile ) request = { 'data' : {}, 'method' : method } if '?' in target : request [ 'method' ] = 'POST' values = target . split ( '?' )[ 1 ] . split ( '&' ) for value in values : a , b = value . split ( '=' ) request [ 'data' ][ a ] = b return request def handle_request ( self , req ): if req [ 'method' ] == 'POST' : return self . handle_post ( req ) else : return self . handle_get () def handle_get ( self ): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form><label>Subject</label><input name=\"discipline\" /><br><br><label>Grade</label><input name=\"grade\"/><br><br><input type=\"submit\"></form>' for subject in grades : body += f '<div><span> { subject } : { grades [ subject ] } </span></div>' body += '</div></body></html>' body = body . encode ( 'utf-8' ) headers = [( 'Content-Type' , content_type ), ( 'Content-Length' , len ( body ))] return Response ( 200 , 'OK' , headers , body ) def handle_post ( self , request ): discipline = request [ 'data' ][ 'discipline' ] grade = request [ 'data' ][ 'grade' ] if discipline not in grades : grades [ discipline ] = [] grades [ discipline ] . append ( grade ) return self . handle_get () def send_response ( self , conn , resp ): rfile = conn . makefile ( 'wb' ) status_line = f 'HTTP/1.1 { resp . status } { resp . reason } \\r\\n ' rfile . write ( status_line . encode ( 'utf-8' )) if resp . headers : for ( key , value ) in resp . headers : header_line = f ' { key } : { value } \\r\\n ' rfile . write ( header_line . encode ( 'utf-8' )) rfile . write ( b ' \\r\\n ' ) if resp . body : rfile . write ( resp . body ) rfile . flush () rfile . close () class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body if __name__ == '__main__' : serv = MyHTTPServer ( '127.0.0.1' , 7781 ) serv . serve_forever ()","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"labs/lab_1/#no1-","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 - \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438"},{"location":"labs/lab_1/#_1","text":"\u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043a\u0435\u0442\u043e\u0432.","title":"\u0426\u0435\u043b\u044c"},{"location":"labs/lab_1/#_2","text":"Python 3.10, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python: sys, socket.","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0435 \u041f\u041e"},{"location":"labs/lab_1/#_3","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"labs/lab_1/#no1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. server.py import socket sock = socket . socket () sock . bind (( 'localhost' , 7777 )) sock . listen ( 1 ) clientSocket , addr = sock . accept () print ( 'connected:' , addr ) while True : data = clientSocket . recv ( 1024 ) data = data . decode ( 'utf-8' ) print ( data ) if not data : break clientSocket . send ( 'Hello, client' . encode ( 'utf-8' )) sock . close () client.py import socket sock = socket . socket () sock . connect (( 'localhost' , 7777 )) sock . send ( 'Hello, server' . encode ( 'utf-8' )) data = sock . recv ( 1024 ) sock . close () print ( data . decode ( 'utf-8' ))","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161:"},{"location":"labs/lab_1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. server.py import socket from math import sqrt def quadratic_equation ( a , b , c ): d = b ** 2 - 4 * a * c if d >= 0 : return f \" { ( - b + sqrt ( b ** 2 - 4 * a * c )) / 2 * a } \" , f \" { ( - b - sqrt ( b ** 2 - 4 * a * c )) / 2 * a } \" else : return \"No real roots\" def server (): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( 'localhost' , 7778 )) sock . listen () conn , addr = sock . accept () print ( f \"Connected: { addr } \" ) a = \"\" b = \"\" c = \"\" result = \"\" while not result : while not a : conn . send ( 'a' . encode ( 'utf-8' )) data = conn . recv ( 1024 ) . decode ( 'utf-8' ) if data . isdigit (): a = float ( data ) while not b : conn . send ( 'b' . encode ( 'utf-8' )) data = conn . recv ( 1024 ) . decode ( 'utf-8' ) if data . isdigit (): b = float ( data ) while not c : conn . send ( 'c' . encode ( 'utf-8' )) data = conn . recv ( 1024 ) . decode ( 'utf-8' ) if data . isdigit (): c = float ( data ) result = quadratic_equation ( a , b , c ) conn . send ( str . encode ( f \"Result is { result } \" )) conn . close () if __name__ == \"__main__\" : server () client.py import socket def client (): sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( 'localhost' , 7778 )) print ( \"Quadratic equation solver\" ) a = \"\" while not a . isdigit (): a = input ( \"Insert 'a': \" ) b = \"\" while not b . isdigit (): b = input ( \"Insert 'b': \" ) c = \"\" while not c . isdigit (): c = input ( \"Insert 'c': \" ) while True : data = sock . recv ( 1024 ) . decode ( 'utf-8' ) if data == 'a' : sock . send ( a . encode ( 'utf-8' )) if data == 'b' : sock . send ( b . encode ( 'utf-8' )) if data == 'c' : sock . send ( c . encode ( 'utf-8' )) if data . startswith ( \"Result\" ): print ( data ) break if __name__ == \"__main__\" : client ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162:"},{"location":"labs/lab_1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. server.py import socket class MyServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) def serve_forever ( self ): try : self . server . bind (( self . host , self . port )) self . server . listen () while True : client , address = self . server . accept () self . serve_client ( client ) except KeyboardInterrupt : self . server . close () def serve_client ( self , client ): html = self . handle_request () self . send_response ( client , html ) client . close () @staticmethod def handle_request (): with open ( \"index.html\" , \"r\" ) as file : body = file . read () return body def send_response ( self , client , html ): client . sendall ( f 'HTTP/1.1 200 OK \\r\\n Content-Type: text/html; charset=utf-8 \\r\\n\\r\\n { html } ' . encode ()) if __name__ == '__main__' : MyServer ( '127.0.0.1' , 7779 , 'sample.com' ) . serve_forever () index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Task 3 </ title > </ head > < body > < h1 > Hi, there! </ h1 > < article > This is a random text for task 3 of Lab 1 in Web-programming course 2022-2023. Actually got no idea if someone is ever going to read this but anyway have a good day! </ article > </ body > </ html >","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163:"},{"location":"labs/lab_1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. server.py import socket import threading class MyChat : def __init__ ( self , ip , host ): self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . sock . bind (( ip , host )) self . sock . listen () self . clients = {} # {client:alias} def broadcast ( self , message , alias ): for client in self . clients . keys (): client . send ( f \" { alias } : { message } \" . encode ()) def handle_client ( self , client ): while True : try : message = client . recv ( 1024 ) . decode () self . broadcast ( message , self . clients [ client ]) except : client . close () self . broadcast ( f ' { self . clients [ client ] } has left the chat...' . encode ( 'utf-8' )) self . clients . pop ( client ) break def receive ( self ): print ( \"Server is running\" ) while True : client , address = self . sock . accept () print ( f \" { str ( address ) } connected!\" ) client . send ( b \"What is your alias?\" ) alias = client . recv ( 1024 ) . decode () self . clients [ client ] = alias self . broadcast ( f \" { alias } has connected to the chat\" , \"Server\" ) thread = threading . Thread ( target = self . handle_client , args = ( client ,)) thread . start () def run ( self ): self . receive () if __name__ == \"__main__\" : MyChat ( \"127.0.0.1\" , 7780 ) . run () client.py import socket import threading class MyClient : def __init__ ( self , ip , port ): self . alias = \"\" self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . sock . connect (( ip , port )) def receive ( self ): while True : try : message = self . sock . recv ( 1024 ) . decode () if message == \"What's your alias?\" : self . sock . send ( self . alias . encode ()) else : print ( message ) except : print ( \"Error...\" ) self . sock . close () break def send ( self ): while True : message = input () self . sock . send ( message . encode ()) def start ( self ): receive_thread = threading . Thread ( target = self . receive ) receive_thread . start () send_thread = threading . Thread ( target = self . send ) send_thread . start () if __name__ == \"__main__\" : MyClient ( \"127.0.0.1\" , 7780 ) . start ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164:"},{"location":"labs/lab_1/#no5","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 , \u043e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket grades = {} class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port def serve_forever ( self ): serv_sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) try : serv_sock . bind (( self . host , self . port )) serv_sock . listen () while True : conn , _ = serv_sock . accept () try : self . serve_client ( conn ) except Exception as e : print ( 'Fail' , e ) finally : serv_sock . close () def serve_client ( self , client ): try : req = self . parse_request ( client ) resp = self . handle_request ( req ) self . send_response ( client , resp ) except ConnectionResetError : client = None if client : client . close () def parse_request_line ( self , rfile ): line = rfile . readline () line = line . decode ( 'utf-8' ) return line . split () def parse_request ( self , conn ): rfile = conn . makefile ( 'rb' ) method , target , ver = self . parse_request_line ( rfile ) request = { 'data' : {}, 'method' : method } if '?' in target : request [ 'method' ] = 'POST' values = target . split ( '?' )[ 1 ] . split ( '&' ) for value in values : a , b = value . split ( '=' ) request [ 'data' ][ a ] = b return request def handle_request ( self , req ): if req [ 'method' ] == 'POST' : return self . handle_post ( req ) else : return self . handle_get () def handle_get ( self ): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form><label>Subject</label><input name=\"discipline\" /><br><br><label>Grade</label><input name=\"grade\"/><br><br><input type=\"submit\"></form>' for subject in grades : body += f '<div><span> { subject } : { grades [ subject ] } </span></div>' body += '</div></body></html>' body = body . encode ( 'utf-8' ) headers = [( 'Content-Type' , content_type ), ( 'Content-Length' , len ( body ))] return Response ( 200 , 'OK' , headers , body ) def handle_post ( self , request ): discipline = request [ 'data' ][ 'discipline' ] grade = request [ 'data' ][ 'grade' ] if discipline not in grades : grades [ discipline ] = [] grades [ discipline ] . append ( grade ) return self . handle_get () def send_response ( self , conn , resp ): rfile = conn . makefile ( 'wb' ) status_line = f 'HTTP/1.1 { resp . status } { resp . reason } \\r\\n ' rfile . write ( status_line . encode ( 'utf-8' )) if resp . headers : for ( key , value ) in resp . headers : header_line = f ' { key } : { value } \\r\\n ' rfile . write ( header_line . encode ( 'utf-8' )) rfile . write ( b ' \\r\\n ' ) if resp . body : rfile . write ( resp . body ) rfile . flush () rfile . close () class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body if __name__ == '__main__' : serv = MyHTTPServer ( '127.0.0.1' , 7781 ) serv . serve_forever ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165:"},{"location":"labs/lab_2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django \u0426\u0435\u043b\u044c \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0435 \u041f\u041e Python 3.10, Django 3. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). - \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438 models.py from django.db import models from django.contrib.auth.models import User , AbstractUser from django.dispatch import receiver class Homework ( models . Model ): homework_id = models . IntegerField ( blank = False , primary_key = True ) name = models . CharField ( max_length = 100 , blank = False ) subject = models . CharField ( max_length = 30 , blank = False ) teacher = models . CharField ( max_length = 30 , blank = False ) begin_date = models . DateField ( blank = False ) deadline = models . DateField ( blank = False ) task = models . CharField ( max_length = 1000 ) penalty = models . CharField ( max_length = 100 ) students = models . ManyToManyField ( 'Student' , through = 'Assignment' ) def __str__ ( self ): return self . name class Assignment ( models . Model ): assignment_id = models . IntegerField ( blank = False , primary_key = True ) student = models . ForeignKey ( 'Student' , on_delete = models . CASCADE ) homework = models . ForeignKey ( 'Homework' , on_delete = models . CASCADE ) grade = models . CharField ( default = '-' , max_length = 5 , blank = True ) submission = models . CharField ( max_length = 1000 , blank = True ) def __str__ ( self ): return f ' { self . student . first_name } { self . student . last_name } : \\ { self . homework . name } \\ | { \"graded\" if self . grade != \"-\" else \"submitted\" if len ( self . submission ) else \"in process\" } ' class Student ( AbstractUser ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) REQUIRED_FIELDS = [ 'first_name' , 'last_name' ] def __str__ ( self ): return f ' { self . first_name } { self . last_name } ' @receiver ( models . signals . post_save , sender = Homework ) def execute_after_save ( sender , instance , created , * args , ** kwargs ): if created : students = Student . objects . exclude ( username = \"teacher\" ) . all () for student in students : duplicates = Assignment . objects . filter ( student = student , homework = instance ) . all () if not len ( duplicates ): assignment = Assignment ( student = student , homework = instance ) assignment . save () forms.py from django import forms from main.models import Assignment class AssignmentForm ( forms . ModelForm ): submission = forms . CharField ( widget = forms . Textarea ) class Meta : model = Assignment fields = [ 'submission' ] views.py from django.shortcuts import render , redirect from django.urls import reverse from django.db import IntegrityError from django.contrib.auth import authenticate , login , logout from django.views.generic import ListView , DetailView from django.contrib.auth.decorators import login_required from main.models import Student , Homework , Assignment from main.forms import AssignmentForm def register ( request ): if request . method == \"POST\" : username = request . POST [ \"username\" ] password = request . POST [ \"password\" ] email = request . POST [ \"email\" ] first_name = request . POST . get ( \"first_name\" , 'NaN' ) last_name = request . POST . get ( \"last_name\" , 'NaN' ) confirmation = request . POST [ \"confirmation\" ] if password != confirmation : return render ( request , \"register.html\" , { \"message\" : \"passwords do not match\" }) try : student = Student . objects . create_user ( username , email , password ) student . first_name = first_name student . last_name = last_name student . save () homeworks = Homework . objects . all () for homework in homeworks : assignment = Assignment ( student = student , homework = homework ) assignment . save () except IntegrityError : return render ( request , \"register.html\" , { \"message\" : \"username already taken\" }) login ( request , student ) return redirect ( reverse ( \"homework_list\" )) else : return render ( request , \"register.html\" ) def log_in ( request ): if request . method == \"POST\" : username = request . POST [ 'username' ] password = request . POST [ 'password' ] user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( reverse ( 'homework_list' )) else : error_text = 'invalid credentials' return render ( request , 'login.html' , locals ()) @login_required def log_out ( request ): logout ( request ) return redirect ( reverse ( 'login' )) @login_required def class_grades_list ( request ): context = {} students = Student . objects . exclude ( username = \"teacher\" ) . all () context [ \"students\" ] = students context [ \"homeworks\" ] = Homework . objects . all () context [ \"grades\" ] = {} assignments = Assignment . objects . all () for homework in context [ \"homeworks\" ]: for assignment in assignments : if assignment . homework == homework and assignment . student . pk != 3 : if not assignment . student . pk in context [ \"grades\" ]: context [ \"grades\" ][ assignment . student . pk ] = [] context [ \"grades\" ][ assignment . student . pk ] . append ( assignment . grade ) return render ( request , 'class_grades.html' , context ) class HomeworkList ( ListView ): model = Homework template_name = 'homework_list.html' class HomeworkDetail ( DetailView ): model = Homework template_name = 'homework_detail.html' def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ 'form' ] = AssignmentForm () return context @login_required def hand_in ( request , pk ): homework = Homework . objects . get ( pk = pk ) assignment = Assignment . objects . get ( student = request . user , homework = homework ) form = AssignmentForm ( request . POST , instance = assignment ) if form . is_valid (): form . save () return redirect ( reverse ( 'homework_list' ))","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"labs/lab_2/#no2-django","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django"},{"location":"labs/lab_2/#_1","text":"\u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django.","title":"\u0426\u0435\u043b\u044c"},{"location":"labs/lab_2/#_2","text":"Python 3.10, Django 3.","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0435 \u041f\u041e"},{"location":"labs/lab_2/#_3","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:"},{"location":"labs/lab_2/#_4","text":"\u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). - \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430.","title":"\u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439"},{"location":"labs/lab_2/#_5","text":"models.py from django.db import models from django.contrib.auth.models import User , AbstractUser from django.dispatch import receiver class Homework ( models . Model ): homework_id = models . IntegerField ( blank = False , primary_key = True ) name = models . CharField ( max_length = 100 , blank = False ) subject = models . CharField ( max_length = 30 , blank = False ) teacher = models . CharField ( max_length = 30 , blank = False ) begin_date = models . DateField ( blank = False ) deadline = models . DateField ( blank = False ) task = models . CharField ( max_length = 1000 ) penalty = models . CharField ( max_length = 100 ) students = models . ManyToManyField ( 'Student' , through = 'Assignment' ) def __str__ ( self ): return self . name class Assignment ( models . Model ): assignment_id = models . IntegerField ( blank = False , primary_key = True ) student = models . ForeignKey ( 'Student' , on_delete = models . CASCADE ) homework = models . ForeignKey ( 'Homework' , on_delete = models . CASCADE ) grade = models . CharField ( default = '-' , max_length = 5 , blank = True ) submission = models . CharField ( max_length = 1000 , blank = True ) def __str__ ( self ): return f ' { self . student . first_name } { self . student . last_name } : \\ { self . homework . name } \\ | { \"graded\" if self . grade != \"-\" else \"submitted\" if len ( self . submission ) else \"in process\" } ' class Student ( AbstractUser ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) REQUIRED_FIELDS = [ 'first_name' , 'last_name' ] def __str__ ( self ): return f ' { self . first_name } { self . last_name } ' @receiver ( models . signals . post_save , sender = Homework ) def execute_after_save ( sender , instance , created , * args , ** kwargs ): if created : students = Student . objects . exclude ( username = \"teacher\" ) . all () for student in students : duplicates = Assignment . objects . filter ( student = student , homework = instance ) . all () if not len ( duplicates ): assignment = Assignment ( student = student , homework = instance ) assignment . save () forms.py from django import forms from main.models import Assignment class AssignmentForm ( forms . ModelForm ): submission = forms . CharField ( widget = forms . Textarea ) class Meta : model = Assignment fields = [ 'submission' ] views.py from django.shortcuts import render , redirect from django.urls import reverse from django.db import IntegrityError from django.contrib.auth import authenticate , login , logout from django.views.generic import ListView , DetailView from django.contrib.auth.decorators import login_required from main.models import Student , Homework , Assignment from main.forms import AssignmentForm def register ( request ): if request . method == \"POST\" : username = request . POST [ \"username\" ] password = request . POST [ \"password\" ] email = request . POST [ \"email\" ] first_name = request . POST . get ( \"first_name\" , 'NaN' ) last_name = request . POST . get ( \"last_name\" , 'NaN' ) confirmation = request . POST [ \"confirmation\" ] if password != confirmation : return render ( request , \"register.html\" , { \"message\" : \"passwords do not match\" }) try : student = Student . objects . create_user ( username , email , password ) student . first_name = first_name student . last_name = last_name student . save () homeworks = Homework . objects . all () for homework in homeworks : assignment = Assignment ( student = student , homework = homework ) assignment . save () except IntegrityError : return render ( request , \"register.html\" , { \"message\" : \"username already taken\" }) login ( request , student ) return redirect ( reverse ( \"homework_list\" )) else : return render ( request , \"register.html\" ) def log_in ( request ): if request . method == \"POST\" : username = request . POST [ 'username' ] password = request . POST [ 'password' ] user = authenticate ( request , username = username , password = password ) if user is not None : login ( request , user ) return redirect ( reverse ( 'homework_list' )) else : error_text = 'invalid credentials' return render ( request , 'login.html' , locals ()) @login_required def log_out ( request ): logout ( request ) return redirect ( reverse ( 'login' )) @login_required def class_grades_list ( request ): context = {} students = Student . objects . exclude ( username = \"teacher\" ) . all () context [ \"students\" ] = students context [ \"homeworks\" ] = Homework . objects . all () context [ \"grades\" ] = {} assignments = Assignment . objects . all () for homework in context [ \"homeworks\" ]: for assignment in assignments : if assignment . homework == homework and assignment . student . pk != 3 : if not assignment . student . pk in context [ \"grades\" ]: context [ \"grades\" ][ assignment . student . pk ] = [] context [ \"grades\" ][ assignment . student . pk ] . append ( assignment . grade ) return render ( request , 'class_grades.html' , context ) class HomeworkList ( ListView ): model = Homework template_name = 'homework_list.html' class HomeworkDetail ( DetailView ): model = Homework template_name = 'homework_detail.html' def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ 'form' ] = AssignmentForm () return context @login_required def hand_in ( request , pk ): homework = Homework . objects . get ( pk = pk ) assignment = Assignment . objects . get ( student = request . user , homework = homework ) form = AssignmentForm ( request . POST , instance = assignment ) if form . is_valid (): form . save () return redirect ( reverse ( 'homework_list' ))","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438"},{"location":"labs/lab_3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043d\u0430 django rest \u0426\u0435\u043b\u044c \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 (backend) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST framework. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438 models.py - \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 from django.db import models from django.contrib.auth.models import AbstractUser from django.db.models.deletion import CASCADE class User ( AbstractUser ): tel = models . CharField ( verbose_name = '\u0422\u0435\u043b\u0435\u0444\u043e\u043d' , max_length = 15 , null = True , blank = True ) REQUIRED_FIELDS = [ 'first_name' , 'last_name' , 'tel' ] def __str__ ( self ): return self . username class Instance ( models . Model ): id_instance = models . AutoField ( \"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\" , primary_key = True ) section = models . CharField ( max_length = 20 , verbose_name = '\u0420\u0430\u0437\u0434\u0435\u043b' ) code = models . CharField ( max_length = 20 , verbose_name = '\u0410\u0440\u0442\u0438\u043a\u0443\u043b' ) year = models . IntegerField ( verbose_name = '\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f' ) conditions = ( ( '\u0445' , '\u0445\u043e\u0440\u043e\u0448\u0435\u0435' ), ( '\u0443' , '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435' ), ( '\u043f' , '\u043f\u043b\u043e\u0445\u043e\u0435' ), ) condition = models . CharField ( max_length = 1 , choices = conditions , verbose_name = '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430' ) book = models . ForeignKey ( 'Book' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = CASCADE ) def __str__ ( self ): return self . code class Book ( models . Model ): id_book = models . AutoField ( \"ID_\u043a\u043d\u0438\u0433\u0438\" , primary_key = True ) name = models . CharField ( max_length = 50 , verbose_name = '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435' ) author = models . CharField ( max_length = 70 , verbose_name = \"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\" ) publisher = models . CharField ( max_length = 30 , verbose_name = '\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e' ) def __str__ ( self ): return self . name class Reader ( models . Model ): ticket = models . CharField ( max_length = 20 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430' ) name = models . CharField ( max_length = 70 , verbose_name = \"\u0424\u0418\u041e\" ) passport = models . CharField ( max_length = 20 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430' ) birth_date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f' ) address = models . CharField ( max_length = 100 , verbose_name = '\u0410\u0434\u0440\u0435\u0441' ) phone_number = models . CharField ( max_length = 20 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430' ) educations = ( ( '\u043d' , '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435' ), ( '\u0441' , '\u0441\u0440\u0435\u0434\u043d\u0435\u0435' ), ( '\u0432' , '\u0432\u044b\u0441\u0448\u0435\u0435' ), ) education = models . CharField ( max_length = 1 , choices = educations , verbose_name = '\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435' ) degree = models . BooleanField ( default = False , verbose_name = '\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438' ) registration_date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438' ) instances = models . ManyToManyField ( 'Instance' , verbose_name = '\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438' , through = 'ReaderBook' , related_name = 'reader_book' ) room = models . ForeignKey ( 'Room' , verbose_name = '\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c' , on_delete = CASCADE , null = True ) def __str__ ( self ): return self . name class ReaderRoom ( models . Model ): reader = models . ForeignKey ( 'Reader' , verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c' , on_delete = CASCADE ) room = models . ForeignKey ( 'Room' , verbose_name = '\u0417\u0430\u043b' , on_delete = CASCADE ) date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430' , null = True ) class BookInst ( models . Model ): inst = models . ForeignKey ( 'Instance' , verbose_name = '\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440' , on_delete = CASCADE ) book = models . ForeignKey ( 'Book' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = CASCADE ) class ReaderBook ( models . Model ): reader = models . ForeignKey ( 'Reader' , verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c' , on_delete = CASCADE ) book = models . ForeignKey ( 'Instance' , verbose_name = '\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440' , on_delete = CASCADE ) date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438' , null = True ) class BookRoom ( models . Model ): book = models . ForeignKey ( 'Instance' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = CASCADE ) room = models . ForeignKey ( 'Room' , verbose_name = '\u0417\u0430\u043b' , on_delete = CASCADE ) class Room ( models . Model ): name = models . CharField ( max_length = 20 , verbose_name = '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435' ) capacity = models . IntegerField ( verbose_name = '\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c' ) books = models . ManyToManyField ( 'Instance' , verbose_name = '\u041a\u043d\u0438\u0433\u0438' , through = 'BookRoom' , related_name = 'book_room' ) def __str__ ( self ): return self . name views.py from .serializers import * from rest_framework.generics import CreateAPIView , ListAPIView , RetrieveUpdateDestroyAPIView , RetrieveAPIView from rest_framework import generics from rest_framework.views import APIView , Response from datetime import date class ReaderListAPIView ( ListAPIView ): serializer_class = ReaderSerializer queryset = Reader . objects . all () class CreateReader ( CreateAPIView ): serializer_class = ReaderSerializer queryset = Reader . objects . all () class BookListAPIView ( ListAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class CreateBook ( CreateAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class InstanceListAPIView ( ListAPIView ): serializer_class = InstanceSerializer queryset = Instance . objects . all () class CreateInstance ( CreateAPIView ): serializer_class = InstanceSerializer queryset = Instance . objects . all () class OneBook ( RetrieveUpdateDestroyAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class OneInstance ( RetrieveUpdateDestroyAPIView ): serializer_class = InstanceSerializer queryset = Instance . objects . all () class OneReader ( RetrieveUpdateDestroyAPIView ): serializer_class = ReaderSerializer queryset = Instance . objects . all () class BookReaders ( CreateAPIView ): serializer_class = ReaderBookSerializer queryset = ReaderBook . objects . all () class RoomListAPIView ( ListAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () class RoomCreateAPIView ( CreateAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () class OneRoom ( RetrieveUpdateDestroyAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () class RoomBook ( CreateAPIView ): serializer_class = BookRoomSerializer queryset = BookRoom . objects . all () class RoomReader ( CreateAPIView ): serializer_class = ReaderRoomSerializer queryset = ReaderRoom . objects . all () class BookInst ( CreateAPIView ): serializer_class = BookInstSerializer queryset = BookInst . objects . all () class ReadersInst ( generics . RetrieveAPIView ): serializer_class = ReaderInstsSerializer queryset = Reader . objects . all () class RecentlyBookDate ( ListAPIView ): # serializer_class = RecentlyBookDateSerializer # queryset = ReaderBook.objects.all() def get ( self , request ): today = date . today () reader = ReaderBook . objects . filter ( date__lte = today ) content = { \"reader\" : reader } return Response ( content ) serializers.py from rest_framework import serializers from .models import * class ReaderSerializer ( serializers . ModelSerializer ): books = serializers . SlugRelatedField ( read_only = True , many = True , slug_field = 'books' ) class Meta : model = Reader fields = \"__all__\" class BookSerializer ( serializers . ModelSerializer ): class Meta : model = Book fields = \"__all__\" class InstanceSerializer ( serializers . ModelSerializer ): class Meta : model = Instance fields = \"__all__\" class ReaderBookSerializer ( serializers . ModelSerializer ): class Meta : model = ReaderBook fields = \"__all__\" class RoomSerializer ( serializers . ModelSerializer ): books = serializers . SlugRelatedField ( read_only = True , many = True , slug_field = 'name' ) class Meta : model = Room fields = \"__all__\" class BookRoomSerializer ( serializers . ModelSerializer ): class Meta : model = BookRoom fields = \"__all__\" class ReaderRoomSerializer ( serializers . ModelSerializer ): class Meta : model = ReaderRoom fields = \"__all__\" class BookInstSerializer ( serializers . ModelSerializer ): class Meta : model = BookInst fields = \"__all__\" class ReaderInstsSerializer ( serializers . ModelSerializer ): class Meta : model = Reader fields = [ \"instances\" ] class RecentlyBookDateSerializer ( serializers . ModelSerializer ): class Meta : model = ReaderBook fields = [ \"reader\" ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"labs/lab_3/#no3-django-rest","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043d\u0430 django rest"},{"location":"labs/lab_3/#_1","text":"\u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 (backend) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST framework.","title":"\u0426\u0435\u043b\u044c"},{"location":"labs/lab_3/#_2","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:"},{"location":"labs/lab_3/#_3","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438.","title":"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430"},{"location":"labs/lab_3/#_4","text":"models.py - \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 from django.db import models from django.contrib.auth.models import AbstractUser from django.db.models.deletion import CASCADE class User ( AbstractUser ): tel = models . CharField ( verbose_name = '\u0422\u0435\u043b\u0435\u0444\u043e\u043d' , max_length = 15 , null = True , blank = True ) REQUIRED_FIELDS = [ 'first_name' , 'last_name' , 'tel' ] def __str__ ( self ): return self . username class Instance ( models . Model ): id_instance = models . AutoField ( \"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\" , primary_key = True ) section = models . CharField ( max_length = 20 , verbose_name = '\u0420\u0430\u0437\u0434\u0435\u043b' ) code = models . CharField ( max_length = 20 , verbose_name = '\u0410\u0440\u0442\u0438\u043a\u0443\u043b' ) year = models . IntegerField ( verbose_name = '\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f' ) conditions = ( ( '\u0445' , '\u0445\u043e\u0440\u043e\u0448\u0435\u0435' ), ( '\u0443' , '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435' ), ( '\u043f' , '\u043f\u043b\u043e\u0445\u043e\u0435' ), ) condition = models . CharField ( max_length = 1 , choices = conditions , verbose_name = '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430' ) book = models . ForeignKey ( 'Book' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = CASCADE ) def __str__ ( self ): return self . code class Book ( models . Model ): id_book = models . AutoField ( \"ID_\u043a\u043d\u0438\u0433\u0438\" , primary_key = True ) name = models . CharField ( max_length = 50 , verbose_name = '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435' ) author = models . CharField ( max_length = 70 , verbose_name = \"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\" ) publisher = models . CharField ( max_length = 30 , verbose_name = '\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e' ) def __str__ ( self ): return self . name class Reader ( models . Model ): ticket = models . CharField ( max_length = 20 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430' ) name = models . CharField ( max_length = 70 , verbose_name = \"\u0424\u0418\u041e\" ) passport = models . CharField ( max_length = 20 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430' ) birth_date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f' ) address = models . CharField ( max_length = 100 , verbose_name = '\u0410\u0434\u0440\u0435\u0441' ) phone_number = models . CharField ( max_length = 20 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430' ) educations = ( ( '\u043d' , '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435' ), ( '\u0441' , '\u0441\u0440\u0435\u0434\u043d\u0435\u0435' ), ( '\u0432' , '\u0432\u044b\u0441\u0448\u0435\u0435' ), ) education = models . CharField ( max_length = 1 , choices = educations , verbose_name = '\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435' ) degree = models . BooleanField ( default = False , verbose_name = '\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438' ) registration_date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438' ) instances = models . ManyToManyField ( 'Instance' , verbose_name = '\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438' , through = 'ReaderBook' , related_name = 'reader_book' ) room = models . ForeignKey ( 'Room' , verbose_name = '\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c' , on_delete = CASCADE , null = True ) def __str__ ( self ): return self . name class ReaderRoom ( models . Model ): reader = models . ForeignKey ( 'Reader' , verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c' , on_delete = CASCADE ) room = models . ForeignKey ( 'Room' , verbose_name = '\u0417\u0430\u043b' , on_delete = CASCADE ) date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430' , null = True ) class BookInst ( models . Model ): inst = models . ForeignKey ( 'Instance' , verbose_name = '\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440' , on_delete = CASCADE ) book = models . ForeignKey ( 'Book' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = CASCADE ) class ReaderBook ( models . Model ): reader = models . ForeignKey ( 'Reader' , verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c' , on_delete = CASCADE ) book = models . ForeignKey ( 'Instance' , verbose_name = '\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440' , on_delete = CASCADE ) date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438' , null = True ) class BookRoom ( models . Model ): book = models . ForeignKey ( 'Instance' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = CASCADE ) room = models . ForeignKey ( 'Room' , verbose_name = '\u0417\u0430\u043b' , on_delete = CASCADE ) class Room ( models . Model ): name = models . CharField ( max_length = 20 , verbose_name = '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435' ) capacity = models . IntegerField ( verbose_name = '\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c' ) books = models . ManyToManyField ( 'Instance' , verbose_name = '\u041a\u043d\u0438\u0433\u0438' , through = 'BookRoom' , related_name = 'book_room' ) def __str__ ( self ): return self . name views.py from .serializers import * from rest_framework.generics import CreateAPIView , ListAPIView , RetrieveUpdateDestroyAPIView , RetrieveAPIView from rest_framework import generics from rest_framework.views import APIView , Response from datetime import date class ReaderListAPIView ( ListAPIView ): serializer_class = ReaderSerializer queryset = Reader . objects . all () class CreateReader ( CreateAPIView ): serializer_class = ReaderSerializer queryset = Reader . objects . all () class BookListAPIView ( ListAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class CreateBook ( CreateAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class InstanceListAPIView ( ListAPIView ): serializer_class = InstanceSerializer queryset = Instance . objects . all () class CreateInstance ( CreateAPIView ): serializer_class = InstanceSerializer queryset = Instance . objects . all () class OneBook ( RetrieveUpdateDestroyAPIView ): serializer_class = BookSerializer queryset = Book . objects . all () class OneInstance ( RetrieveUpdateDestroyAPIView ): serializer_class = InstanceSerializer queryset = Instance . objects . all () class OneReader ( RetrieveUpdateDestroyAPIView ): serializer_class = ReaderSerializer queryset = Instance . objects . all () class BookReaders ( CreateAPIView ): serializer_class = ReaderBookSerializer queryset = ReaderBook . objects . all () class RoomListAPIView ( ListAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () class RoomCreateAPIView ( CreateAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () class OneRoom ( RetrieveUpdateDestroyAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () class RoomBook ( CreateAPIView ): serializer_class = BookRoomSerializer queryset = BookRoom . objects . all () class RoomReader ( CreateAPIView ): serializer_class = ReaderRoomSerializer queryset = ReaderRoom . objects . all () class BookInst ( CreateAPIView ): serializer_class = BookInstSerializer queryset = BookInst . objects . all () class ReadersInst ( generics . RetrieveAPIView ): serializer_class = ReaderInstsSerializer queryset = Reader . objects . all () class RecentlyBookDate ( ListAPIView ): # serializer_class = RecentlyBookDateSerializer # queryset = ReaderBook.objects.all() def get ( self , request ): today = date . today () reader = ReaderBook . objects . filter ( date__lte = today ) content = { \"reader\" : reader } return Response ( content ) serializers.py from rest_framework import serializers from .models import * class ReaderSerializer ( serializers . ModelSerializer ): books = serializers . SlugRelatedField ( read_only = True , many = True , slug_field = 'books' ) class Meta : model = Reader fields = \"__all__\" class BookSerializer ( serializers . ModelSerializer ): class Meta : model = Book fields = \"__all__\" class InstanceSerializer ( serializers . ModelSerializer ): class Meta : model = Instance fields = \"__all__\" class ReaderBookSerializer ( serializers . ModelSerializer ): class Meta : model = ReaderBook fields = \"__all__\" class RoomSerializer ( serializers . ModelSerializer ): books = serializers . SlugRelatedField ( read_only = True , many = True , slug_field = 'name' ) class Meta : model = Room fields = \"__all__\" class BookRoomSerializer ( serializers . ModelSerializer ): class Meta : model = BookRoom fields = \"__all__\" class ReaderRoomSerializer ( serializers . ModelSerializer ): class Meta : model = ReaderRoom fields = \"__all__\" class BookInstSerializer ( serializers . ModelSerializer ): class Meta : model = BookInst fields = \"__all__\" class ReaderInstsSerializer ( serializers . ModelSerializer ): class Meta : model = Reader fields = [ \"instances\" ] class RecentlyBookDateSerializer ( serializers . ModelSerializer ): class Meta : model = ReaderBook fields = [ \"reader\" ]","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438"},{"location":"labs/lab_4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0438 \u0437\u0430\u0447\u0442\u0435\u043d\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043a\u0443\u0440\u0441\u0430 \u043f\u043e \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 . \u0426\u0435\u043b\u044c \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u041c\u0438\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 \u043d\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Vue.js. \u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438 \u0420\u043e\u0443\u0442\u0435\u0440 router/index.js impor t { crea te Rou ter , crea te WebHis t ory } fr om 'vue - rou ter ' impor t Abou t View fr om \"@/views/AboutView.vue\" ; impor t Logi n View fr om \"@/views/LoginView.vue\" ; impor t Regis ter View fr om \"@/views/RegisterView.vue\" ; impor t Mai n View fr om \"@/views/MainView.vue\" ; impor t Walle t View fr om \"@/views/WalletView.vue\" ; impor t Char ts View fr om \"@/views/ChartsView.vue\" ; co nst rou ter = crea te Rou ter ( { his t ory : crea te WebHis t ory(impor t .me ta .e n v.BASE_URL) , rou tes : [ { pa t h : '/' , na me : 'abou t ' , compo nent : Abou t View }, { pa t h : '/logi n ' , na me : 'logi n ' , compo nent : Logi n View }, { pa t h : '/regis ter ' , na me : 'regis ter ' , compo nent : Regis ter View }, { pa t h : '/mai n ' , na me : 'mai n ' , compo nent : Mai n View }, { pa t h : '/perso nal ' , na me : 'walle t ' , compo nent : Walle t View }, { pa t h : '/char ts ' , na me : 'char t ' , compo nent : Char ts View }, ] } ) expor t de fault rou ter \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b Header.vue - header \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f < template > < header class = \"d-flex justify-content-center py-3\" > < ul class = \"nav nav-pills\" > < li class = \"nav-item\" > < div class = \"nav-link pt-1\" > < svg class = \"nav-logo\" style = \" height: 27px\" > < use xlink:href = \"#logo\" > </ use > </ svg > </ div > </ li > < li class = \"nav-item\" >< a href = \"/main\" class = \"nav-link\" > \u041a\u0443\u043f\u0438\u0442\u044c \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0443 </ a ></ li > < li class = \"nav-item\" >< a href = \"#\" @ click = \"checkAuth\" class = \"nav-link\" > \u041c\u043e\u0439 \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044c </ a ></ li > <!-- <li class=\"nav-item\"><a href=\"/charts\" class=\"nav-link\">\u0413\u0440\u0430\u0444\u0438\u043a\u0438</a></li>--> < li class = \"nav-item\" id = \"logout\" :style = \"[this.isLogged ? {'display' : 'block'} : {'display' : 'none'}]\" > < button class = \"logout-button\" @ click = \"logout\" style = \"border: none; background-color: white; padding-top:5px\" > < svg class = \"logout-img\" style = \"width: 27px; height: 27px\" > < use xlink:href = \"#logout\" > </ use > </ svg > </ button > </ li > </ ul > </ header > </ template > < script > import router from \"@/router\" ; export default { name : 'Header' , data () { return { isLogged : false } }, methods : { logout () { if ( confirm ( '\u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0432\u044b\u0439\u0442\u0438?' )) { localStorage . clear () if ( this . $route . path === '/personal' ) { router . push ( '/' ) } else { window . location . reload () } } }, checkAuth () { if ( ! this . isLogged ) { router . push ( '/login' ) } else { router . push ( '/personal' ) } } }, mounted () { localStorage . getItem ( 'pinia_users' ) ? this . isLogged = true : this . isLogged = false } } </ script > < style > . nav-logo { width : 40 % ; } . nav-link { font-family : Tahoma , sans-serif ; font-weight : bold ; color : var ( --link-color ) !important ; } . nav-link : hover { color : var ( --link-hover ) !important ; } </ style > HeaderUnlogged.vue - header \u0434\u043b\u044f \u043d\u0435\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f < template > < header class = \"d-flex justify-content-center px-10\" > < ul class = \"navigation-bar\" > < li class = \"nav-item\" > < a class = \"nav-link pt-1\" href = \"#\" > < svg class = \"nav-logo\" height = \"35px\" > < use xlink:href = \"#logo\" > </ use > </ svg > </ a > </ li > < li class = \"nav-item\" > < a href = \"/login\" class = \"nav-link\" > \u0412\u0445\u043e\u0434 </ a > </ li > </ ul > </ header > </ template > < script > export default { name : 'HeaderUnlogged' } </ script > < style > . navigation-bar { width : 100 % ; list-style-type : none ; display : flex ; justify-content : space-between ; align-items : center ; padding : 8 px 40 px 8 px 10 px ; margin : 0 ; border-bottom : 1 px solid ; border-bottom-color : var ( --border-bottom ); } . nav-link { font-family : Tahoma , sans-serif ; font-weight : bolder ; color : var ( --link-color ); } . nav-link : hover { color : var ( --link-hover ); } . nav-logo { width : 12 % ; } </ style > About.vue - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b < template > < div class = \"container\" style = \"padding-top: 100px\" > < div class = \"row\" > < div class = \"col-md-6\" > < div style = \"display: flex\" > < svg width = \"24\" height = \"24\" viewBox = \"0 0 24 24\" fill = \"none\" xmlns = \"http://www.w3.org/2000/svg\" class = \"HeroPill__NakedBitcoinIcon-sc-16ndsef-1 epDkoW\" >< path d = \"M12 24c6.627 0 12-5.373 12-12S18.627 0 12 0 0 5.373 0 12s5.373 12 12 12z\" fill = \"#1652F0\" ></ path >< path d = \"M17.274 10.515c.235-1.572-.962-2.417-2.599-2.981l.531-2.13-1.296-.323-.517 2.074c-.34-.086-.69-.165-1.039-.245l.521-2.087L11.58 4.5l-.53 2.13c-.283-.065-.56-.128-.829-.196l.002-.007-1.788-.446-.345 1.385s.962.22.942.234c.525.13.62.478.603.754L9.03 10.78c.036.01.083.023.135.043l-.137-.034-.848 3.4c-.064.158-.227.398-.595.307.014.019-.941-.235-.941-.235L6 15.745l1.688.42c.313.08.62.162.923.239l-.537 2.154 1.296.322.53-2.13c.355.096.698.184 1.034.268l-.53 2.121 1.297.323.536-2.15c2.211.419 3.873.25 4.573-1.75.564-1.61-.028-2.538-1.191-3.144.847-.195 1.485-.752 1.655-1.903zm-2.963 4.153c-.4 1.61-3.11.74-3.99.522l.713-2.854c.879.22 3.697.654 3.277 2.332zm.402-4.176c-.365 1.464-2.621.72-3.353.537l.645-2.587c.731.182 3.089.522 2.708 2.05z\" fill = \"#fff\" ></ path ></ svg > < a href = \"/register\" style = \"display: flex\" > & nbsp & nbsp\u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044c </ a > </ div > < div > < h1 style = \"font-size: 62px\" > \u041d\u0430\u0447\u043d\u0438\u0442\u0435 < br > \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c < br > \u0441\u0432\u043e\u0439 < br > \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u043d\u044b\u0439 < br > \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044c </ h1 > < h3 style = \"font-size: 20px; line-height: 1.4\" > Coinbase \u2014 \u0441\u0430\u043c\u0430\u044f \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0430 \u0434\u043b\u044f \u043a\u0443\u043f\u043b\u0438 \u0438 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b. \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0439\u0442\u0435\u0441\u044c \u0438 \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0433\u043e\u0434\u043d\u044f. </ h3 > </ div > </ div > < div class = \"col-md-6\" style = \"\" > < img src = \"@/assets/img/about_page.png\" height = \"534px\" width = \"526px\" alt = \"\" > </ div > </ div > </ div > </ template > < script > export default { name : 'About' } </ script > < style scoped > </ style > Register.vue - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 < template @ userrec > < section class = \"registration-page\" > < div class = \"container py-5 \" > < div class = \"row justify-content-center align-items-center\" > < div class = \"col\" > < div class = \"card-registration\" > < div class = \"card-body\" > < p class = \"mb-10\" > \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u043e\u0442\u043c\u0435\u0447\u0435\u043d\u044b \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u043e\u0439: * </ p > < form @ submit . prevent = \"onRegSubmit\" > < div class = \"row\" > < div class = \"col-3 mb-3 \" > < div class = \"form-outline\" > < label class = \"form-label fw-bolder\" for = \"firstName\" > \u0418\u043c\u044f* </ label > < input v-model . trim . lazy = \"user.firstName\" type = \"text\" id = \"firstName\" class = \"form-control form-control-lg\" placeholder = \"\u0418\u043c\u044f\" name = \"firstName\" autocomplete = \"off\" required /> </ div > </ div > < div class = \"col-md-3 mb-3\" > < div class = \"form-outline\" > < label class = \"form-label fw-bolder\" for = \"lastName\" > \u0424\u0430\u043c\u0438\u043b\u0438\u044f* </ label > < input v-model . trim . lazy = \"user.lastName\" type = \"text\" id = \"lastName\" class = \"form-control form-control-lg\" placeholder = \"\u0444\u0430\u043c\u0438\u043b\u0438\u044f\" name = \"lastName\" autocomplete = \"off\" required /> </ div > </ div > </ div > < div class = \"row\" > < div class = \"col-md-11 mb-4 d-flex align-items-center\" > < div class = \"form-outline w-100\" > < label class = \"form-label fw-bolder\" for = \"emailAddress\" > \u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430* </ label > < input v-model . trim . lazy = \"user.email\" type = \"email\" id = \"emailAddress\" class = \"form-control form-control-lg\" placeholder = \"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430\" name = \"email\" autocomplete = \"off\" required /> </ div > </ div > </ div > < div class = \"row\" > < div class = \"col-md-11 mb-4 pb-2\" > < div class = \"form-outline\" > < label class = \"form-label fw-bolder\" for = \"password\" > \u041f\u0430\u0440\u043e\u043b\u044c* </ label > < input v-model . trim . lazy = \"user.password\" type = \"password\" id = \"password\" class = \"form-control form-control-lg\" placeholder = \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c\" name = \"password\" autocomplete = \"off\" required /> </ div > </ div > </ div > < div class = \"row\" > < div class = \"col-11 mb-4\" > < input class = \"form-check-input\" type = \"checkbox\" value = \"\" id = \"invalidCheck\" v-model = \"agree\" required > < label class = \"form-check-label\" for = \"invalidCheck\" > \u042f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e, \u0447\u0442\u043e \u043c\u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u043b\u043e\u0441\u044c 18, \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432: < a class = \"card-link\" href = \"https://www.coinbase.com/legal/user_agreement\" > \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0435 \u0421\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0435 </ a > \u0438 < a class = \"card-link m-0\" href = \"https://www.coinbase.com/legal/privacy\" > \u041f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 \u043a\u043e\u043d\u0444\u0435\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 </ a > . </ label > </ div > </ div > < div class = \"row\" > < div class = \"col-11\" > < div class = \"d-grid gap-2 mt-20\" > < button class = \"btn btn-primary fw-bolder\" style = \"border-radius: 100px\" type = \"submit\" :disabled = \"!formReady\" > \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u0447\u0435\u0442\u043d\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c </ button > </ div > </ div > </ div > </ form > </ div > </ div > </ div > </ div > </ div > </ section > </ template > < script > import { mapActions } from 'pinia' ; import useUsersStore from \"@/stores/users\" ; import router from \"@/router\" ; export default { name : 'Register' , data () { return { user : { firstName : \"\" , lastName : \"\" , email : \"\" , password : \"\" , coins : [], }, agree : false } }, methods : { ... mapActions ( useUsersStore , [ 'register' ]), async onRegSubmit () { await this . register ( this . user ); } }, computed : { formReady () { return Object . values ( this . user ). every ( value => value !== '' ) && this . agree } }, beforeCreate () { localStorage . getItem ( 'pinia_users' ) ? router . push ( '/personal' ) : router . push ( '/register' ) } } </ script > < style > . form-check-label { font-size : 14 px ; } . form-control { height : 70 px ; border-radius : 8 px ; } . card-link { text-decoration : none ; } . btn-primary { height : 70 px ; } body { background-color : var ( --bg-color ); color : var ( --text-color ); } . form-control { background-color : var ( --bg-color ); border-color : var ( --border-input ); color : var ( --text-color ); } . form-control : focus { background-color : var ( --bg-color ); border-color : var ( --link-hover ); box-shadow : 0 0 10 px var ( --btn-hover ); color : var ( --text-color ) } . btn-primary { background-color : var ( --btn-color ); } . btn-primary : hover { background-color : var ( --btn-hover ); border-color : var ( --link-hover ); box-shadow : 0 0 10 px var ( --btn-hover ); } . form-check-input : checked { background-color : var ( --btn-hover ); color : var ( --btn-hover ); box-shadow : 0 0 10 px var ( --btn-hover ); border-color : var ( --btn-hover ); } . form-check-input : focus { box-shadow : 0 0 10 px var ( --btn-hover ); border-color : var ( --btn-hover ); } . form-check-input { border-color : var ( --btn-hover ); margin-right : 10 px ; } a { color : var ( --link-color ); } a : hover { color : var ( --link-hover ); } @ media ( prefers-color-scheme : dark ) { . nav-logo { filter : invert ( 10 % ); } } </ style > Login.vue - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 < template > < section class = \"vh-100\" > < div class = \"container h-100\" > < div class = \"row d-flex justify-content-center align-items-start h-100\" > < div class = \"col-5\" > < div class = \"card\" style = \"border-radius: 1rem;\" > < div class = \"card-body p-4\" > < div class = \"row p-3\" > < svg class = \"img-logo\" href = \"/\" style = \"height: 50px\" > < use xlink:href = \"#logo\" > </ use > </ svg > </ div > < div class = \"row py-5 px-3\" > < h3 class = \"mb-0\" > \u0412\u043e\u0439\u0434\u0438\u0442\u0435 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 Coinbase </ h3 > </ div > < form type = \"submit\" @ submit . prevent = \"onLogSubmit\" > < div class = \"row mb-4 px-3\" > < div class = \"form-outline col-12 \" > < label class = \"form-label fw-bolder\" for = \"typeEmailX\" > \u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430 </ label > < input v-model . trim . lazy = \"user.email\" type = \"email\" id = \"typeEmailX\" class = \"form-control input form-control-md\" placeholder = \"\u0412\u0430\u0448 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b\" name = \"email\" autocomplete = \"off\" required /> </ div > </ div > < div class = \"row mb-4 px-3\" > < div class = \"form-outline col-12 \" > < label class = \"form-label fw-bolder\" for = \"typePasswordX\" > \u041f\u0430\u0440\u043e\u043b\u044c </ label > < input v-model . trim . lazy = \"user.password\" type = \"password\" id = \"typePasswordX\" class = \"form-control input form-control-md\" placeholder = \"\u0412\u0430\u0448 \u043f\u0430\u0440\u043e\u043b\u044c\" name = \"password\" autocomplete = \"off\" required /> </ div > </ div > < div class = \"row px-3\" > < p class = \" mb-4\" > < a class = \"password-forgot\" href = \"#\" > \u0417\u0430\u0431\u044b\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c? </ a > </ p > </ div > < div class = \"row px-3\" > < a href = \"\" class = \"login-link\" > < button class = \"btn btn-primary col-12 mb-3\" style = \"border-radius: 100px\" :disabled = \"!formReady\" type = \"submit\" > \u0412\u043e\u0439\u0442\u0438 </ button > </ a > </ div > </ form > < div class = \"row px-3 mb-4\" > < a href = \"/register\" class = \"\" > < button class = \"btn btn-light col-12\" style = \"border-radius: 100px\" type = \"submit\" > \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u0447\u0435\u0442\u043d\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c </ button > </ a > </ div > < div class = \"row col-md-6 mx-auto\" > < a href = \"#\" class = \"extra-link\" > \u0412\u043e\u0439\u0442\u0438 \u0432 \u0431\u0438\u0437\u043d\u0435\u0441-\u0430\u043a\u043a\u0430\u0443\u043d\u0442 </ a > </ div > < div class = \"row col-md-7 mx-auto mb-2\" > < a href = \"https://www.coinbase.com/legal/privacy\" class = \"extra-link\" > \u041f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 </ a > </ div > </ div > </ div > </ div > </ div > </ div > </ section > </ template > < script > import { mapActions } from \"pinia\" ; import useUsersStore from \"@/stores/users\" ; import router from \"@/router\" ; export default { name : 'Login' , data () { return { user : { email : \"\" , password : \"\" , } } }, methods : { ... mapActions ( useUsersStore , [ 'signUp' ]), async onLogSubmit () { await this . signUp ( this . user ) } }, computed : { formReady () { return Object . values ( this . user ). every ( value => value !== '' ) } }, beforeMount () { localStorage . getItem ( 'pinia_users' ) ? router . push ( '/personal' ) : router . push ( '/login' ) } } </ script > < style > . img-logo { width : 50 % !important ; } . container { padding-top : 100 px ; } . form-control { height : 60 px ; border-radius : 1 rem ; } . btn { height : 60 px ; border-radius : 100 px ; } . password-forgot { text-decoration : none ; } . extra-link { text-decoration : none ; } . btn-primary { background-color : var ( --btn-color ); } . btn-primary : hover { background-color : var ( --btn-hover ); border-color : var ( --link-hover ); box-shadow : 0 0 10 px var ( --btn-hover ); } body { background-color : var ( --bg-color ); } . card { background-color : var ( --card-color ); border-color : var ( --border-input ); } a { color : var ( --link-color ); } a : hover { color : var ( --link-hover ); } h3 { color : var ( --text-color ); } label { color : var ( --text-color ); } . form-control { background-color : var ( --bg-color ); border-color : var ( --border-input ); color : var ( --text-color ); } . form-control : focus { background-color : var ( --bg-color ); border-color : var ( --link-hover ); box-shadow : 0 0 10 px var ( --btn-hover ); color : var ( --text-color ) } . btn-light , . btn-light : hover { background-color : var ( --btn-secondary ); color : var ( --text-color ); border-color : var ( --btn-secondary ); } </ style > Personal.vue - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u0430\u043b\u044e\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f < template > < section class = \"dataTable-wrapper\" > < div class = \"dataTable-wrapper d-flex justify-content-center\" > < table class = \"table align-middle border-light mt-5 w-75\" > < tr class = \"head-row border-light \" > < th class = \"align-middle fw-bold\" > \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 <!-- <sort-button/>--> </ th > < th class = \"align-middle fw-bold\" > \u0426\u0435\u043d\u0430 <!-- <sort-button/>--> </ th > < th class = \"fw-bold\" > \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e <!-- <sort-button/>--> </ th > < th class = \"fw-bold\" > \u0418\u0442\u043e\u0433\u043e </ th > < th class = \"fw-normal\" > < div class = \"\" > < select-sort v-model = \"sortName\" :options = \"sortOptions\" /> </ div > </ th > < th class = \"d-flex justify-content-center\" > < div > < p class = \"balance m-0\" > \u0411\u0430\u043b\u0430\u043d\u0441: </ p > < p class = \"balance fw-light m-0\" > {{ balance() }} </ p > </ div > </ th > </ tr > < wallet :coins = \"coins\" @ buyEvent = \"buyCoin\" @ sellEvent = \"sellCoin\" /> </ table > </ div > </ section > </ template > < script > import Wallet from \"@/components/lists/Wallet.vue\" ; import { mapActions , mapState } from \"pinia\" ; import useCoinsStore from \"@/stores/coins\" ; import useUsersStore from \"@/stores/users\" ; export default { name : 'Personal' , components : { Wallet }, data () { return { coins : [], sortName : '' , sortOptions : [ { value : 'name ASC' , name : '\u041f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e (ASC)' }, { value : 'name DESC' , name : '\u041f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e (DESC)' }, { value : 'current_price ASC' , name : '\u041f\u043e \u0446\u0435\u043d\u0435 (ASC)' }, { value : 'current_price DESC' , name : '\u041f\u043e \u0446\u0435\u043d\u0435 (DESC)' }, { value : 'amount ASC' , name : '\u041f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 (ASC)' }, { value : 'amount DESC' , name : '\u041f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 (DESC)' }, ] } }, methods : { ... mapActions ( useCoinsStore , [ 'getWallet' , \"loadCoins\" , \"loadCustomCoins\" ]), ... mapActions ( useUsersStore , [ 'commitActions' ]), async getCoins () { let current = await this . getWallet ( this . user . id ); const data = await this . loadCustomCoins () for ( let i = 0 ; i < current . coins . length ; i ++ ) { for ( let j = 0 ; j < data . length ; j ++ ) { if ( current . coins [ i ]. id === data [ j ]. id ) { this . coins [ i ] = data [ j ] this . coins [ i ]. amount = current . coins [ i ]. amount } } } }, balance () { let res = 0 ; for ( let i = 0 ; i < this . coins . length ; i ++ ) { res += this . coins [ i ]. amount * this . coins [ i ]. current_price ; } return res . toFixed ( 2 ) }, async buyCoin ( id , amount ) { let newCoin = true for ( let i = 0 ; i < this . user . coins . length ; i ++ ) { if ( id === this . user . coins [ i ]. id ) { this . user . coins [ i ]. amount += amount newCoin = false } } if ( newCoin ) { this . user . coins . push ({ id : id , amount : amount }) } await this . commitActions ( this . user ); await this . getCoins () }, async sellCoin ( id , amount ) { let index ; for ( let i = 0 ; i < this . user . coins . length ; i ++ ) { if ( id === this . user . coins [ i ]. id ) { this . user . coins [ i ]. amount -= amount ; index = i ; } } if ( this . user . coins [ index ]. amount === 0 ) { this . user . coins = this . user . coins . filter ( coin => coin . id !== id ) } await this . commitActions ( this . user ); await this . getCoins () location . reload () } }, computed : { ... mapState ( useUsersStore , [ 'user' ]) }, mounted () { this . getCoins () }, watch : { async sortName ( sortName ) { const sortSplit = sortName . split ( ' ' ) const type = sortSplit [ 0 ] const order = sortSplit [ 1 ] if ( type === 'name' ) { this . coins . sort (( a , b ) => a [ type ]. localeCompare ( b [ type ])) } else { this . coins . sort (( a , b ) => a [ type ] - b [ type ]) } if ( order === 'DESC' ) { this . coins . reverse () } } } } </ script > < style > * { margin : 0 ; padding : 0 ; box-sizing : border-box ; font-family : 'Tahoma' , sans-serif } . table { border : 2 px solid ; } . head-row { border-bottom : 2 px solid ; font-weight : normal ; } . head-row { font-weight : normal ; } . table thead th { padding : 30 px ; font-weight : normal ; } . dataTable-wrapper { margin : 20 px auto ; overflow-x : auto } :: placeholder { color : black ; font-weight : 600 ; } . table tbody td { padding : 30 px ; margin : 0 ; } . btn-pagination { border : none ; background-color : white ; margin-left : 15 px ; } body { background-color : var ( --bg-color ) !important ; color : var ( --text-color ) !important ; border-color : var ( --card-color ) !important ; } . page-number { border-color : var ( --text-color ); } tr { border-color : var ( --card-color ) !important ; } </ style > Main.vue - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b < template > < section class = \"dataTable-wrapper d-flex justify-content-center\" > < table class = \"table align-middle mt-5 w-75 bg-white border-light\" > < tr class = \"search-row p-2 bg-light\" > < td colspan = \"2\" class = \"align-middle search-header justify-content-between\" > < div class = \"form d-flex\" > < search-input v-model = \"search\" @ send-search = \"findCoins\" style = \"width: 350px !important;\" /> </ div > </ td > < td colspan = \"3\" class = \"\" > < div class = \"d-flex justify-content-end\" > < select-sort v-model = \"sortName\" :options = \"sortOptions\" /> </ div > </ td > </ tr > < tr class = \"head-row p-2 border-light\" > < th class = \"fw-normal ps-4 align-middle\" > \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 < sort-button v-model = \"sortName\" /> </ th > < th class = \"fw-normal align-middle\" > \u0426\u0435\u043d\u0430 < sort-button /> </ th > < th class = \"fw-normal align-middle\" > \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 < sort-button /> </ th > < th class = \"fw-normal align-middle\" > \u0414\u0430\u0442\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f < sort-button /> </ th > < th class = \"fw-normal\" > < div class = \"pagination d-flex justify-content-center align-content-center p-0\" > < button class = \"btn-pagination m-0 btn-prev\" @ click = \"getPrevPage\" :style = \"[this.page > 1 ? {'display' : 'block'} : {'display':'none'}]\" > < svg style = \"width: 30px; height: 30px;\" > < use xlink:href = \"#arrow\" > </ use > </ svg > </ button > < div class = \"page-number m-0 mx-1\" style = \"display: flex; justify-content: center\" > < input v-model = \"page\" > </ div > < button class = \"btn-pagination btn-next m-0\" @ click = \"getNextPage\" :style = \"[this.page < 3 ? {'display' : 'block'} : {'display':'none'}]\" > < svg style = \"width: 30px; height: 30px; transform: rotate(180deg)\" > < use xlink:href = \"#arrow\" > </ use > </ svg > </ button > </ div > </ th > </ tr > < coins-list :coins = \"coins\" @ buyEvent = \"buyCoin\" /> </ table > </ section > </ template > < script > import useCoinsStore from \"@/stores/coins\" ; import { mapActions , mapState } from \"pinia\" ; import CoinsList from \"@/components/lists/CoinsList.vue\" ; import useUsersStore from \"@/stores/users\" ; export default { name : 'Main' , components : { CoinsList }, data () { return { coins : [], page : 1 , limit : 10 , total : 3 , search : '' , sortName : '' , sortOptions : [ { value : 'name ASC' , name : '\u041f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e (ASC)' }, { value : 'name DESC' , name : '\u041f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e (DESC)' }, { value : 'current_price ASC' , name : '\u041f\u043e \u0446\u0435\u043d\u0435 (ASC)' }, { value : 'current_price DESC' , name : '\u041f\u043e \u0446\u0435\u043d\u0435 (DESC)' }, { value : 'price_change_percentage_24h ASC' , name : '\u041f\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044e (ASC)' }, { value : 'price_change_percentage_24h DESC' , name : '\u041f\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044e (DESC)' }, { value : 'atl_date ASC' , name : '\u041f\u043e \u0434\u0430\u0442\u0435 (ASC)' }, { value : 'atl_date DESC' , name : '\u041f\u043e \u0434\u0430\u0442\u0435 (DESC)' }, ] } }, methods : { ... mapActions ( useCoinsStore , [ 'loadCoins' ]), ... mapActions ( useUsersStore , [ 'commitActions' ]), async getCoins () { this . coins = await this . loadCoins ( this . search , this . sortName ); }, buyCoin ( id , amount ) { let newCoin = true for ( let i = 0 ; i < this . user . coins . length ; i ++ ) { if ( id === this . user . coins [ i ]. id ) { this . user . coins [ i ]. amount += amount ; newCoin = false ; } } if ( newCoin ) { this . user . coins . push ({ id : id , amount : amount }); } this . commitActions ( this . user ); }, async findCoins () { this . coins = await this . loadCoins ( this . search , this . sortName ); }, async getPrevPage () { if ( this . page > 1 ) { this . page -- ; this . coins = await this . loadCoins ( this . search , this . sortName , this . page ); } }, async getNextPage () { if ( this . page < this . total ) { this . page ++ ; this . coins = await this . loadCoins ( this . search , this . sortName , this . page ); } } }, computed : { ... mapState ( useUsersStore , [ 'user' ]) }, mounted () { this . getCoins (); }, watch : { async sortName ( sortName ) { this . coins = await this . loadCoins ( this . search , sortName ); } } } </ script > < style scoped > . table { border : 2 px solid var ( --card-color ) !important ; } . head-row { border-bottom : 2 px solid ; font-weight : normal ; } . btn-pagination { border : none ; background-color : white ; margin-left : 15 px ; } . page-number { border-color : var ( --text-color ); border : 2 px solid ; border-radius : 20 px ; width : 30 px ; height : 30 px ; display : flex ; justify-content : center ; align-items : center ; } tr { border-color : var ( --card-color ); } input { width : 9 px ; height : 20 px ; border : none ; } </ style > \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f AboutView.vue - \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 < template > < HeaderUnlogged /> < About /> </ template > < script > import HeaderUnlogged from \"@/components/headers/HeaderUnlogged.vue\" ; import About from \"@/components/About.vue\" ; export default { components : { HeaderUnlogged , About } } </ script > RegisterView.vue - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 < template > < HeaderUnlogged /> < Register /> </ template > < script > import Register from \"@/components/auth/Register.vue\" ; import HeaderUnlogged from \"@/components/headers/HeaderUnlogged.vue\" ; export default { components : { Register , HeaderUnlogged } } </ script > LoginView.vue - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 < template > < div > < Login /> </ div > </ template > < script > import Login from \"@/components/auth/Login.vue\" ; export default { components : { Login } } </ script > WalletView.vue - \u0432\u0430\u043b\u044e\u0442\u043d\u044b\u0439 \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f < template > < Header /> < Personal /> < br > < chart /> </ template > < script > import Header from \"@/components/headers/Header.vue\" ; import Personal from \"@/components/Personal.vue\" ; import { Chart } from \"vue-tradingview-widgets\" ; export default { components : { Header , Personal , Chart } } </ script > MainView.vue - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b < template > < Header /> < Main /> </ template > < script > import Main from \"@/components/Main.vue\" ; import Header from \"@/components/headers/Header.vue\" ; export default { components : { Header , Main } } </ script > API api/index.js impor t i nstan ce fr om \"@/api/instance.js\" ; impor t Coi ns API fr om \"@/api/coins.js\" ; impor t UsersAPI fr om \"@/api/users.js\" ; impor t Char ts API fr om \"@/api/charts.js\" ; co nst coi ns API = ne w Coi ns API(i nstan ce); co nst usersAPI = ne w UsersAPI(i nstan ce); co nst char ts API = ne w Char ts API(i nstan ce); expor t { coi ns API , usersAPI , char ts API } instance.js impor t axios fr om \"axios\" ; co nst apiURL = 'h tt p : //localhost:3000' co nst i nstan ce = axios.crea te ( { baseURL : apiURL } ) expor t de fault i nstan ce users.js expor t de fault class UsersAPI { co nstru c t or(i nstan ce) { t his.API = i nstan ce } ge t AllUsers = asy n c () => { re turn t his.API( { me t hod : 'GET' , url : '/users' } ) } ge t Curre nt User = asy n c (id) => { re turn t his.API( { me t hod : 'GET' , url : `/users/$ { id } ` } ) } push = asy n c (user) => { re turn t his.API( { me t hod : 'PUT' , url : `/users/$ { user.id } ` , da ta : user , headers : { 'Co ntent - Type' : 'applica t io n /jso n ' } } ) } crea te NewUser = asy n c (da ta ) => { re turn t his.API( { me t hod : 'POST' , url : '/users' , da ta , headers : { 'Co ntent - Type' : 'applica t io n /jso n ' } } ) } } coins.js class Coi ns API { co nstru c t or(i nstan ce) { t his.API = i nstan ce } ge t Coi ns = asy n c (search , sor t , order , page , limi t ) => { re turn t his.API( { url : `/coi ns ?q=$ { search } &_sor t =$ { sor t } &_order=$ { order } &_limi t =$ { limi t } &_page=$ { page } ` } ) } ge t Cus t omLis t = asy n c () => { re turn t his.API( { url : `/coi ns ` } ) } } expor t de fault Coi ns API Stores stores/index.js impor t { persis t } fr om 'pi n ia - persis ts ' impor t { crea te Pi n ia } fr om 'pi n ia' co nst pi n ia = crea te Pi n ia() pi n ia.use(persis t ()) expor t de fault pi n ia users.js impor t { usersAPI } fr om \"@/api\" ; impor t { de f i ne S t ore } fr om \"pinia\" impor t rou ter fr om \"@/router\" ; co nst useUsersS t ore = de f i ne S t ore('users' , { s tate : () => ( { user : { id : null , coi ns : [] } } ) , ac t io ns : { asy n c sig n Up(crede nt ials) { co nst respo nse = awai t usersAPI.ge t AllUsers() co nst da ta = respo nse .da ta co nst validUser = t his.isValid(crede nt ials , da ta ) i f (validUser !== u n de f i ne d) { t his.user.id = validUser.id; t his.user.coi ns = validUser.coi ns ; awai t rou ter .push('/perso nal ') } else { localS t orage.clear() aler t ('\u041e\u0448\u0438\u0431\u043a\u0430! \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 email \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c') } }, isValid(crede nt ials , da ta ) { f or (le t i = 0 ; i < da ta .le n g t h; i++) { i f (da ta [ i ] .email === crede nt ials.email && da ta [ i ] .password === crede nt ials.password) { re turn { id : da ta [ i ] .id , coi ns : da ta [ i ] .coi ns } } } }, asy n c commi t Ac t io ns (user) { co nst rawUser = JSON.parse(JSON.s tr i n gi f y(user)) co nst curre nt User = awai t usersAPI.ge t Curre nt User(rawUser.id) curre nt User.da ta .coi ns = rawUser.coi ns co nst respo nse = awai t usersAPI.push(curre nt User.da ta ) re turn respo nse .da ta }, asy n c regis ter (crede nt ials) { co nst respo nse = awai t usersAPI.crea te NewUser(crede nt ials) co nst da ta = respo nse .da ta le t { id } = da ta t his.user = { 'id' : id , 'coi ns ' : [], } } } } ) expor t de fault useUsersS t ore coins.js impor t { de f i ne S t ore } fr om \"pinia\" ; impor t { coi ns API , usersAPI } fr om \"@/api\" ; co nst useCoi ns S t ore = de f i ne S t ore('coi ns ' , { s tate : () => ( { coi ns : [] } ) , ac t io ns : { asy n c loadCoi ns (search = '' , sor t Name = '' , page = 1 , limi t = 10 ) { co nst sor t Spli t = sor t Name.spli t (' '); co nst sor t = sor t Spli t [ 0 ] ; co nst order = sor t Spli t [ 1 ] ; co nst respo nse = awai t coi ns API.ge t Coi ns (search , sor t , order , page , limi t ); t his.coi ns = respo nse .da ta ; re turn respo nse .da ta ; }, asy n c ge t Walle t (idx) { co nst ac tual = awai t usersAPI.ge t Curre nt User(idx); co nst { id , coi ns } = ac tual .da ta ; re turn { id , coi ns } ; }, asy n c loadCus t omCoi ns () { co nst respo nse = awai t coi ns API.ge t Cus t omLis t (); t his.coi ns = respo nse .da ta ; re turn respo nse .da ta ; }, asy n c loadCoi ns Lis t (search = '') { co nst respo nse = awai t coi ns API.ge t Coi ns (search , '' , '' , '' , ''); t his.coi ns = respo nse .da ta ; re turn respo nse .da ta ; } } } ) expor t de fault useCoi ns S t ore","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"labs/lab_4/#no4-vuejs","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js"},{"location":"labs/lab_4/#-","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0438 \u0437\u0430\u0447\u0442\u0435\u043d\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043a\u0443\u0440\u0441\u0430 \u043f\u043e \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435."},{"location":"labs/lab_4/#_1","text":"\u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js.","title":"\u0426\u0435\u043b\u044c"},{"location":"labs/lab_4/#_2","text":"\u041c\u0438\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 \u043d\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Vue.js.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:"},{"location":"labs/lab_4/#_3","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433\u0438"},{"location":"labs/lab_4/#_4","text":"router/index.js impor t { crea te Rou ter , crea te WebHis t ory } fr om 'vue - rou ter ' impor t Abou t View fr om \"@/views/AboutView.vue\" ; impor t Logi n View fr om \"@/views/LoginView.vue\" ; impor t Regis ter View fr om \"@/views/RegisterView.vue\" ; impor t Mai n View fr om \"@/views/MainView.vue\" ; impor t Walle t View fr om \"@/views/WalletView.vue\" ; impor t Char ts View fr om \"@/views/ChartsView.vue\" ; co nst rou ter = crea te Rou ter ( { his t ory : crea te WebHis t ory(impor t .me ta .e n v.BASE_URL) , rou tes : [ { pa t h : '/' , na me : 'abou t ' , compo nent : Abou t View }, { pa t h : '/logi n ' , na me : 'logi n ' , compo nent : Logi n View }, { pa t h : '/regis ter ' , na me : 'regis ter ' , compo nent : Regis ter View }, { pa t h : '/mai n ' , na me : 'mai n ' , compo nent : Mai n View }, { pa t h : '/perso nal ' , na me : 'walle t ' , compo nent : Walle t View }, { pa t h : '/char ts ' , na me : 'char t ' , compo nent : Char ts View }, ] } ) expor t de fault rou ter","title":"\u0420\u043e\u0443\u0442\u0435\u0440"},{"location":"labs/lab_4/#_5","text":"Header.vue - header \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f < template > < header class = \"d-flex justify-content-center py-3\" > < ul class = \"nav nav-pills\" > < li class = \"nav-item\" > < div class = \"nav-link pt-1\" > < svg class = \"nav-logo\" style = \" height: 27px\" > < use xlink:href = \"#logo\" > </ use > </ svg > </ div > </ li > < li class = \"nav-item\" >< a href = \"/main\" class = \"nav-link\" > \u041a\u0443\u043f\u0438\u0442\u044c \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0443 </ a ></ li > < li class = \"nav-item\" >< a href = \"#\" @ click = \"checkAuth\" class = \"nav-link\" > \u041c\u043e\u0439 \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044c </ a ></ li > <!-- <li class=\"nav-item\"><a href=\"/charts\" class=\"nav-link\">\u0413\u0440\u0430\u0444\u0438\u043a\u0438</a></li>--> < li class = \"nav-item\" id = \"logout\" :style = \"[this.isLogged ? {'display' : 'block'} : {'display' : 'none'}]\" > < button class = \"logout-button\" @ click = \"logout\" style = \"border: none; background-color: white; padding-top:5px\" > < svg class = \"logout-img\" style = \"width: 27px; height: 27px\" > < use xlink:href = \"#logout\" > </ use > </ svg > </ button > </ li > </ ul > </ header > </ template > < script > import router from \"@/router\" ; export default { name : 'Header' , data () { return { isLogged : false } }, methods : { logout () { if ( confirm ( '\u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0432\u044b\u0439\u0442\u0438?' )) { localStorage . clear () if ( this . $route . path === '/personal' ) { router . push ( '/' ) } else { window . location . reload () } } }, checkAuth () { if ( ! this . isLogged ) { router . push ( '/login' ) } else { router . push ( '/personal' ) } } }, mounted () { localStorage . getItem ( 'pinia_users' ) ? this . isLogged = true : this . isLogged = false } } </ script > < style > . nav-logo { width : 40 % ; } . nav-link { font-family : Tahoma , sans-serif ; font-weight : bold ; color : var ( --link-color ) !important ; } . nav-link : hover { color : var ( --link-hover ) !important ; } </ style > HeaderUnlogged.vue - header \u0434\u043b\u044f \u043d\u0435\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f < template > < header class = \"d-flex justify-content-center px-10\" > < ul class = \"navigation-bar\" > < li class = \"nav-item\" > < a class = \"nav-link pt-1\" href = \"#\" > < svg class = \"nav-logo\" height = \"35px\" > < use xlink:href = \"#logo\" > </ use > </ svg > </ a > </ li > < li class = \"nav-item\" > < a href = \"/login\" class = \"nav-link\" > \u0412\u0445\u043e\u0434 </ a > </ li > </ ul > </ header > </ template > < script > export default { name : 'HeaderUnlogged' } </ script > < style > . navigation-bar { width : 100 % ; list-style-type : none ; display : flex ; justify-content : space-between ; align-items : center ; padding : 8 px 40 px 8 px 10 px ; margin : 0 ; border-bottom : 1 px solid ; border-bottom-color : var ( --border-bottom ); } . nav-link { font-family : Tahoma , sans-serif ; font-weight : bolder ; color : var ( --link-color ); } . nav-link : hover { color : var ( --link-hover ); } . nav-logo { width : 12 % ; } </ style > About.vue - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b < template > < div class = \"container\" style = \"padding-top: 100px\" > < div class = \"row\" > < div class = \"col-md-6\" > < div style = \"display: flex\" > < svg width = \"24\" height = \"24\" viewBox = \"0 0 24 24\" fill = \"none\" xmlns = \"http://www.w3.org/2000/svg\" class = \"HeroPill__NakedBitcoinIcon-sc-16ndsef-1 epDkoW\" >< path d = \"M12 24c6.627 0 12-5.373 12-12S18.627 0 12 0 0 5.373 0 12s5.373 12 12 12z\" fill = \"#1652F0\" ></ path >< path d = \"M17.274 10.515c.235-1.572-.962-2.417-2.599-2.981l.531-2.13-1.296-.323-.517 2.074c-.34-.086-.69-.165-1.039-.245l.521-2.087L11.58 4.5l-.53 2.13c-.283-.065-.56-.128-.829-.196l.002-.007-1.788-.446-.345 1.385s.962.22.942.234c.525.13.62.478.603.754L9.03 10.78c.036.01.083.023.135.043l-.137-.034-.848 3.4c-.064.158-.227.398-.595.307.014.019-.941-.235-.941-.235L6 15.745l1.688.42c.313.08.62.162.923.239l-.537 2.154 1.296.322.53-2.13c.355.096.698.184 1.034.268l-.53 2.121 1.297.323.536-2.15c2.211.419 3.873.25 4.573-1.75.564-1.61-.028-2.538-1.191-3.144.847-.195 1.485-.752 1.655-1.903zm-2.963 4.153c-.4 1.61-3.11.74-3.99.522l.713-2.854c.879.22 3.697.654 3.277 2.332zm.402-4.176c-.365 1.464-2.621.72-3.353.537l.645-2.587c.731.182 3.089.522 2.708 2.05z\" fill = \"#fff\" ></ path ></ svg > < a href = \"/register\" style = \"display: flex\" > & nbsp & nbsp\u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044c </ a > </ div > < div > < h1 style = \"font-size: 62px\" > \u041d\u0430\u0447\u043d\u0438\u0442\u0435 < br > \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c < br > \u0441\u0432\u043e\u0439 < br > \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u043d\u044b\u0439 < br > \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044c </ h1 > < h3 style = \"font-size: 20px; line-height: 1.4\" > Coinbase \u2014 \u0441\u0430\u043c\u0430\u044f \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0430 \u0434\u043b\u044f \u043a\u0443\u043f\u043b\u0438 \u0438 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b. \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0439\u0442\u0435\u0441\u044c \u0438 \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0433\u043e\u0434\u043d\u044f. </ h3 > </ div > </ div > < div class = \"col-md-6\" style = \"\" > < img src = \"@/assets/img/about_page.png\" height = \"534px\" width = \"526px\" alt = \"\" > </ div > </ div > </ div > </ template > < script > export default { name : 'About' } </ script > < style scoped > </ style > Register.vue - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 < template @ userrec > < section class = \"registration-page\" > < div class = \"container py-5 \" > < div class = \"row justify-content-center align-items-center\" > < div class = \"col\" > < div class = \"card-registration\" > < div class = \"card-body\" > < p class = \"mb-10\" > \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u043e\u0442\u043c\u0435\u0447\u0435\u043d\u044b \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u043e\u0439: * </ p > < form @ submit . prevent = \"onRegSubmit\" > < div class = \"row\" > < div class = \"col-3 mb-3 \" > < div class = \"form-outline\" > < label class = \"form-label fw-bolder\" for = \"firstName\" > \u0418\u043c\u044f* </ label > < input v-model . trim . lazy = \"user.firstName\" type = \"text\" id = \"firstName\" class = \"form-control form-control-lg\" placeholder = \"\u0418\u043c\u044f\" name = \"firstName\" autocomplete = \"off\" required /> </ div > </ div > < div class = \"col-md-3 mb-3\" > < div class = \"form-outline\" > < label class = \"form-label fw-bolder\" for = \"lastName\" > \u0424\u0430\u043c\u0438\u043b\u0438\u044f* </ label > < input v-model . trim . lazy = \"user.lastName\" type = \"text\" id = \"lastName\" class = \"form-control form-control-lg\" placeholder = \"\u0444\u0430\u043c\u0438\u043b\u0438\u044f\" name = \"lastName\" autocomplete = \"off\" required /> </ div > </ div > </ div > < div class = \"row\" > < div class = \"col-md-11 mb-4 d-flex align-items-center\" > < div class = \"form-outline w-100\" > < label class = \"form-label fw-bolder\" for = \"emailAddress\" > \u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430* </ label > < input v-model . trim . lazy = \"user.email\" type = \"email\" id = \"emailAddress\" class = \"form-control form-control-lg\" placeholder = \"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430\" name = \"email\" autocomplete = \"off\" required /> </ div > </ div > </ div > < div class = \"row\" > < div class = \"col-md-11 mb-4 pb-2\" > < div class = \"form-outline\" > < label class = \"form-label fw-bolder\" for = \"password\" > \u041f\u0430\u0440\u043e\u043b\u044c* </ label > < input v-model . trim . lazy = \"user.password\" type = \"password\" id = \"password\" class = \"form-control form-control-lg\" placeholder = \"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0430\u0440\u043e\u043b\u044c\" name = \"password\" autocomplete = \"off\" required /> </ div > </ div > </ div > < div class = \"row\" > < div class = \"col-11 mb-4\" > < input class = \"form-check-input\" type = \"checkbox\" value = \"\" id = \"invalidCheck\" v-model = \"agree\" required > < label class = \"form-check-label\" for = \"invalidCheck\" > \u042f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e, \u0447\u0442\u043e \u043c\u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u043b\u043e\u0441\u044c 18, \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432: < a class = \"card-link\" href = \"https://www.coinbase.com/legal/user_agreement\" > \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0435 \u0421\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0435 </ a > \u0438 < a class = \"card-link m-0\" href = \"https://www.coinbase.com/legal/privacy\" > \u041f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 \u043a\u043e\u043d\u0444\u0435\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 </ a > . </ label > </ div > </ div > < div class = \"row\" > < div class = \"col-11\" > < div class = \"d-grid gap-2 mt-20\" > < button class = \"btn btn-primary fw-bolder\" style = \"border-radius: 100px\" type = \"submit\" :disabled = \"!formReady\" > \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u0447\u0435\u0442\u043d\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c </ button > </ div > </ div > </ div > </ form > </ div > </ div > </ div > </ div > </ div > </ section > </ template > < script > import { mapActions } from 'pinia' ; import useUsersStore from \"@/stores/users\" ; import router from \"@/router\" ; export default { name : 'Register' , data () { return { user : { firstName : \"\" , lastName : \"\" , email : \"\" , password : \"\" , coins : [], }, agree : false } }, methods : { ... mapActions ( useUsersStore , [ 'register' ]), async onRegSubmit () { await this . register ( this . user ); } }, computed : { formReady () { return Object . values ( this . user ). every ( value => value !== '' ) && this . agree } }, beforeCreate () { localStorage . getItem ( 'pinia_users' ) ? router . push ( '/personal' ) : router . push ( '/register' ) } } </ script > < style > . form-check-label { font-size : 14 px ; } . form-control { height : 70 px ; border-radius : 8 px ; } . card-link { text-decoration : none ; } . btn-primary { height : 70 px ; } body { background-color : var ( --bg-color ); color : var ( --text-color ); } . form-control { background-color : var ( --bg-color ); border-color : var ( --border-input ); color : var ( --text-color ); } . form-control : focus { background-color : var ( --bg-color ); border-color : var ( --link-hover ); box-shadow : 0 0 10 px var ( --btn-hover ); color : var ( --text-color ) } . btn-primary { background-color : var ( --btn-color ); } . btn-primary : hover { background-color : var ( --btn-hover ); border-color : var ( --link-hover ); box-shadow : 0 0 10 px var ( --btn-hover ); } . form-check-input : checked { background-color : var ( --btn-hover ); color : var ( --btn-hover ); box-shadow : 0 0 10 px var ( --btn-hover ); border-color : var ( --btn-hover ); } . form-check-input : focus { box-shadow : 0 0 10 px var ( --btn-hover ); border-color : var ( --btn-hover ); } . form-check-input { border-color : var ( --btn-hover ); margin-right : 10 px ; } a { color : var ( --link-color ); } a : hover { color : var ( --link-hover ); } @ media ( prefers-color-scheme : dark ) { . nav-logo { filter : invert ( 10 % ); } } </ style > Login.vue - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 < template > < section class = \"vh-100\" > < div class = \"container h-100\" > < div class = \"row d-flex justify-content-center align-items-start h-100\" > < div class = \"col-5\" > < div class = \"card\" style = \"border-radius: 1rem;\" > < div class = \"card-body p-4\" > < div class = \"row p-3\" > < svg class = \"img-logo\" href = \"/\" style = \"height: 50px\" > < use xlink:href = \"#logo\" > </ use > </ svg > </ div > < div class = \"row py-5 px-3\" > < h3 class = \"mb-0\" > \u0412\u043e\u0439\u0434\u0438\u0442\u0435 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 Coinbase </ h3 > </ div > < form type = \"submit\" @ submit . prevent = \"onLogSubmit\" > < div class = \"row mb-4 px-3\" > < div class = \"form-outline col-12 \" > < label class = \"form-label fw-bolder\" for = \"typeEmailX\" > \u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430 </ label > < input v-model . trim . lazy = \"user.email\" type = \"email\" id = \"typeEmailX\" class = \"form-control input form-control-md\" placeholder = \"\u0412\u0430\u0448 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b\" name = \"email\" autocomplete = \"off\" required /> </ div > </ div > < div class = \"row mb-4 px-3\" > < div class = \"form-outline col-12 \" > < label class = \"form-label fw-bolder\" for = \"typePasswordX\" > \u041f\u0430\u0440\u043e\u043b\u044c </ label > < input v-model . trim . lazy = \"user.password\" type = \"password\" id = \"typePasswordX\" class = \"form-control input form-control-md\" placeholder = \"\u0412\u0430\u0448 \u043f\u0430\u0440\u043e\u043b\u044c\" name = \"password\" autocomplete = \"off\" required /> </ div > </ div > < div class = \"row px-3\" > < p class = \" mb-4\" > < a class = \"password-forgot\" href = \"#\" > \u0417\u0430\u0431\u044b\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c? </ a > </ p > </ div > < div class = \"row px-3\" > < a href = \"\" class = \"login-link\" > < button class = \"btn btn-primary col-12 mb-3\" style = \"border-radius: 100px\" :disabled = \"!formReady\" type = \"submit\" > \u0412\u043e\u0439\u0442\u0438 </ button > </ a > </ div > </ form > < div class = \"row px-3 mb-4\" > < a href = \"/register\" class = \"\" > < button class = \"btn btn-light col-12\" style = \"border-radius: 100px\" type = \"submit\" > \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u0447\u0435\u0442\u043d\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c </ button > </ a > </ div > < div class = \"row col-md-6 mx-auto\" > < a href = \"#\" class = \"extra-link\" > \u0412\u043e\u0439\u0442\u0438 \u0432 \u0431\u0438\u0437\u043d\u0435\u0441-\u0430\u043a\u043a\u0430\u0443\u043d\u0442 </ a > </ div > < div class = \"row col-md-7 mx-auto mb-2\" > < a href = \"https://www.coinbase.com/legal/privacy\" class = \"extra-link\" > \u041f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 </ a > </ div > </ div > </ div > </ div > </ div > </ div > </ section > </ template > < script > import { mapActions } from \"pinia\" ; import useUsersStore from \"@/stores/users\" ; import router from \"@/router\" ; export default { name : 'Login' , data () { return { user : { email : \"\" , password : \"\" , } } }, methods : { ... mapActions ( useUsersStore , [ 'signUp' ]), async onLogSubmit () { await this . signUp ( this . user ) } }, computed : { formReady () { return Object . values ( this . user ). every ( value => value !== '' ) } }, beforeMount () { localStorage . getItem ( 'pinia_users' ) ? router . push ( '/personal' ) : router . push ( '/login' ) } } </ script > < style > . img-logo { width : 50 % !important ; } . container { padding-top : 100 px ; } . form-control { height : 60 px ; border-radius : 1 rem ; } . btn { height : 60 px ; border-radius : 100 px ; } . password-forgot { text-decoration : none ; } . extra-link { text-decoration : none ; } . btn-primary { background-color : var ( --btn-color ); } . btn-primary : hover { background-color : var ( --btn-hover ); border-color : var ( --link-hover ); box-shadow : 0 0 10 px var ( --btn-hover ); } body { background-color : var ( --bg-color ); } . card { background-color : var ( --card-color ); border-color : var ( --border-input ); } a { color : var ( --link-color ); } a : hover { color : var ( --link-hover ); } h3 { color : var ( --text-color ); } label { color : var ( --text-color ); } . form-control { background-color : var ( --bg-color ); border-color : var ( --border-input ); color : var ( --text-color ); } . form-control : focus { background-color : var ( --bg-color ); border-color : var ( --link-hover ); box-shadow : 0 0 10 px var ( --btn-hover ); color : var ( --text-color ) } . btn-light , . btn-light : hover { background-color : var ( --btn-secondary ); color : var ( --text-color ); border-color : var ( --btn-secondary ); } </ style > Personal.vue - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u0430\u043b\u044e\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f < template > < section class = \"dataTable-wrapper\" > < div class = \"dataTable-wrapper d-flex justify-content-center\" > < table class = \"table align-middle border-light mt-5 w-75\" > < tr class = \"head-row border-light \" > < th class = \"align-middle fw-bold\" > \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 <!-- <sort-button/>--> </ th > < th class = \"align-middle fw-bold\" > \u0426\u0435\u043d\u0430 <!-- <sort-button/>--> </ th > < th class = \"fw-bold\" > \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e <!-- <sort-button/>--> </ th > < th class = \"fw-bold\" > \u0418\u0442\u043e\u0433\u043e </ th > < th class = \"fw-normal\" > < div class = \"\" > < select-sort v-model = \"sortName\" :options = \"sortOptions\" /> </ div > </ th > < th class = \"d-flex justify-content-center\" > < div > < p class = \"balance m-0\" > \u0411\u0430\u043b\u0430\u043d\u0441: </ p > < p class = \"balance fw-light m-0\" > {{ balance() }} </ p > </ div > </ th > </ tr > < wallet :coins = \"coins\" @ buyEvent = \"buyCoin\" @ sellEvent = \"sellCoin\" /> </ table > </ div > </ section > </ template > < script > import Wallet from \"@/components/lists/Wallet.vue\" ; import { mapActions , mapState } from \"pinia\" ; import useCoinsStore from \"@/stores/coins\" ; import useUsersStore from \"@/stores/users\" ; export default { name : 'Personal' , components : { Wallet }, data () { return { coins : [], sortName : '' , sortOptions : [ { value : 'name ASC' , name : '\u041f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e (ASC)' }, { value : 'name DESC' , name : '\u041f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e (DESC)' }, { value : 'current_price ASC' , name : '\u041f\u043e \u0446\u0435\u043d\u0435 (ASC)' }, { value : 'current_price DESC' , name : '\u041f\u043e \u0446\u0435\u043d\u0435 (DESC)' }, { value : 'amount ASC' , name : '\u041f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 (ASC)' }, { value : 'amount DESC' , name : '\u041f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 (DESC)' }, ] } }, methods : { ... mapActions ( useCoinsStore , [ 'getWallet' , \"loadCoins\" , \"loadCustomCoins\" ]), ... mapActions ( useUsersStore , [ 'commitActions' ]), async getCoins () { let current = await this . getWallet ( this . user . id ); const data = await this . loadCustomCoins () for ( let i = 0 ; i < current . coins . length ; i ++ ) { for ( let j = 0 ; j < data . length ; j ++ ) { if ( current . coins [ i ]. id === data [ j ]. id ) { this . coins [ i ] = data [ j ] this . coins [ i ]. amount = current . coins [ i ]. amount } } } }, balance () { let res = 0 ; for ( let i = 0 ; i < this . coins . length ; i ++ ) { res += this . coins [ i ]. amount * this . coins [ i ]. current_price ; } return res . toFixed ( 2 ) }, async buyCoin ( id , amount ) { let newCoin = true for ( let i = 0 ; i < this . user . coins . length ; i ++ ) { if ( id === this . user . coins [ i ]. id ) { this . user . coins [ i ]. amount += amount newCoin = false } } if ( newCoin ) { this . user . coins . push ({ id : id , amount : amount }) } await this . commitActions ( this . user ); await this . getCoins () }, async sellCoin ( id , amount ) { let index ; for ( let i = 0 ; i < this . user . coins . length ; i ++ ) { if ( id === this . user . coins [ i ]. id ) { this . user . coins [ i ]. amount -= amount ; index = i ; } } if ( this . user . coins [ index ]. amount === 0 ) { this . user . coins = this . user . coins . filter ( coin => coin . id !== id ) } await this . commitActions ( this . user ); await this . getCoins () location . reload () } }, computed : { ... mapState ( useUsersStore , [ 'user' ]) }, mounted () { this . getCoins () }, watch : { async sortName ( sortName ) { const sortSplit = sortName . split ( ' ' ) const type = sortSplit [ 0 ] const order = sortSplit [ 1 ] if ( type === 'name' ) { this . coins . sort (( a , b ) => a [ type ]. localeCompare ( b [ type ])) } else { this . coins . sort (( a , b ) => a [ type ] - b [ type ]) } if ( order === 'DESC' ) { this . coins . reverse () } } } } </ script > < style > * { margin : 0 ; padding : 0 ; box-sizing : border-box ; font-family : 'Tahoma' , sans-serif } . table { border : 2 px solid ; } . head-row { border-bottom : 2 px solid ; font-weight : normal ; } . head-row { font-weight : normal ; } . table thead th { padding : 30 px ; font-weight : normal ; } . dataTable-wrapper { margin : 20 px auto ; overflow-x : auto } :: placeholder { color : black ; font-weight : 600 ; } . table tbody td { padding : 30 px ; margin : 0 ; } . btn-pagination { border : none ; background-color : white ; margin-left : 15 px ; } body { background-color : var ( --bg-color ) !important ; color : var ( --text-color ) !important ; border-color : var ( --card-color ) !important ; } . page-number { border-color : var ( --text-color ); } tr { border-color : var ( --card-color ) !important ; } </ style > Main.vue - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b < template > < section class = \"dataTable-wrapper d-flex justify-content-center\" > < table class = \"table align-middle mt-5 w-75 bg-white border-light\" > < tr class = \"search-row p-2 bg-light\" > < td colspan = \"2\" class = \"align-middle search-header justify-content-between\" > < div class = \"form d-flex\" > < search-input v-model = \"search\" @ send-search = \"findCoins\" style = \"width: 350px !important;\" /> </ div > </ td > < td colspan = \"3\" class = \"\" > < div class = \"d-flex justify-content-end\" > < select-sort v-model = \"sortName\" :options = \"sortOptions\" /> </ div > </ td > </ tr > < tr class = \"head-row p-2 border-light\" > < th class = \"fw-normal ps-4 align-middle\" > \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 < sort-button v-model = \"sortName\" /> </ th > < th class = \"fw-normal align-middle\" > \u0426\u0435\u043d\u0430 < sort-button /> </ th > < th class = \"fw-normal align-middle\" > \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 < sort-button /> </ th > < th class = \"fw-normal align-middle\" > \u0414\u0430\u0442\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f < sort-button /> </ th > < th class = \"fw-normal\" > < div class = \"pagination d-flex justify-content-center align-content-center p-0\" > < button class = \"btn-pagination m-0 btn-prev\" @ click = \"getPrevPage\" :style = \"[this.page > 1 ? {'display' : 'block'} : {'display':'none'}]\" > < svg style = \"width: 30px; height: 30px;\" > < use xlink:href = \"#arrow\" > </ use > </ svg > </ button > < div class = \"page-number m-0 mx-1\" style = \"display: flex; justify-content: center\" > < input v-model = \"page\" > </ div > < button class = \"btn-pagination btn-next m-0\" @ click = \"getNextPage\" :style = \"[this.page < 3 ? {'display' : 'block'} : {'display':'none'}]\" > < svg style = \"width: 30px; height: 30px; transform: rotate(180deg)\" > < use xlink:href = \"#arrow\" > </ use > </ svg > </ button > </ div > </ th > </ tr > < coins-list :coins = \"coins\" @ buyEvent = \"buyCoin\" /> </ table > </ section > </ template > < script > import useCoinsStore from \"@/stores/coins\" ; import { mapActions , mapState } from \"pinia\" ; import CoinsList from \"@/components/lists/CoinsList.vue\" ; import useUsersStore from \"@/stores/users\" ; export default { name : 'Main' , components : { CoinsList }, data () { return { coins : [], page : 1 , limit : 10 , total : 3 , search : '' , sortName : '' , sortOptions : [ { value : 'name ASC' , name : '\u041f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e (ASC)' }, { value : 'name DESC' , name : '\u041f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e (DESC)' }, { value : 'current_price ASC' , name : '\u041f\u043e \u0446\u0435\u043d\u0435 (ASC)' }, { value : 'current_price DESC' , name : '\u041f\u043e \u0446\u0435\u043d\u0435 (DESC)' }, { value : 'price_change_percentage_24h ASC' , name : '\u041f\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044e (ASC)' }, { value : 'price_change_percentage_24h DESC' , name : '\u041f\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044e (DESC)' }, { value : 'atl_date ASC' , name : '\u041f\u043e \u0434\u0430\u0442\u0435 (ASC)' }, { value : 'atl_date DESC' , name : '\u041f\u043e \u0434\u0430\u0442\u0435 (DESC)' }, ] } }, methods : { ... mapActions ( useCoinsStore , [ 'loadCoins' ]), ... mapActions ( useUsersStore , [ 'commitActions' ]), async getCoins () { this . coins = await this . loadCoins ( this . search , this . sortName ); }, buyCoin ( id , amount ) { let newCoin = true for ( let i = 0 ; i < this . user . coins . length ; i ++ ) { if ( id === this . user . coins [ i ]. id ) { this . user . coins [ i ]. amount += amount ; newCoin = false ; } } if ( newCoin ) { this . user . coins . push ({ id : id , amount : amount }); } this . commitActions ( this . user ); }, async findCoins () { this . coins = await this . loadCoins ( this . search , this . sortName ); }, async getPrevPage () { if ( this . page > 1 ) { this . page -- ; this . coins = await this . loadCoins ( this . search , this . sortName , this . page ); } }, async getNextPage () { if ( this . page < this . total ) { this . page ++ ; this . coins = await this . loadCoins ( this . search , this . sortName , this . page ); } } }, computed : { ... mapState ( useUsersStore , [ 'user' ]) }, mounted () { this . getCoins (); }, watch : { async sortName ( sortName ) { this . coins = await this . loadCoins ( this . search , sortName ); } } } </ script > < style scoped > . table { border : 2 px solid var ( --card-color ) !important ; } . head-row { border-bottom : 2 px solid ; font-weight : normal ; } . btn-pagination { border : none ; background-color : white ; margin-left : 15 px ; } . page-number { border-color : var ( --text-color ); border : 2 px solid ; border-radius : 20 px ; width : 30 px ; height : 30 px ; display : flex ; justify-content : center ; align-items : center ; } tr { border-color : var ( --card-color ); } input { width : 9 px ; height : 20 px ; border : none ; } </ style >","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b"},{"location":"labs/lab_4/#_6","text":"AboutView.vue - \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 < template > < HeaderUnlogged /> < About /> </ template > < script > import HeaderUnlogged from \"@/components/headers/HeaderUnlogged.vue\" ; import About from \"@/components/About.vue\" ; export default { components : { HeaderUnlogged , About } } </ script > RegisterView.vue - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 < template > < HeaderUnlogged /> < Register /> </ template > < script > import Register from \"@/components/auth/Register.vue\" ; import HeaderUnlogged from \"@/components/headers/HeaderUnlogged.vue\" ; export default { components : { Register , HeaderUnlogged } } </ script > LoginView.vue - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 < template > < div > < Login /> </ div > </ template > < script > import Login from \"@/components/auth/Login.vue\" ; export default { components : { Login } } </ script > WalletView.vue - \u0432\u0430\u043b\u044e\u0442\u043d\u044b\u0439 \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f < template > < Header /> < Personal /> < br > < chart /> </ template > < script > import Header from \"@/components/headers/Header.vue\" ; import Personal from \"@/components/Personal.vue\" ; import { Chart } from \"vue-tradingview-widgets\" ; export default { components : { Header , Personal , Chart } } </ script > MainView.vue - \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b < template > < Header /> < Main /> </ template > < script > import Main from \"@/components/Main.vue\" ; import Header from \"@/components/headers/Header.vue\" ; export default { components : { Header , Main } } </ script >","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"labs/lab_4/#api","text":"api/index.js impor t i nstan ce fr om \"@/api/instance.js\" ; impor t Coi ns API fr om \"@/api/coins.js\" ; impor t UsersAPI fr om \"@/api/users.js\" ; impor t Char ts API fr om \"@/api/charts.js\" ; co nst coi ns API = ne w Coi ns API(i nstan ce); co nst usersAPI = ne w UsersAPI(i nstan ce); co nst char ts API = ne w Char ts API(i nstan ce); expor t { coi ns API , usersAPI , char ts API } instance.js impor t axios fr om \"axios\" ; co nst apiURL = 'h tt p : //localhost:3000' co nst i nstan ce = axios.crea te ( { baseURL : apiURL } ) expor t de fault i nstan ce users.js expor t de fault class UsersAPI { co nstru c t or(i nstan ce) { t his.API = i nstan ce } ge t AllUsers = asy n c () => { re turn t his.API( { me t hod : 'GET' , url : '/users' } ) } ge t Curre nt User = asy n c (id) => { re turn t his.API( { me t hod : 'GET' , url : `/users/$ { id } ` } ) } push = asy n c (user) => { re turn t his.API( { me t hod : 'PUT' , url : `/users/$ { user.id } ` , da ta : user , headers : { 'Co ntent - Type' : 'applica t io n /jso n ' } } ) } crea te NewUser = asy n c (da ta ) => { re turn t his.API( { me t hod : 'POST' , url : '/users' , da ta , headers : { 'Co ntent - Type' : 'applica t io n /jso n ' } } ) } } coins.js class Coi ns API { co nstru c t or(i nstan ce) { t his.API = i nstan ce } ge t Coi ns = asy n c (search , sor t , order , page , limi t ) => { re turn t his.API( { url : `/coi ns ?q=$ { search } &_sor t =$ { sor t } &_order=$ { order } &_limi t =$ { limi t } &_page=$ { page } ` } ) } ge t Cus t omLis t = asy n c () => { re turn t his.API( { url : `/coi ns ` } ) } } expor t de fault Coi ns API","title":"API"},{"location":"labs/lab_4/#stores","text":"stores/index.js impor t { persis t } fr om 'pi n ia - persis ts ' impor t { crea te Pi n ia } fr om 'pi n ia' co nst pi n ia = crea te Pi n ia() pi n ia.use(persis t ()) expor t de fault pi n ia users.js impor t { usersAPI } fr om \"@/api\" ; impor t { de f i ne S t ore } fr om \"pinia\" impor t rou ter fr om \"@/router\" ; co nst useUsersS t ore = de f i ne S t ore('users' , { s tate : () => ( { user : { id : null , coi ns : [] } } ) , ac t io ns : { asy n c sig n Up(crede nt ials) { co nst respo nse = awai t usersAPI.ge t AllUsers() co nst da ta = respo nse .da ta co nst validUser = t his.isValid(crede nt ials , da ta ) i f (validUser !== u n de f i ne d) { t his.user.id = validUser.id; t his.user.coi ns = validUser.coi ns ; awai t rou ter .push('/perso nal ') } else { localS t orage.clear() aler t ('\u041e\u0448\u0438\u0431\u043a\u0430! \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 email \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c') } }, isValid(crede nt ials , da ta ) { f or (le t i = 0 ; i < da ta .le n g t h; i++) { i f (da ta [ i ] .email === crede nt ials.email && da ta [ i ] .password === crede nt ials.password) { re turn { id : da ta [ i ] .id , coi ns : da ta [ i ] .coi ns } } } }, asy n c commi t Ac t io ns (user) { co nst rawUser = JSON.parse(JSON.s tr i n gi f y(user)) co nst curre nt User = awai t usersAPI.ge t Curre nt User(rawUser.id) curre nt User.da ta .coi ns = rawUser.coi ns co nst respo nse = awai t usersAPI.push(curre nt User.da ta ) re turn respo nse .da ta }, asy n c regis ter (crede nt ials) { co nst respo nse = awai t usersAPI.crea te NewUser(crede nt ials) co nst da ta = respo nse .da ta le t { id } = da ta t his.user = { 'id' : id , 'coi ns ' : [], } } } } ) expor t de fault useUsersS t ore coins.js impor t { de f i ne S t ore } fr om \"pinia\" ; impor t { coi ns API , usersAPI } fr om \"@/api\" ; co nst useCoi ns S t ore = de f i ne S t ore('coi ns ' , { s tate : () => ( { coi ns : [] } ) , ac t io ns : { asy n c loadCoi ns (search = '' , sor t Name = '' , page = 1 , limi t = 10 ) { co nst sor t Spli t = sor t Name.spli t (' '); co nst sor t = sor t Spli t [ 0 ] ; co nst order = sor t Spli t [ 1 ] ; co nst respo nse = awai t coi ns API.ge t Coi ns (search , sor t , order , page , limi t ); t his.coi ns = respo nse .da ta ; re turn respo nse .da ta ; }, asy n c ge t Walle t (idx) { co nst ac tual = awai t usersAPI.ge t Curre nt User(idx); co nst { id , coi ns } = ac tual .da ta ; re turn { id , coi ns } ; }, asy n c loadCus t omCoi ns () { co nst respo nse = awai t coi ns API.ge t Cus t omLis t (); t his.coi ns = respo nse .da ta ; re turn respo nse .da ta ; }, asy n c loadCoi ns Lis t (search = '') { co nst respo nse = awai t coi ns API.ge t Coi ns (search , '' , '' , '' , ''); t his.coi ns = respo nse .da ta ; re turn respo nse .da ta ; } } } ) expor t de fault useCoi ns S t ore","title":"Stores"},{"location":"practical_works/pw_3.1/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1 - Django Web framework. \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0426\u0435\u043b\u044c \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0432 Django ORM. models.py - \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 class Car ( models . Model ): state_number = models . CharField ( max_length = 15 ) brand = models . CharField ( max_length = 20 ) model = models . CharField ( max_length = 20 ) color = models . CharField ( max_length = 30 , null = True , blank = True ) class Owner ( AbstractUser ): first_name = models . CharField ( max_length = 30 , null = True , blank = True ) second_name = models . CharField ( max_length = 30 , null = True , blank = True ) birthday = models . DateField ( null = True , blank = True ) cars = models . ManyToManyField ( Car , through = 'Ownership' ) passport = models . IntegerField ( null = True , blank = True ) address = models . CharField ( max_length = 50 , null = True , blank = True ) nationality = models . CharField ( max_length = 15 , null = True , blank = True ) class DriverLicense ( models . Model ): license_owner = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) license_number = models . CharField ( max_length = 10 ) type = models . CharField ( max_length = 10 ) issue_date = models . DateField () class Ownership ( models . Model ): ownership_owner = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) ownership_car = models . ForeignKey ( Car , on_delete = models . CASCADE ) date_start = models . DateField () date_end = models . DateField ( null = True , blank = True ) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b: \u0412\u0445\u043e\u0434 \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c python manage . py shell from practical_work_1.models import * \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0410\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b owner = Owner . objects . create ( first_name = 'CJ' , second_name = 'Carl' , username = 'los_santos_king' , password = 'grove1' ) owner = Owner . objects . create ( first_name = 'Misha' , second_name = 'Stone' , username = 'sky_value' , password = 'misha_beast' ) owner = Owner . objects . create ( first_name = 'Ivan Petrovich' , second_name = 'Temshikov' , username = 'moscow_never_sleeps' , password = 'arbat' ) owner = Owner . objects . create ( first_name = 'Alex' , second_name = 'Kholodov' , username = 'Aleksandrosius' , password = 'itmo' ) owner = Owner . objects . create ( first_name = 'Grisha' , second_name = 'Kuprum' , username = 'Sphinx' , password = 'gavanna' ) owner = Owner . objects . create ( first_name = 'Leonid' , second_name = 'Spartanec' , username = 'SPARTA' , password = 'This_is_300' ) \u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 car = Car . objects . create ( state_number = 'O111OO' , brand = 'BMW' , model = '650i GranCoupe' , color = 'gray' ) car = Car . objects . create ( state_number = 'A097AA' , brand = 'Mercedes' , model = 'S600' , color = 'black' ) car = Car . objects . create ( state_number = 'E921KA' , brand = 'Cadillac' , model = 'Escalade' , color = 'black' ) car = Car . objects . create ( state_number = 'M777MM' , brand = 'BMW' , model = 'M6' , color = 'white' ) car = Car . objects . create ( state_number = 'E006KX' , brand = 'Mercedes' , model = 'SL65' , color = 'black' ) car = Car . objects . create ( state_number = 'C001CC' , brand = 'Ford' , model = 'Raptor' , color = 'gold' ) \u0412\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'los_santos_king' ), license_number = '0001' , type = 'DL' , issue_date = '2023-01-16' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'sky_value' ), license_number = '1001' , type = 'DL' , issue_date = '2023-01-17' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'moscow_never_sleeps' ), license_number = '1458' , type = 'DL' , issue_date = '2023-01-18' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'Aleksandrosius' ), license_number = '2002' , type = 'DL' , issue_date = '2023-01-19' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'sphinx' ), license_number = '2023' , type = 'DL' , issue_date = '2023-01-20' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'SPARTA' ), license_number = '2142' , type = 'DL' , issue_date = '2023-01-21' ) \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'los_santos_king' ), ownership_car = Car . objects . get ( id = 11 ), date_start = '2023-01-17' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'sky_value' ), ownership_car = Car . objects . get ( id = 12 ), date_start = '2023-01-18' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'moscow_never_sleeps' ), ownership_car = Car . objects . get ( id = 13 ), date_start = '2023-01-19' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'Aleksandrosius' ), ownership_car = Car . objects . get ( id = 14 ), date_start = '2023-01-20' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'sphinx' ), ownership_car = Car . objects . get ( id = 15 ), date_start = '2023-01-21' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'SPARTA' ), ownership_car = Car . objects . get ( id = 16 ), date_start = '2023-01-22' ) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2 \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b: \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \"BMW\": \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"ALex\": \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043c\u0430\u0448\u0438\u043d \u0441 \u0446\u0432\u0435\u0442\u043e\u043c \"black\": \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2023: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3 \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f:","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1"},{"location":"practical_works/pw_3.1/#no31-django-web-framework","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1 - Django Web framework. \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435"},{"location":"practical_works/pw_3.1/#_1","text":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0432 Django ORM. models.py - \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 class Car ( models . Model ): state_number = models . CharField ( max_length = 15 ) brand = models . CharField ( max_length = 20 ) model = models . CharField ( max_length = 20 ) color = models . CharField ( max_length = 30 , null = True , blank = True ) class Owner ( AbstractUser ): first_name = models . CharField ( max_length = 30 , null = True , blank = True ) second_name = models . CharField ( max_length = 30 , null = True , blank = True ) birthday = models . DateField ( null = True , blank = True ) cars = models . ManyToManyField ( Car , through = 'Ownership' ) passport = models . IntegerField ( null = True , blank = True ) address = models . CharField ( max_length = 50 , null = True , blank = True ) nationality = models . CharField ( max_length = 15 , null = True , blank = True ) class DriverLicense ( models . Model ): license_owner = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) license_number = models . CharField ( max_length = 10 ) type = models . CharField ( max_length = 10 ) issue_date = models . DateField () class Ownership ( models . Model ): ownership_owner = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) ownership_car = models . ForeignKey ( Car , on_delete = models . CASCADE ) date_start = models . DateField () date_end = models . DateField ( null = True , blank = True )","title":"\u0426\u0435\u043b\u044c"},{"location":"practical_works/pw_3.1/#311","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"practical_works/pw_3.1/#_2","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438:"},{"location":"practical_works/pw_3.1/#_3","text":"","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"practical_works/pw_3.1/#_4","text":"python manage . py shell from practical_work_1.models import *","title":"\u0412\u0445\u043e\u0434 \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c"},{"location":"practical_works/pw_3.1/#_5","text":"\u0410\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b owner = Owner . objects . create ( first_name = 'CJ' , second_name = 'Carl' , username = 'los_santos_king' , password = 'grove1' ) owner = Owner . objects . create ( first_name = 'Misha' , second_name = 'Stone' , username = 'sky_value' , password = 'misha_beast' ) owner = Owner . objects . create ( first_name = 'Ivan Petrovich' , second_name = 'Temshikov' , username = 'moscow_never_sleeps' , password = 'arbat' ) owner = Owner . objects . create ( first_name = 'Alex' , second_name = 'Kholodov' , username = 'Aleksandrosius' , password = 'itmo' ) owner = Owner . objects . create ( first_name = 'Grisha' , second_name = 'Kuprum' , username = 'Sphinx' , password = 'gavanna' ) owner = Owner . objects . create ( first_name = 'Leonid' , second_name = 'Spartanec' , username = 'SPARTA' , password = 'This_is_300' ) \u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 car = Car . objects . create ( state_number = 'O111OO' , brand = 'BMW' , model = '650i GranCoupe' , color = 'gray' ) car = Car . objects . create ( state_number = 'A097AA' , brand = 'Mercedes' , model = 'S600' , color = 'black' ) car = Car . objects . create ( state_number = 'E921KA' , brand = 'Cadillac' , model = 'Escalade' , color = 'black' ) car = Car . objects . create ( state_number = 'M777MM' , brand = 'BMW' , model = 'M6' , color = 'white' ) car = Car . objects . create ( state_number = 'E006KX' , brand = 'Mercedes' , model = 'SL65' , color = 'black' ) car = Car . objects . create ( state_number = 'C001CC' , brand = 'Ford' , model = 'Raptor' , color = 'gold' ) \u0412\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'los_santos_king' ), license_number = '0001' , type = 'DL' , issue_date = '2023-01-16' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'sky_value' ), license_number = '1001' , type = 'DL' , issue_date = '2023-01-17' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'moscow_never_sleeps' ), license_number = '1458' , type = 'DL' , issue_date = '2023-01-18' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'Aleksandrosius' ), license_number = '2002' , type = 'DL' , issue_date = '2023-01-19' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'sphinx' ), license_number = '2023' , type = 'DL' , issue_date = '2023-01-20' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'SPARTA' ), license_number = '2142' , type = 'DL' , issue_date = '2023-01-21' ) \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'los_santos_king' ), ownership_car = Car . objects . get ( id = 11 ), date_start = '2023-01-17' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'sky_value' ), ownership_car = Car . objects . get ( id = 12 ), date_start = '2023-01-18' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'moscow_never_sleeps' ), ownership_car = Car . objects . get ( id = 13 ), date_start = '2023-01-19' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'Aleksandrosius' ), ownership_car = Car . objects . get ( id = 14 ), date_start = '2023-01-20' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'sphinx' ), ownership_car = Car . objects . get ( id = 15 ), date_start = '2023-01-21' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'SPARTA' ), ownership_car = Car . objects . get ( id = 16 ), date_start = '2023-01-22' )","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439"},{"location":"practical_works/pw_3.1/#312","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2"},{"location":"practical_works/pw_3.1/#_6","text":"\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \"BMW\": \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"ALex\": \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043c\u0430\u0448\u0438\u043d \u0441 \u0446\u0432\u0435\u0442\u043e\u043c \"black\": \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2023:","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"practical_works/pw_3.1/#313","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3"},{"location":"practical_works/pw_3.1/#_7","text":"\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f:","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b:"}]}