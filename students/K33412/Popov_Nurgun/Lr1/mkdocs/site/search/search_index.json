{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 1","text":""},{"location":"#task-1","title":"TASK 1","text":"<ul> <li>client.py <pre><code>import socket\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect(('localhost', 5678))\nclient_socket.sendall('Hello, server'.encode())\ndata = client_socket.recv(1024).decode()\nprint(data)\n</code></pre></li> <li>server.py <pre><code>import socket\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nserver_socket.bind(('localhost', 5678))\nserver_socket.listen(5)\nwhile True:\nclient_socket, address = server_socket.accept()\ndata = client_socket.recv(1024).decode('ascii')\nprint(data)\nclient_socket.send('Hello, client'.encode())\n</code></pre></li> </ul>"},{"location":"#task-2","title":"TASK 2","text":"<ul> <li>client.py <pre><code>import socket\n#Version with trapezoid\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect(('localhost', 5678))\nmsg = client_socket.recv(1024).decode()\nprint(msg)\nparameters_str = input()\nclient_socket.sendall(parameters_str.encode())\ndata = client_socket.recv(1024).decode()\nprint(data)\n</code></pre></li> <li>server.py <pre><code>import socket\n#Version with trapezoid\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nserver_socket.bind(('localhost', 5678))\nserver_socket.listen(5)\ndef calculate_area_of_trapezoid(base1, base2, height):\nreturn (base1 + base2) / 2 * height\nwhile True:\nclient_socket, address = server_socket.accept()\nclient_socket.send('Enter parameters of trapezoid separated by space: base1 base2 height'.encode())\ndata = client_socket.recv(1024).decode('ascii').split(' ')\nresult = calculate_area_of_trapezoid(int(data[0]), int(data[1]), int(data[2]))\nclient_socket.send(str(result).encode())\n</code></pre></li> </ul>"},{"location":"#task-3","title":"TASK 3","text":"<ul> <li>client.py <pre><code>import socket\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect(('localhost', 5678))\ndata = client_socket.recv(1024).decode()\nprint(data)\n</code></pre></li> <li>server.py <pre><code>import socket\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nserver_socket.bind(('localhost', 5678))\nserver_file = open('server_index.html', 'wb')\nserver_socket.listen(5)\nclient_socket, address = server_socket.accept()\nserver_file = open('index.html', 'rb')\nclient_socket.sendfile(server_file)\n</code></pre></li> <li>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n        \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161\n    &lt;/head&gt;\n&lt;body&gt;\n&lt;b&gt;\u0427\u0430\u0441\u0442\u044c 3&lt;/b&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> </ul>"},{"location":"#task-4","title":"TASK 4","text":"<ul> <li>client.py <pre><code>import socket\nimport threading\nclass Client():\ndef __init__(self):\nself.username = input('Enter your username: ')\nself.sock = socket.socket()\nself.sock.connect(('localhost', 5678))\nself.sock.sendall((self.username + ' endered chat').encode())\nprint('You entered chat as ' + self.username)\ndef send_messages(self):\ntry:\nwhile True:\nmsg = input()\nif msg == '\\\\quit':\nprint('You exited chat')\nself.sock.sendall((self.username + ' exited chat').encode())\nbreak\nself.sock.sendall((self.username + ': ' + msg).encode())\nexcept Exception:\npass\ndef check_messages(self):\ntry:\nwhile True:\nnew_msg = self.sock.recv(1024).decode()\nif new_msg:\nprint(new_msg)\nexcept Exception:\npass\nif __name__=='__main__':\nclient = Client()\nthreading.Thread(target=client.check_messages, args=()).start()\nthreading.Thread(target=client.send_messages, args=()).start()\n</code></pre></li> <li>server.py <pre><code>import socket\nimport threading\nclass Server():\ndef __init__(self):\nself.user_list = []\nself.sock = socket.socket()\nself.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nself.sock.bind(('localhost', 5678))\nself.sock.listen(5)\nprint('Server started')\ndef run(self):\ntry:\nwhile True:\nclient_sock, addr = self.sock.accept()\nself.user_list.append(client_sock)\nthreading.Thread(target=self.check_messages, args=(client_sock,)).start()\nexcept KeyboardInterrupt:\nself.user_list = []\nself.sock.close()\ndef check_messages(self, client_sock):\ntry:\nwhile True:\nmsg = client_sock.recv(1024).decode('utf-8')\nif msg:\nself.show_msg(client_sock, msg)\nexcept Exception:\nself.terminate_connection(client_sock)\ndef terminate_connection(self, client_sock):\nself.user_list.remove(client_sock)\ndef show_msg(self, client_sock, msg):\nprint(msg)\nfor user in self.user_list:\nif user != client_sock:\nuser.sendall(msg.encode())\nif __name__=='__main__':\nserver = Server()\nmain_thread = server.run()\n</code></pre></li> </ul>"},{"location":"#task-5","title":"TASK 5","text":"<ul> <li>server.py <pre><code>import socket\nclass MyHTTPServer:\ndef __init__(self, host, port):\nself.host = host\nself.port = port\ndef serve_forever(self):\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.bind((self.host, self.port))\nsock.listen(2)\nwhile True:\nclientsocket, _ = sock.accept()\nself.serve_client(clientsocket)\ndef serve_client(self, clientsocket):\ndata = clientsocket.recv(18456)\ndata = data.decode('utf-8')\ntarget, method = self.parse_request(data)\nheaders, body = self.parse_headers(data)\nresp = self.handle_request(target, method, body)\nif resp:\nself.send_response(clientsocket, resp)\ndef parse_request(self, data):\ndata = data.replace('\\r', '')\nlines = data.split('\\n')\nmethod, target, protocol = lines[0].split()\nreturn target, method\ndef parse_headers(self, data):\ndata = data.replace('\\r', '')\nlines = data.split('\\n')\ni = lines.index('')\nheaders = lines[1:i]\nbody = lines[-1]\nreturn headers, body\ndef handle_request(self, target, method, body):\nif target == \"/\":\nif method == \"GET\":\nresp = \"HTTP/1.1 200 OK\\n\\n\"\nwith open('index.html') as f:\nresp += f.read()\nreturn resp\nif method == \"POST\":\nnewbody = body.split('&amp;')\nfor a in newbody:\nif a.split('=')[0] == 'subject':\nsubjects.append(a.split('=')[1])\nif a.split('=')[0] == 'mark':\nmarks.append(a.split('=')[1])\nresp = \"HTTP/1.1 200 OK\\n\\n\"\nresp += \"&lt;html&gt;&lt;head&gt;&lt;title&gt;Journal&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\"\nfor s, m in zip(subjects, marks):\nresp += f\"&lt;p&gt;{s}: {m}&lt;/p&gt;\"\nresp += \"&lt;/body&gt;&lt;/html&gt;\"\nreturn resp\ndef send_response(self, clientsocket, resp):\nclientsocket.send(resp.encode('utf-8'))\nif __name__ == '__main__':\nhost = 'localhost'\nport = 8081\nserv = MyHTTPServer(host, port)\nsubjects = []\nmarks = []\ntry:\nserv.serve_forever()\nexcept KeyboardInterrupt:\npass\n</code></pre></li> <li>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;Journal&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=\"/\" method=\"post\"&gt;\n&lt;div&gt;\n&lt;label for=\"name\"&gt;Subject:&lt;/label&gt;\n&lt;input type=\"text\" id=\"name\" name=\"subject\"/&gt;\n&lt;/div&gt;\n&lt;div&gt;\n&lt;label for=\"mail\"&gt;Mark:&lt;/label&gt;\n&lt;input type=\"number\" id=\"mail\" name=\"mark\"/&gt;\n&lt;/div&gt;\n&lt;div&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> </ul>"},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"}]}