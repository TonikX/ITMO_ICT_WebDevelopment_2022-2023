{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 1","text":""},{"location":"#task-1","title":"TASK 1","text":"<ul> <li>client.py <pre><code>import socket\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect(('localhost', 5678))\nclient_socket.sendall('Hello, server'.encode())\ndata = client_socket.recv(1024).decode()\nprint(data)\n</code></pre></li> <li>server.py <pre><code>import socket\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nserver_socket.bind(('localhost', 5678))\nserver_socket.listen(5)\nwhile True:\nclient_socket, address = server_socket.accept()\ndata = client_socket.recv(1024).decode('ascii')\nprint(data)\nclient_socket.send('Hello, client'.encode())\n</code></pre></li> </ul>"},{"location":"#task-2","title":"TASK 2","text":"<ul> <li>client.py <pre><code>import socket\n#Version with trapezoid\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect(('localhost', 5678))\nmsg = client_socket.recv(1024).decode()\nprint(msg)\nparameters_str = input()\nclient_socket.sendall(parameters_str.encode())\ndata = client_socket.recv(1024).decode()\nprint(data)\n</code></pre></li> <li>server.py <pre><code>import socket\n#Version with trapezoid\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nserver_socket.bind(('localhost', 5678))\nserver_socket.listen(5)\ndef calculate_area_of_trapezoid(base1, base2, height):\nreturn (base1 + base2) / 2 * height\nwhile True:\nclient_socket, address = server_socket.accept()\nclient_socket.send('Enter parameters of trapezoid separated by space: base1 base2 height'.encode())\ndata = client_socket.recv(1024).decode('ascii').split(' ')\nresult = calculate_area_of_trapezoid(int(data[0]), int(data[1]), int(data[2]))\nclient_socket.send(str(result).encode())\n</code></pre></li> </ul>"},{"location":"#task-3","title":"TASK 3","text":"<ul> <li>client.py <pre><code>import socket\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect(('localhost', 5678))\ndata = client_socket.recv(1024).decode()\nprint(data)\n</code></pre></li> <li>server.py <pre><code>import socket\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nserver_socket.bind(('localhost', 5678))\nserver_file = open('server_index.html', 'wb')\nserver_socket.listen(5)\nclient_socket, address = server_socket.accept()\nserver_file = open('index.html', 'rb')\nclient_socket.sendfile(server_file)\n</code></pre></li> <li>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n        \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161\n    &lt;/head&gt;\n&lt;body&gt;\n&lt;b&gt;\u0427\u0430\u0441\u0442\u044c 3&lt;/b&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> </ul>"},{"location":"#task-4","title":"TASK 4","text":"<ul> <li>client.py <pre><code>import socket\nimport threading\nclass Client():\ndef __init__(self):\nself.username = input('Enter your username: ')\nself.sock = socket.socket()\nself.sock.connect(('localhost', 5678))\nself.sock.sendall((self.username + ' endered chat').encode())\nprint('You entered chat as ' + self.username)\ndef send_messages(self):\ntry:\nwhile True:\nmsg = input()\nif msg == '\\\\quit':\nprint('You exited chat')\nself.sock.sendall((self.username + ' exited chat').encode())\nbreak\nself.sock.sendall((self.username + ': ' + msg).encode())\nexcept Exception:\npass\ndef check_messages(self):\ntry:\nwhile True:\nnew_msg = self.sock.recv(1024).decode()\nif new_msg:\nprint(new_msg)\nexcept Exception:\npass\nif __name__=='__main__':\nclient = Client()\nthreading.Thread(target=client.check_messages, args=()).start()\nthreading.Thread(target=client.send_messages, args=()).start()\n</code></pre></li> <li>server.py <pre><code>import socket\nimport threading\nclass Server():\ndef __init__(self):\nself.user_list = []\nself.sock = socket.socket()\nself.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nself.sock.bind(('localhost', 5678))\nself.sock.listen(5)\nprint('Server started')\ndef run(self):\ntry:\nwhile True:\nclient_sock, addr = self.sock.accept()\nself.user_list.append(client_sock)\nthreading.Thread(target=self.check_messages, args=(client_sock,)).start()\nexcept KeyboardInterrupt:\nself.user_list = []\nself.sock.close()\ndef check_messages(self, client_sock):\ntry:\nwhile True:\nmsg = client_sock.recv(1024).decode('utf-8')\nif msg:\nself.show_msg(client_sock, msg)\nexcept Exception:\nself.terminate_connection(client_sock)\ndef terminate_connection(self, client_sock):\nself.user_list.remove(client_sock)\ndef show_msg(self, client_sock, msg):\nprint(msg)\nfor user in self.user_list:\nif user != client_sock:\nuser.sendall(msg.encode())\nif __name__=='__main__':\nserver = Server()\nmain_thread = server.run()\n</code></pre></li> </ul>"},{"location":"#task-5","title":"TASK 5","text":"<ul> <li>server.py <pre><code>import socket\nclass MyHTTPServer:\ndef __init__(self, host, port):\nself.host = host\nself.port = port\ndef serve_forever(self):\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.bind((self.host, self.port))\nsock.listen(2)\nwhile True:\nclientsocket, _ = sock.accept()\nself.serve_client(clientsocket)\ndef serve_client(self, clientsocket):\ndata = clientsocket.recv(18456)\ndata = data.decode('utf-8')\ntarget, method = self.parse_request(data)\nheaders, body = self.parse_headers(data)\nresp = self.handle_request(target, method, body)\nif resp:\nself.send_response(clientsocket, resp)\ndef parse_request(self, data):\ndata = data.replace('\\r', '')\nlines = data.split('\\n')\nmethod, target, protocol = lines[0].split()\nreturn target, method\ndef parse_headers(self, data):\ndata = data.replace('\\r', '')\nlines = data.split('\\n')\ni = lines.index('')\nheaders = lines[1:i]\nbody = lines[-1]\nreturn headers, body\ndef handle_request(self, target, method, body):\nif target == \"/\":\nif method == \"GET\":\nresp = \"HTTP/1.1 200 OK\\n\\n\"\nwith open('index.html') as f:\nresp += f.read()\nreturn resp\nif method == \"POST\":\nnewbody = body.split('&amp;')\nfor a in newbody:\nif a.split('=')[0] == 'subject':\nsubjects.append(a.split('=')[1])\nif a.split('=')[0] == 'mark':\nmarks.append(a.split('=')[1])\nresp = \"HTTP/1.1 200 OK\\n\\n\"\nresp += \"&lt;html&gt;&lt;head&gt;&lt;title&gt;Journal&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\"\nfor s, m in zip(subjects, marks):\nresp += f\"&lt;p&gt;{s}: {m}&lt;/p&gt;\"\nresp += \"&lt;/body&gt;&lt;/html&gt;\"\nreturn resp\ndef send_response(self, clientsocket, resp):\nclientsocket.send(resp.encode('utf-8'))\nif __name__ == '__main__':\nhost = 'localhost'\nport = 8081\nserv = MyHTTPServer(host, port)\nsubjects = []\nmarks = []\ntry:\nserv.serve_forever()\nexcept KeyboardInterrupt:\npass\n</code></pre></li> <li>index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;Journal&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action=\"/\" method=\"post\"&gt;\n&lt;div&gt;\n&lt;label for=\"name\"&gt;Subject:&lt;/label&gt;\n&lt;input type=\"text\" id=\"name\" name=\"subject\"/&gt;\n&lt;/div&gt;\n&lt;div&gt;\n&lt;label for=\"mail\"&gt;Mark:&lt;/label&gt;\n&lt;input type=\"number\" id=\"mail\" name=\"mark\"/&gt;\n&lt;/div&gt;\n&lt;div&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> </ul>"},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"index2/","title":"\u041b\u0410\u0411\u041e\u0420\u0410\u0422\u041e\u0420\u041d\u0410\u042f \u0420\u0410\u0411\u041e\u0422\u0410 2","text":""},{"location":"index2/#_1","title":"\u041e\u041f\u0418\u0421\u0410\u041d\u0418\u0415 \u0417\u0410\u0414\u0410\u041d\u0418\u042f","text":""},{"location":"index2/#6","title":"\u0412\u0410\u0420\u0418\u0410\u041d\u0422 6","text":"<p>\u0422\u0430\u0431\u043b\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a: \u0424\u0418\u041e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043e\u043f\u044b\u0442 \u0438 \u043a\u043b\u0430\u0441\u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:</p> <ul> <li>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.</li> <li>\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439.</li> <li>\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435.</li> <li>\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin.</li> <li> <p>\u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438.</p> </li> <li> <p>model.py    <pre><code>from django.db import models\nfrom django.contrib.auth.models import User\nclass Racer(models.Model):\nDRIVER_CLASSES = (\n('Circuit', 'Circuit racer'),\n('Rally', 'Rally racer'),\n('Endurance', 'Rally racer'),\n('Drag', 'Drag racer')\n)\nuser = models.OneToOneField(User, null=True, on_delete=models.CASCADE)\nname = models.CharField(max_length=100, null=True)\nsurname = models.CharField(max_length=100, null=True)\nbirthday = models.DateField(null=True)\nteam = models.CharField(max_length=100, null=True)\ncountry = models.CharField(max_length=100, null=True)\ndriver_class = models.CharField(max_length=100, choices=DRIVER_CLASSES, null=True)\nexperience = models.IntegerField(null=True)\ndecription = models.CharField(max_length=100, null=True)\ndef __str__(self):\nreturn '{} {}'.format(self.name, self.surname)\nclass Car(models.Model):\nCAR_TYPES = (\n('Circuit', 'Circuit car'),\n('Rally', 'Rally car'),\n('Endurance', 'Rally car'),\n('Drag', 'Drag car')\n)\ncar_model = models.CharField(max_length=100, null=True)\nnumber = models.IntegerField(null=True, unique=True)\ncar_type = models.CharField(max_length=100, choices=CAR_TYPES, null=True)\nspeed = models.IntegerField(null=True)\nweight = models.FloatField(null=True)\nracer = models.ForeignKey(Racer, null=True, on_delete=models.SET_NULL)\ndef __str__(self):\nreturn '{}'.format(self.car_model)\nclass Race(models.Model):\nRACE_TYPES = (\n('Circuit', 'Circuit race'),\n('Rally', 'Rally race'),\n('Endurance', 'Endurance race'),\n('Drag', 'Drag race')\n)\nname = models.CharField(max_length=100, null=True)\nrace_date = models.DateField(null=True)\nrace_type = models.CharField(max_length=100, choices=RACE_TYPES, null=True)\nlength = models.IntegerField(null=True)\nregistrations = models.ManyToManyField(Racer, through='Registration', blank=True)\ndef __str__(self):\nreturn '{}'.format(self.name)\nclass Registration(models.Model):\nrace = models.ForeignKey(Race, null=True, on_delete=models.SET_NULL)\nracer = models.ForeignKey(Racer, null=True, on_delete=models.SET_NULL)\ncar = models.ForeignKey(Car, null=True, on_delete=models.SET_NULL)\nplace = models.IntegerField(null=True, blank=True)\nclass Comment(models.Model):\nRATE = (\n('1', '1'),\n('2', '2'),\n('3', '3'),\n('4', '4'),\n('5', '5'),\n('6', '6'),\n('7', '7'),\n('8', '8'),\n('9', '9'),\n('10', '10'),\n)\nCOMMENT_TYPE = (\n('\u0412\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435', 'Cooperation'),\n('\u0412\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445', 'About race'),\n('\u0418\u043d\u043e\u0435', 'Other')\n)\nrace = models.ForeignKey(Race, null=True, on_delete=models.SET_NULL)\nracer = models.ForeignKey(Racer, null=True, on_delete=models.SET_NULL)\ntext = models.TextField()\ncomment_type = models.CharField(max_length=100, choices=COMMENT_TYPE, null=True)\nrate = models.CharField(max_length=100, choices=RATE, null=True)\n</code></pre></p> </li> <li>views.py <pre><code>from django.shortcuts import redirect\nfrom django.shortcuts import render\nfrom django.contrib import messages\nfrom .forms import *\nfrom race_app.models import *\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.forms import inlineformset_factory\nfrom django.http import HttpResponse\ndef reg_page(request):\nif request.user.is_authenticated:\nreturn redirect('/races')\nelse:\nif request.method == 'POST':\nusername = request.POST['username']\npassword = request.POST['password']\npassword2 = request.POST['password2']\nif password == password2:\nif User.objects.filter(username=username).exists():\nmessages.info(request, 'Username already used!')\nreturn redirect('/register')\nelse:\nuser = User.objects.create_user(username=username, password=password)\nuser.save()\nmessages.success(request, 'Account was created')\nreturn redirect('/login')\nelse:\nmessages.info(request, 'Passwords do not match')\nreturn redirect('/register')\nreturn render(request, 'registration.html')\ndef loginPage(request):\nif request.user.is_authenticated:\nreturn redirect('/races')\nelse:\nif request.method == 'POST':\nusername = request.POST.get('username')\npassword = request.POST.get('password')\nuser = authenticate(username=username, password=password)\nif user is not None:\nlogin(request, user)\nreturn redirect('/races')\nelse:\nmessages.info(request, 'Username OR password is incorrect')\nreturn redirect('/login')\nelse:\nreturn render(request, 'login.html')\n@login_required\ndef logoutUser(request):\nlogout(request)\nreturn redirect('/login')\n@login_required\ndef races(request):\nraces = Race.objects.all()\nreturn render(request, 'races.html', {'races': races,})\n@login_required(login_url='login')\ndef writeComment(request, pk):\ntry:\nrace = Race.objects.get(id=pk)\nracer = Racer.objects.get(id=request.user.racer.id)\nform = CommentForm(initial={'race': race, 'racer': racer})\nif request.method == 'POST':\nform = CommentForm(request.POST)\nif form.is_valid():\nform.save()\nmessages.success(request, 'You left a comment for admin.')\ncontext = {'form': form}\nreturn render(request, 'comment.html', context)\nexcept Exception:\nmessages.error(request, 'You must be a driver to leave a comment. Please, contact the admin.')\nreturn redirect('/races')\n@login_required\ndef raceReg(request, pk):\ntry:\nracer = Racer.objects.get(id=request.user.racer.id)\nrace = Race.objects.get(id=pk)\nif Registration.objects.filter(racer=racer, race=race):\nmessages.error(request, 'You have already been registered')\nelse:\nif Car.objects.filter(racer=racer):\ncar = Car.objects.get(racer=racer)\nRegistration.objects.create(racer=racer, race=race, car=car)\nmessages.success(request, 'You were registered')\nelse:\nmessages.error(request, 'You need a car to register')\nexcept Exception:\nmessages.error(request, 'You must be a driver to register. Please, contact the admin.')\nreturn redirect('/races')\n@login_required\ndef deleteReg(request, pk):\ntry:\nracer = Racer.objects.get(id=request.user.racer.id)\nrace = Race.objects.get(id=pk)\nreg = Registration.objects.get(racer=racer, race=race)\nif Registration.objects.filter(racer=racer, race=race):\nreg.delete()\nmessages.success(request, 'Your registration was deleted')\nelse:\nmessages.error(request, 'You are not registered to the race')\nexcept Exception:\nmessages.error(request, 'You must be a driver to register. Please, contact the admin.')\nreturn redirect('/races')\n@login_required\ndef changeRace(request, pk):\nrace = Race.objects.get(id=pk)\nform = RaceForm(instance=race)\nif request.method == \"POST\":\nform = RaceForm(request.POST, instance=race)\nif form.is_valid():\nform.save()\nreturn redirect('/races')\ncontext = {'form': form}\nreturn render(request, 'race_edit.html', context)\n@login_required\ndef changeReg(request, pk):\ntry:\nrace = Race.objects.get(id=pk)\nracer = Racer.objects.get(id=request.user.racer.id)\nreg = Registration.objects.get(race=race, racer=racer)\nform = RegForm(instance=reg)\nif request.method == \"POST\":\nform = RegForm(request.POST, instance=reg)\nif form.is_valid():\nform.save()\nreturn redirect('/races')\nelse:\nreturn HttpResponse(form.errors)\ncontext = {'form': form}\nreturn render(request, 'race_form.html', context)\nexcept Exception:\nmessages.error(request, 'You are either not registered or not a driver.')\nreturn redirect('/races')\n@login_required\ndef results(request, pk):\nraceFormSet = inlineformset_factory(Race, Registration, fields=('racer', 'place'), extra=0)\nrace = Race.objects.get(id=pk)\nregs = race.registration_set.count()\nregistrations = race.registration_set.all()\nformset = raceFormSet(instance=race)\nif request.method == 'POST':\nformset = raceFormSet(request.POST, instance=race)\nif formset.is_valid():\nformset.save()\nreturn redirect('/races')\ncontext = {'formset': formset, 'regs': regs, 'registrations': registrations}\nreturn render(request, 'race_res.html', context)\n</code></pre></li> <li>urls.py <pre><code>from django.urls import path\nfrom . import views\n#from django.conf.urls import url\nfrom django.contrib import admin\nurlpatterns = [\npath('login', views.loginPage),\npath('register', views.reg_page),\npath('logout', views.logoutUser),\npath('races/', views.races, name='races'),\npath('race/&lt;int:pk&gt;/comment', views.writeComment, name=\"comment\"),\npath('race/&lt;int:pk&gt;/registrate', views.raceReg, name=\"race_reg\"),\npath('race/&lt;int:pk&gt;/delete', views.deleteReg, name='delete'),\npath('race/&lt;int:pk&gt;/edit', views.changeRace, name=\"race_edit\"),\npath('race/&lt;int:pk&gt;/results', views.results, name=\"results\"),\npath('race/&lt;int:pk&gt;/change_reg', views.changeReg, name=\"registration_ch\"),\n]\n</code></pre></li> <li>forms.py <pre><code>from django.forms import ModelForm\nfrom .models import *\nclass RegForm(ModelForm):\nclass Meta:\nmodel = Registration\nfields = ['race', 'car']\nclass CommentForm(ModelForm):\nclass Meta:\nmodel = Comment\nfields = ['race', 'text', 'comment_type', 'rate']\nclass RaceForm(ModelForm):\nclass Meta:\nmodel = Race\nfields = '__all__'\n</code></pre></li> </ul>"},{"location":"index2/#_2","title":"\u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c","text":""}]}