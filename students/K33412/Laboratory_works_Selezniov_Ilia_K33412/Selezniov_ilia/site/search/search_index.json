{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-23 \u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0435\u043d\u044f \u0437\u043e\u0432\u0443\u0442 \u0418\u043b\u044c\u044f. \u042f \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u0430 \u0418\u041a\u0422. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0430 \u044d\u0442\u043e\u043c \u0441\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043f\u043e Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0437\u0430 \u043e\u0441\u0435\u043d\u043d\u0438\u0439 \u0441\u0435\u043c\u0435\u0441\u0442\u0440.","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-23"},{"location":"#web-2022-23","text":"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0435\u043d\u044f \u0437\u043e\u0432\u0443\u0442 \u0418\u043b\u044c\u044f. \u042f \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u0430 \u0418\u041a\u0422.","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-23"},{"location":"#_1","text":"\u041d\u0430 \u044d\u0442\u043e\u043c \u0441\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043f\u043e Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0437\u0430 \u043e\u0441\u0435\u043d\u043d\u0438\u0439 \u0441\u0435\u043c\u0435\u0441\u0442\u0440.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"labs/lab_1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 - \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0426\u0435\u043b\u044c \u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043a\u0435\u0442\u043e\u0432. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0435 \u041f\u041e Python 3.10, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python: sys, socket. \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. server.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 8080)) # \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u043a localhost \u0438 8080 \u043f\u043e\u0440\u0442\u0443. s.listen(1) # \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u0442\u044c \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f conn, addr = s.accept() # \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435(\u0436\u0434\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f) while True: data = conn.recv(1024) #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430. if not data: break conn.sendall('Hello, client.'.encode('utf-8')) #\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0441\u043e\u043a\u0435\u0442. print(data.decode('utf-8')) conn.close() client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 8080)) s.sendall('Hello, server.'.encode('utf-8')) # \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0444\u0440\u0430\u0437\u0443. data = s.recv(1024) #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430. print(data.decode('utf-8')) s.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. server.py import socket from math import sqrt s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 3030)) s.listen(1) conn, addr = s.accept() while True: data = conn.recv(1024) if not data: break list_of_coef = data.decode('utf-8').split(',') for i in range(len(list_of_coef)): list_of_coef[i] = int(list_of_coef[i]) #\u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u044b d = list_of_coef[1]**2 - 4*list_of_coef[0]*list_of_coef[2] if d < 0: conn.sendall('\u041d\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0439'.encode('utf-8')) elif d == 0: result = '\u041a\u043e\u0440\u0435\u043d\u044c \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: ' + str(round(-list_of_coef[1]/(2*list_of_coef[0]),3)) conn.sendall(result.encode('utf-8')) else: result = '\u041a\u043e\u0440\u043d\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: ' + str(round((-list_of_coef[1]-sqrt(d))/(2*list_of_coef[0]),3)) + ' ' + str(round((-list_of_coef[1]+sqrt(d))/(2*list_of_coef[0]),3)) conn.sendall(result.encode('utf-8')) conn.close() client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 3030)) print('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f') a, b, c = map(int, input().split()) s.sendall((str(a)+','+str(b)+','+str(c)).encode('utf-8')) answer = s.recv(1024) print(answer.decode('utf-8')) s.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. server.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 555)) s.listen(1) while True: conn, addr = s.accept() #\u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u043c html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\n' + html_content conn.sendall(html_response.encode('utf-8')) conn.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Test page</title> </head> <body> <p> \"Hello, world!\" </p> </body> </html> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. server.py import threading, socket def send_to_chat(sender, msg): for client in clients: if sender != client: client.sendall(msg) def handle_client(cl_sock, cl_addr): #\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print(f'Client {cl_addr[0]}:{cl_addr[1]} join the chat') while True: try: message = cl_sock.recv(1024) #\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 if message.decode('utf-8').find('bye') != -1: #\u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043a\u0438\u0434\u0430\u0435\u0442 send_to_chat(cl_sock, message) break elif message.decode('utf-8').find('Error') != -1: break send_to_chat(cl_sock, message) #\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0447\u0430\u0442\u0430 except socket.error: print(f'Client {cl_addr[0]}:{cl_addr[1]} suddenly left') break print (f'Client {cl_addr[0]}:{cl_addr[1]} left the chat') clients.remove(cl_sock) cl_sock.close() #\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = 'localhost' port = 9090 s.bind((host,port)) s.listen(100) clients = [] print('Starting chat server') while True: try: client_socket, client_address = s.accept() if client_address not in clients: clients.append(client_socket) t1 = threading.Thread(target = handle_client, args =(client_socket, client_address)) t1.start() except KeyboardInterrupt: print('Server stopped') break s.close() client.py import socket, threading, time shutdown = False def recive(): while not shutdown: try: data = s.recv(1024).decode('utf-8') print(data) except socket.error: time.sleep(0.5) continue s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = 'localhost' port = 9090 s.connect((host,port)) s.setblocking(0) alias = input(\"Name: \") print('If you want to leave the chat write: bye') rt = threading.Thread(target = recive) rt.start() while True: try: message = input() s.sendall((f'{alias} :: {message}').encode('utf-8')) if message == 'bye': print('You left the chat') shutdown = True break except: s.sendall('Error'.encode('utf-8')) print('Error. Disconected') shutdown = True break s.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 , \u043e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.marks = {} def serve_forever(self): serv_sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM, proto=0) try: serv_sock.bind((self.host, self.port)) serv_sock.listen() while True: client, address = serv_sock.accept() self.serve_client(client) except KeyboardInterrupt: serv_sock.close() def serve_client(self, client): try: data = client.recv(1024).decode('UTF-8') req = self.parse_request(data) res = self.handle_request(req) self.send_response(client, res) except Exception as e: print(e) client.close() def parse_request(self, data): req = data.rstrip('\\r\\n') words = req[:data.index(\"\\n\")].split() if len(words) != 3: raise Exception('Malformed request line') method, target, ver = words if ver != 'HTTP/1.1': raise Exception('Unexpected HTTP version') request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' values = target.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_get(self): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form method=\"GET\"><label>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</label><input name=\"discipline\" /><br><label>\u041e\u0446\u0435\u043d\u043a\u0430</label><input name=\"grade\"/><input type=\"submit\"></form>' for subject in self.marks: body += f'<div><span>{subject}: {self.marks[subject]}</span></div>' body += '</div></body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, request): discipline = request['data']['discipline'] grade = request['data']['grade'] if discipline not in self.marks: self.marks[discipline] = [] self.marks[discipline].append(grade) return self.handle_get() def send_response(self, conn, resp): rfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' rfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' rfile.write(header_line.encode('utf-8')) rfile.write(b'\\r\\n') if resp.body: rfile.write(resp.body) rfile.flush() rfile.close() if __name__ == '__main__': host = '127.0.0.1' port = 8000 serv = MyHTTPServer(host, port) try: serv.serve_forever() except KeyboardInterrupt: pass","title":"Lab 1"},{"location":"labs/lab_1/#no1-","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 - \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438"},{"location":"labs/lab_1/#_1","text":"\u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043a\u0435\u0442\u043e\u0432.","title":"\u0426\u0435\u043b\u044c"},{"location":"labs/lab_1/#_2","text":"Python 3.10, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python: sys, socket.","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0435 \u041f\u041e"},{"location":"labs/lab_1/#_3","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"labs/lab_1/#no1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. server.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 8080)) # \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u043a localhost \u0438 8080 \u043f\u043e\u0440\u0442\u0443. s.listen(1) # \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u0442\u044c \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f conn, addr = s.accept() # \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435(\u0436\u0434\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f) while True: data = conn.recv(1024) #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430. if not data: break conn.sendall('Hello, client.'.encode('utf-8')) #\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0441\u043e\u043a\u0435\u0442. print(data.decode('utf-8')) conn.close() client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 8080)) s.sendall('Hello, server.'.encode('utf-8')) # \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0444\u0440\u0430\u0437\u0443. data = s.recv(1024) #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430. print(data.decode('utf-8')) s.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161:"},{"location":"labs/lab_1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. server.py import socket from math import sqrt s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 3030)) s.listen(1) conn, addr = s.accept() while True: data = conn.recv(1024) if not data: break list_of_coef = data.decode('utf-8').split(',') for i in range(len(list_of_coef)): list_of_coef[i] = int(list_of_coef[i]) #\u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u044b d = list_of_coef[1]**2 - 4*list_of_coef[0]*list_of_coef[2] if d < 0: conn.sendall('\u041d\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0439'.encode('utf-8')) elif d == 0: result = '\u041a\u043e\u0440\u0435\u043d\u044c \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: ' + str(round(-list_of_coef[1]/(2*list_of_coef[0]),3)) conn.sendall(result.encode('utf-8')) else: result = '\u041a\u043e\u0440\u043d\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: ' + str(round((-list_of_coef[1]-sqrt(d))/(2*list_of_coef[0]),3)) + ' ' + str(round((-list_of_coef[1]+sqrt(d))/(2*list_of_coef[0]),3)) conn.sendall(result.encode('utf-8')) conn.close() client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 3030)) print('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f') a, b, c = map(int, input().split()) s.sendall((str(a)+','+str(b)+','+str(c)).encode('utf-8')) answer = s.recv(1024) print(answer.decode('utf-8')) s.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162:"},{"location":"labs/lab_1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. server.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 555)) s.listen(1) while True: conn, addr = s.accept() #\u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u043c html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\n' + html_content conn.sendall(html_response.encode('utf-8')) conn.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Test page</title> </head> <body> <p> \"Hello, world!\" </p> </body> </html>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163:"},{"location":"labs/lab_1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. server.py import threading, socket def send_to_chat(sender, msg): for client in clients: if sender != client: client.sendall(msg) def handle_client(cl_sock, cl_addr): #\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print(f'Client {cl_addr[0]}:{cl_addr[1]} join the chat') while True: try: message = cl_sock.recv(1024) #\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 if message.decode('utf-8').find('bye') != -1: #\u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043a\u0438\u0434\u0430\u0435\u0442 send_to_chat(cl_sock, message) break elif message.decode('utf-8').find('Error') != -1: break send_to_chat(cl_sock, message) #\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0447\u0430\u0442\u0430 except socket.error: print(f'Client {cl_addr[0]}:{cl_addr[1]} suddenly left') break print (f'Client {cl_addr[0]}:{cl_addr[1]} left the chat') clients.remove(cl_sock) cl_sock.close() #\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = 'localhost' port = 9090 s.bind((host,port)) s.listen(100) clients = [] print('Starting chat server') while True: try: client_socket, client_address = s.accept() if client_address not in clients: clients.append(client_socket) t1 = threading.Thread(target = handle_client, args =(client_socket, client_address)) t1.start() except KeyboardInterrupt: print('Server stopped') break s.close() client.py import socket, threading, time shutdown = False def recive(): while not shutdown: try: data = s.recv(1024).decode('utf-8') print(data) except socket.error: time.sleep(0.5) continue s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = 'localhost' port = 9090 s.connect((host,port)) s.setblocking(0) alias = input(\"Name: \") print('If you want to leave the chat write: bye') rt = threading.Thread(target = recive) rt.start() while True: try: message = input() s.sendall((f'{alias} :: {message}').encode('utf-8')) if message == 'bye': print('You left the chat') shutdown = True break except: s.sendall('Error'.encode('utf-8')) print('Error. Disconected') shutdown = True break s.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164:"},{"location":"labs/lab_1/#no5","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 , \u043e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.marks = {} def serve_forever(self): serv_sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM, proto=0) try: serv_sock.bind((self.host, self.port)) serv_sock.listen() while True: client, address = serv_sock.accept() self.serve_client(client) except KeyboardInterrupt: serv_sock.close() def serve_client(self, client): try: data = client.recv(1024).decode('UTF-8') req = self.parse_request(data) res = self.handle_request(req) self.send_response(client, res) except Exception as e: print(e) client.close() def parse_request(self, data): req = data.rstrip('\\r\\n') words = req[:data.index(\"\\n\")].split() if len(words) != 3: raise Exception('Malformed request line') method, target, ver = words if ver != 'HTTP/1.1': raise Exception('Unexpected HTTP version') request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' values = target.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_get(self): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form method=\"GET\"><label>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</label><input name=\"discipline\" /><br><label>\u041e\u0446\u0435\u043d\u043a\u0430</label><input name=\"grade\"/><input type=\"submit\"></form>' for subject in self.marks: body += f'<div><span>{subject}: {self.marks[subject]}</span></div>' body += '</div></body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, request): discipline = request['data']['discipline'] grade = request['data']['grade'] if discipline not in self.marks: self.marks[discipline] = [] self.marks[discipline].append(grade) return self.handle_get() def send_response(self, conn, resp): rfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' rfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' rfile.write(header_line.encode('utf-8')) rfile.write(b'\\r\\n') if resp.body: rfile.write(resp.body) rfile.flush() rfile.close() if __name__ == '__main__': host = '127.0.0.1' port = 8000 serv = MyHTTPServer(host, port) try: serv.serve_forever() except KeyboardInterrupt: pass","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165:"},{"location":"labs/lab_2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django \u0426\u0435\u043b\u044c \u0434\u0430\u0442\u044c \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 Django WEB \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438. models.py from django.db import models from datetime import datetime import django from django.contrib.auth.models import User class Driver(models.Model): COUNTRIES = ( ('ES', 'Spain'), ('IT', 'Italy'), ('FR', 'France'), ('DE', 'Deutschland')) RACER_TYPES = ( ('Drag', 'Drag racer'), ('Sport', 'Sports car racer'), ('Off', 'Off-road racer')) user = models.OneToOneField(User, null=True, on_delete=models.CASCADE) name = models.CharField(max_length=200, null=True) surname = models.CharField(max_length=200, null=True) team = models.CharField(max_length=200, null=True) country = models.CharField(max_length=2, choices=COUNTRIES, null=True) driver_class = models.CharField(max_length=5, choices=RACER_TYPES, null=True) age = models.IntegerField(null=True) experience = models.IntegerField(null=True) def __str__(self): return '{} {}'.format(self.name, self.surname) class Car(models.Model): CAR_TYPES = ( ('Drag', 'Drag'), ('Sport', 'Sportscar'), ('Off', 'Off-road')) car_model = models.CharField(max_length=200, null=True) number = models.IntegerField(null=True, unique=True) car_class = models.CharField(max_length=200, choices=CAR_TYPES, null=True) speed = models.IntegerField(null=True) weight = models.FloatField(null=True) length = models.FloatField(null=True) mileage = models.IntegerField(null=True) driver = models.ForeignKey(Driver, null=True, on_delete=models.SET_NULL) def __str__(self): return '{} {}'.format(self.car_model, self.number) class Race(models.Model): RACE_TYPES = ( ('Drag', 'Drag racing'), ('Sport', 'Sports car racing'), ('Off', 'Off-road racing')) race_date = models.DateField(null=True) race_type = models.CharField(max_length=200, choices=RACE_TYPES, null=True) length = models.IntegerField(null=True) name = models.CharField(max_length=200, null=True) registrations = models.ManyToManyField(Driver, through='Registration', blank=True) time = models.TimeField(null=True, blank=True) def __str__(self): return '{} - {}'.format(self.name, self.id) class Comment(models.Model): TYPE = ( ('Cooperation', 'Cooperation'), ('Race', 'Race'), ('Other', 'Other')) RATE = ( ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5')) race = models.ForeignKey(Race, null=True, on_delete=models.SET_NULL) driver = models.ForeignKey(Driver, null=True, on_delete=models.SET_NULL) text = models.TextField() com_type = models.CharField(max_length=11, choices=TYPE, null=True) grade = models.CharField(max_length=1, choices=RATE, null=True) def __str__(self): return '{}: {}'.format(self.driver, self.com_type) class Registration(models.Model): race = models.ForeignKey(Race, null=True, on_delete=models.SET_NULL) driver = models.ForeignKey(Driver, null=True, on_delete=models.SET_NULL) reg_date = models.DateField(null=True, blank=True, default = django.utils.timezone.now) place = models.IntegerField(null=True, blank=True) car = models.ForeignKey(Car, null=True, on_delete=models.SET_NULL) def __str__(self): return '{} {}'.format(self.race, self.driver) settings.py \"\"\" Django settings for races_project project. Generated by 'django-admin startproject' using Django 3.1.1. For more information on this file, see https://docs.djangoproject.com/en/3.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/3.1/ref/settings/ \"\"\" from pathlib import Path import os # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = '$mg+gogaa2)hng#pw&@4s46@e1#sr-aks-1_vbr!9iqkri_p1x' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'races.apps.RacesConfig', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'races_project.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'races_project.wsgi.application' # Database # https://docs.djangoproject.com/en/3.1/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } # Password validation # https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/3.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/3.1/howto/static-files/ STATIC_URL = '/static/' forms.py from django.forms import ModelForm from .models import Registration, Car, Driver, Comment, Race from django.contrib.auth.forms import UserCreationForm from django import forms from django.contrib.auth.models import User class RegForm(ModelForm): class Meta: model = Registration fields = '__all__' class CarForm(ModelForm): class Meta: model = Car fields = ['car_model', 'number', 'car_class', 'speed', 'weight', 'length', 'mileage'] class CreateUserForm(UserCreationForm): class Meta: model = User fields = ['username', 'email', 'password1', 'password2'] class CreateDriverForm(ModelForm): class Meta: model = Driver fields = ['name', 'surname', 'team', 'country', 'driver_class', 'age', 'experience'] class CommentForm(ModelForm): class Meta: model = Comment fields = '__all__' class RaceForm(ModelForm): class Meta: model = Race fields = '__all__' urls.py from django.contrib import admin from django.urls import path from django.http import HttpResponse from . import views urlpatterns = [ path('', views.races), path('races/<int:pk_test>/drivers', views.drivers, name=\"race\"), path('races/', views.races, name=\"races\"), path('home/', views.home, name=\"home\"), path('registration/create', views.createReg, name=\"registration_cr\"), path('registration/<int:pk>/change', views.changeReg, name=\"registration_ch\"), path('registration/<int:pk>/delete', views.deleteReg, name=\"registration_dl\"), path('car/create', views.createCar, name=\"car_cr\"), path('car/<int:pk>/change', views.changeCar, name=\"car_ch\"), path('register', views.regPage, name=\"register\"), path('login', views.loginPage, name=\"login\"), path('logout', views.logoutUser, name=\"logout\"), path('driver_cr', views.regDriver, name=\"driver_cr\"), path('race/<int:pk>/registrate', views.raceReg, name=\"race_reg\"), path('race/<int:pk>/comment', views.writeComment, name=\"comment\"), path('race/create', views.createRace, name=\"race_cr\"), path('race/<int:pk>/change', views.changeRace, name=\"race_ch\"), path('race/<int:pk>/results', views.results, name=\"results\"), path('race/<int:pk>/comments', views.comments, name=\"comments\"), path('race/<int:pk>/delete', views.delRace, name=\"race_dl\"), ] views.py from django.shortcuts import render, redirect from django.http import HttpResponse from .models import * from .forms import * from django.contrib import messages from django.contrib.auth import authenticate, login, logout from django.contrib.auth.decorators import login_required from .decorators import unauthenticated_user, allowed_users from django.contrib.auth.models import Group from django.forms import inlineformset_factory @unauthenticated_user def regPage(request): form = CreateUserForm() if request.method == \"POST\": form = CreateUserForm(request.POST) if form.is_valid(): user = form.save() group = Group.objects.get(name='driver') user.groups.add(group) Driver.objects.create(user=user) messages.success(request, 'Account was created') return redirect('driver_cr') context = {'form': form} return render(request, 'reg_user.html', context) @unauthenticated_user def loginPage(request): if request.method == \"POST\": username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('/races') else: messages.info(request, 'Username or password is not correct') context = {} return render(request, 'login_page.html', context) def logoutUser(request): logout(request) return redirect('/login') @login_required(login_url='login') @allowed_users(allowed_roles=['driver']) def home(request): regs = request.user.driver.registration_set.all() driver = Driver.objects.get(id=request.user.driver.id) # cars = request.user.driver.car_set.all() cars = Car.objects.filter(driver=Driver.objects.get(id=request.user.driver.id)) return render(request, 'home.html', {'regs': regs, 'cars': cars, 'driver': driver}) @login_required(login_url='login') def drivers(request, pk_test): drivers = [] cars = [] registrations = Registration.objects.filter(race=pk_test).order_by('place') for reg in registrations: drivers.append(reg.driver) cars.append(reg.car) print(drivers) return render(request, 'drivers.html', {'drivers': drivers, 'cars': cars, 'regs': registrations}) @login_required(login_url='login') def races(request): context = Race.objects.all() return render(request, 'races.html', {'races': context}) @login_required(login_url='login') def createReg(request): driver = Driver.objects.get(id=request.user.driver.id) car = Car.objects.get(driver=driver) # if Registration.objects.get(driver=driver, race=race): # messages.error(request, 'You are already regestered to this race') # return redirect('/home') if car.car_model == None: messages.error(request, 'You need a car to register') return redirect('/home') form = RegForm(initial={'driver': driver, 'car': car}) if request.method == \"POST\": print(request.POST) form = RegForm(request.POST) race_test = Race.objects.get(id=request.POST.get('race')) if Registration.objects.filter(driver=driver, race=race_test): messages.error(request, 'You are already regestered to this race') return redirect('/home') if form.is_valid(): reg = form.save() return redirect('/home') messages.success(request, 'You were registered') context = {'form': form} return render(request, 'reg_form.html', context) @login_required(login_url='login') def raceReg(request, pk): driver = Driver.objects.get(id=request.user.driver.id) race = Race.objects.get(id=pk) if Registration.objects.filter(driver=driver, race=race): messages.error(request, 'You are already regestered to this race') else: car = Car.objects.get(driver=driver) if car.car_model != None: Registration.objects.create(driver=driver, race=race, car=car) messages.success(request, 'You were registered') else: messages.error(request, 'You need a car to register') return redirect('/races') @login_required(login_url='login') def changeReg(request, pk): reg = Registration.objects.get(id=pk) form = RegForm(instance=reg) if request.method == \"POST\": form = RegForm(request.POST, instance=reg) if form.is_valid(): form.save() return redirect('/home') context = {'form': form} return render(request, 'reg_form.html', context) def regDriver(request): driver = Driver.objects.get(name=None) form = CreateDriverForm(instance=driver) if request.method == \"POST\": form = CreateDriverForm(request.POST, instance=driver) if form.is_valid(): driver = form.save() Car.objects.create(driver=driver) messages.success(request, 'Driver was created') return redirect('login') context = {'form': form} return render(request, 'reg_driver.html', context) @login_required(login_url='login') def deleteReg(request, pk): reg = Registration.objects.get(id=pk) context = {'reg': reg} if request.method == \"POST\": reg.delete() return redirect('/home') return render(request, 'del_reg.html', context) @login_required(login_url='login') def createCar(request): driver = Driver.objects.get(id=request.user.driver.id) car = Car.objects.get(driver=driver) form = CarForm(instance=car) if request.method == \"POST\": form = CarForm(request.POST, instance=car) if form.is_valid(): car = form.save() return redirect('/home') context = {'form': form} return render(request, 'carForm.html', context) @login_required(login_url='login') def changeCar(request, pk): car = Car.objects.get(id=pk) form = CarForm(instance=car) if request.method == \"POST\": form = CarForm(request.POST, instance=car) if form.is_valid(): form.save() return redirect('/home') context = {'form': form} return render(request, 'carForm.html', context) @login_required(login_url='login') def writeComment(request, pk): race = Race.objects.get(id=pk) driver = Driver.objects.get(id=request.user.driver.id) form = CommentForm(initial={'race': race, 'driver': driver}) if request.method == 'POST': form = CommentForm(request.POST) if form.is_valid(): form.save() messages.success(request, 'You left a comment for admin. Wait for an answer') return redirect('/races') context = {'form': form} return render(request, 'comment_form.html', context) @login_required(login_url='login') def createRace(request): form = RaceForm() if request.method == \"POST\": form = RaceForm(request.POST) if form.is_valid(): form.save() messages.success(request, 'Race was created') return redirect('/races') context = {'form': form} return render(request, 'race_form.html', context) @login_required(login_url='login') def changeRace(request, pk): race = Race.objects.get(id=pk) form = RaceForm(instance=race) if request.method == \"POST\": form = RaceForm(request.POST, instance=race) if form.is_valid(): form.save() return redirect('/races') context = {'form': form} return render(request, 'race_form.html', context) @login_required(login_url='login') def results(request, pk): raceFormSet = inlineformset_factory(Race, Registration, fields=('driver', 'place'), extra=0) race = Race.objects.get(id=pk) regs = race.registration_set.count() formset = raceFormSet(instance=race) if request.method == 'POST': formset = raceFormSet(request.POST, instance=race) if formset.is_valid(): formset.save() return redirect('/races') context = {'formset': formset, 'regs': regs} return render(request, 'race_res.html', context) @login_required(login_url='login') def comments(request, pk): race = Race.objects.get(id=pk) comments = race.comment_set.all() context = {'comments': comments} return render(request, 'comments.html', context) @login_required(login_url='login') def delRace(request, pk): race = Race.objects.get(id=pk) context = {'race': race} if request.method == \"POST\": race.delete() return redirect('/races') return render(request, 'del_race.html', context) \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 2.1 *\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u0434\u0430\u0442\u044c \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 Django WEB \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430. * models.py from django.db import models class Car(models.Model): brand = models.CharField(max_length=50) model = models.CharField(max_length=50) color = models.CharField(max_length=30) plate_number = models.CharField(max_length=20) class Owner(models.Model): first_name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) date_of_birth = models.DateField() class OwnedCars(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) start_date = models.DateField() end_date = models.DateField() class DrivingLicense(models.Model): TYPES = ( ('M', 'Quadrocycles'), ('A', 'Motorcycles'), ('B', 'Car'), ('C', 'Light Trucks'), ('E', 'Trailers') ) id_number = models.CharField(max_length=30) date_of_giving = models.DateField() category = models.CharField(max_length=5, choices=TYPES) owner = models.ForeignKey(Owner, on_delete=models.CASCADE) views.py from django.shortcuts import render from django.http import Http404 from project_first_app.models import Owner def index(request, owner_id): try: owner = Owner.objects.get(pk=owner_id) except Owner.DoesNotExist: raise Http404('Owner does not exist') return render(request, 'index.html', {\"Owner\": owner}) settings.py \"\"\" Django settings for django_project project. Generated by 'django-admin startproject' using Django 3.1.3. For more information on this file, see https://docs.djangoproject.com/en/3.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/3.1/ref/settings/ \"\"\" from pathlib import Path import os # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = 'ay#y*b9-o%1&*qxd5hlfwtnq4y_6$vk=*u$5=j@5g*ey#gf^_1' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'project_first_app', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'django_project.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'django_project.wsgi.application' # Database # https://docs.djangoproject.com/en/3.1/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', } } # Password validation # https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/3.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/3.1/howto/static-files/ STATIC_URL = '/static/' urls.py \"\"\"django_project URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/3.1/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: path('', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: path('', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.urls import include, path 2. Add a URL to urlpatterns: path('blog/', include('blog.urls')) \"\"\" from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('project_first_app.urls')), ] \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 2.2","title":"Lab 2"},{"location":"labs/lab_2/#no2-django","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 - \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django"},{"location":"labs/lab_2/#_1","text":"\u0434\u0430\u0442\u044c \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 Django WEB \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438. models.py from django.db import models from datetime import datetime import django from django.contrib.auth.models import User class Driver(models.Model): COUNTRIES = ( ('ES', 'Spain'), ('IT', 'Italy'), ('FR', 'France'), ('DE', 'Deutschland')) RACER_TYPES = ( ('Drag', 'Drag racer'), ('Sport', 'Sports car racer'), ('Off', 'Off-road racer')) user = models.OneToOneField(User, null=True, on_delete=models.CASCADE) name = models.CharField(max_length=200, null=True) surname = models.CharField(max_length=200, null=True) team = models.CharField(max_length=200, null=True) country = models.CharField(max_length=2, choices=COUNTRIES, null=True) driver_class = models.CharField(max_length=5, choices=RACER_TYPES, null=True) age = models.IntegerField(null=True) experience = models.IntegerField(null=True) def __str__(self): return '{} {}'.format(self.name, self.surname) class Car(models.Model): CAR_TYPES = ( ('Drag', 'Drag'), ('Sport', 'Sportscar'), ('Off', 'Off-road')) car_model = models.CharField(max_length=200, null=True) number = models.IntegerField(null=True, unique=True) car_class = models.CharField(max_length=200, choices=CAR_TYPES, null=True) speed = models.IntegerField(null=True) weight = models.FloatField(null=True) length = models.FloatField(null=True) mileage = models.IntegerField(null=True) driver = models.ForeignKey(Driver, null=True, on_delete=models.SET_NULL) def __str__(self): return '{} {}'.format(self.car_model, self.number) class Race(models.Model): RACE_TYPES = ( ('Drag', 'Drag racing'), ('Sport', 'Sports car racing'), ('Off', 'Off-road racing')) race_date = models.DateField(null=True) race_type = models.CharField(max_length=200, choices=RACE_TYPES, null=True) length = models.IntegerField(null=True) name = models.CharField(max_length=200, null=True) registrations = models.ManyToManyField(Driver, through='Registration', blank=True) time = models.TimeField(null=True, blank=True) def __str__(self): return '{} - {}'.format(self.name, self.id) class Comment(models.Model): TYPE = ( ('Cooperation', 'Cooperation'), ('Race', 'Race'), ('Other', 'Other')) RATE = ( ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5')) race = models.ForeignKey(Race, null=True, on_delete=models.SET_NULL) driver = models.ForeignKey(Driver, null=True, on_delete=models.SET_NULL) text = models.TextField() com_type = models.CharField(max_length=11, choices=TYPE, null=True) grade = models.CharField(max_length=1, choices=RATE, null=True) def __str__(self): return '{}: {}'.format(self.driver, self.com_type) class Registration(models.Model): race = models.ForeignKey(Race, null=True, on_delete=models.SET_NULL) driver = models.ForeignKey(Driver, null=True, on_delete=models.SET_NULL) reg_date = models.DateField(null=True, blank=True, default = django.utils.timezone.now) place = models.IntegerField(null=True, blank=True) car = models.ForeignKey(Car, null=True, on_delete=models.SET_NULL) def __str__(self): return '{} {}'.format(self.race, self.driver) settings.py \"\"\" Django settings for races_project project. Generated by 'django-admin startproject' using Django 3.1.1. For more information on this file, see https://docs.djangoproject.com/en/3.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/3.1/ref/settings/ \"\"\" from pathlib import Path import os # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = '$mg+gogaa2)hng#pw&@4s46@e1#sr-aks-1_vbr!9iqkri_p1x' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'races.apps.RacesConfig', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'races_project.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'races_project.wsgi.application' # Database # https://docs.djangoproject.com/en/3.1/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } } # Password validation # https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/3.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/3.1/howto/static-files/ STATIC_URL = '/static/' forms.py from django.forms import ModelForm from .models import Registration, Car, Driver, Comment, Race from django.contrib.auth.forms import UserCreationForm from django import forms from django.contrib.auth.models import User class RegForm(ModelForm): class Meta: model = Registration fields = '__all__' class CarForm(ModelForm): class Meta: model = Car fields = ['car_model', 'number', 'car_class', 'speed', 'weight', 'length', 'mileage'] class CreateUserForm(UserCreationForm): class Meta: model = User fields = ['username', 'email', 'password1', 'password2'] class CreateDriverForm(ModelForm): class Meta: model = Driver fields = ['name', 'surname', 'team', 'country', 'driver_class', 'age', 'experience'] class CommentForm(ModelForm): class Meta: model = Comment fields = '__all__' class RaceForm(ModelForm): class Meta: model = Race fields = '__all__' urls.py from django.contrib import admin from django.urls import path from django.http import HttpResponse from . import views urlpatterns = [ path('', views.races), path('races/<int:pk_test>/drivers', views.drivers, name=\"race\"), path('races/', views.races, name=\"races\"), path('home/', views.home, name=\"home\"), path('registration/create', views.createReg, name=\"registration_cr\"), path('registration/<int:pk>/change', views.changeReg, name=\"registration_ch\"), path('registration/<int:pk>/delete', views.deleteReg, name=\"registration_dl\"), path('car/create', views.createCar, name=\"car_cr\"), path('car/<int:pk>/change', views.changeCar, name=\"car_ch\"), path('register', views.regPage, name=\"register\"), path('login', views.loginPage, name=\"login\"), path('logout', views.logoutUser, name=\"logout\"), path('driver_cr', views.regDriver, name=\"driver_cr\"), path('race/<int:pk>/registrate', views.raceReg, name=\"race_reg\"), path('race/<int:pk>/comment', views.writeComment, name=\"comment\"), path('race/create', views.createRace, name=\"race_cr\"), path('race/<int:pk>/change', views.changeRace, name=\"race_ch\"), path('race/<int:pk>/results', views.results, name=\"results\"), path('race/<int:pk>/comments', views.comments, name=\"comments\"), path('race/<int:pk>/delete', views.delRace, name=\"race_dl\"), ] views.py from django.shortcuts import render, redirect from django.http import HttpResponse from .models import * from .forms import * from django.contrib import messages from django.contrib.auth import authenticate, login, logout from django.contrib.auth.decorators import login_required from .decorators import unauthenticated_user, allowed_users from django.contrib.auth.models import Group from django.forms import inlineformset_factory @unauthenticated_user def regPage(request): form = CreateUserForm() if request.method == \"POST\": form = CreateUserForm(request.POST) if form.is_valid(): user = form.save() group = Group.objects.get(name='driver') user.groups.add(group) Driver.objects.create(user=user) messages.success(request, 'Account was created') return redirect('driver_cr') context = {'form': form} return render(request, 'reg_user.html', context) @unauthenticated_user def loginPage(request): if request.method == \"POST\": username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('/races') else: messages.info(request, 'Username or password is not correct') context = {} return render(request, 'login_page.html', context) def logoutUser(request): logout(request) return redirect('/login') @login_required(login_url='login') @allowed_users(allowed_roles=['driver']) def home(request): regs = request.user.driver.registration_set.all() driver = Driver.objects.get(id=request.user.driver.id) # cars = request.user.driver.car_set.all() cars = Car.objects.filter(driver=Driver.objects.get(id=request.user.driver.id)) return render(request, 'home.html', {'regs': regs, 'cars': cars, 'driver': driver}) @login_required(login_url='login') def drivers(request, pk_test): drivers = [] cars = [] registrations = Registration.objects.filter(race=pk_test).order_by('place') for reg in registrations: drivers.append(reg.driver) cars.append(reg.car) print(drivers) return render(request, 'drivers.html', {'drivers': drivers, 'cars': cars, 'regs': registrations}) @login_required(login_url='login') def races(request): context = Race.objects.all() return render(request, 'races.html', {'races': context}) @login_required(login_url='login') def createReg(request): driver = Driver.objects.get(id=request.user.driver.id) car = Car.objects.get(driver=driver) # if Registration.objects.get(driver=driver, race=race): # messages.error(request, 'You are already regestered to this race') # return redirect('/home') if car.car_model == None: messages.error(request, 'You need a car to register') return redirect('/home') form = RegForm(initial={'driver': driver, 'car': car}) if request.method == \"POST\": print(request.POST) form = RegForm(request.POST) race_test = Race.objects.get(id=request.POST.get('race')) if Registration.objects.filter(driver=driver, race=race_test): messages.error(request, 'You are already regestered to this race') return redirect('/home') if form.is_valid(): reg = form.save() return redirect('/home') messages.success(request, 'You were registered') context = {'form': form} return render(request, 'reg_form.html', context) @login_required(login_url='login') def raceReg(request, pk): driver = Driver.objects.get(id=request.user.driver.id) race = Race.objects.get(id=pk) if Registration.objects.filter(driver=driver, race=race): messages.error(request, 'You are already regestered to this race') else: car = Car.objects.get(driver=driver) if car.car_model != None: Registration.objects.create(driver=driver, race=race, car=car) messages.success(request, 'You were registered') else: messages.error(request, 'You need a car to register') return redirect('/races') @login_required(login_url='login') def changeReg(request, pk): reg = Registration.objects.get(id=pk) form = RegForm(instance=reg) if request.method == \"POST\": form = RegForm(request.POST, instance=reg) if form.is_valid(): form.save() return redirect('/home') context = {'form': form} return render(request, 'reg_form.html', context) def regDriver(request): driver = Driver.objects.get(name=None) form = CreateDriverForm(instance=driver) if request.method == \"POST\": form = CreateDriverForm(request.POST, instance=driver) if form.is_valid(): driver = form.save() Car.objects.create(driver=driver) messages.success(request, 'Driver was created') return redirect('login') context = {'form': form} return render(request, 'reg_driver.html', context) @login_required(login_url='login') def deleteReg(request, pk): reg = Registration.objects.get(id=pk) context = {'reg': reg} if request.method == \"POST\": reg.delete() return redirect('/home') return render(request, 'del_reg.html', context) @login_required(login_url='login') def createCar(request): driver = Driver.objects.get(id=request.user.driver.id) car = Car.objects.get(driver=driver) form = CarForm(instance=car) if request.method == \"POST\": form = CarForm(request.POST, instance=car) if form.is_valid(): car = form.save() return redirect('/home') context = {'form': form} return render(request, 'carForm.html', context) @login_required(login_url='login') def changeCar(request, pk): car = Car.objects.get(id=pk) form = CarForm(instance=car) if request.method == \"POST\": form = CarForm(request.POST, instance=car) if form.is_valid(): form.save() return redirect('/home') context = {'form': form} return render(request, 'carForm.html', context) @login_required(login_url='login') def writeComment(request, pk): race = Race.objects.get(id=pk) driver = Driver.objects.get(id=request.user.driver.id) form = CommentForm(initial={'race': race, 'driver': driver}) if request.method == 'POST': form = CommentForm(request.POST) if form.is_valid(): form.save() messages.success(request, 'You left a comment for admin. Wait for an answer') return redirect('/races') context = {'form': form} return render(request, 'comment_form.html', context) @login_required(login_url='login') def createRace(request): form = RaceForm() if request.method == \"POST\": form = RaceForm(request.POST) if form.is_valid(): form.save() messages.success(request, 'Race was created') return redirect('/races') context = {'form': form} return render(request, 'race_form.html', context) @login_required(login_url='login') def changeRace(request, pk): race = Race.objects.get(id=pk) form = RaceForm(instance=race) if request.method == \"POST\": form = RaceForm(request.POST, instance=race) if form.is_valid(): form.save() return redirect('/races') context = {'form': form} return render(request, 'race_form.html', context) @login_required(login_url='login') def results(request, pk): raceFormSet = inlineformset_factory(Race, Registration, fields=('driver', 'place'), extra=0) race = Race.objects.get(id=pk) regs = race.registration_set.count() formset = raceFormSet(instance=race) if request.method == 'POST': formset = raceFormSet(request.POST, instance=race) if formset.is_valid(): formset.save() return redirect('/races') context = {'formset': formset, 'regs': regs} return render(request, 'race_res.html', context) @login_required(login_url='login') def comments(request, pk): race = Race.objects.get(id=pk) comments = race.comment_set.all() context = {'comments': comments} return render(request, 'comments.html', context) @login_required(login_url='login') def delRace(request, pk): race = Race.objects.get(id=pk) context = {'race': race} if request.method == \"POST\": race.delete() return redirect('/races') return render(request, 'del_race.html', context)","title":"\u0426\u0435\u043b\u044c"},{"location":"labs/lab_2/#21","text":"*\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u0434\u0430\u0442\u044c \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 Django WEB \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430. * models.py from django.db import models class Car(models.Model): brand = models.CharField(max_length=50) model = models.CharField(max_length=50) color = models.CharField(max_length=30) plate_number = models.CharField(max_length=20) class Owner(models.Model): first_name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) date_of_birth = models.DateField() class OwnedCars(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) start_date = models.DateField() end_date = models.DateField() class DrivingLicense(models.Model): TYPES = ( ('M', 'Quadrocycles'), ('A', 'Motorcycles'), ('B', 'Car'), ('C', 'Light Trucks'), ('E', 'Trailers') ) id_number = models.CharField(max_length=30) date_of_giving = models.DateField() category = models.CharField(max_length=5, choices=TYPES) owner = models.ForeignKey(Owner, on_delete=models.CASCADE) views.py from django.shortcuts import render from django.http import Http404 from project_first_app.models import Owner def index(request, owner_id): try: owner = Owner.objects.get(pk=owner_id) except Owner.DoesNotExist: raise Http404('Owner does not exist') return render(request, 'index.html', {\"Owner\": owner}) settings.py \"\"\" Django settings for django_project project. Generated by 'django-admin startproject' using Django 3.1.3. For more information on this file, see https://docs.djangoproject.com/en/3.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/3.1/ref/settings/ \"\"\" from pathlib import Path import os # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = 'ay#y*b9-o%1&*qxd5hlfwtnq4y_6$vk=*u$5=j@5g*ey#gf^_1' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'project_first_app', ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'django_project.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'django_project.wsgi.application' # Database # https://docs.djangoproject.com/en/3.1/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', } } # Password validation # https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/3.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_L10N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/3.1/howto/static-files/ STATIC_URL = '/static/' urls.py \"\"\"django_project URL Configuration The `urlpatterns` list routes URLs to views. For more information please see: https://docs.djangoproject.com/en/3.1/topics/http/urls/ Examples: Function views 1. Add an import: from my_app import views 2. Add a URL to urlpatterns: path('', views.home, name='home') Class-based views 1. Add an import: from other_app.views import Home 2. Add a URL to urlpatterns: path('', Home.as_view(), name='home') Including another URLconf 1. Import the include() function: from django.urls import include, path 2. Add a URL to urlpatterns: path('blog/', include('blog.urls')) \"\"\" from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('project_first_app.urls')), ]","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 2.1"},{"location":"labs/lab_2/#22","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f 2.2"},{"location":"labs/lab_3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043d\u0430 django rest. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API. \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 (backend) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST framework. models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.db.models.deletion import CASCADE class User(AbstractUser): tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Instance(models.Model): id_instance = models.AutoField(\"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\", primary_key=True) section = models.CharField(max_length=20, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b') code = models.CharField(max_length=20, verbose_name='\u0410\u0440\u0442\u0438\u043a\u0443\u043b') year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') conditions = ( ('\u0445', '\u0445\u043e\u0440\u043e\u0448\u0435\u0435'), ('\u0443', '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0442\u0430\u0440\u043e\u0435'), ) condition = models.CharField(max_length=1, choices=conditions, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430') book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) def __str__(self): return self.code class Book(models.Model): id_book = models.AutoField(\"ID_\u043a\u043d\u0438\u0433\u0438\", primary_key=True) name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') author = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\") publisher = models.CharField(max_length=30, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e') def __str__(self): return self.name class Reader(models.Model): ticket = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430') name = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e\") passport = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430') birth_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f') address = models.CharField(max_length=100, verbose_name='\u0410\u0434\u0440\u0435\u0441') phone_number = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') educations = ( ('\u043d', '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0440\u0435\u0434\u043d\u0435\u0435'), ('\u0432', '\u0432\u044b\u0441\u0448\u0435\u0435'), ) education = models.CharField(max_length=1, choices=educations, verbose_name='\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435') degree = models.BooleanField(default=False, verbose_name='\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438') registration_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438') instances = models.ManyToManyField('Instance', verbose_name='\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438', through='ReaderBook', related_name='reader_book') room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE, null=True) def __str__(self): return self.name class ReaderRoom(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430', null=True) class BookInst(models.Model): inst = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) class ReaderBook(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) book = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438', null=True) class BookRoom(models.Model): book = models.ForeignKey('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) class Room(models.Model): name = models.CharField(max_length=20, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c') books = models.ManyToManyField('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0438', through='BookRoom', related_name='book_room') def __str__(self): return self.name serializers.py from django.utils import timezone from rest_framework import serializers from .models import * class ReaderSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='books') class Meta: model = Reader fields = \"__all__\" class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = \"__all__\" class InstanceSerializer(serializers.ModelSerializer): class Meta: model = Instance fields = \"__all__\" class ReaderBookSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = \"__all__\" class RoomSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='name') class Meta: model = Room fields = \"__all__\" class BookRoomSerializer(serializers.ModelSerializer): class Meta: model = BookRoom fields = \"__all__\" class ReaderRoomSerializer(serializers.ModelSerializer): class Meta: model = ReaderRoom fields = \"__all__\" class BookInstSerializer(serializers.ModelSerializer): class Meta: model = BookInst fields = \"__all__\" class ReaderInstsSerializer(serializers.ModelSerializer): class Meta: model = Reader fields = [\"instances\"] class RecentlyBookDateSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = [\"reader\"] urls.py from django.urls import path from .views import * urlpatterns = [ path('readers/list/', ReaderListAPIView.as_view()), path('readers/create/', CreateReader.as_view()), path('readers/<int:pk>/', OneReader.as_view()), path('books/list/', BookListAPIView.as_view()), path('books/create/', CreateBook.as_view()), path('books/<int:pk>/', OneBook.as_view()), path('inst/list/', InstanceListAPIView.as_view()), path('inst/create/', CreateInstance.as_view()), path('inst/<int:pk>/', OneInstance.as_view()), path('rooms/list/', RoomListAPIView.as_view()), path('rooms/create/', RoomCreateAPIView.as_view()), path('rooms/<int:pk>/', OneRoom.as_view()), path('book/readers/', BookReaders.as_view()), path('book/room/', RoomBook.as_view()), path('room/readers/', RoomReader.as_view()), path('book/inst/', BookInst.as_view()), path('readers/inst/<int:pk>', ReadersInst.as_view()), path('book/recently/', RecentlyBookDate.as_view()), ] settings.py \"\"\" Django settings for library_project project. Generated by 'django-admin startproject' using Django 4.1.2. For more information on this file, see https://docs.djangoproject.com/en/4.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/4.1/ref/settings/ \"\"\" from pathlib import Path # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = 'django-insecure-3&m=g&x2aqy-w#aoqwqlgsv_5s-22mq_e&r2_(7_v)&%9u#6c+' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'library', 'rest_framework', 'djoser', 'rest_framework.authtoken', 'drf_yasg' ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'library_project.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'library_project.wsgi.application' # Database # https://docs.djangoproject.com/en/4.1/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', } } # Password validation # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/4.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/4.1/howto/static-files/ STATIC_URL = 'static/' # Default primary key field type # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' AUTH_USER_MODEL = 'library.User' ROOT_URLCONF = 'library_project.urls' REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', ), }","title":"Lab 3"},{"location":"labs/lab_3/#3-django-rest","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043d\u0430 django rest."},{"location":"labs/lab_3/#api","text":"","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API."},{"location":"labs/lab_3/#backend-django-rest-framework","text":"models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.db.models.deletion import CASCADE class User(AbstractUser): tel = models.CharField(verbose_name='\u0422\u0435\u043b\u0435\u0444\u043e\u043d', max_length=15, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'tel'] def __str__(self): return self.username class Instance(models.Model): id_instance = models.AutoField(\"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\", primary_key=True) section = models.CharField(max_length=20, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b') code = models.CharField(max_length=20, verbose_name='\u0410\u0440\u0442\u0438\u043a\u0443\u043b') year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') conditions = ( ('\u0445', '\u0445\u043e\u0440\u043e\u0448\u0435\u0435'), ('\u0443', '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0442\u0430\u0440\u043e\u0435'), ) condition = models.CharField(max_length=1, choices=conditions, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430') book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) def __str__(self): return self.code class Book(models.Model): id_book = models.AutoField(\"ID_\u043a\u043d\u0438\u0433\u0438\", primary_key=True) name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') author = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\") publisher = models.CharField(max_length=30, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e') def __str__(self): return self.name class Reader(models.Model): ticket = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430') name = models.CharField(max_length=70, verbose_name=\"\u0424\u0418\u041e\") passport = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430') birth_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f') address = models.CharField(max_length=100, verbose_name='\u0410\u0434\u0440\u0435\u0441') phone_number = models.CharField(max_length=20, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') educations = ( ('\u043d', '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435'), ('\u0441', '\u0441\u0440\u0435\u0434\u043d\u0435\u0435'), ('\u0432', '\u0432\u044b\u0441\u0448\u0435\u0435'), ) education = models.CharField(max_length=1, choices=educations, verbose_name='\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435') degree = models.BooleanField(default=False, verbose_name='\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438') registration_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438') instances = models.ManyToManyField('Instance', verbose_name='\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438', through='ReaderBook', related_name='reader_book') room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE, null=True) def __str__(self): return self.name class ReaderRoom(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430', null=True) class BookInst(models.Model): inst = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) book = models.ForeignKey('Book', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) class ReaderBook(models.Model): reader = models.ForeignKey('Reader', verbose_name='\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c', on_delete=CASCADE) book = models.ForeignKey('Instance', verbose_name='\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440', on_delete=CASCADE) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438', null=True) class BookRoom(models.Model): book = models.ForeignKey('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0430', on_delete=CASCADE) room = models.ForeignKey('Room', verbose_name='\u0417\u0430\u043b', on_delete=CASCADE) class Room(models.Model): name = models.CharField(max_length=20, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') capacity = models.IntegerField(verbose_name='\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c') books = models.ManyToManyField('Instance', verbose_name='\u041a\u043d\u0438\u0433\u0438', through='BookRoom', related_name='book_room') def __str__(self): return self.name serializers.py from django.utils import timezone from rest_framework import serializers from .models import * class ReaderSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='books') class Meta: model = Reader fields = \"__all__\" class BookSerializer(serializers.ModelSerializer): class Meta: model = Book fields = \"__all__\" class InstanceSerializer(serializers.ModelSerializer): class Meta: model = Instance fields = \"__all__\" class ReaderBookSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = \"__all__\" class RoomSerializer(serializers.ModelSerializer): books = serializers.SlugRelatedField(read_only=True, many=True, slug_field='name') class Meta: model = Room fields = \"__all__\" class BookRoomSerializer(serializers.ModelSerializer): class Meta: model = BookRoom fields = \"__all__\" class ReaderRoomSerializer(serializers.ModelSerializer): class Meta: model = ReaderRoom fields = \"__all__\" class BookInstSerializer(serializers.ModelSerializer): class Meta: model = BookInst fields = \"__all__\" class ReaderInstsSerializer(serializers.ModelSerializer): class Meta: model = Reader fields = [\"instances\"] class RecentlyBookDateSerializer(serializers.ModelSerializer): class Meta: model = ReaderBook fields = [\"reader\"] urls.py from django.urls import path from .views import * urlpatterns = [ path('readers/list/', ReaderListAPIView.as_view()), path('readers/create/', CreateReader.as_view()), path('readers/<int:pk>/', OneReader.as_view()), path('books/list/', BookListAPIView.as_view()), path('books/create/', CreateBook.as_view()), path('books/<int:pk>/', OneBook.as_view()), path('inst/list/', InstanceListAPIView.as_view()), path('inst/create/', CreateInstance.as_view()), path('inst/<int:pk>/', OneInstance.as_view()), path('rooms/list/', RoomListAPIView.as_view()), path('rooms/create/', RoomCreateAPIView.as_view()), path('rooms/<int:pk>/', OneRoom.as_view()), path('book/readers/', BookReaders.as_view()), path('book/room/', RoomBook.as_view()), path('room/readers/', RoomReader.as_view()), path('book/inst/', BookInst.as_view()), path('readers/inst/<int:pk>', ReadersInst.as_view()), path('book/recently/', RecentlyBookDate.as_view()), ] settings.py \"\"\" Django settings for library_project project. Generated by 'django-admin startproject' using Django 4.1.2. For more information on this file, see https://docs.djangoproject.com/en/4.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/4.1/ref/settings/ \"\"\" from pathlib import Path # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = 'django-insecure-3&m=g&x2aqy-w#aoqwqlgsv_5s-22mq_e&r2_(7_v)&%9u#6c+' # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] # Application definition INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'library', 'rest_framework', 'djoser', 'rest_framework.authtoken', 'drf_yasg' ] MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] ROOT_URLCONF = 'library_project.urls' TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION = 'library_project.wsgi.application' # Database # https://docs.djangoproject.com/en/4.1/ref/settings/#databases DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', } } # Password validation # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ] # Internationalization # https://docs.djangoproject.com/en/4.1/topics/i18n/ LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' USE_I18N = True USE_TZ = True # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/4.1/howto/static-files/ STATIC_URL = 'static/' # Default primary key field type # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' AUTH_USER_MODEL = 'library.User' ROOT_URLCONF = 'library_project.urls' REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', ), }","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 (backend) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST framework."},{"location":"labs/lab_4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js. \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u041e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u0441\u044f \u0441 \u0431\u0430\u0437\u043e\u0432\u044b\u043c\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c\u0438 JavaScript. \u0422\u0435\u043a\u0441\u0442 \"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u21164.1 (\u0441\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e, \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0431\u0430\u0437\u043e\u0432\u043e \u0437\u043d\u0430\u0435\u0442\u0435 JS). router index.js import {createRouter, createWebHistory} from 'vue-router' import LoginView from \"@/views/LoginView.vue\"; import RegisterView from \"@/views/RegisterView.vue\"; import MainView from \"@/views/MainView.vue\"; import WalletView from \"@/views/WalletView.vue\"; import ChartsView from \"@/views/ChartsView.vue\"; import Mainpage from \"@/views/Mainpage.vue\"; const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: '/login', name: 'login', component: LoginView }, { path: '/register', name: 'register', component: RegisterView }, { path: '/search', name: 'main', component: MainView }, { path: '/personal', name: 'wallet', component: WalletView }, { path: '/charts', name: 'chart', component: ChartsView }, { path: '/', name: 'mainpage', component: Mainpage } ] }) export default router \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f api coins.js class CoinsAPI { constructor(instance) { this.API = instance } getCoins = async (search, sort, order, page, limit) => { return this.API({ url: `/coins?q=${search}&_sort=${sort}&_order=${order}&_limit=${limit}&_page=${page}` }) } getCustomList = async () => { return this.API({ url: `/coins` }) } } export default CoinsAPI users.js export default class UsersAPI { constructor(instance) { this.API = instance } getAllUsers = async () => { return this.API({ method: 'GET', url: '/users' }) } getCurrentUser = async (id) => { return this.API({ method: 'GET', url: `/users/${id}` }) } push = async (user) => { return this.API({ method: 'PUT', url: `/users/${user.id}`, data: user, headers: { 'Content-Type': 'application/json' } }) } createNewUser = async (data) => { return this.API({ method: 'POST', url: '/users', data, headers: { 'Content-Type': 'application/json' } }) } } index.js import instance from \"@/api/instance.js\"; import CoinsAPI from \"@/api/coins.js\"; import UsersAPI from \"@/api/users.js\"; import ChartsAPI from \"@/api/charts.js\"; const coinsAPI = new CoinsAPI(instance); const usersAPI = new UsersAPI(instance); const chartsAPI = new ChartsAPI(instance); export { coinsAPI, usersAPI, chartsAPI } instance.js import axios from \"axios\"; const apiURL = 'http://localhost:3000' const instance = axios.create({ baseURL: apiURL }) export default instance \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c coins.js import {defineStore} from \"pinia\"; import {coinsAPI, usersAPI} from \"@/api\"; const useCoinsStore = defineStore('coins', { state: () => ({ coins: [] }), actions: { async loadCoins(search = '', sortName = '', page = 1, limit = 10) { const sortSplit = sortName.split(' '); const sort = sortSplit[0]; const order = sortSplit[1]; const response = await coinsAPI.getCoins(search, sort, order, page, limit); this.coins = response.data; return response.data; }, async getWallet(idx) { const actual = await usersAPI.getCurrentUser(idx); const {id, coins} = actual.data; return {id, coins}; }, async loadCustomCoins() { const response = await coinsAPI.getCustomList(); this.coins = response.data; return response.data; }, async loadCoinsList(search = '') { const response = await coinsAPI.getCoins(search, '', '', '', ''); this.coins = response.data; return response.data; } } }) export default useCoinsStore users.js import {usersAPI} from \"@/api\"; import {defineStore} from \"pinia\" import router from \"@/router\"; const useUsersStore = defineStore('users', { state: () => ({ user: { id: null, coins: [] } }), actions: { async signUp(credentials) { const response = await usersAPI.getAllUsers() const data = response.data const validUser = this.isValid(credentials, data) if (validUser !== undefined) { this.user.id = validUser.id; this.user.coins = validUser.coins; await router.push('/personal') } else { localStorage.clear() alert('\u041e\u0448\u0438\u0431\u043a\u0430! \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 email \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c') } }, isValid(credentials, data) { for (let i = 0; i < data.length; i++) { if (data[i].email === credentials.email && data[i].password === credentials.password) { return {id: data[i].id, coins: data[i].coins} } } }, async commitActions(user) { const rawUser = JSON.parse(JSON.stringify(user)) const currentUser = await usersAPI.getCurrentUser(rawUser.id) currentUser.data.coins = rawUser.coins const response = await usersAPI.push(currentUser.data) return response.data }, async register(credentials) { const response = await usersAPI.createNewUser(credentials) const data = response.data let {id} = data this.user = { 'id': id, 'coins': [], } } } }) export default useUsersStore index.js import { persist } from 'pinia-persists' import { createPinia } from 'pinia' const pinia = createPinia() pinia.use(persist()) export default pinia","title":"Lab 4"},{"location":"labs/lab_4/#4-vuejs","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js."},{"location":"labs/lab_4/#javascript-no41-js","text":"router index.js import {createRouter, createWebHistory} from 'vue-router' import LoginView from \"@/views/LoginView.vue\"; import RegisterView from \"@/views/RegisterView.vue\"; import MainView from \"@/views/MainView.vue\"; import WalletView from \"@/views/WalletView.vue\"; import ChartsView from \"@/views/ChartsView.vue\"; import Mainpage from \"@/views/Mainpage.vue\"; const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: '/login', name: 'login', component: LoginView }, { path: '/register', name: 'register', component: RegisterView }, { path: '/search', name: 'main', component: MainView }, { path: '/personal', name: 'wallet', component: WalletView }, { path: '/charts', name: 'chart', component: ChartsView }, { path: '/', name: 'mainpage', component: Mainpage } ] }) export default router \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f api coins.js class CoinsAPI { constructor(instance) { this.API = instance } getCoins = async (search, sort, order, page, limit) => { return this.API({ url: `/coins?q=${search}&_sort=${sort}&_order=${order}&_limit=${limit}&_page=${page}` }) } getCustomList = async () => { return this.API({ url: `/coins` }) } } export default CoinsAPI users.js export default class UsersAPI { constructor(instance) { this.API = instance } getAllUsers = async () => { return this.API({ method: 'GET', url: '/users' }) } getCurrentUser = async (id) => { return this.API({ method: 'GET', url: `/users/${id}` }) } push = async (user) => { return this.API({ method: 'PUT', url: `/users/${user.id}`, data: user, headers: { 'Content-Type': 'application/json' } }) } createNewUser = async (data) => { return this.API({ method: 'POST', url: '/users', data, headers: { 'Content-Type': 'application/json' } }) } } index.js import instance from \"@/api/instance.js\"; import CoinsAPI from \"@/api/coins.js\"; import UsersAPI from \"@/api/users.js\"; import ChartsAPI from \"@/api/charts.js\"; const coinsAPI = new CoinsAPI(instance); const usersAPI = new UsersAPI(instance); const chartsAPI = new ChartsAPI(instance); export { coinsAPI, usersAPI, chartsAPI } instance.js import axios from \"axios\"; const apiURL = 'http://localhost:3000' const instance = axios.create({ baseURL: apiURL }) export default instance \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c coins.js import {defineStore} from \"pinia\"; import {coinsAPI, usersAPI} from \"@/api\"; const useCoinsStore = defineStore('coins', { state: () => ({ coins: [] }), actions: { async loadCoins(search = '', sortName = '', page = 1, limit = 10) { const sortSplit = sortName.split(' '); const sort = sortSplit[0]; const order = sortSplit[1]; const response = await coinsAPI.getCoins(search, sort, order, page, limit); this.coins = response.data; return response.data; }, async getWallet(idx) { const actual = await usersAPI.getCurrentUser(idx); const {id, coins} = actual.data; return {id, coins}; }, async loadCustomCoins() { const response = await coinsAPI.getCustomList(); this.coins = response.data; return response.data; }, async loadCoinsList(search = '') { const response = await coinsAPI.getCoins(search, '', '', '', ''); this.coins = response.data; return response.data; } } }) export default useCoinsStore users.js import {usersAPI} from \"@/api\"; import {defineStore} from \"pinia\" import router from \"@/router\"; const useUsersStore = defineStore('users', { state: () => ({ user: { id: null, coins: [] } }), actions: { async signUp(credentials) { const response = await usersAPI.getAllUsers() const data = response.data const validUser = this.isValid(credentials, data) if (validUser !== undefined) { this.user.id = validUser.id; this.user.coins = validUser.coins; await router.push('/personal') } else { localStorage.clear() alert('\u041e\u0448\u0438\u0431\u043a\u0430! \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 email \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c') } }, isValid(credentials, data) { for (let i = 0; i < data.length; i++) { if (data[i].email === credentials.email && data[i].password === credentials.password) { return {id: data[i].id, coins: data[i].coins} } } }, async commitActions(user) { const rawUser = JSON.parse(JSON.stringify(user)) const currentUser = await usersAPI.getCurrentUser(rawUser.id) currentUser.data.coins = rawUser.coins const response = await usersAPI.push(currentUser.data) return response.data }, async register(credentials) { const response = await usersAPI.createNewUser(credentials) const data = response.data let {id} = data this.user = { 'id': id, 'coins': [], } } } }) export default useUsersStore index.js import { persist } from 'pinia-persists' import { createPinia } from 'pinia' const pinia = createPinia() pinia.use(persist()) export default pinia","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u041e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u0441\u044f \u0441 \u0431\u0430\u0437\u043e\u0432\u044b\u043c\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c\u0438 JavaScript. \u0422\u0435\u043a\u0441\u0442 \"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u21164.1 (\u0441\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e, \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0431\u0430\u0437\u043e\u0432\u043e \u0437\u043d\u0430\u0435\u0442\u0435 JS)."}]}