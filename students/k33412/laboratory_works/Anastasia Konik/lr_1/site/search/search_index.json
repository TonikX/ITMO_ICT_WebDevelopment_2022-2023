{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u043d\u0438\u043a \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u0438, K33412","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#k33412","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u043d\u0438\u043a \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u0438, K33412"},{"location":"lr1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py import socket # UDP server server_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_sock.bind(('localhost', 9090)) while True: data, address = server_sock.recvfrom(1024) if data == b'Hello, server': print(data) server_sock.sendto(b'Hello, client', address) else: server_sock.close() break client.py import socket # UDP client client_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client_sock.connect(('localhost', 9090)) client_sock.sendto(b'Hello, server', ('localhost', 9090)) data, server = client_sock.recvfrom(1024) client_sock.close() print(data) \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 8081)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() data = client_sock.recv(1024) if not data: break print(data.decode(\"utf-8\")) client_sock.sendall('Enter the sides (for ex. 5,9)'.encode(\"utf-8\")) data = client_sock.recv(1024) sides = data.decode(\"utf-8\") try: a, b = map(int, sides.split(',')) c = (a ** 2 + b ** 2) ** 0.5 ans = str(round(c, 3)) client_sock.sendall(ans.encode(\"utf-8\")) except Exception: client_sock.sendall('Error. Try again'.encode(\"utf-8\")) client_sock.close() client.py import socket client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 8081)) client_sock.sendall('Pyfagorean theorem'.encode(\"utf-8\")) data = client_sock.recv(1024) print(data.decode(\"utf-8\")) sides = input() client_sock.sendall(sides.encode(\"utf-8\")) data = client_sock.recv(1024) client_sock.close() print(data.decode(\"utf-8\")) \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server.py import socket server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 8080)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() data = client_sock.recv(1024) if not data: break status_line = \"HTTP/1.0 200 OK\\n\" resp_headers = \"Content-Type: text/html\\n\\n\" body = open('index.html', 'r').read() response = status_line + resp_headers + body client_sock.sendall(response.encode(\"utf-8\")) open('index.html', 'r').close() client_sock.close() client.py import socket client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 8080)) client_sock.sendall('Hi!'.encode(\"utf-8\")) data = client_sock.recv(1024) print(data.decode(\"utf-8\")) client_sock.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Message</title> </head> <body> Hello from server! </body> </html> \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server.py import socket import threading server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 9090)) server_sock.listen(5) clients = dict() # send message to everyone def broadcast(message): for client in clients: client.sendall(message) # handling a client def handle(client): while True: try: message = client.recv(1024) if message.decode(\"utf-8\") == \"{}:bye\".format(clients[client]): broadcast('{} has left'.format(clients.pop(client)).encode(\"utf-8\")) client.close() break broadcast(message) except: broadcast('{} has left'.format(clients.pop(client)).encode(\"utf-8\")) client.close() break def chat(): while True: client_sock, client_addr = server_sock.accept() client_sock.sendall('Nick:'.encode(\"utf-8\")) nick = client_sock.recv(1024).decode(\"utf-8\") clients[client_sock] = nick broadcast('{} joined!'.format(nick).encode(\"utf-8\")) thread = threading.Thread(target=handle, args=(client_sock,)) thread.start() chat() client.py import socket import threading client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 9090)) nick = input(\"Your nick: \") def get_message(): while True: try: message = client_sock.recv(1024) if len(message) == 0: client_sock.close() break if message.decode(\"utf-8\") == 'Nick:': client_sock.sendall(nick.encode(\"utf-8\")) else: print(message.decode(\"utf-8\")) except: client_sock.close() break def send_message(): while True: try: text = input(\"\") message = '{}:{}'.format(nick, text) client_sock.sendall(message.encode(\"utf-8\")) if text == \"bye\": break except: client_sock.close() break get_thread, send_thread = threading.Thread(target=get_message), threading.Thread(target=send_message) get_thread.start() send_thread.start() \u0417\u0430\u0434\u0430\u0447\u0430 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket MAX_LINE = 64 * 1024 class MyHTTPServer: # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def __init__(self, host, port): self._host = host self._port = port # \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 def serve_forever(self): server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind((self._host, self._port)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() try: self.serve_client(client_sock) except: server_sock.close() break # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def serve_client(self, client_sock): try: req_str = client_sock.recv(65536).decode(\"utf-8\") method, url, params, headers, body = self.parse_request(req_str) resp = self.handle_request(method, url, params, headers, body) if resp is not None: self.send_response(client_sock, resp) except ConnectionResetError: client_sock = None if client_sock: client_sock.close() @staticmethod def parse_request(req_str): req_str.replace('\\r', '') req_lines = req_str.split('\\n') headers, method, url, version, body, params = dict(), \"\", \"\", \"\", \"\", \"\" body_start_idx = -1 for i in range(0, len(req_lines)): line = req_lines[i] if i == 0: # \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0442\u043e \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 words = line.split() # \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c if len(words) != 3: # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0440\u043e\u0432\u043d\u043e 3 \u0447\u0430\u0441\u0442\u0438 raise Exception('Malformed request line') method, url, version = words if '?' in url: url, params = url.split('?') params_strings = params.split(\"&\") params = dict() for param_string in params_strings: params[param_string.split(\"=\")[0]] = param_string.split(\"=\")[1] if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') continue # \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438\u043b\u0438 \u0442\u0435\u043b\u0430 if not \":\" in line: # \u0434\u0430\u043b\u044c\u0448\u0435 \u0442\u0435\u043b\u043e body_start_idx = i + 1 break # \u0415\u0449\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 headers[line.split(':')[0]] = line.split(':')[1] if body_start_idx != -1 and body_start_idx < len(req_lines): body = req_lines[body_start_idx:] return method, url, params, headers, body # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 url \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 # \u0443\u0441\u043b\u043e\u0432\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 GET \u0438\u043b\u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441. GET \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435. POST \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. @staticmethod def handle_request(method, url, params, headers, body): if not url == \"/\": return \"\" if method == \"GET\": if params == \"\": resp = \"HTTP/1.1 200 OK\\n\\n\" with open('index.html', 'r') as f: resp += f.read() f.close() return resp if 'subject' in params and params['subject'] in subjects: subject = params['subject'] resp = \"HTTP/1.1 200 OK\\n\\n\" resp += f\"<html><head><title>Journal for {subject}</title></head><body>\" resp += f\"<p>{subject}: \" for grade in subjects[subject]: resp += f\"{grade}, \" resp = resp[:-2] resp += \"</p>\" resp += \"</body></html>\" return resp raise \"invalid get request\" if method == \"POST\": body_kvps = body[0].split('&') body_params = dict() for kvp in body_kvps: body_params[kvp.split('=')[0]] = kvp.split('=')[1] if 'subject' in body_params and 'grade' in body_params and len(body_params) == 2: subject = body_params['subject'].strip() grade = body_params['grade'].strip() if grade != '' and subject != '': if subject not in subjects: subjects[subject] = [] subjects[subject].append(grade) resp = \"HTTP/1.1 200 OK\\n\\n\" resp += \"<html><head><title>Journal</title></head><body>\" for subject in subjects: resp += f\"<p>{subject}: \" for grade in subjects[subject]: resp += f\"{grade}, \" resp = resp[:-2] resp += \"</p>\" resp += \"</body></html>\" return resp # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 status line \u0432\u0438\u0434\u0430 HTTP/1.1 <status_code> <reason>. # \u0417\u0430\u0442\u0435\u043c, \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0435\u0446 \u0441\u0435\u043a\u0446\u0438\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432. @staticmethod def send_response(client_sock, resp): client_sock.sendall(resp.encode(\"utf-8\")) if __name__ == '__main__': host = 'localhost' port = 9091 serv = MyHTTPServer(host, port) subjects = dict() try: serv.serve_forever() except KeyboardInterrupt: pass index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Journal</title> </head> <body> <form action=\"/\" method=\"post\"> <label for=\"name\">Subject:</label> <input type=\"text\" id=\"name\" name=\"subject\"/> <label for=\"grade\">Grade:</label> <input type=\"number\" id=\"grade\" name=\"grade\"/> <input type=\"submit\"> </form> </body> </html>","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py import socket # UDP server server_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_sock.bind(('localhost', 9090)) while True: data, address = server_sock.recvfrom(1024) if data == b'Hello, server': print(data) server_sock.sendto(b'Hello, client', address) else: server_sock.close() break client.py import socket # UDP client client_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client_sock.connect(('localhost', 9090)) client_sock.sendto(b'Hello, server', ('localhost', 9090)) data, server = client_sock.recvfrom(1024) client_sock.close() print(data)","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lr1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 8081)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() data = client_sock.recv(1024) if not data: break print(data.decode(\"utf-8\")) client_sock.sendall('Enter the sides (for ex. 5,9)'.encode(\"utf-8\")) data = client_sock.recv(1024) sides = data.decode(\"utf-8\") try: a, b = map(int, sides.split(',')) c = (a ** 2 + b ** 2) ** 0.5 ans = str(round(c, 3)) client_sock.sendall(ans.encode(\"utf-8\")) except Exception: client_sock.sendall('Error. Try again'.encode(\"utf-8\")) client_sock.close() client.py import socket client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 8081)) client_sock.sendall('Pyfagorean theorem'.encode(\"utf-8\")) data = client_sock.recv(1024) print(data.decode(\"utf-8\")) sides = input() client_sock.sendall(sides.encode(\"utf-8\")) data = client_sock.recv(1024) client_sock.close() print(data.decode(\"utf-8\"))","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lr1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server.py import socket server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 8080)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() data = client_sock.recv(1024) if not data: break status_line = \"HTTP/1.0 200 OK\\n\" resp_headers = \"Content-Type: text/html\\n\\n\" body = open('index.html', 'r').read() response = status_line + resp_headers + body client_sock.sendall(response.encode(\"utf-8\")) open('index.html', 'r').close() client_sock.close() client.py import socket client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 8080)) client_sock.sendall('Hi!'.encode(\"utf-8\")) data = client_sock.recv(1024) print(data.decode(\"utf-8\")) client_sock.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Message</title> </head> <body> Hello from server! </body> </html>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"lr1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server.py import socket import threading server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 9090)) server_sock.listen(5) clients = dict() # send message to everyone def broadcast(message): for client in clients: client.sendall(message) # handling a client def handle(client): while True: try: message = client.recv(1024) if message.decode(\"utf-8\") == \"{}:bye\".format(clients[client]): broadcast('{} has left'.format(clients.pop(client)).encode(\"utf-8\")) client.close() break broadcast(message) except: broadcast('{} has left'.format(clients.pop(client)).encode(\"utf-8\")) client.close() break def chat(): while True: client_sock, client_addr = server_sock.accept() client_sock.sendall('Nick:'.encode(\"utf-8\")) nick = client_sock.recv(1024).decode(\"utf-8\") clients[client_sock] = nick broadcast('{} joined!'.format(nick).encode(\"utf-8\")) thread = threading.Thread(target=handle, args=(client_sock,)) thread.start() chat() client.py import socket import threading client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 9090)) nick = input(\"Your nick: \") def get_message(): while True: try: message = client_sock.recv(1024) if len(message) == 0: client_sock.close() break if message.decode(\"utf-8\") == 'Nick:': client_sock.sendall(nick.encode(\"utf-8\")) else: print(message.decode(\"utf-8\")) except: client_sock.close() break def send_message(): while True: try: text = input(\"\") message = '{}:{}'.format(nick, text) client_sock.sendall(message.encode(\"utf-8\")) if text == \"bye\": break except: client_sock.close() break get_thread, send_thread = threading.Thread(target=get_message), threading.Thread(target=send_message) get_thread.start() send_thread.start()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"lr1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket MAX_LINE = 64 * 1024 class MyHTTPServer: # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def __init__(self, host, port): self._host = host self._port = port # \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 def serve_forever(self): server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind((self._host, self._port)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() try: self.serve_client(client_sock) except: server_sock.close() break # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def serve_client(self, client_sock): try: req_str = client_sock.recv(65536).decode(\"utf-8\") method, url, params, headers, body = self.parse_request(req_str) resp = self.handle_request(method, url, params, headers, body) if resp is not None: self.send_response(client_sock, resp) except ConnectionResetError: client_sock = None if client_sock: client_sock.close() @staticmethod def parse_request(req_str): req_str.replace('\\r', '') req_lines = req_str.split('\\n') headers, method, url, version, body, params = dict(), \"\", \"\", \"\", \"\", \"\" body_start_idx = -1 for i in range(0, len(req_lines)): line = req_lines[i] if i == 0: # \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0442\u043e \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 words = line.split() # \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c if len(words) != 3: # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0440\u043e\u0432\u043d\u043e 3 \u0447\u0430\u0441\u0442\u0438 raise Exception('Malformed request line') method, url, version = words if '?' in url: url, params = url.split('?') params_strings = params.split(\"&\") params = dict() for param_string in params_strings: params[param_string.split(\"=\")[0]] = param_string.split(\"=\")[1] if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') continue # \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438\u043b\u0438 \u0442\u0435\u043b\u0430 if not \":\" in line: # \u0434\u0430\u043b\u044c\u0448\u0435 \u0442\u0435\u043b\u043e body_start_idx = i + 1 break # \u0415\u0449\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 headers[line.split(':')[0]] = line.split(':')[1] if body_start_idx != -1 and body_start_idx < len(req_lines): body = req_lines[body_start_idx:] return method, url, params, headers, body # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 url \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 # \u0443\u0441\u043b\u043e\u0432\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 GET \u0438\u043b\u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441. GET \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435. POST \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. @staticmethod def handle_request(method, url, params, headers, body): if not url == \"/\": return \"\" if method == \"GET\": if params == \"\": resp = \"HTTP/1.1 200 OK\\n\\n\" with open('index.html', 'r') as f: resp += f.read() f.close() return resp if 'subject' in params and params['subject'] in subjects: subject = params['subject'] resp = \"HTTP/1.1 200 OK\\n\\n\" resp += f\"<html><head><title>Journal for {subject}</title></head><body>\" resp += f\"<p>{subject}: \" for grade in subjects[subject]: resp += f\"{grade}, \" resp = resp[:-2] resp += \"</p>\" resp += \"</body></html>\" return resp raise \"invalid get request\" if method == \"POST\": body_kvps = body[0].split('&') body_params = dict() for kvp in body_kvps: body_params[kvp.split('=')[0]] = kvp.split('=')[1] if 'subject' in body_params and 'grade' in body_params and len(body_params) == 2: subject = body_params['subject'].strip() grade = body_params['grade'].strip() if grade != '' and subject != '': if subject not in subjects: subjects[subject] = [] subjects[subject].append(grade) resp = \"HTTP/1.1 200 OK\\n\\n\" resp += \"<html><head><title>Journal</title></head><body>\" for subject in subjects: resp += f\"<p>{subject}: \" for grade in subjects[subject]: resp += f\"{grade}, \" resp = resp[:-2] resp += \"</p>\" resp += \"</body></html>\" return resp # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 status line \u0432\u0438\u0434\u0430 HTTP/1.1 <status_code> <reason>. # \u0417\u0430\u0442\u0435\u043c, \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0435\u0446 \u0441\u0435\u043a\u0446\u0438\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432. @staticmethod def send_response(client_sock, resp): client_sock.sendall(resp.encode(\"utf-8\")) if __name__ == '__main__': host = 'localhost' port = 9091 serv = MyHTTPServer(host, port) subjects = dict() try: serv.serve_forever() except KeyboardInterrupt: pass index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Journal</title> </head> <body> <form action=\"/\" method=\"post\"> <label for=\"name\">Subject:</label> <input type=\"text\" id=\"name\" name=\"subject\"/> <label for=\"grade\">Grade:</label> <input type=\"number\" id=\"grade\" name=\"grade\"/> <input type=\"submit\"> </form> </body> </html>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21165"},{"location":"lr2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0412\u0430\u0440\u0438\u0430\u043d\u0442 3 \"\u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445.\" \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u0440\u0435\u0439\u0441\u0430, \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043e\u0442\u043b\u0435\u0442\u0435, \u043f\u0440\u0438\u043b\u0435\u0442\u0435, \u0442\u0438\u043f\u0435 (\u043f\u0440\u0438\u043b\u0435\u0442, \u043e\u0442\u043b\u0435\u0442), \u043d\u043e\u043c\u0435\u0440\u0435 \u0433\u0435\u0439\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.core.validators import MaxValueValidator, MinValueValidator class User(AbstractUser): username = models.CharField(\"Username\", max_length=30, null=False, unique=True) passport = models.CharField(\"Passport number\", max_length=12, null=False) first_name = models.CharField(\"Name\", max_length=30, null=False) lastname = models.CharField(\"Lastname\", max_length=30, null=False) date_of_birth = models.DateTimeField(null=True, blank=True) def __str__(self): return self.username class Flight(models.Model): flight_number = models.CharField(\"Flight number\", max_length=20, unique=True) airline = models.CharField(\"Airline name\", max_length=30, null=False) departure = models.DateTimeField(\"Departure date and time\", null=False) arrival = models.DateTimeField(\"Arrival date and time\", null=False) def __str__(self): return f\"{self.airline}: {self.flight_number}\" class Ticket(models.Model): TYPE_FLIGHT = [('TO', 'Arrival'), ('FROM', 'Departure')] ticket_id = models.CharField(\"Ticket number\", primary_key=True, max_length=20, unique=True) seat = models.CharField(\"Place in plane\", max_length=3, null=True) gate = models.CharField(\"Gate number\", max_length=3, null=True) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) type = models.CharField(\"Flight type\", max_length=30, choices=TYPE_FLIGHT) def __str__(self): return f\"{self.flight} - {self.ticket_id}{self.seat == '' if '' else f'({self.seat})'}\" class Feedback(models.Model): comment = models.TextField(\"Comment\", null=False) rate = models.PositiveIntegerField( validators=[MaxValueValidator(limit_value=10), MinValueValidator(limit_value=1)] ) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) date = models.DateField(\"Flight date\") def __str__(self): return f\"{self.flight}({self.user}) - {self.rate} - \\'{self.comment[:10]}\\' \" ``` * `forms.py` ```python from django.contrib.auth.forms import UserCreationForm from django import forms from django.core.validators import MaxValueValidator, MinValueValidator from .models import User class NewUserForm(UserCreationForm): class Meta: model = User fields = ('username', 'email', 'lastname', 'first_name', 'date_of_birth', 'passport') class FeedbackForm(forms.Form): comment = forms.CharField(label='Comment', max_length=100) rating = forms.IntegerField(label='Rating', validators=[ MaxValueValidator(10), MinValueValidator(1) ]) date = forms.DateField(label='Flight date') class TicketUpdateForm(forms.Form): seat = forms.CharField(label='Seat', max_length=3) class BookForm(forms.Form): type = forms.ChoiceField(choices=(('TO', 'Arrival'), ('FROM', 'Departure'))) seat = forms.CharField(label=\"Seat\", max_length=3) urls.py from django.urls import path from . import views urlpatterns = [ path('', views.index), path('auth', views.auth), path('logout', views.logout_view), path('register', views.registration), path('flights', views.flights), path('flight/<int:flight_id>/users', views.users_list), path('flight/<int:flight_id>/feedbacks', views.feedbacks), path('flight/<int:flight_id>/leave_feedback', views.create_feedback), path('tickets', views.tickets), path('ticket/<int:ticket_id>/delete', views.delete_ticket), path('ticket/<int:ticket_id>/update', views.update_ticket), path('flight/<int:flight_id>/book', views.book_flight) ] views.py import time from flights_app.forms import * from flights_app.models import User, Flight, Ticket, Feedback from django.shortcuts import render, redirect from django.contrib.auth import authenticate, login, logout def index(request): if request.user.is_authenticated: return render(request, 'index.html') else: return render(request, 'auth.html') def logout_view(request): logout(request) return redirect('/') def auth(request): username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('/') else: return render(request, 'auth.html', {'error': 'Try again'}) def registration(request): if request.method == \"POST\": form = NewUserForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('/') else: form = NewUserForm() return render(request, \"register.html\", {\"register_form\": form}) def tickets(request): user_tickets = Ticket.objects.filter(user=request.user) return render(request, 'tickets.html', {'tickets': user_tickets}) def flights(request): return render(request, 'flights.html', {'flights': Flight.objects.all()}) def users_list(request, flight_id): user_ids = Ticket.objects.filter(flight_id=flight_id).values('user_id') users = User.objects.filter(id__in=user_ids) flight = Flight.objects.get(id=flight_id) return render(request, \"users.html\", { \"users\": users, \"flight\": flight, }) def feedbacks(request, flight_id): flight = Flight.objects.get(id=flight_id) feedbacks = Feedback.objects.filter(flight_id=flight_id) return render(request, \"feedbacks.html\", { \"feedbacks\": feedbacks, \"flight\": flight, }) def create_feedback(request, flight_id): if request.method == 'POST': form = FeedbackForm(request.POST) if form.is_valid(): Feedback.objects.create(comment=form.cleaned_data.get('comment'), rate=form.cleaned_data.get('rating'), date=form.cleaned_data.get('date'), user_id=request.user.id, flight_id=flight_id) return redirect('/flights') else: form = FeedbackForm() return render(request, 'leave_feedback.html', {'form': form}) def delete_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id == request.user.id: ticket.delete() return redirect('/tickets') def update_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id != request.user.id: return redirect('/') if request.method == 'POST': form = TicketUpdateForm(request.POST) if form.is_valid(): ticket.seat = form.cleaned_data.get('seat') ticket.save() return redirect('/tickets') else: form = TicketUpdateForm() return render(request, 'update.html', {'form': form, 'ticket': ticket}) def book_flight(request, flight_id): if request.method == 'POST': form = BookForm(request.POST) if form.is_valid(): Ticket.objects.create(flight_id=flight_id, type=form.cleaned_data.get('type'), seat=form.cleaned_data.get('seat'), user_id=request.user.id, ticket_id=int(str(time.time_ns())[-7:])) return redirect('/tickets') else: form = BookForm() return render(request, 'book.html', {'form': form})","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#3","text":"\u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u0440\u0435\u0439\u0441\u0430, \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043e\u0442\u043b\u0435\u0442\u0435, \u043f\u0440\u0438\u043b\u0435\u0442\u0435, \u0442\u0438\u043f\u0435 (\u043f\u0440\u0438\u043b\u0435\u0442, \u043e\u0442\u043b\u0435\u0442), \u043d\u043e\u043c\u0435\u0440\u0435 \u0433\u0435\u0439\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.core.validators import MaxValueValidator, MinValueValidator class User(AbstractUser): username = models.CharField(\"Username\", max_length=30, null=False, unique=True) passport = models.CharField(\"Passport number\", max_length=12, null=False) first_name = models.CharField(\"Name\", max_length=30, null=False) lastname = models.CharField(\"Lastname\", max_length=30, null=False) date_of_birth = models.DateTimeField(null=True, blank=True) def __str__(self): return self.username class Flight(models.Model): flight_number = models.CharField(\"Flight number\", max_length=20, unique=True) airline = models.CharField(\"Airline name\", max_length=30, null=False) departure = models.DateTimeField(\"Departure date and time\", null=False) arrival = models.DateTimeField(\"Arrival date and time\", null=False) def __str__(self): return f\"{self.airline}: {self.flight_number}\" class Ticket(models.Model): TYPE_FLIGHT = [('TO', 'Arrival'), ('FROM', 'Departure')] ticket_id = models.CharField(\"Ticket number\", primary_key=True, max_length=20, unique=True) seat = models.CharField(\"Place in plane\", max_length=3, null=True) gate = models.CharField(\"Gate number\", max_length=3, null=True) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) type = models.CharField(\"Flight type\", max_length=30, choices=TYPE_FLIGHT) def __str__(self): return f\"{self.flight} - {self.ticket_id}{self.seat == '' if '' else f'({self.seat})'}\" class Feedback(models.Model): comment = models.TextField(\"Comment\", null=False) rate = models.PositiveIntegerField( validators=[MaxValueValidator(limit_value=10), MinValueValidator(limit_value=1)] ) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) date = models.DateField(\"Flight date\") def __str__(self): return f\"{self.flight}({self.user}) - {self.rate} - \\'{self.comment[:10]}\\' \" ``` * `forms.py` ```python from django.contrib.auth.forms import UserCreationForm from django import forms from django.core.validators import MaxValueValidator, MinValueValidator from .models import User class NewUserForm(UserCreationForm): class Meta: model = User fields = ('username', 'email', 'lastname', 'first_name', 'date_of_birth', 'passport') class FeedbackForm(forms.Form): comment = forms.CharField(label='Comment', max_length=100) rating = forms.IntegerField(label='Rating', validators=[ MaxValueValidator(10), MinValueValidator(1) ]) date = forms.DateField(label='Flight date') class TicketUpdateForm(forms.Form): seat = forms.CharField(label='Seat', max_length=3) class BookForm(forms.Form): type = forms.ChoiceField(choices=(('TO', 'Arrival'), ('FROM', 'Departure'))) seat = forms.CharField(label=\"Seat\", max_length=3) urls.py from django.urls import path from . import views urlpatterns = [ path('', views.index), path('auth', views.auth), path('logout', views.logout_view), path('register', views.registration), path('flights', views.flights), path('flight/<int:flight_id>/users', views.users_list), path('flight/<int:flight_id>/feedbacks', views.feedbacks), path('flight/<int:flight_id>/leave_feedback', views.create_feedback), path('tickets', views.tickets), path('ticket/<int:ticket_id>/delete', views.delete_ticket), path('ticket/<int:ticket_id>/update', views.update_ticket), path('flight/<int:flight_id>/book', views.book_flight) ] views.py import time from flights_app.forms import * from flights_app.models import User, Flight, Ticket, Feedback from django.shortcuts import render, redirect from django.contrib.auth import authenticate, login, logout def index(request): if request.user.is_authenticated: return render(request, 'index.html') else: return render(request, 'auth.html') def logout_view(request): logout(request) return redirect('/') def auth(request): username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('/') else: return render(request, 'auth.html', {'error': 'Try again'}) def registration(request): if request.method == \"POST\": form = NewUserForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('/') else: form = NewUserForm() return render(request, \"register.html\", {\"register_form\": form}) def tickets(request): user_tickets = Ticket.objects.filter(user=request.user) return render(request, 'tickets.html', {'tickets': user_tickets}) def flights(request): return render(request, 'flights.html', {'flights': Flight.objects.all()}) def users_list(request, flight_id): user_ids = Ticket.objects.filter(flight_id=flight_id).values('user_id') users = User.objects.filter(id__in=user_ids) flight = Flight.objects.get(id=flight_id) return render(request, \"users.html\", { \"users\": users, \"flight\": flight, }) def feedbacks(request, flight_id): flight = Flight.objects.get(id=flight_id) feedbacks = Feedback.objects.filter(flight_id=flight_id) return render(request, \"feedbacks.html\", { \"feedbacks\": feedbacks, \"flight\": flight, }) def create_feedback(request, flight_id): if request.method == 'POST': form = FeedbackForm(request.POST) if form.is_valid(): Feedback.objects.create(comment=form.cleaned_data.get('comment'), rate=form.cleaned_data.get('rating'), date=form.cleaned_data.get('date'), user_id=request.user.id, flight_id=flight_id) return redirect('/flights') else: form = FeedbackForm() return render(request, 'leave_feedback.html', {'form': form}) def delete_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id == request.user.id: ticket.delete() return redirect('/tickets') def update_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id != request.user.id: return redirect('/') if request.method == 'POST': form = TicketUpdateForm(request.POST) if form.is_valid(): ticket.seat = form.cleaned_data.get('seat') ticket.save() return redirect('/tickets') else: form = TicketUpdateForm() return render(request, 'update.html', {'form': form, 'ticket': ticket}) def book_flight(request, flight_id): if request.method == 'POST': form = BookForm(request.POST) if form.is_valid(): Ticket.objects.create(flight_id=flight_id, type=form.cleaned_data.get('type'), seat=form.cleaned_data.get('seat'), user_id=request.user.id, ticket_id=int(str(time.time_ns())[-7:])) return redirect('/tickets') else: form = BookForm() return render(request, 'book.html', {'form': form})","title":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 3 \"\u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445.\""},{"location":"pr3/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 models.py from django.db import models from django.contrib.auth.models import AbstractUser class Car(models.Model): car_id = models.IntegerField(primary_key=True) state_number = models.CharField(max_length=15, null=False) make_car = models.CharField(max_length=20, null=False) model_car = models.CharField(max_length=20, null=False) colour = models.CharField(max_length=30, null=True) class CarOwner(AbstractUser): owner_id = models.IntegerField(primary_key=True) last_name = models.CharField(max_length=30, null=False) first_name = models.CharField(max_length=30, null=False) birthday = models.DateField(null=True) passport = models.CharField(max_length=12, null=True, blank=True) address = models.CharField(max_length=50, null=True, blank=True) nationality = models.CharField(max_length=30, null=True, blank=True) cars = models.ManyToManyField(Car, through='Ownership') def __str__(self): return self.owner_id.__str__() class Ownership(models.Model): owner_car_id = models.IntegerField(primary_key=True) owner_id = models.ForeignKey(CarOwner, on_delete=models.CASCADE, related_name='owner') car_id = models.ForeignKey(Car, on_delete=models.CASCADE, related_name='car') start_date = models.DateField() expiration_date = models.DateField(null=True) def __str__(self): return \"{}_{}\".format(self.owner_id.__str__(), self.car_id.__str__()) class DriverLicense(models.Model): license_id = models.IntegerField(primary_key=True) owner_id = models.ForeignKey(CarOwner, on_delete=models.CASCADE, related_name='carOwner') license_number = models.CharField(max_length=10, null=False) type = models.CharField(max_length=10, null=False) date_of_license = models.DateField() Database Cars Owners Licenses Ownerships \u0417\u0430\u0434\u0430\u0447\u0430 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: >>> from project_first_app.models import * >>> owner1=CarOwner.objects.create(owner_id=1, last_name=\"Konik\", first_name=\"Anastasia\", birthday = \"2002-11-24\", passport = \"6424474254\", username = \"AnastasiaKonik\") >>> owner2=CarOwner.objects.create(owner_id=2, last_name=\"Nazarov\", first_name=\"Egor\", birthday = \"2001-07-09\", passport = \"6324432254\", username = \"EgorNazarov\") >>> owner3=CarOwner.objects.create(owner_id=3, last_name=\"Petrov\", first_name=\"Alexander\", birthday = \"1994-08-19\", passport = \"6228974242\", username = \"AlexanderPetrov\") >>> owner4=CarOwner.objects.create(owner_id=4, last_name=\"Ivanov\", first_name=\"Andrey\", birthday = \"1987-12-13\", passport = \"6228983241\", username = \"AndreyIvanov\") >>> owner5=CarOwner.objects.create(owner_id=5, last_name=\"Lopuhov\", first_name=\"Fedor\", birthday = \"2000-02-20\", passport = \"6118985242\", username = \"FedorLopuhov\") >>> owner6=CarOwner.objects.create(owner_id=6, last_name=\"Korneev\", first_name=\"Denis\", birthday = \"1996-08-09\", passport = \"6118124242\", username = \"DenisKorneev\") \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: >>> car1=Car.objects.create(car_id=1, state_number=\"T644AA\", make_car=\"Toyota\", model_car=\"Camry\", colour=\"white\") >>> car2=Car.objects.create(car_id=2, state_number=\"H238KK\", make_car=\"Hyundai\", model_car=\"Solaris\", colour=\"yellow\") >>> car3=Car.objects.create(car_id=3, state_number=\"O111PP\", make_car=\"Tesla\", model_car=\"Model S\", colour=\"black\") >>> car4=Car.objects.create(car_id=4, state_number=\"E322XX\", make_car=\"Mazda\", model_car=\"CX 5\", colour=\"blue\") >>> car5=Car.objects.create(car_id=5, state_number=\"M563CC\", make_car=\"Volvo\", model_car=\"XC 90\", colour=\"gold\") \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0439: >>> license1=DriverLicense.objects.create(license_id=1, owner_id=owner1, license_number=\"6432724\", type=\"B\", date_of_license=\"2013-10-10\") >>> license2=DriverLicense.objects.create(license_id=2, owner_id=owner2, license_number=\"6432114\", type=\"B\", date_of_license=\"2017-12-14\") >>> license3=DriverLicense.objects.create(license_id=3, owner_id=owner3, license_number=\"5332114\", type=\"B\", date_of_license=\"2014-09-01\") >>> license4=DriverLicense.objects.create(license_id=4, owner_id=owner4, license_number=\"5399114\", type=\"B\", date_of_license=\"2012-12-29\") >>> license5=DriverLicense.objects.create(license_id=5, owner_id=owner5, license_number=\"7839114\", type=\"B\", date_of_license=\"2019-06-11\") >>> license6=DriverLicense.objects.create(license_id=6, owner_id=owner6, license_number=\"7839662\", type=\"B\", date_of_license=\"2021-07-30\") \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446-\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c: >>> Ownership(owner_car_id=1, owner_id=CarOwner.objects.get(owner_id=1), car_id=Car.objects.get(car_id=1), start_date=\"2013-10-11\", expiration_date=\"2014-08-31\").save() >>> Ownership(owner_car_id=2, owner_id=CarOwner.objects.get(owner_id=2), car_id=Car.objects.get(car_id=2), start_date=\"2017-12-15\").save() >>> Ownership(owner_car_id=3, owner_id=CarOwner.objects.get(owner_id=3), car_id=Car.objects.get(car_id=3), start_date=\"2014-09-01\", expiration_date=\"2021-07-29\").save() >>> Ownership(owner_car_id=4, owner_id=CarOwner.objects.get(owner_id=4), car_id=Car.objects.get(car_id=4), start_date=\"2012-12-30\", expiration_date=\"2021-07-29\").save() >>> Ownership(owner_car_id=5, owner_id=CarOwner.objects.get(owner_id=5), car_id=Car.objects.get(car_id=5), start_date=\"2019-06-12\").save() >>> Ownership(owner_car_id=6, owner_id=CarOwner.objects.get(owner_id=6), car_id=Car.objects.get(car_id=4), start_date=\"2021-08-02\").save() >>> Ownership(owner_car_id=7, owner_id=CarOwner.objects.get(owner_id=6), car_id=Car.objects.get(car_id=3), start_date=\"2021-08-01\").save() >>> Ownership(owner_car_id=8, owner_id=CarOwner.objects.get(owner_id=6), car_id=Car.objects.get(car_id=1), start_date=\"2021-07-31\").save() \u0417\u0430\u0434\u0430\u0447\u0430 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d: >>> Car.objects.filter(make_car=\"Toyota\") <QuerySet [<Car: Car object (1)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u0414\u0435\u043d\u0438\u0441\u201d: >>> CarOwner.objects.filter(first_name=\"Denis\") <QuerySet [<CarOwner: 6>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438: >>> DriverLicense.objects.filter(owner_id=CarOwner.objects.get(owner=2)) <QuerySet [<DriverLicense: DriverLicense object (2)>]> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0431\u0435\u043b\u044b\u0445 \u043c\u0430\u0448\u0438\u043d: >>> CarOwner.objects.filter(owner__car_id__colour=\"white\") <QuerySet [<CarOwner: 1>, <CarOwner: 6>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2017: >>> CarOwner.objects.filter(carOwner__date_of_license__gte=\"2017-01-01\") <QuerySet [<CarOwner: 2>, <CarOwner: 5>, <CarOwner: 6>]> \u0417\u0430\u0434\u0430\u0447\u0430 3. \u0410\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> from django.db.models import Min, Max, Avg, Count >>> DriverLicense.objects.aggregate(date_of_license=Min(\"date_of_license\")) {'date_of_license': datetime.date(2012, 12, 29)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: >>> Ownership.objects.aggregate(start_date=Max(\"start_date\")) {'start_date': datetime.date(2021, 8, 2)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: >>> Ownership.objects.values(\"owner_id\").annotate(Count(\"car_id\")) <QuerySet [{'owner_id': 1, 'car_id__count': 1}, {'owner_id': 2, 'car_id__count': 1}, {'owner_id': 3, 'car_id__count': 1}, {'owner_id': 4, 'car_id__count': 1}, {'owner_id': 5, 'car_id__count': 1}, {'owner_id': 6, 'car_id__count': 3}]> \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: >>> Car.objects.values(\"make_car\").annotate(Count(\"car_id\")) <QuerySet [{'make_car': 'Hyundai', 'car_id__count': 1}, {'make_car': 'Mazda', 'car_id__count': 1}, {'make_car': 'Tesla', 'car_id__count': 1}, {'make_car': 'Toyota', 'car_id__count': 1}, {'make_car': 'Volvo', 'car_id__count': 1}]> \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> DriverLicense.objects.values(\"owner_id\").order_by(\"date_of_license\") <QuerySet [{'owner_id': 4}, {'owner_id': 1}, {'owner_id': 3}, {'owner_id': 2}, {'owner_id': 5}, {'owner_id': 6}]>","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"pr3/#no3","text":"models.py from django.db import models from django.contrib.auth.models import AbstractUser class Car(models.Model): car_id = models.IntegerField(primary_key=True) state_number = models.CharField(max_length=15, null=False) make_car = models.CharField(max_length=20, null=False) model_car = models.CharField(max_length=20, null=False) colour = models.CharField(max_length=30, null=True) class CarOwner(AbstractUser): owner_id = models.IntegerField(primary_key=True) last_name = models.CharField(max_length=30, null=False) first_name = models.CharField(max_length=30, null=False) birthday = models.DateField(null=True) passport = models.CharField(max_length=12, null=True, blank=True) address = models.CharField(max_length=50, null=True, blank=True) nationality = models.CharField(max_length=30, null=True, blank=True) cars = models.ManyToManyField(Car, through='Ownership') def __str__(self): return self.owner_id.__str__() class Ownership(models.Model): owner_car_id = models.IntegerField(primary_key=True) owner_id = models.ForeignKey(CarOwner, on_delete=models.CASCADE, related_name='owner') car_id = models.ForeignKey(Car, on_delete=models.CASCADE, related_name='car') start_date = models.DateField() expiration_date = models.DateField(null=True) def __str__(self): return \"{}_{}\".format(self.owner_id.__str__(), self.car_id.__str__()) class DriverLicense(models.Model): license_id = models.IntegerField(primary_key=True) owner_id = models.ForeignKey(CarOwner, on_delete=models.CASCADE, related_name='carOwner') license_number = models.CharField(max_length=10, null=False) type = models.CharField(max_length=10, null=False) date_of_license = models.DateField() Database Cars Owners Licenses Ownerships","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"pr3/#1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: >>> from project_first_app.models import * >>> owner1=CarOwner.objects.create(owner_id=1, last_name=\"Konik\", first_name=\"Anastasia\", birthday = \"2002-11-24\", passport = \"6424474254\", username = \"AnastasiaKonik\") >>> owner2=CarOwner.objects.create(owner_id=2, last_name=\"Nazarov\", first_name=\"Egor\", birthday = \"2001-07-09\", passport = \"6324432254\", username = \"EgorNazarov\") >>> owner3=CarOwner.objects.create(owner_id=3, last_name=\"Petrov\", first_name=\"Alexander\", birthday = \"1994-08-19\", passport = \"6228974242\", username = \"AlexanderPetrov\") >>> owner4=CarOwner.objects.create(owner_id=4, last_name=\"Ivanov\", first_name=\"Andrey\", birthday = \"1987-12-13\", passport = \"6228983241\", username = \"AndreyIvanov\") >>> owner5=CarOwner.objects.create(owner_id=5, last_name=\"Lopuhov\", first_name=\"Fedor\", birthday = \"2000-02-20\", passport = \"6118985242\", username = \"FedorLopuhov\") >>> owner6=CarOwner.objects.create(owner_id=6, last_name=\"Korneev\", first_name=\"Denis\", birthday = \"1996-08-09\", passport = \"6118124242\", username = \"DenisKorneev\") \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: >>> car1=Car.objects.create(car_id=1, state_number=\"T644AA\", make_car=\"Toyota\", model_car=\"Camry\", colour=\"white\") >>> car2=Car.objects.create(car_id=2, state_number=\"H238KK\", make_car=\"Hyundai\", model_car=\"Solaris\", colour=\"yellow\") >>> car3=Car.objects.create(car_id=3, state_number=\"O111PP\", make_car=\"Tesla\", model_car=\"Model S\", colour=\"black\") >>> car4=Car.objects.create(car_id=4, state_number=\"E322XX\", make_car=\"Mazda\", model_car=\"CX 5\", colour=\"blue\") >>> car5=Car.objects.create(car_id=5, state_number=\"M563CC\", make_car=\"Volvo\", model_car=\"XC 90\", colour=\"gold\") \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0439: >>> license1=DriverLicense.objects.create(license_id=1, owner_id=owner1, license_number=\"6432724\", type=\"B\", date_of_license=\"2013-10-10\") >>> license2=DriverLicense.objects.create(license_id=2, owner_id=owner2, license_number=\"6432114\", type=\"B\", date_of_license=\"2017-12-14\") >>> license3=DriverLicense.objects.create(license_id=3, owner_id=owner3, license_number=\"5332114\", type=\"B\", date_of_license=\"2014-09-01\") >>> license4=DriverLicense.objects.create(license_id=4, owner_id=owner4, license_number=\"5399114\", type=\"B\", date_of_license=\"2012-12-29\") >>> license5=DriverLicense.objects.create(license_id=5, owner_id=owner5, license_number=\"7839114\", type=\"B\", date_of_license=\"2019-06-11\") >>> license6=DriverLicense.objects.create(license_id=6, owner_id=owner6, license_number=\"7839662\", type=\"B\", date_of_license=\"2021-07-30\") \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446-\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c: >>> Ownership(owner_car_id=1, owner_id=CarOwner.objects.get(owner_id=1), car_id=Car.objects.get(car_id=1), start_date=\"2013-10-11\", expiration_date=\"2014-08-31\").save() >>> Ownership(owner_car_id=2, owner_id=CarOwner.objects.get(owner_id=2), car_id=Car.objects.get(car_id=2), start_date=\"2017-12-15\").save() >>> Ownership(owner_car_id=3, owner_id=CarOwner.objects.get(owner_id=3), car_id=Car.objects.get(car_id=3), start_date=\"2014-09-01\", expiration_date=\"2021-07-29\").save() >>> Ownership(owner_car_id=4, owner_id=CarOwner.objects.get(owner_id=4), car_id=Car.objects.get(car_id=4), start_date=\"2012-12-30\", expiration_date=\"2021-07-29\").save() >>> Ownership(owner_car_id=5, owner_id=CarOwner.objects.get(owner_id=5), car_id=Car.objects.get(car_id=5), start_date=\"2019-06-12\").save() >>> Ownership(owner_car_id=6, owner_id=CarOwner.objects.get(owner_id=6), car_id=Car.objects.get(car_id=4), start_date=\"2021-08-02\").save() >>> Ownership(owner_car_id=7, owner_id=CarOwner.objects.get(owner_id=6), car_id=Car.objects.get(car_id=3), start_date=\"2021-08-01\").save() >>> Ownership(owner_car_id=8, owner_id=CarOwner.objects.get(owner_id=6), car_id=Car.objects.get(car_id=1), start_date=\"2021-07-31\").save()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"},{"location":"pr3/#2","text":"\u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d: >>> Car.objects.filter(make_car=\"Toyota\") <QuerySet [<Car: Car object (1)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u0414\u0435\u043d\u0438\u0441\u201d: >>> CarOwner.objects.filter(first_name=\"Denis\") <QuerySet [<CarOwner: 6>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438: >>> DriverLicense.objects.filter(owner_id=CarOwner.objects.get(owner=2)) <QuerySet [<DriverLicense: DriverLicense object (2)>]> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0431\u0435\u043b\u044b\u0445 \u043c\u0430\u0448\u0438\u043d: >>> CarOwner.objects.filter(owner__car_id__colour=\"white\") <QuerySet [<CarOwner: 1>, <CarOwner: 6>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2017: >>> CarOwner.objects.filter(carOwner__date_of_license__gte=\"2017-01-01\") <QuerySet [<CarOwner: 2>, <CarOwner: 5>, <CarOwner: 6>]>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"pr3/#3","text":"\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> from django.db.models import Min, Max, Avg, Count >>> DriverLicense.objects.aggregate(date_of_license=Min(\"date_of_license\")) {'date_of_license': datetime.date(2012, 12, 29)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: >>> Ownership.objects.aggregate(start_date=Max(\"start_date\")) {'start_date': datetime.date(2021, 8, 2)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: >>> Ownership.objects.values(\"owner_id\").annotate(Count(\"car_id\")) <QuerySet [{'owner_id': 1, 'car_id__count': 1}, {'owner_id': 2, 'car_id__count': 1}, {'owner_id': 3, 'car_id__count': 1}, {'owner_id': 4, 'car_id__count': 1}, {'owner_id': 5, 'car_id__count': 1}, {'owner_id': 6, 'car_id__count': 3}]> \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: >>> Car.objects.values(\"make_car\").annotate(Count(\"car_id\")) <QuerySet [{'make_car': 'Hyundai', 'car_id__count': 1}, {'make_car': 'Mazda', 'car_id__count': 1}, {'make_car': 'Tesla', 'car_id__count': 1}, {'make_car': 'Toyota', 'car_id__count': 1}, {'make_car': 'Volvo', 'car_id__count': 1}]> \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> DriverLicense.objects.values(\"owner_id\").order_by(\"date_of_license\") <QuerySet [{'owner_id': 4}, {'owner_id': 1}, {'owner_id': 3}, {'owner_id': 2}, {'owner_id': 5}, {'owner_id': 6}]>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 3. \u0410\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"}]}