{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ViktoriiaBaban \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\" \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043a\u0438 \u0433\u0440\u0443\u043f\u043f\u044b \u041a33412 \u0411\u0430\u0431\u0430\u043d \u0412\u0438\u043a\u0442\u043e\u0440\u0438\u0438 \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438.","title":"Home"},{"location":"#welcome-to-viktoriiababan","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\" \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043a\u0438 \u0433\u0440\u0443\u043f\u043f\u044b \u041a33412 \u0411\u0430\u0431\u0430\u043d \u0412\u0438\u043a\u0442\u043e\u0440\u0438\u0438","title":"Welcome to ViktoriiaBaban"},{"location":"#_1","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438.","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442"},{"location":"lab_1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) conn, addr = sock.accept() print('connected with:', addr) while True: data = conn.recv(1024) print(data.decode(\"utf-8\")) if not data: break conn.send(b'Hello, client.\\n') conn.close() client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) sock.send(b'Hello, server.\\n') data = sock.recv(1024) print(data.decode(\"utf-8\")) sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket from math import sqrt sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) conn, addr = sock.accept() print('connected:', addr) while True: data = conn.recv(1024).decode() try: data = data.split(\" \") katet_1 = float(data[0]) katet_2 = float(data[1]) gipotenyza = float(data[2]) except: conn.sendall('\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445!\\n'.encode()) else: if katet_2 == 0: katet_2 = sqrt(gipotenyza**2 - katet_1**2) conn.sendall(f'\u0412\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0442\u0435\u0442 \u0438\u043c\u0435\u0435\u0442 \u0434\u043b\u0438\u043d\u0443: {katet_2}\\n'.encode()) elif gipotenyza == 0: gipotenyza = sqrt(katet_1**2 + katet_2**2) conn.sendall(f'\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430 \u0438\u043c\u0435\u0435\u0442 \u0434\u043b\u0438\u043d\u0443: {gipotenyza}\\n'.encode()) else: if gipotenyza == sqrt(katet_1**2 + katet_2**2): conn.sendall('\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f. \u0412\u0441\u0451 \u0432\u0435\u0440\u043d\u043e, \u044d\u0442\u043e - \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u044b\u0439 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a.'.encode()) else: conn.sendall('\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f. \u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u043d\u0435 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u044b\u0439!'.encode()) if not data: break conn.send(b'Hello, client.\\n') conn.close() client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) data = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043a\u0430\u0442\u0435\u0442\u043e\u0432: \").replace(\" \", \"\") data += \" \" + input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 - \u0432\u0432\u0435\u0434\u0438\u0442\u0435 0: \").replace(\" \", \"\") data += \" \" + input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 - \u0432\u0432\u0435\u0434\u0438\u0442\u0435 0: \").replace(\" \", \"\") sock.send(data.encode()) result = sock.recv(1024) print(result.decode(\"utf-8\")) sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) conn, addr = sock.accept() print('connected with:', addr) with open('index.html') as f: page = f.read() response = 'HTTP/1.0 200 OK\\n\\n' + \"Content-Type: text/html\\n\\n\" + page conn.sendall(response.encode(\"utf-8\")) conn.close() client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) data = sock.recv(1024) print(data.decode(\"utf-8\")) sock.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>My page</title> </head> <body> <h1>Welcome, friend!</h1> </body> </html> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 server.py import socket import threading def send_message(sock, msg): for client in clients: if sock != client: client.send(msg) def handle_client(socket, address, username): if not clients.setdefault(socket): clients[socket] = username print(f'{username}[{address[0]}:{address[1]}] \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443') send_message(socket, f'\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {username} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443'.encode()) while True: try: message = socket.recv(1024) if message.decode('utf-8').find('EXIT FROM CHAT') != -1: print(f'{username}[{address[0]}:{address[1]}] \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442') send_message(socket, f'\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442'.encode()) clients.pop(socket) break send_message(socket, message) except ConnectionResetError: print(f'{username}[{address[0]}:{address[1]}] \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u043e\u043f\u0430\u043b...') send_message(socket, f'\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {username} \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u043e\u043f\u0430\u043b...'.encode()) break socket.close() sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) clients = {} while True: try: conn, addr = sock.accept() data = conn.recv(1024).decode('utf-8') t1 = threading.Thread(target=handle_client, args=(conn, addr, data)) t1.start() except KeyboardInterrupt: print('Server stopped') break conn.close() client.py import threading import socket import time def get_message(): while True: try: data = sock.recv(1024).decode('utf-8') print(data) except socket.error: time.sleep(0.5) continue def write_message(): while True: message = input() sock.sendto(('[' + name + '] ' + message).encode('utf-8'), server) if message == 'EXIT FROM CHAT': break sock.close() sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) name = input('\u0412\u0432\u0435\u0434\u0438 \u0441\u0432\u043e\u0439 \u043d\u0438\u043a\u043d\u044d\u0439\u043c: ') print(f'\u041f\u0440\u0438\u0432\u0435\u0442, {name}! \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u0448\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.') print('\u0415\u0441\u043b\u0438 \u0437\u0430\u0445\u043e\u0447\u0435\u0448\u044c \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0447\u0430\u0442\u0430 \u043d\u0430\u043f\u0438\u0448\u0438 EXIT FROM CHAT\\n') server = '', 9523 sock.sendto((name).encode('utf-8'), server) thread_send = threading.Thread(target=write_message, args=()) thread_get = threading.Thread(target=get_message, args=()) thread_send.start() thread_get.start() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 server.py import socket class MyHTTPServer: def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.marks = [] def serve_forever(self): serve_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) serve_socket.bind((self.host, self.port)) serve_socket.listen(10) print('hi') while True: client_socket, address = serve_socket.accept() self.serve_client(client_socket) def serve_client(self, sock): data = sock.recv(4096).decode(\"utf-8\") request = self.parse_request(data) response = self.handle_request(request) sock.send(response.encode()) def parse_request(self, data): request_line = data.split('\\r\\n')[0] words = request_line.split() if len(words) == 3: try: par = data.split('\\r\\n')[-1] param = {} for p in par.split(\"&\"): param[p[:p.index('=')]] = p[p.index('=') + 1:] req = {\"method\": words[0], \"url\": words[1], \"version\": words[2], \"parametrs\": param} except: req = {\"method\": words[0], \"url\": words[1], \"version\": words[2], \"parametrs\": {}} else: raise Exception('Malformed request line') print(req) return req def parse_headers(self, data): lines = data.split('\\r\\n')[1:] headers = {} for line in lines: parts = line.split(': ') headers[parts[0]] = parts[1] return headers def handle_request(self, request): response = f\"{request['version']} 200 OK\\n\\n\" if request['method'] == 'GET' and request['url'] == \"/\": with open('index.html') as page: response += page.read() elif request['method'] == 'GET' and request['url'] == \"/view\": body = '<!DOCTYPE html>' \\ '<html lang=\"ru\">' \\ '<head>' \\ '<meta charset=\"UTF-8\">' \\ '<title>\u041e\u0446\u0435\u043d\u043a\u0438</title>' \\ '</head>' \\ '<body>' \\ '<table align=\"center\" width=\"20%\" border=\"1\">' for subject, mark in self.marks: body +=f\"<tr><td>{subject}</td><td>{mark}</td></tr>\" body += '</table></body></html>' response += body elif request['method'] == 'POST': self.marks.append((request['parametrs']['subject'], request['parametrs']['mark'])) return response if __name__ == '__main__': host = 'localhost' port = 9523 name = 'torry-site.ru' serv = MyHTTPServer(host, port, name) try: serv.serve_forever() except KeyboardInterrupt: pass index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Marks</title> <script> function submitForm() { let http = new XMLHttpRequest(); http.open(\"POST\", \"http://127.0.0.1:9523/view\", true); http.setRequestHeader(\"Content\",\"text/html\"); let params = \"?mark=\" + document.getElementById(\"mark\").value + \"&subject=\" + document.getElementById(\"subject\").value; http.send(params); } </script> </head> <body> <form action=\"\" method=\"post\" align=\"center\" onsubmit=\"submitForm();\"> <br> <div> <label for=\"subject\">Subject:</label> <input type=\"text\" id=\"subject\" name=\"subject\"/> </div> <br> <div> <label for=\"mark\">Mark:</label> <input type=\"number\" id=\"mark\" name=\"mark\"/> </div> <br> <div> <input type=\"submit\"> </div> </form> </body> </html>","title":"Lab 1"},{"location":"lab_1/#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438"},{"location":"lab_1/#1_1","text":"server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) conn, addr = sock.accept() print('connected with:', addr) while True: data = conn.recv(1024) print(data.decode(\"utf-8\")) if not data: break conn.send(b'Hello, client.\\n') conn.close() client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) sock.send(b'Hello, server.\\n') data = sock.recv(1024) print(data.decode(\"utf-8\")) sock.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab_1/#2","text":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket from math import sqrt sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) conn, addr = sock.accept() print('connected:', addr) while True: data = conn.recv(1024).decode() try: data = data.split(\" \") katet_1 = float(data[0]) katet_2 = float(data[1]) gipotenyza = float(data[2]) except: conn.sendall('\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445!\\n'.encode()) else: if katet_2 == 0: katet_2 = sqrt(gipotenyza**2 - katet_1**2) conn.sendall(f'\u0412\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0442\u0435\u0442 \u0438\u043c\u0435\u0435\u0442 \u0434\u043b\u0438\u043d\u0443: {katet_2}\\n'.encode()) elif gipotenyza == 0: gipotenyza = sqrt(katet_1**2 + katet_2**2) conn.sendall(f'\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430 \u0438\u043c\u0435\u0435\u0442 \u0434\u043b\u0438\u043d\u0443: {gipotenyza}\\n'.encode()) else: if gipotenyza == sqrt(katet_1**2 + katet_2**2): conn.sendall('\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f. \u0412\u0441\u0451 \u0432\u0435\u0440\u043d\u043e, \u044d\u0442\u043e - \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u044b\u0439 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a.'.encode()) else: conn.sendall('\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f. \u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u043d\u0435 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u044b\u0439!'.encode()) if not data: break conn.send(b'Hello, client.\\n') conn.close() client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) data = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043a\u0430\u0442\u0435\u0442\u043e\u0432: \").replace(\" \", \"\") data += \" \" + input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 - \u0432\u0432\u0435\u0434\u0438\u0442\u0435 0: \").replace(\" \", \"\") data += \" \" + input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 - \u0432\u0432\u0435\u0434\u0438\u0442\u0435 0: \").replace(\" \", \"\") sock.send(data.encode()) result = sock.recv(1024) print(result.decode(\"utf-8\")) sock.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab_1/#3","text":"server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) conn, addr = sock.accept() print('connected with:', addr) with open('index.html') as f: page = f.read() response = 'HTTP/1.0 200 OK\\n\\n' + \"Content-Type: text/html\\n\\n\" + page conn.sendall(response.encode(\"utf-8\")) conn.close() client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) data = sock.recv(1024) print(data.decode(\"utf-8\")) sock.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>My page</title> </head> <body> <h1>Welcome, friend!</h1> </body> </html>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab_1/#4","text":"server.py import socket import threading def send_message(sock, msg): for client in clients: if sock != client: client.send(msg) def handle_client(socket, address, username): if not clients.setdefault(socket): clients[socket] = username print(f'{username}[{address[0]}:{address[1]}] \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443') send_message(socket, f'\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {username} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443'.encode()) while True: try: message = socket.recv(1024) if message.decode('utf-8').find('EXIT FROM CHAT') != -1: print(f'{username}[{address[0]}:{address[1]}] \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442') send_message(socket, f'\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442'.encode()) clients.pop(socket) break send_message(socket, message) except ConnectionResetError: print(f'{username}[{address[0]}:{address[1]}] \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u043e\u043f\u0430\u043b...') send_message(socket, f'\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {username} \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u043e\u043f\u0430\u043b...'.encode()) break socket.close() sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) clients = {} while True: try: conn, addr = sock.accept() data = conn.recv(1024).decode('utf-8') t1 = threading.Thread(target=handle_client, args=(conn, addr, data)) t1.start() except KeyboardInterrupt: print('Server stopped') break conn.close() client.py import threading import socket import time def get_message(): while True: try: data = sock.recv(1024).decode('utf-8') print(data) except socket.error: time.sleep(0.5) continue def write_message(): while True: message = input() sock.sendto(('[' + name + '] ' + message).encode('utf-8'), server) if message == 'EXIT FROM CHAT': break sock.close() sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) name = input('\u0412\u0432\u0435\u0434\u0438 \u0441\u0432\u043e\u0439 \u043d\u0438\u043a\u043d\u044d\u0439\u043c: ') print(f'\u041f\u0440\u0438\u0432\u0435\u0442, {name}! \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u0448\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.') print('\u0415\u0441\u043b\u0438 \u0437\u0430\u0445\u043e\u0447\u0435\u0448\u044c \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0447\u0430\u0442\u0430 \u043d\u0430\u043f\u0438\u0448\u0438 EXIT FROM CHAT\\n') server = '', 9523 sock.sendto((name).encode('utf-8'), server) thread_send = threading.Thread(target=write_message, args=()) thread_get = threading.Thread(target=get_message, args=()) thread_send.start() thread_get.start()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab_1/#5","text":"server.py import socket class MyHTTPServer: def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.marks = [] def serve_forever(self): serve_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) serve_socket.bind((self.host, self.port)) serve_socket.listen(10) print('hi') while True: client_socket, address = serve_socket.accept() self.serve_client(client_socket) def serve_client(self, sock): data = sock.recv(4096).decode(\"utf-8\") request = self.parse_request(data) response = self.handle_request(request) sock.send(response.encode()) def parse_request(self, data): request_line = data.split('\\r\\n')[0] words = request_line.split() if len(words) == 3: try: par = data.split('\\r\\n')[-1] param = {} for p in par.split(\"&\"): param[p[:p.index('=')]] = p[p.index('=') + 1:] req = {\"method\": words[0], \"url\": words[1], \"version\": words[2], \"parametrs\": param} except: req = {\"method\": words[0], \"url\": words[1], \"version\": words[2], \"parametrs\": {}} else: raise Exception('Malformed request line') print(req) return req def parse_headers(self, data): lines = data.split('\\r\\n')[1:] headers = {} for line in lines: parts = line.split(': ') headers[parts[0]] = parts[1] return headers def handle_request(self, request): response = f\"{request['version']} 200 OK\\n\\n\" if request['method'] == 'GET' and request['url'] == \"/\": with open('index.html') as page: response += page.read() elif request['method'] == 'GET' and request['url'] == \"/view\": body = '<!DOCTYPE html>' \\ '<html lang=\"ru\">' \\ '<head>' \\ '<meta charset=\"UTF-8\">' \\ '<title>\u041e\u0446\u0435\u043d\u043a\u0438</title>' \\ '</head>' \\ '<body>' \\ '<table align=\"center\" width=\"20%\" border=\"1\">' for subject, mark in self.marks: body +=f\"<tr><td>{subject}</td><td>{mark}</td></tr>\" body += '</table></body></html>' response += body elif request['method'] == 'POST': self.marks.append((request['parametrs']['subject'], request['parametrs']['mark'])) return response if __name__ == '__main__': host = 'localhost' port = 9523 name = 'torry-site.ru' serv = MyHTTPServer(host, port, name) try: serv.serve_forever() except KeyboardInterrupt: pass index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Marks</title> <script> function submitForm() { let http = new XMLHttpRequest(); http.open(\"POST\", \"http://127.0.0.1:9523/view\", true); http.setRequestHeader(\"Content\",\"text/html\"); let params = \"?mark=\" + document.getElementById(\"mark\").value + \"&subject=\" + document.getElementById(\"subject\").value; http.send(params); } </script> </head> <body> <form action=\"\" method=\"post\" align=\"center\" onsubmit=\"submitForm();\"> <br> <div> <label for=\"subject\">Subject:</label> <input type=\"text\" id=\"subject\" name=\"subject\"/> </div> <br> <div> <label for=\"mark\">Mark:</label> <input type=\"number\" id=\"mark\" name=\"mark\"/> </div> <br> <div> <input type=\"submit\"> </div> </form> </body> </html>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"}]}